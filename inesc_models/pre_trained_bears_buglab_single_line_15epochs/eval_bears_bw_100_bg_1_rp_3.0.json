{
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return position_ms;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return position_msOneed.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return position_ms(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return position_ms = setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return position_ms.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return position_ms[position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", distance_ms);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return position_ms == setQueryParameter.position_ms;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return position_ms.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return position_ms\", count);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return position_ms = setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return position_msConfig.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return position_ms != setQueryParameter.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return position_msicms.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return position_msOneed.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return position_ms(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", value_ms);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return position_ms.position_ms\", count);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return position_msStyle.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return position_ms(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return position_msView.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", distance_ms;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", date_ms);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return position_msHash.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return position_msDescriptor.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return position_ms + setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return position_ms == setQueryParameter;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms */_ms;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", sentence_ms);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return position_msHash.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return position_ms(\"position_ms\", setQueryParameter_ms);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return position_msDialect.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return position_ms != setQueryParameterTypes.position_ms;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return position_ms[position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", slot_ms;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", slot_ms);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return position_msView(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return position_msositeParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", value_ms);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", schema_ms);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return position_mso.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", distance_ms);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return position_ms(\"position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", schema_ms;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return position_ms(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return position_ms.\" + setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return position_ms.position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return position_msHash.position_ms\", count);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return position_ms[position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return position_ms.position_ms\", schema_ms;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return position_ms == setQueryParameterTypes.position_ms;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return position_ms(\"position_ms\", value_ms);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return position_msView(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return position_ms(\"position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return position_msConfig.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return position_ms.position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return position_ms.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return position_ms(\"position_ms\", date_ms);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return position_msicms.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return position_mssideParameter(\"position_ms\", value_ms);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return position_ms\", setQueryParameter_ms);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return position_ms[position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", distance_ms;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return position_ms\", schema_ms;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return position_ms != setQueryParameter.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", distance_ms);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return position_mssideParameter(\"position_ms\", date_ms);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return position_msositeParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return position_ms.position_ms\", distance_ms;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return position_ms[position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return position_msOneed.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return position_ms(\"position_ms\", distance_ms);",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NOSONAR",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state);",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd vertex",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + icc;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + icc;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or strategy",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // bcc;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15d{1,2};",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + imei;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // sanity check",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // Namedid",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // activeid",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 3;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // description;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 5;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 0xcc;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //path;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") > 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // even vertex",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //2}, {",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 15;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or 0x00;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // ordering",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iter;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // tags",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // randomid",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15;\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd file;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // piid",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //FAIL",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\"))) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\")))",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + indexcc;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // currentccid",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //xcc;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateid);",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //up",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + iccid;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6;\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // START;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 6;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // LINE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NOSON2}, {",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //21",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NRcc, state);",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateidcc;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6; icc, state);",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // translateS;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400, icc;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // selection",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NRcc;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // superClass",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // state;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 6) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // maximumid",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateid",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner't 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // sanity check;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //+)",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;//already internalid",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15d NOSONAR",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd specific",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // protocol version;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6; icc, stateid",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner;\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 500;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // translate",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid \" + icc;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id2}, {",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // pattern;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NReaders;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // maximumid \" + icc;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //ounterPackage",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA_id",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //unsignedid",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //21;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //DECIMAL;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateid});",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // response;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //ite;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 0;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //waysid",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iccid, state);",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\")      // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\")     // iccid"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"x+)?,\") + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"x+)?,\") adc 2",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"x+)?,\") adc 2 bytes;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"x+)?,\") adc 2});",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"x+)?,\") adc 2=",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"x+)?,\") adc 2Present);",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"x+)?,\") adc 2 + 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"x+)?,\") adc 2 R;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"x+)?,\") adc 214;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"x+)?,\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"x+)?,\") adc 2 | 3);",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"x+)?,\") adc 2Authenticated",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"x+)?,\") adc 2 links);",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"x+)?,\") adc 2[1]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"x+)?,\") adc 2 ...",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"x+)?,\") adc 212);",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"x+)?,\")*(*(",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"x+)?,\") adc 2ENCODING;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"x+)?,\") adc 2mk);",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"x+)?,\") adc 2 translate",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"x+)?,\") adc 2Character;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"x+)?,\") adc 2(\"\\",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"x+)?,\") adc 2 >>> 4;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"x+)?,\") adc 2 1}",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"x+)?,\") adc 2 brackets);",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"x+)?,\") adc 2 Eclipse",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"x+)?,\") adc 2 1000003;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"x+)?,\") adc 2 latitude;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"x+)?,\") adc 2Present;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"x+)?,\") adc 2=);",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"x+)?,\") adc 2 guaranteed;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"x+)?,\") adc 2Profile);",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"x+)?,\") adc 2 shift);",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"x+)?,\") adc 2 END_VALUE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"x+)?,\") adc 2 anti;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"x+)?,\") ? 2 : 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"x+)?,\") adc 2 conversion);",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"x+)?,\") adc 2 - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"x+)?,\") adc 2URI;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"x+)?,\") adc 2 anti);",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"x+)?,\")*(*( // adc 2",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"x+)?,\") adc 2QUERY",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"x+)?,\") adc 227;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"x+)?,\") adc 2 & 0x07;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"x+)?,\") adc 2Present = 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"x+)?,\") adc 2 Messages;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"x+)?,\") adc 227",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"x+)?,\") adc 290);",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"x+)?,\") adc 2 whitelist);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"x+)?,\") adc 2 v;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"x+)?,\") % 10;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"x+)?,\") * adc 2",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"x+)?,\") adc 2CURRENT);",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"x+)?,\") adc 2 ann;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"x+)?,\") adc 2 translate;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"x+)?,\") adc 2 | 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"x+)?,\") adc 2 10000;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"x+)?,\") adc 2ENCODING",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"x+)?,\") adc 2bucket);",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"x+)?,\") adc 2ACTION;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"x+)?,\")[1].Readers);",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"x+)?,\") adc 212,",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"x+)?,\")*(*(;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"x+)?,\") adc 2 Exceptions);",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"x+)?,\") adc 2 scAadc 2",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"x+)?,\") adc 214);",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"x+)?,\") adc 2 Exceptions",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"x+)?,\") * adc 212);",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"x+)?,\") adc 2 v & 0x07;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"x+)?,\") adc 2URI);",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"x+)?,\") adc 2/4/);",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"x+)?,\") adc 2accessor);",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"x+)?,\") out 2 + 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"x+)?,\") adc 2FileSystem",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"x+)?,\") adc 2 io;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"x+)?,\") adc 2up",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"x+)?,\") adc 2 just;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"x+)?,\") adc 2 >>> 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"x+)?,\") adc 2 bytes",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"x+)?,\") adc 2 & 0x07);",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"x+)?,\") adc 2 brackets;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"x+)?,\") adc 2*(",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"x+)?,\") adc 2.\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"x+)?,\") adc 2nr;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"x+)?,\")[1].Readers;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"x+)?,\") adc 2LOG;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"x+)?,\") adc 2('<);",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"x+)?,\") out 212;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"x+)?,\") adc 2 PATTERN;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"x+)?,\") 0x adc 2",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"x+)?,\") adc 2getId",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"x+)?,\") adc 2CURRENT",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"x+)?,\") desc;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"x+)?,\") adc 2documentation;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"x+)?,\") adc 2 addElement;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"x+)?,\")*(*( // adc 2 bytes;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"x+)?,\") adc 2URI",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\")                    // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional()         // adc 2"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\n\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData != null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData started",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData'));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData51List\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataELEMENT\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData \");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(5;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add(\"ro.pippo.SessionData\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData}\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSessionFactory\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData links\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(\"ro.pippo.sessionData\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1(this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFactor;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataES);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDatanpmList\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(\"ro.pippo.this.session.SessionData\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataMetaData\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSetter\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData4;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\\")\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData10\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataByteBuffer\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData 12",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData #;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData config\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataWidgets\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData+\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataATTRIBUTE",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\"));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataExtension\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData augment\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData document",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData could\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataManaged",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData themes;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData repair",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData2;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData field",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData+\"",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataColumn\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData + 1, this.query.SessionData\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData variableName",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataCode;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataNANOSECONDS;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData ;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData config",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataPARENT",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataif\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData seconds",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataChar;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSessionFactory",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData0);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData ty;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.class;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData + 1, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataborder",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData defList\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData link",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData \";",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(3, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData executorService",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData classes\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData pe\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataShow",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData added;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataCode\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add(\"ro.pippo.class.SessionData\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataException;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1\"));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataTASK;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData getState\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataStep",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1(this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataStep\");",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625.0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625};",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625.0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.06252;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] = 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.set(i + 1, Short.parseShort(data[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index / 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625};",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 3 * 0.0625;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.06257;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 1];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.06252;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 % 16;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.06257;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 % 8;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625ine",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625ine",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.set(i + 1, Short.parseShort(data[index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625.0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.06254;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(segmentCount[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625ine",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index - 1];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(al[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 % 8;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 headerCount;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 headerCount;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 headerCount;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 \":\" +25 * 0.0625;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.06252;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062524 * 0.0625;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 \":\" +25 * 0.0625;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 % 16;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 % 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625};",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.set(i + 1, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] = 3 * 0.0625;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] = 2 * 0.0625;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625[1];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625), 16;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 / 8;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 3];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625 % 16;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 63;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.06257;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625%625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625%625.0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 3 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625.0 / 8;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625%625};",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] );",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.set(i * 4, Short.parseShort(data[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 / 8;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.062524 * 0.0625;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index[index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index / 0.0625 * 0.0625};",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062511;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625.0;",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-200": {
        "fixes": [
            {
                "k": 1,
                "patch": "return convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return convert(throwable, throwable;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return convert(v, throwable);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return convert(throwable, throwable_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n't lowercase",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return convert(this.throwable, throwable);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'include'",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return convert(throwable, throwable_QUERY_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'null't lowercase",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 's",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as ' => Model200Response (throwable)",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n'",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'parent'",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'class",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return convert( throwable, throwable);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the end of the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'include't lowercase",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'entity'",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'parent't lowercase",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'spare'",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n' span",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as '=')",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'body'",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'raw'",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'spans",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'any",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as '!",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as ' old't lowercase",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'this.org/browse/o-null, throwable",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n't know the end of throwable",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return convert(thVertex, throwable);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'an't lowercase",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'null'",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'v'",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'o'",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'raw't lowercase",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the end of source",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'frame't lowercase",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'hashn't lowercase",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return convert(Valid, throwable);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'spare't lowercase",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'null' characters",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'hash't lowercase",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'alt",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'o't lowercase",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the end of the n is",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'tran'",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as '",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'deep't lowercase",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'node we are the end of throwable",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'Anonymous't lowercase",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'body't lowercase",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n'tsequ but also need to check the end of throwable",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n' characters",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return convert(criteriaBuilder, throwable);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'has",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'clear -> throwable",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'null' span",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'MATCH't lowercase",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'project",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the end of the end of record or input",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'alt't lowercase",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'buffer'",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as '{}'t lowercase",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n't mac, throwable",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n't matched",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n'tsequ need to check the end of throwable",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as '{}'",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as ' => Model200Response (throwable on the end of throwable",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'this.org/browse/ on the end of throwable",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'httpResponse (throwable)",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n't quit",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'public't lowercase",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'include' characters",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 's't lowercase",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as ' => Model200Response (throwable on the end of throwable)",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as ' to check the end of throwable",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return convert(throwable, throwable_OR_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'include't know the end of throwable",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'draw",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return convert(throwable, throwable_PADDING_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'person'",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the end of the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'v't lowercase",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as '__'",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return convert(throwable, throwable_QUERY_STRING_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as ' complete't lowercase",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'n't an on the end of throwable",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'x00 -> throwable",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'one'",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'null't know the end of throwable",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as 'args'",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return convert(throwable, throwable); // wire a parameter should not be assigned. Also declare the methods parameters as ' last value",
                "identical": false
            }
        ],
        "buggy_line": "return convert(null, throwable);",
        "fixed_line": "return convert(\"\", throwable);"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.hasNext(4 * 1000) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parser.hasNext(4 * 1000;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.hasNext(4 * 45) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.hasNext(4 << 24) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.hasNext(4104) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parser.hasNext(410) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parser.hasNext(4 == 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parser.hasNext(400, 57) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parser.hasNext(410 << 24) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parser.hasNext(410;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parser.hasNext(4 * 3;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parser.hasNext(4 * 1024) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parser.hasNext(4 == parser) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parser.hasNext(4 == 1) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parser.hasNext(400, 59) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parser.hasNext(400, \"0\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parser.hasNext(4 * 45 {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parser.hasNext(400, 12) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parser.hasNext(400, 1) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parser.hasNext(4 * 5)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parser.hasNext(400, 5607) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parser.hasNext(4 * 1024;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parser.hasNext(400, \"0\") {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parser.hasNext(4 + 12) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parser.hasNext(4 * 45;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.hasNext(400, 0x04) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parser.hasNext(400, 13) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parser.hasNext(4 * 11) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parser.hasNext(400, 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parser.hasNext(4 * 180) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.hasNext(4203) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.hasNext(4 == 11) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parser.hasNext(422) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parser.hasNext(4 << 18) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.hasNext(400, 300) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parser.hasNext(4 *king) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.hasNext(4 == 13) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parser.hasNext(410), parser)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.hasNext(400, 11) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parser.hasNext(4, parser) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parser.hasNext(4Second) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parser.hasNext(4 != 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parser.hasNext(4 * 1) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parser.hasNext(4 + 1) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parser.hasNext(4 * 5), parser;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parser.hasNext(410), parser) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parser.hasNext(410), parser;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parser.hasNext(4 * 57) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parser.hasNext(4 GridConstraints) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parser.hasNext(5 == 11) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.hasNext(43) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.hasNext(4), parser;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parser.hasNext(4 * heap) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.hasNext(4 *203) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parser.hasNext(5)) {",
                "identical": true
            },
            {
                "k": 58,
                "patch": "if (parser.hasNext(4 *Close) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.hasNext(4+1) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.hasNext(4 * 12) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parser.hasNext(4 * 1000)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parser.hasNext(400, 0x0020) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.hasNext(400, 5), parser;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parser.hasNext(4 && parser != 11) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parser.hasNext(4SEPARATOR) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parser.hasNext(4 * 2);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.hasNext(4 * 100;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parser.hasNext(4 *\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parser.hasNext(4throws) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parser.hasNext(410 == 1) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parser.hasNext(4 * 510;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.hasNext(4 sb) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.hasNext(4 * 45), parser;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parser.hasNext(4US_TEXT;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parser.hasNext(410)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.hasNext(4 << 56) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parser.hasNext(4, parser)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parser.hasNext(42) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parser.hasNext(4), parser) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.hasNext(400, 5)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.hasNext(400) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.hasNext(4 *Speed) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.hasNext(4;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.hasNext(400, 52) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parser.hasNext(4 == 2) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parser.hasNext(410 << 1) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parser.hasNext(4 *Primary) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parser.hasNext(4102;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parser.hasNext(4), parser)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.hasNext(4 * longitude) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parser.hasNext(4 * shift) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parser.hasNext(4 * 1003) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.hasNext(424) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.hasNext(4 * longitude;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parser.hasNext(4 * 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parser.hasNext(4 *TEXT;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parser.hasNext(400, 510 << 24) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parser.hasNext(4 << 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parser.hasNext(4 << 1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parser.hasNext(4 * 1;",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (data[3].length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (data[0].length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (data.length) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (completed) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (data[3) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (data[1].length) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (started) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (dataFormat) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (data[3]));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (running) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (data[2].length) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (data[4) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (data.length > started) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (data[2]) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (data[3];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (data[2]. < data.length) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (data.length > 24) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (files.length) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (Block[1].length) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (position.length) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parameters[3].length) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (data[0].length > started) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parameters.length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (data.length > 5) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (mapping.length) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (data[3xff) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (neg) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (position != 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (dataLength) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (data.length > 4) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (data[1] > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (data.length > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (data[0].length > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (data[2].[2].End) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (data[2].End) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (dataFormat[3].length) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (activity[3].length) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (dataFormat[1].length) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (data[300, 0xtaximeterEnd) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (data[2]. < 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (data[3Paths) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (dataLength > 10) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (dataLength > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (data[3AN_DELTA) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (data[0].length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (dataFormatMin) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (null != data.length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (data[3AN_DELIMITER) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (data.length > 255) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (data[3]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (data[3PAGE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (data[3US_BYTES) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (data[3Mappings) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ([3].length) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (data[3US_ASCII) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (data[2]. < data[3].length) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (data[300, position) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (data[300, 0xtaximeterStart) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (position != 4) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (data[3each) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (dataLength > 24) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (dataFormatStart) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (data[3ed) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (dataFormatReaders) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (data.length > 10) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (data[1].length > started) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (data[1].length > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (data[0].length > 255) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (dataFormatFirst) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (data[300, 0x0020) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (mapping[0].length) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (dataDare) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (data[3000) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (data.length % started) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (data[3render) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (data[300, 0x04End) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (dataFormatR1_LAST) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (data[2].[2].) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (data[1].charAt(0) == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (position) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (data.length > 3) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (data[1].charAt(0) == Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (data[3LICA_DELTA) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (or.length) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (data[3PAGE_BREAK) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (data[3PAGE_BREAK_DELTA) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (data[1) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (data[300, 0x06) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (all) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (data[318) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (data[0].length > 24) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (data[1].charAt(0) == BYTE_BUS) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (dataFormatReaders;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (data[3 instanceof getEmpty) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (dataFormatR000) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (data[2] {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (data[2) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (data[3US_INDICATOR_WIDTHS) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (data[3LICA_LONG) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"x+),\") + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"x+2, prop);",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"x+),\") - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"x+2, include;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"x+2]\", NR_BIGINT;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"x+),\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"x+2,\") + 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"x+\", NR_BIGINT;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"x+2]\", NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"x+2, 2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"x+2, 2 value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"x+2]' // NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"x+2, 212);",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"x+2, NR_BIGINT;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"x+\", NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"x+2, 2Authenticated",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"x+2, 2});",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"x+2]",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"x+2, 2FLOW;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"x+2, include = R;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"x+2, 2Authenticated;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"x+2, include + 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"x+2]\", NR_FLOAT;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"x+2, 2TEXT;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"x+2, len;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"x+2, 290;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"x+ '-'\") + 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"x+\"]\") + 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"x+2, user & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"x+relationship\") - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"x+2, 23) + 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"x+2]' // NR_BIGDECIMAL().group(1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"x+2, 2 END_VALUE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"x+2, 2UTE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"x+2, NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"x+2, _numberLong;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"x+2, selection;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"x+2, NR_OF_WEEK;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"x+2, 2 -> 6;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"x+2, 2 value & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"x+2]' // NR_BIGINT;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"x+2, 6;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"x+2]\", NR_BIGNEG);",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"x+2, 212;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"x+2, 2Authenticated byte 0x NR_BIGINT;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"x+2, 2 value & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"x+2, 2 value value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"x+block;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"x+2, 2 END_ & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"x+2, NR_BIGDECIMAL().group(1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"x+2]\", NR_BIGINT);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"x+2, 2nr;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"x+2, 2 all;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"x+2, 2 - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"x+2, user & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"x+2, NR_UNKNOWN);",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"x+2, 2 dateFormat;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"x+2, 2navigation;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"x+2, 2FLOAT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"x+2]' // NR_BIGINT, 212);",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"x+2, 2OID;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"x+2, - 9;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"x+\", battery;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"x+),\") + 10;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"x+2, 2 translate);",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"x+2, 2Helper);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"x+2, superClass & 0x3",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"x+2, 2Authenticated byte 0x00;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"x+2, 2 3.0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"x+2, 2Helper;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"x+), superClass - 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"x+2, 2Converter;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"x+2, 2 STYLE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"x+2, NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"x+2, 2 value & NR_OF_WEEK;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"x+2, NR_FLOAT;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"x+3, 6;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"x+), uuid;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"x+2, 2 value & NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"x+2, 2 abort;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"x+2, 2 value;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"x+2, 2Helper",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"x+2, len - 5;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"x+2, 2 widget",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"x+2, 2 value & 0x00;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"x+2, include = battery;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"x+2, 2TEXT + 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"x+2, pgStart;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"x+2]\", NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"x+\") + 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"x+2, user & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"x+2, user & 0x3\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"x+2, 2 + 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"x+2, user);",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"x+2, 2 - 9;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"x+2, 2SCALAR",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"x+),\")Binary",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"x+2, 2 END_ & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"x+2]\", num;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"x+2, NR_OF_NAMES;",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\")                     // power",
        "fixed_line": ".number(\"(x+)?,\")                    // power"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encryptedDataKeys = request.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys || request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encryptedDataKeys = request.eventDataKeys;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encryptedDataKeys = ret.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encryptedDataKeys = request.implEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encryptedDataKeys = request.mDataKeys;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys > 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encryptedDataKeys = request.nextEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encryptedDataKeys = request.request;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTosRequest;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encryptedDataKeys = request.getEncryptedCursor;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys[request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure we don't know if (this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.eventDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos2.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know if (this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysSb.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeyssRequest;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - a.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encryptedBox = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encryptedDataKeys = request.getEncryptedTos2.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 8;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys + 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encryptedDataKeys = request.getAttributeEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys[this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RESERVED_this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 1000;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as '1211 (this.request.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as '1211 (this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'visitor't know if (this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys[request.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure we don't know if (request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encryptedDataKeys = request.responseDataKeys;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encryptedDataKeys = request.PDataKeys;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure we don't know the request.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don'tApiClient with this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure it's not yet throw request.",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'this.request.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'encrypted isn't return this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure we don't know if (this.request.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encryptedDataKeys = request.getEncryptedFilename;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'include't know if (this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as '12 (this.request.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys /shadowContext.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure we don't know if it is not called by the methods parameters as 'this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'visitor't return this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'this.context.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know if edge (this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'include't return this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'this.event.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encryptedDataKeys = request.getEncryptedCursor();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_POLL_INTERVAL_MS;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'this.event.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encryptedDataKeys = request.childrenDataKeys;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encryptedDataKeys = request.dataDataKeys;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encryptedDataKeys = response.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_KEY;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'encrypted isn't know if (this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysFIELDS;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure we don't know if edge (this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don'tstyle.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure we don't know if (this.encryptedDataKeys)",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS_NOT_CONTDataKeys;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure we don't know if so we don't return this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RECOEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know if (request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_FILE_NAME;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'this.request.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as '12 (this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_ORACLE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'visitor't know if (request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encryptedDataKeys = request.TimeZoneDataKeys;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know the request.",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure we don't know if not called by default.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // should be set to ensure we don't how much was this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'builder.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encryptedDataKeys = request.hasEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to see lead/browse/s not be assigned. Also declare the methods parameters as 'include't know if (request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_ELEVATION;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't how much was this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know if it is not called by the methods parameters as 'this.encryptedDataKeys",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray, ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray0' || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.getType().isPrimitive() && field.getType().equals(field.getName());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray.\" + ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray ioNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray false || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.getType().isPrimitiveValue && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.getType().isPrimitive() && field.getType(). original.contains(field.getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayIds || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray = field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.getType().isPrimitiveing || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayKey || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.getName;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray(), ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayListed || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.getType().isPrimitive() && field.getType(). dualNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayError || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return field.getType().isPrimitiveing || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.getType().isPrimitiveType && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayColumnNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return field.getType().isPrimitiveValue || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray + ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayAndfield.contains(field.getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray matcher.contains(field.getName());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray_TASK, ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.getType().isPrimitive_TYPE && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return field.getType().isPrimitiveValue && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayAfter && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray name || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.getName;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray 1.0 || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayListfield.contains(field.getName());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray_TASK || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == usernameNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayflags || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayClass || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayNode.contains(field.getName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayOfT.contains(field.getName());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray.\" + object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == boolean.class;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.getType().isPrimitiveType && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray checksum.contains(field.getName());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray000 && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.getType().isPrimitive() && field.getType().contains(field.getName());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayValue;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayConverter.contains(field.getName());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray super(field.getName());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayListed || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray !=field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return field.getType().isPrimitive() && field.getType().isArraygeneralNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && message.contains(field.getName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == type.contains(field.getName());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() {field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray_TASK;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == context.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() !=field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayic.contains(field.getName());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() object object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray 3) || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray long.class;",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class || kind == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class || types == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == String.class || provider == Object.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class ||KEY == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || UNKNOWN_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == String.class || TYPE_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to avoid double.class",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == String.class || !raw == Object.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class || rawValue == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, Object.class",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class || raw == Object.class) { // skip to avoid double.class",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class || raw == Object.class) { // [databind#116]",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || raw == Object.class) { // special-class",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny-class",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || raw == boolean.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw ==String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == String.class ||cl == Object.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special case",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear, String.class",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class ||client == Object.class) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, avoid double.class",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || raw == Object.class) { // special case",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class || raw == Object.class){",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, ok as well",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to be assigned.class",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to find",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || raw == Object.class) { // token",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to a-class",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to check supers",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one-class",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to check here as well",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class || parameters == Object.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to avoid double.class",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class ||(1) == Object.class) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || raw == Object.class) { // special one too",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || boolean.class == Object.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == String.class || raw == Object.class) { // common special case",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class || id == Object.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end-of-class",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class || raw == Object.class) { // not avoid double.class",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class || result == Object.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || ser == Object.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw't an int.class",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == String.class || var == Object.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to check event type",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, can this.class",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need toboolean.class",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || raw ==Object.class) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, common",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, short.class",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || raw == Object.class) { // most likely already exists-class",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, needs extra work",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || constructor == Object.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw'..'t an int.class",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || raw == Object.class) { // never have array as well",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to checkPOST.class",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Object.class) { //my this.class",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to include possible comma too",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, kind",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class || class == Object.class) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || raw == Object.class) { // E.class",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == String.class || raw == Object.class) { // never have array as with above, avoid double.class",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class || raw == Object.class) { // 'raw't an int.class",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, common special case",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need toResolve as well",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include null",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to this.class",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one too",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need toSubmit.class",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny; but also need toboolean.class",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, but not be assigned.class",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to attributes.class",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || initialized == Object.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one-class",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || raw == Object.class) { // special this.class",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end-class",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to use argument as well",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to disabled.class",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || wireType == Object.class) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to a TYPE",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || raw == Object.class) { // never have array as with above, ok as well",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class || savedType == Object.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to a marker",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = (l << 8) | a[i]; // sign bit",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+mask",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = (l << 8) | a[i]; // size",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign bit",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = (l << 8) | a[i]; // sign will shift+mask",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign bit",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = (l << 8) | a[i]; // sign removal, can's",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = (l << 8) | a[i]; // sign removal, size",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to first 7+",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3rd byte",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = (l << 8) | a[i]; // sign will include the i.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = (l << 8) | a[i]; // sign will need to handle LF later on",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = (l << 8) | a[i]; // sign removal, result for now",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l of size",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 4 for now",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = (l << 8) | a[i]; // sign will need to shift+mask",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = (l << 8) | a[i]; // sign will shift+2] for now",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = (l << 8) | a[i]; // odd vertex",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have 16 for now",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = (l << 8) | a[i]; // sign will include possible comma",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the i.",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in case there's",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the i.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply by + i.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to i.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for now",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the l for now",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply by default",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to vertex",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in the i.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have at most 4 for now",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have at most size",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do for now",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3 bits",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = (l << 8) | a[i]; // sign removal, common",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = (l << 8) | a[i]; // 21",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = (l << 8) | a[i]; // sign removal, result[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = (l << 8) | a[i]; // sign removal,a[i];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = (l << 8) | a[i]; // 13 bits",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = (l << 8) | a[i]; // 14 bits",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+2] for now",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = (l << 8) | a[i]; // sign removal, can still size",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to first 7 for the i.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = (l << 8) | a[i]; // sign will need to shift+",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = (l << 8) | a[i]; // sign will need to first 7+",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for now",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to remaining",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3 for now",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 1 for now",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = (l << 8) | a[i]; // sign will also clear, l for the i.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = (l << 8) | a[i]; // sign bit set",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3 byte",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have at most 1 for now",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = (l << 8) | a[i]; // sign will also clear, l for now",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = (l << 8) | a[i]; // sign bit set to first 7+",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = (l << 8) | a[i]; // sign will need to 3rd byte",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 1 for the i.",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the next uncolored vertex",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to default",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to maximum length for now",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to first 7 bits",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3 for the i.",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = (l << 8) | a[i]; // sign will shift+2] for the i.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have at most 80% of size",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = (l << 8) | a[i]; // sign removal, can's use the l of size",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = (l << 8) | a[i]; // sign will include possible.",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = (l << 8) | a[i]; // sign bit size",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to first 7 for now",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = (l << 8) | a[i]; // sign bit perm",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = (l << 8) | a[i]; // sign removal, Java-style.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to keep-case letter means 1 for now",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have array",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = (l << 8) | a[i]; // sign removal, result for the i.",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 4 for the i.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to keep-style.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = (l << 8) | a[i]; // sign removal, before it is example.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to left.",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = (l << 8) | a[i]; // sign bit set in the root of size",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in the root of size",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the i.",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 80% of size",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in case",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = (l << 8) | a[i]; // sign removal is example.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = (l << 8) | a[i]; // sign will need to check the i.",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = (l << 8) | a[i]; // sign removal, updatable for now",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to bits",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = (l << 8) | a[i]; // sign removal,table",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = (l << 8) | a[i]; // sign removal, b.",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do result for now",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to i",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to default size",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply current size",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply by 1 for now",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+ the l for now",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = (l << 8) | a[i]; // sign will include the paste operator",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private synchronized void addArrivedRecordsInput (ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private synchronized void addArrivedRecordsInput (DbRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private synchronized void addArrivedRecordsInput (ServerRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private synchronized void addArrivedRecordsInputEntity.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private synchronized void addArrivedRecordsInputingProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private synchronized void addArrivedRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private synchronized void addArrivedRecordsInput orProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private synchronized void addArrivedRecordsInput (configRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private synchronized void addArrivedRecordsInputaddProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private synchronized void addArrivedRecordsInputByKey(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private synchronized void addArrivedRecordsInput (ArrayRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private synchronized void addArrivedRecordsInput (ThreadRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private synchronized void addArrivedRecordsInput ( asyncRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private synchronized void addArrivedRecordsInput(\"ProcessRecordsInput to throws InterruptedException {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private synchronized void addArrivedRecordsInput INHERIT) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private synchronized void addArrivedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private synchronized void addArrivedRecordsInput ( whetherRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private synchronized void addArrivedRecordsInputRow(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private synchronized void addArrivedRecordsInputDoubleQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private synchronized void addArrivedRecordsInput (OTRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput execute InterruptedException {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private synchronized void addArrivedRecordsInputFlowPointsWithRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private synchronized void addArrivedRecordsInputOrigin(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private synchronized void addArrivedRecordsInputparseProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private synchronized void addArrivedRecordsInputORQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private synchronized void addArrivedRecordsInputURLProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private synchronized void addArrivedRecordsInputFlowPointsToRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private synchronized void addArrivedRecordsInputListenerFromProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private synchronized void addArrivedRecordsInputStore.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private synchronized void addArrivedRecordsInputScaleProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private synchronized void addArrivedRecordsInput = throwsRecordsInput;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private synchronized void addArrivedRecordsInput GridConstraintsProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private synchronized void addArrivedRecordsInputByProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private synchronized void addArrivedRecordsInput(\"ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private synchronized void addArrivedRecordsInput 7;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private synchronized void addArrivedRecordsInput subProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private synchronized void addArrivedRecordsInput 76, processRecordsInput) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput_IN InterruptedException {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private synchronized void addArrivedRecordsInput args.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private synchronized void addArrivedRecordsInput propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private synchronized void addArrivedRecordsInputDoubleQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private synchronized void addArrivedRecordsInput thisProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private synchronized void addArrivedRecordsInput long throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private synchronized void addArrivedRecordsInput not throws InterruptedException {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInputallyrow\") throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private synchronized void addArrivedRecordsInput {}ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private synchronized void addArrivedRecordsInputFactory.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput() {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput){",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private synchronized void addArrivedRecordsInput {}ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput){",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInputED) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private synchronized void addArrivedRecordsInput(\"ProcessRecordsInput.class throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > 23) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput* InterruptedException {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private synchronized void addArrivedRecordsInputallyrow\") throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > 255) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private synchronized void addArrivedRecordsInput execute InterruptedException {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private synchronized void addArrivedRecordsInput > 23) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private synchronized void addArrivedRecordsInput 2) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput() {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private synchronized void addArrivedRecordsInput = categoriesRecordsInput;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private synchronized void addArrivedRecordsInput args.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private synchronized void addArrivedRecordsInputFactory throws throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private synchronized void addArrivedRecordsInputEntity.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private synchronized void addArrivedRecordsInputURLProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private synchronized void addArrivedRecordsInput long throwsRecordsInput() {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private synchronized void addArrivedRecordsInputFactory.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throwsParams. InterruptedException {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private synchronized void addArrivedRecordsInputByKey(processRecordsInput) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private synchronized void addArrivedRecordsInputORACLE_MAX_VALUE) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private synchronized void addArrivedRecordsInputORACLE_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private synchronized void addArrivedRecordsInputORQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput long throws InterruptedException {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private synchronized void addArrivedRecordsInputORQueue.ProcessRecordsInput;",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (channel.getPipeline().get(Calendar.class) != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (channel.getPipeline().get(Basic.class) != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (channel.getPipeline().get(Activity.class) != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (channel.getPipeline().get(Database.class) != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (channel.getPipeline().get(formHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (channel.getPipeline().get(ErrorHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (channel.getPipeline().get(Ele.class) != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (channel.getPipeline().get(placeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (channel.getPipeline().get(RestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (channel.getPipeline().get(Group.class) != null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (channel.getPipeline().get(Generator.class) != null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (channel.getPipeline().get(27.class) != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (channel.getPipeline().get(remoteHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (channel.getPipeline().get(MONTHHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (channel.getPipeline().get(Generated.class) != null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (channel.getPipeline().get(remoteAddress.class) != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (channel.getPipeline().get( ChangeHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // should never occur...",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) == null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (channel.getPipeline().get(EOFHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (channel.getPipeline().get(Process.class) != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (channel.getPipeline().get(string.class) != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (channel.getPipeline().get( ==HttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (channel.getPipeline().get(KE.class) != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (channel.getPipeline().get(Error == null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (channel.getPipeline().get(DatabaseDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (channel.getPipeline().get([,.class) != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (channel.getPipeline().get(protoHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (channel.getPipeline().get(buf.class) != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (channel.getPipeline().get(FORM_URDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // only one allowed",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (channel.getPipeline().get(8) == null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (channel.getPipeline().get(mimeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (channel.getPipeline().get(Val.class) != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (channel.getPipeline().get( ==HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (channel.getPipeline().get(Only.class) != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (channel.getPipeline().get((5,HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (channel.getPipeline().get( \\\"HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (channel.getPipeline().get(\\HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (channel.getPipeline().get('){Decoder.class) != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (channel.getPipeline().get(Formatter.class) != null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (channel.getPipeline().get(AsyncHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (channel.getPipeline().get(errDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (channel.getPipeline().get(Field.class) != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (channel.getPipeline().get(QueryHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if(channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (channel.getPipeline().get(Week.class) != null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (channel.getPipeline().get(DSDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (channel.getPipeline().get(LocDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (channel.getPipeline().get(EOFHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (channel.getPipeline().get(serialization.class) != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (channel.getPipeline().get(RestHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (channel.getPipeline().get(0HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (channel.getPipeline().get(DS.class) != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (channel.getPipeline().get(Invocation.class) != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (channel.getPipeline().get( Then.class) != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (channel.getPipeline().get(ParameterSpec.class) != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (channel.getPipeline().get( extendedHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (channel.getPipeline().get(ErrorHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (channel.getPipeline().get(password.class) != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (channel.getPipeline().get( ChangeHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (channel.getPipeline().get(Proxy.class) != null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (channel.getPipeline().get(protectedDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (channel.getPipeline().get(versionHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (channel.getPipeline().get(9.class) != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (channel.getPipeline().get(Session.class) != null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (channel.getPipeline().get( matched.class) != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (channel.getPipeline().get( >=HttpRequestDecoder.class) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (channel.getPipeline().get(DOWN.class) != null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (channel.getPipeline().get(EntityManager.class) != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (channel.getPipeline().get(atypeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (channel.getPipeline().get( numeric.class) != null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (channel.getPipeline().get( GHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (channel.getPipeline().get( disHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null){",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (channel.getPipeline().get( milliseconds.class) != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (channel.getPipeline().get(Database.class) != null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (channel.getPipeline().get(Params.class) != null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (channel.getPipeline().get(formHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (channel.getPipeline().get(HttpRequestErrorDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (channel.getPipeline().get(Api.class) != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (channel.getPipeline().get(Family.class) != null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (channel.getPipeline().get(party.class) != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) == null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (channel.getPipeline().get(Query.class) != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (channel.getPipeline().get(orthDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (channel.getPipeline().get(tag.class) != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (channel.getPipeline().get(Checker.class) != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (channel.getPipeline().get(mdDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // should never occur but...",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (channel.getPipeline().get(Calendar.class) == null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (channel.getPipeline().get( ST.class) != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (channel.getPipeline().get(task.class) != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (channel.getPipeline().get(MONTHHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (channel.getPipeline().get(remoteHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (channel.getPipeline().get(Protocol.class) != null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (channel.getPipeline().get(Height.class) != null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return BlobId.of(uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return BlobId.of(this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return BlobId.of(this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return BlobId.of(uri.getHost(), this.uri);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return BlobId.of(uri.getHost(), uri) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return BlobId.of(uri.getHost \"this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return BlobId.of(uri.getHost;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return BlobId.of(uri.getHostbuttonPath, uri);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return BlobId.of(uri.getHost(), uri = BlobId;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return BlobId.of(uri.getHost(), uri)InPath;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return BlobId.of(uri.getHost);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return BlobId.of(uri.getHost(), uri*\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return BlobId.of(uri.getHost != uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return BlobId.of(uri.getHostNumber_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return BlobId.of(uri.getHost , uri);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return BlobId.of(uri.getHost \"this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return BlobId.of(uri.getHost determine_URI, uri);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return BlobId.of(this.uri.getHost(), uri) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return BlobId.of(uri.getHostcontinPath, uri);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return BlobId.of(this.uri.getHost(), uri) + 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return BlobId.of(uri.getHostStart);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return BlobId.of(uri.getHost2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return BlobId.of(uri.getHost(), UTF_8;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return BlobId.of(uri.getHosttestPath, uri);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return BlobId.of(uri.getHostNumber_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return BlobId.of(uri.getHost, uri);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return BlobId.of(uri.getHostInPath, uri);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING_FEATURE_SKIP_FIRST_DATA_ROW, uri.getHost;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return BlobId.of(uri.getHost converterName);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return BlobId.of(uri.getHost(), uri* = uri.getHost;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return BlobId.of(uri.getHost(), uri) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return BlobId.of(uri.getHostFromPath, uri);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING_FEATURE_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return BlobId.of(uri.getHostAmount;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return BlobId.of(uri.getHost(), host);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING_FEATURE_SKIP_FIRST_DATA_ROW, uri.getHost);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return BlobId.of(uri.getHostNumber_REDIS_SENTINEL_MASTER_ID;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return BlobId.of(uri.getHost = uri;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return BlobId.of(uri.getHost\"), uri);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return BlobId.of(uri.getHost(), uri) - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return BlobId.of(uri.getHost fragment;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return BlobId.of(uri.getHostNumber_REDIS_SENTINEL_PORT;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return BlobId.of(uri.getHostNumber_REDIS_SENTINEL, uri);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return BlobId.of(uri.getHostdata, uri);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return BlobId.of(uri.getHostNumber_REDIS_SENTINEL_PORT);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return BlobId.of(uri.getHost12_URI, uri);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return BlobId.of(uri.getHostName);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return BlobId.of(uri.getHostNumber_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return BlobId.of(uri.getHost 'this.uri);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return BlobId.of(uri.getHost(), host;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return BlobId.of(this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return BlobId.of(uri.getHost != uri.this.uri);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return BlobId.of(uri.getHost(), uriInPath);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return BlobId.of(uri.getHost password;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return BlobId.of(this.uri.getHost(), uri = BlobId;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return BlobId.of(uri.getHostSpeedInPath, uri);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return BlobId.of(uri.getHost(), uri) = BlobId;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return BlobId.of(uri.getHost(), this.uri;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return BlobId.of(uri.getHost variable(), uri);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return BlobId.of(uri.getHost determine_URI);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return BlobId.of(uri.getHost(), uriPath);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return BlobId.of(uri.getHostNumber_RESERVED_PREFERENCE, uri.getHost);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return BlobId.of(uri.getHostNumber_REDIS_SENTINEL;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return BlobId.of(uri.getHostNumber_REDIS_SENTINEL_MASTER_ID);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING_FEATURE_SKIP_FIRST_DATA_ROW, uri);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return BlobId.of(uri.getHost mode, uri);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return BlobId.of(uri.getHostText;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return BlobId.of(uri.getHost-2;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return BlobId.of(uri.getHostJOIN_TYPE);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return BlobId.of(uri.getHostNumber_URI, uri);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return BlobId.of(uri.getHost(), uri*36;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return BlobId.of(uri.getHost0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return BlobId.of(uri.getHost12_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return BlobId.of(uri.getHostNumber_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return BlobId.of(uri.getHost(), UTF_8);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return BlobId.of(uri.getHostin uri;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return BlobId.of(uri.getHost password);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return BlobId.of(uri.getHostER_URI, uri);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return BlobId.of(uri.getHostokPath, uri);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING_FEATURE_SKIP_FIRST_DATA_ROW ? uri.getHost;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return BlobId.of(uri.getHostILY_URI, uri);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return BlobId.of(uri.getHostNumber_RESERVED_PREFERENCE, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return BlobId.of(uri.getHost = uri.this.uri;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return BlobId.of(uri.getHost(), uriList);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return BlobId.of(uri.getHostNumber_REDIS_SENTINEL_MASTER_ID + uri.getHost;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return BlobId.of(uri.getHostTs, uri);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING_FEATURE_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return BlobId.of(uri.getHostNumber_URI);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return BlobId.of(uri.getHostRequest, uri);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return BlobId.of(uri.getHostACCEPT_URI, uri);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return BlobId.of(this.uri.getHost(), uri)InPath;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return BlobId.of[uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return BlobId.of(uri.getHost12_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return BlobId.of(uri.getHostNumber_REDIS_SENTINEL_ID;",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "paintComponent(speedAngle;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paintComponent(speedAngle);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paintComponent.getGraphics());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paintComponentContext.getGraphics());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paintComponentContext.getGraphics;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paintComponent swaggerType.PedalPosition;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paintComponent =speedAngle;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paintComponentContext.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paintComponent.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paintComponentContext.getGraphicsrangePedalPosition;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paintComponentContext.getGraphicsctorInPedalPosition;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paintComponentContext.getGraphics {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paintComponentContext.getGraphicsicPedalPosition;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paintComponentContext =speedAngle;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paintComponent.getGraphics;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paintComponent(speedAngle, fileAngle);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paintComponent.getGraphicsrangePedalPosition;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paintComponentContext.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paintComponentContext.getGraphicsTypesInPedalPosition;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paintComponentPed.getGraphics;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paintComponent splitPedalPosition.getGraphicsInPedalPosition;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paintComponentContext.getGraphicsctorPedalPosition;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paintComponentContext.getGraphics2PedalPosition;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paintComponentContext.getGraphics() {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paintComponent splitPedalPosition.getGraphics;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paintComponentPed)speedAngle;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paintComponentContext.getGraphics fieldpm =speedAngle;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paintComponentContext.getGraphics fieldpmInPedalPosition;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paintComponent splitPedalPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paintComponentContext.getGraphicsedPedalPosition;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paintComponentSetgetGraphics;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paintComponentContext.getGraphicsHERITPedalPosition;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paintComponent.getGraphics {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paintComponent.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paintComponentRoutegetGraphics;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paintComponentPedalPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paintComponent.getGraphics fieldpm =speedAngle;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paintComponentPedalPosition.getGraphics;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paintComponentContext.getGraphicsctor =speedAngle;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paintComponent(speedAngle, fileAngle;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paintComponent splitPedalPosition.getGraphicsTypesInPedalPosition;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paintComponentManager.getGraphics());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paintComponent upper upper.getGraphics());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paintComponent(speedAngle.getGraphics;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paintComponent swaggerType.PedalPositions;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paintComponentContext.getGraphicsmodel)speedAngle;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paintComponent splitPedalPosition.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paintComponent this.speedAngle;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paintComponentContext.getGraphicsCompletable |speedAngle;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paintComponent swaggerType.PedalPosition(2);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paintComponent splitPedalPosition.getGraphics {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paintComponent(speedAngle.getGraphics());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paintComponentEntity.getGraphics());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paintComponent swaggerType.Pedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paintComponent swaggerType.PedalPosition(1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paintComponentContext.getGraphics[0];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paintComponentContext.getGraphics cc;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paintComponent swaggerType.Pedal)speedAngle;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paintComponent(speedAngle) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paintComponentcaseInsensitive =speedAngle;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paintComponent (speedAngle;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paintComponentPed.getGraphics());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paintComponent executor =speedAngle;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paintComponent swaggerType.PedalPositionTAG_pm;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paintComponentContext.getGraphicsUrl =speedAngle;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paintComponent.getGraphics() {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paintComponentContext.getGraphicsrangePedalPositions;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paintComponentManagergetGraphics());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paintComponentContext.getGraphics fieldpm = plusAngle;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paintComponent(0LTR;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paintComponent splitPedalPosition.getGraphicsInPedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paintComponent swaggerType.PedalRoute =speedAngle;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paintComponentContext.getGraphicsCompletable;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paintComponentContext.getGraphicsctorInPedalPositions;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paintComponentPedalPosition.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paintComponentContext.getGraphicsedalPositions;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paintComponent upper upper =speedAngle;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paintComponentContext.getGraphicsedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paintComponentContext.getGraphicsTypesInPed)speedAngle;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paintComponent = plusAngle;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paintComponent swaggerData.getGraphics;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paintComponent swaggerType.PedalRoute;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paintComponent swaggerType.getGraphics;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paintComponentPedalPosition.getGraphics {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paintComponent splitPedalPosition.getGraphics[0];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paintComponentContext.getGraphicsTypesInPedalRoute =speedAngle;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paintComponent.getGraphics fieldpm = plusAngle;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paintComponentPagePosition.getGraphics());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paintComponentContext.getGraphics3];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paintComponentManagergetGraphics;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paintComponent upper upper.getGraphics;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paintComponent splitPedalPosition.getGraphics() {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paintComponent splitPedalPosition.getGraphicsCompletable,speedAngle;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paintComponent.getGraphicsCompletable;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paintComponentContext.getGraphicsCompletablealPosition;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paintComponent splitPedalPosition;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paintComponent splitPedalPosition.getGraphicsInPedalPositions;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paintComponentContext.getGraphicsctorInPedalRoute =speedAngle;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paintComponent splitPedalPosition.getGraphicsTypesInPedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paintComponent.getGraphics fieldForalPosition;",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = explicitorals.getIgnored;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored =capitalorals.getIgnored;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = explicitorals.getIgnored();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = reasonorals.getIgnored;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignorals.getIgnored + ignoreAny;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignorals.getIgnored++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = ignorals.getIgnored + 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = anyAny.getIgnored();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = reasonorals.getIgnored();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = ignorals.getIgnoredUTATED;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = ignorals.getIgnored<>(repairAny;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignorals.getIgnored<>(repairAny);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignorals.getIgnored<>(modelName);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = ignorals.getIgnored DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = ignorals.getIgnored - 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored =capitalorals.getIgnored();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored =Zorals.getIgnored;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignorals.getIgnored<>(repairAny)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignorals.getIgnored BET;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.getIgnored + 1, ignorals;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored =ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = georals.getIgnored;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = Korals.getIgnored;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = ignorals.getIgnored<>(hasAny)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = }, ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = getDescriptororals.getIgnored;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = includeorals.getIgnored;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getIgnored+1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored =DECorals.getIgnored;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getIgnored DEFAULT_MESSAGE_PROPERTY_NAME;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignorals.getIgnoredError(ignoreAny);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored =minuteorals.getIgnored;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = parsedToals.getIgnored;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignorals.getIgnored ;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored =DSorals.getIgnored;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignorals.getIgnored<>(hasAny;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ABorals.getIgnored;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignorals.getIgnored battery;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored =OrUpdateorals.getIgnored;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = }, ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = ignorals.getIgnored<>(dayAny;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored =Arithmeticorals.getIgnored;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = Snapshotorals.getIgnored;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = /=orals.getIgnored;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = Multipartorals.getIgnored;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getIgnored<>(includeAny);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignorals.getIgnored<>((), ignoreAny;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignorals.getIgnored 12;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = getAny.getIgnored();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = alreadyorals.getIgnored;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = ignorals.getIgnored<>(ignored;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = ignorals.getIgnored<>(includeAny)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored =resentationorals.getIgnored;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = ignorals.getIgnoredVector();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = ignorals.getIgnored<>(ignAny;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = savedorals.getIgnored;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGURLENCODED;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored =OrUpdateorals.getIgnored();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignorals.getIgnored<>(includeAny;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = recursiveorals.getIgnored;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored =().orals.getIgnored;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = ignorals.getIgnored DEFAULT_AND_ELEVATION_KEY;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = ignorals.getIgnored<>(mimeType)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = ignorals.getIgnored<>(successorals)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = ignorals.getIgnored<>(replaced_LINE_MIME_TYPES)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignorals.getIgnored<>(replaced_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = hasMoreorals.getIgnored;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = explorals.getIgnored;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = ignorals.getIgnored<>(updateAny;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = NOorals.getIgnored;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored =ESorals.getIgnored;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignorals.getIgnored {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGS;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = ignorals.getIgnored endpoint;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignorals.getIgnored + 1).orals;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored =AttributeNameorals.getIgnored;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = errorMessageorals.getIgnored;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored =EQUALorals.getIgnored;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored =00000020orals.getIgnored;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ignorals.getIgnored<>(replaced_MIME_TYPES)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getIgnored DEFAULT_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignorals.getIgnored<>(replaced_LINE_MIME_TYPES;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ignorals.getIgnoredDataKey;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignorals.getIgnored2;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored =HeightToals.getIgnored;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = ignorals.getIgnoredUTATED_VIEW;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = explicit.getIgnored();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignorals.getIgnored<>(hasAny);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = ignorals.getIgnored DEFAULT_AND_EMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = arguments.getIgnored;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignorals.getIgnored<>(replaced_COLUMNS;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 8;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 2);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_KEY);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > batchSize) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthOR_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributeName;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthCode;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 1) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 2) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributeName), attributes.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerNode);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentHashMap[0];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length JPanel;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_KEY);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length1)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_KEY);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthSize);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthcodec);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length '9') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % this.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributeName.length);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthED_KEY);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthSize;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerBatch;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length]) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_ID_KEY);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthOR_ID_KEY);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attribute);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthED_ID_KEY);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attribute.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthmappings;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % 1000;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes.length) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerNode;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthseparatorChar);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthfilteredProps;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % a;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length[] {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthUserType);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthincludedResult);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_NODE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length+1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length number)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-2;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.result.length;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % 8;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 2;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthED_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-2);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >attributeNameConstants.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > _attributes.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length /STRING;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_PREFIX);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_TYPE_STRING;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attribute.length;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_COLLECTION);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length -1) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length 255);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_PARAM_PREFIX);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_URI;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthClass;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthVal;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthport);",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // message length",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(2 + 2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(2 + 2 + 7 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // length",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 5 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8; // length",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + 2); // message length",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(2 + 2 + 7 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8; // length",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 2); // message length",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(2 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(2 + 1 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + input.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(2 + 2 + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(2 + 1 + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 16;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(2 + 1 + 7 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(2 + 2 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(2 + 1 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // one for length",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(2 + 2 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + 2); // length",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() +8, 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(2 + 1 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 3 + 2); // message length",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 8 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes; // length",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 16;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // values",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + text.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(2 + 2 + 8 + 2 + result.readableBytes() + 2; // message length",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + contentStart;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + length + 2); // message length",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(2 + 1 + 15 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(2 + 2 + text.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + len + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 2); // length",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(2 + 2 + 15 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 3 + 1 + 2); // message length",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 5 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length; // message length",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(2 + 2 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(2 + 2 + 8 + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 15;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // done length",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 12 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2; // length",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 10;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 8 + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 10;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8; // message length",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(2 + 1 + 2 + result.readableBytes() + 4 + 8; // length",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4; // length",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + contentStart; // length",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 8;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(2 + 2 + length + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2; // message length",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 15;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 15;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(2 + 1 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(2 + 2 + length + 2 + result.readableBytes() + 2; // message length",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(2 + 1 + 4 + 8 + 2 + result.readableBytes; // length",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    }
}