{
    "JacksonCore-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "char c = str.charAt(i++);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "char c = str.charAt(i++;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "char c = str.charAt(i++ ) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "char c = str.charAt(i++ << i;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "char c = input.charAt(i++);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "char c = str.charAt(i++];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "char c = str.charAt(i++ << 1);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "char c = str.charAt(i++ - 1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "char c = input.charAt(i++;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "char c = str.charAt(i++inIndex++) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "char c = str.charAt(i++) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "char c = str.charAt(i++ + i;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "char c = str.charAt(i++ << 2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "char c = str.charAt(i++ << 12;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "char c = input.charAt(i++ << i;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "char c = str.charAt(i++ - 1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "char c = input.charAt(i++ ) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "char c = value.charAt(i++);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "char c = text.charAt(i++;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "char c = str.charAt(i++1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "char c = str.charAt(i++ - 1) == len;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "char c = text.charAt(i++);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "char c = str.charAt(i++ << 4);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "char c = str.charAt(i++ << 15;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "char c = str.charAt(i++Path;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "char c = str.charAt(i++ - 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "char c = str.charAt(i++ - 1)[i++];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "char c = str.charAt(i++inIndex + i;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "char c = str.charAt(i++)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "char c = str.charAt(i+++i++) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "char c = input.charAt(i++];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "char c = str.charAt(i++status >= len;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "char c = str.charAt(i++LICA_MARKER_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "char c = str.charAt(i++ << len;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "char c = str.charAt(i++ << 7) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "char c = str.charAt(i++ >= len;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "char c = str.charAt(i++ - 1);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "char c = value.charAt(i++;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "char c = text.charAt(i++ << i;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "char c = str.charAt(i++ << 4;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "char c = str.charAt(i++1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "char c = str.charAt(i++_EVALU')) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "char c = str.charAt(i+++1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "char c = str.charAt(i++ - i;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "char c = str.charAt(i++2);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "char c = ch.charAt(i++);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "char c = str.charAt(i++ << 2);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "char c = str.charAt(i++ - 1) == '0') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "char c = str.charAt(i++inPtr++) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "char c = input.charAt(i++ - 1) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "char c = str.charAt(i++, len);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "char c = str.charAt(i++ pos++) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "char c = len.charAt(i++);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "char c = input.charAt(i++ + i;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "char c = text.charAt(i++ ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "char c = str.charAt(i++ e >= len;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "char c = ch.charAt(i++;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "char c = str.charAt(i++inLength;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "char c = str.charAt(i++_EVALUNEGATE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "char c = str.charAt(i++ << 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "char c = str.charAt(i++] - 1) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "char c = str.charAt(i++ - 1)[i++;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "char c = input.charAt(i++ << i++) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "char c = str.charAt(i++index++;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "char c = str.charAt(i++US_BYTES;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "char c = str.charAt(i++ + 1) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "char c = str.charAt(i++ << 1) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "char c = str.charAt(i++Char >= len;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "char c = str.charAt(i++off >= len;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "char c = str.charAt(i++ - 1) == ch;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "char c = str.charAt(i++] {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "char c = str.charAt(i++ prop);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "char c = str.charAt(i++ + len;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "char c = str.charAt(i++_EVALU >= len;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "char c = str.charAt(i++ - 1) == _cfgMinSafeChar;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "char c = str.charAt(i++(1, i;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "char c = str.charAt(i++]",
                "identical": false
            },
            {
                "k": 78,
                "patch": "char c = str.charAt(i++group;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "char c = str.charAt(i++ << 3;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "char c = input.charAt(i++inIndex++) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "char c = input.charAt(i++ << 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "char c = str.charAt(i++ << 14;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "char c = str.charAt(i++Name;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "char c = str.charAt(i++ << 24;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "char c = str.charAt(i++ << 8;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "char c = len.charAt(i++;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "char c = str.charAt(i++ - 1), len;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "char c = str.charAt(i++ << 7;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "char c = str.charAt(i++Char;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "char c = str.charAt(i++]);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "char c = str.charAt(i++System;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "char c = s.charAt(i++);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "char c = str.charAt(i++ prop;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "char c = str.charAt(i++ - 1) >>> 12;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "char c = str.charAt(i++ - 1)MoreV6_PART_COUNT;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "char c = str.charAt(i++). len;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "char c = str.charAt(i++) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "char c = str.charAt(i++in len;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "char c = str.charAt(i++inExtension;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "char c = value.charAt(i++ ) {",
                "identical": false
            }
        ],
        "buggy_line": "char c = str.charAt(i++);",
        "fixed_line": "char c = str.charAt(i);"
    },
    "Codec-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (lineSeparator == 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (inAvro_TABLE_END_OF_STRING == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (lineNumber == 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (lineSeparator.length < 1) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (i < 0) { // or multi-byte",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (i < 0) { // EOF at most 2 triplets...",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (i > 0) { // note: must shuffle both regular properties and filtered",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next uncolored",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (inAvro_TABLE_END_OF_STRING && lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next uncolored vertex",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i < 0) { //% of lineSeparator, should have at most 2 triplets...",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i < 0) { //% of lineSeparator, should have at least 1",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (i < 0) { // note: must shuffle both regular properties and filtered",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (inAvro_TABLE_END_OF_STRING == 1) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (inAvro_TABLE_ELEMENT_END_OF_STRING == 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i < 0) { //% of lineSeparator, but do we have at most 2 triplets...",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i < 0) { // last byte",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (cssLength > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i < 0) { //% of lineSeparator, but do we have at least 1",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, proceed with the next uncolored vertex",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (inAvro_TABLE_END_OF_STRINGS.length > 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i < 0) { // or multi-line can still expand",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next unmatched first",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, proceed with the next uncolored",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (i < 0) { //% of lineSeparator, should have at least one",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (pos < 0) { // or multi-byte",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (currentSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (i < 0) { //% of lineSeparator, should have at least 2",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i < 0) { //% of lineSeparator, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i < 0) { //% of lineSeparator, should have at most 2 triplets",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (lineNumber > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next un-line",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i < 0) { //% of lineSeparator,double-lineSeparator; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (lineStart >= 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, remove the next uncolored vertex",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (i < 0) { //% of lineSeparator, should we support such coercion?",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (lineLength > 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next unarraycopy",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (lineSeparator.length != 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (currentSize == 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i < 0) { // have at most 2 triplets...",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (inAvro_TABLE_END_OF_STRINGS > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next one",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i < 0) { // or IPv4-Compatible or multi-line can still expand",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i < 0) { // EOF at most 2 or IPv4-Compatible or multi-lineSeparator; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (inAvro_TABLE_END_OF_STRINGS + 1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (lineSeparator.length == 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next uncolored?",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (lineSeparator.length > 1) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i < 0) { // call: must shuffle both regular properties and filtered",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (i < 0) { // EOF at least 2 triplets...",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (currentToken == 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (currentSize > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, remove the next uncolored",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i < 0) { //% of lineSeparator, can still expand",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i < 0) { //% of lineSeparator, but also need to use the last 6 bits",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, remove the last 6 bits",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, remove the last value",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i < 0) { //% of lineSeparator, can do we support such coercion?",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i < 0) { // or IPv4-Compatible or multi-byte",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (i < 0) { //% of lineSeparator, are we support such coercion?",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, proceed with the next unarraycopy",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i < 0) { // or multi-line\"), the last 6 bits",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, remove the i",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (inAvro_TABLE_END_OF_STRINGS.length - 1) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (i < 0) { //% of lineSeparator, but also need to have at least 1",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, proceed with the next one",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i < 0) { //% of lineSeparator, but do we support such coercion?",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (lineNumber < 0) { // or multi-byte",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i < 0) { //% of lineSeparator, should have",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (index < 0) { // or multi-byte",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i < 0) { //% of lineSeparator, can do we have at least 1",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, + i",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (i < 0) { //% of lineSeparator, but do we have at or IPv4-Compatible or input",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (i < 0) { //% of lineSeparator, remove the next uncolored vertex",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (i < 0) { // EOF at or IPv4-Compatible or multi-line can still expand",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, then",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (i < 0) { //% of lineSeparator, and all ASCII",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (i < 0) { // or multi-case letter means we can have at least one, proceed with the next uncolored",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (lineNumber >= 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (currentToken.length > 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (i < 0) { // EOF at most 4 one, proceed with the next uncolored vertex",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the end of record or input",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (i < 0) { // last lineSeparator, proceed with the next uncolored",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, proceed with the next uncolored?",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i < 0) { //% of lineSeparator, but do we have at or multi-to limit",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (startSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (i < 0) { // EOF at most 2 or IPv4-Compatible or multi-line can still expand",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i < 0) { //% of lineSeparator, should have at or input",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (inAvro_TABLE_END_OF_STRING == lineSeparator) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (i < 0) { // EOF at most 2 or IPv4-Compatible or multi-lineSeparator; but we don't deposit",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (i < 0) { // EOF at most 2 or IPv4-Compatible or multi-lineSeparator; but also need to check",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i < 0) { //% of lineSeparator, should have at most 2",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, remove the next one",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (i < 0) { // or multi-case letter means we can have at least one, proceed with the next uncolored vertex",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (currentFile.length > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator,% of lineSeparator.length - 1)",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i < 0) { //% of lineSeparator, but do we have room for now",
                "identical": false
            }
        ],
        "buggy_line": "if (lineLength > 0) {",
        "fixed_line": "if (lineLength > 0 && pos > 0) {"
    },
    "Math-30": {
        "fixes": [
            {
                "k": 1,
                "patch": "final int n1n2prod = n2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final int n1n2prod = n2 * n2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final int n1 = n2 * n2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final int n1n2prod = n1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final int n1n2prod = n2 * n2; // NOSONAR",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final int n1n2 = n2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final int n1n2prod = n2 * n2; // 1M is NOSONAR",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final int n1n2prod = n3 * n2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final int n1n2prod = n2 * n2; // m/s data.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final int n1n2prod = n2 * n2; // unset sign bit",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final int n1n2prod = n2 * n2; // m copies of NOSONAR",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final int n1 = n2 * n2; // NOSONAR",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final int n1n2prod = n2 * n2; // 2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final int n1n2prod = n2 * n2; // 1M is too much, common",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final int n1n2prod = n2 * n2; // m copies of parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final int n1n2prod = n2 * n2; // m/s",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final int n1n2prod = n2 * n2; // m copies of the n1n2",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final int n1n2prod = n2 * n2; //tr NOSONAR",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final int n1n2prod = n2 * n2; // operator",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final int n1n2prod = n2 * n2; // | NOSONAR",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final int n1n2prod = n2; // NOSONAR",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final int n1n2prod = n2 * n2; // data.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final int n1n2prod = n2 * n1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final int n1n2prod = n2 * n2; // 100;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final int n1n2prod = n2 * n2; // 1M is short indeed",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final int n1n2prod = n2 * n2; // braceIndex",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final int n1n2prod = n2 * n2; // m copies of 10;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final int n1n2prod = n2 * 1024; // 1M is probably too...",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final int n1n2prod = n2 * n2; // m/s data",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final int n1n2prod = n2 * n2; // sqrt set in NOSONAR",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final int n1n2prod = n * 10;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final int n1 = n2 * 1024; // 1M is too much, 1K is probably too...",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final int n1n2prod = n * m;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final int n1n2prod = n2 * n2; // maxX",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final int n1n2prod = n2 * n2; // max output",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final int n1n2prod = n11 * n2;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final int n1n2prod = n2 * 1024; // 1M is too much, common",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final int n1n2prod = n2 * n2; // m/s data remaining",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final int n1n2prod = n2 * n2; // 4 for negative sign",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final int n1n2prod = n2 * n2; // m copies of status",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final int n1n2prod = n2 * n2; // 1M is too much, before it is the n1n2",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final int n1n2prod = n2 * n2; // insertion status",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final int n1n2prod = n2 * n2; // m copies of unset sign bit",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final int n1n2prod = n2 * n2; // 1M is too much, common status",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final int n1n2prod = n2 * n2; // max length of identifier",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final int n1n2prod = n2 * n2; // m copies of complete NOSONAR",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final int n1 = n2 * 1024; // 1M is too much, common",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final int n1n2prod = n2 * 10;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final int n2 = n1 * n2;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final int n1n2prod = n * m1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final int n1 = n2 * 1024;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final int n1n2prod = n2 * n2; //ITS / 2;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final int n1 = n2 * 1024; // 1M is too much, common as 'n'",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final int n1n2prod = n2 * n2; // m copies of parameter should not be negative",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final int n1n2prod = nselect * n2;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final int n1n2prod = n2 * n2; // 1M is probably too...",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final int n1n2prod = n2 * n2; // max length of 10;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final int n1n2prod = n2 * n2; // VARIABLE",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final int n1n2prod = n2 * n2; // null in the n is",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final int n1n2prod = n000 * n2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final int n1n2prod = n2 * n2; // brace END_NODE",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final int n1n2prod = n2 * n2; // 1M is too much, before values are: 0",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final int n1n2prod = n2 * n2; // m copies of 2;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final int n1n2prod = n2 * n2; // assume at most 1M is probably too...",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final int n1n2prod = n2 * n2);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final int n1n2prod = n2) * 2;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final int n1n2prod = n2 * 1024;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final int n1n2prod = n2 * n2; // 1M is too much, common name.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final int n1n2prod = n3;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final int n1n2prod = n2 * n2; // | never really gets this.",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final int n1n2prod = n2 * n2; // binding status",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final int n1n2prod = n2 * n2; //ExceededException",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final int n1n2prod = n2 * n2; // 1M is negative sign",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final int n1n2prod = n2 * n2; // TextRangeedException",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final int n1n2prod = n2 * n2; // 1M is too much, NOSONAR",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final int n1n2prod = n2 * n2; // m copies of unset sign",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final int n1n2prod = n2 * n2; //Mail 2;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final int n1n2prod = n2 * n2; // 1M is too much, short n1n2",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final int n1n2prod = n2 * n2; //Watcher data.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final int n1 = n2 * 1024; // 1M is too much, 60n2",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final int n1 = n2 * 10;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final int n1n2prod = n2 * n2; //Exceed0 (n2",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final int n1n2prod = n2 * n2; // HashSet status",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final int n1n2prod = n2 * n2; // 1M is too much, common as 'n'",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final int n1n2prod = n2 * n2; // m copies of filename in the n1n2",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final int n1n2prod = n2 * n2; //allow, 1k the n1n2",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final int n1n2prod = n / 2;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final int n1n2prod = n2 * 1024; // 1M is too much, common as 'n'",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final int n1n2prod = n2 * n2; // m copies of cycle in the n1n2",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final int n1n2prod = n2 * n2; // m copies of complete the n1n2",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final int n1n2prod = n2 * n2; // m/s data that be negative",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final int n1n2prod = n2 * n2; // 1M is height",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final int n1n2prod = n2 * n2; // max data",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final int n1n2prod = n2 * n2; // m copies of that be negative",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final int n1n2prod = n2 * n2; // 1M is negative",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final int n1n2prod = n2 * n2; // m for negative sign",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final int n1n2prod = n2 * n2; // m/s data to be negative",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final int n1n2prod = n2 * n2; // null in data.",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final int n1n2prod = n2 * n2; //overall.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final int n1n2prod = n2 * n2; // assume at most 1 bit",
                "identical": false
            }
        ],
        "buggy_line": "final int n1n2prod = n1 * n2;",
        "fixed_line": "final double n1n2prod = n1 * n2;"
    },
    "Jsoup-45": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastFlow) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(collectionFormat)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastFlow) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(collectionFormat);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (\"td\".equals(nodeName) && \"td\".equals(name) && !last)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(operand)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndex;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastFormat {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndex;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastat",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastat",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastFormat {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndexOf;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastCollections {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndexOf;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastBounds;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last == o;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last ==;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastJob) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastJob) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (\"td\".equals(nodeName) && \"td\".equals(name) && !last;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastLine) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastTransport) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndex){",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastCollections {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndex {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(Expr instanceof !last)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (\"td\".equals(nodeName) && \"td\".equals(name) && !lastFlow) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (\"td\".equals(nodeName) && \"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastBOTTOM) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (\"td\".equals(prop) && \"td\".equals(name) && !last)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastBounds;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last == null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastComments) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last ==;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastNode) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastBOTTOM) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastelevation;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastLine) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last[0];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last){",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(transitionName) && !last)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(and)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastNamespace {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndexOf('/');",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastelev",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastLocalization",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last == o;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastunsigned) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last)){",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(methodName) && !last)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last == null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastComments) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !laster;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastBox;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndex){",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(dataType)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndexOf('/');",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastObject {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last \"&\";",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastInstance;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastcc;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(this.last)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastelevation) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastuned) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndexOf points {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeType)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastBox;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastLocalization",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastock\".equals(name) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(dataType instanceof !last)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (\"td\".equals(nodeName) && \"td\".equals(name) && !lastIndex;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndexOf('/') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastelev",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndexOf('/') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastBIG_NAME;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(node)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIND\".equals(name) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastCallback;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last/\" {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (\"td\".equals(nodeName) && \"td\".equals(name) && !lastFormat {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndexOf opposite) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIUS {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastDim;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastFormatR;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIND\".equals(name);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndexOf)){",
                "identical": false
            }
        ],
        "buggy_line": "} else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {",
        "fixed_line": "} else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) {"
    },
    "Collections-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "private Object readResolve = _hashMask;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private Object readResolve) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private Object readResolve = code;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private Object readResolve = DEFAULT_LOCALE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private Object readResolve = this.readResolve;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private Object readResolve;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_NAME;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private Object readResolve = end;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private Object readResolve = args;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private Object readResolve = this.keys;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private Object readResolve = this.readOnly;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private Object readResolve = _hashArea;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private Object readResolve = _inputStream;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private Object readResolve = int.hashMask;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private Object readResolve = _readContext;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private Object readResolve = this.readGeneric;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private Object readResolve = this.readBytes;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private Object readResolve = NULL_SURROGATE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private Object readResolve = DEFAULT_TIMEZONE;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private Object readResolve =wcalculated;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private Object readResolve = this.request;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private Object readResolve = message;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private Object readResolve = array;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private Object readResolve = connector;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private Object readResolve = commitHashCode;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private Object readResolve = DEFAULT_DELIMITER;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private Object readResolve = this.readContext;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private Object readResolve = this.hashMask;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_KEY;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private Object readResolve = STROKEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private Object readResolve = template;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private Object readResolve = getResult;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private Object readResolve = args[0];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private Object readResolve = this.readLocation;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private Object readResolve = output;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private Object readResolve = bridge;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private Object readResolve = this.readString;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private Object readResolve = this.traceId;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private Object readResolve = STROKEMBEDDED_CODE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private Object readResolve = EARLICA_SET_NAME;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private Object readResolveString {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private Object readResolve = DEFAULT_RESERVED_TIMEZONE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private Object readResolve = ]HashCode;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private Object readResolve = DEFAULT_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private Object readResolve = afteralgo;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private Object readResolve = this.readOBJECT;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_RESPONSE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_TIMEZONE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private Object readResolve = args.readGeneric;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private Object readResolve = 10;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private Object readResolve = objs;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private Object readResolve = DEFAULT_LOCALENDARATOR_KEY;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private Object readResolve = DEFAULT_RESOLVED_TIMEZONE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private Object readResolve = DEFAULT_LOCALENDARATOR_NAME;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private Object readResolve = times;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private Object readResolve = subHashCode;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private Object readResolve = resourceName;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STRICT_RESERVED_WORD ) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIMEZONE;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private Object readResolve = this.readers;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private Object readResolve = this.readed;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private Object readResolve = DEFAULT_CLOSED;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STRICT_RESERVED_TIMEZONE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private Object readResolve = args.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STYLE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private Object readResolve =assert;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private Object readResolve = STROKEMBEDDED_CLOSED;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private Object readResolve = variables;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private Object readResolve = DEFAULT_KEY_RESERVED_TIMEZONE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private Object readResolve = STROKEMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private Object readResolve = updatable;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private Object readResolve =String;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_NUMBER;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private Object readResolve = other.request;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private Object readResolve = afterATION;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private Object readResolve = DEFAULT_RESOLVERTER_TIMEZONE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private Object readResolve = DEFAULT_LOOP_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private Object readResolve = config;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private Object readResolve() {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private Object readResolve = org.traceId;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private Object readResolve = this.readCharsets;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private Object readResolve = STROKEMBEDDED_STYLE;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private Object readResolve = inputStream;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private Object readResolve = buffered;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private Object readResolve = DEFAULT_ALLOW_LOCALE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STRICT_RESERVED_RESPONSE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private Object readResolve = STROKEADAPTER;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private Object readResolve = DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private Object readResolve = _hash;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private Object readResolve = 0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private Object readResolve = 8;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_PATTERN;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private Object readResolve = args.readBytes;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private Object readResolve = DEFAULT_PREFIXED_KEY;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private Object readResolve = DEFAULT_ATTACHVE_TIMEZONE;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private Object readResolve = anonymous;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private Object readResolve = messages;",
                "identical": false
            }
        ],
        "buggy_line": "private Object readResolve() {",
        "fixed_line": "protected Object readResolve() {"
    },
    "JacksonDatabind-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "paramName = _annotationIntrospector.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paramName = _accessor.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paramName = _candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paramName = _secondary.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paramName = properties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paramName = _pos.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paramName = candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paramName = _beanDesc.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paramName = _paramName.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paramName = paramDef.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paramName = _beanType.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paramName = _findCreatorPropertyHandler.class;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paramName = _name.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paramName = _factory.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paramName = _sql.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paramName = _annotationIntrospector.findImplicitParamName;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paramName = _managedPropertyHandler.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paramName = _beanProperties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paramName = _collectionFormat.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paramName = _buildCreator.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paramName = _paramNameIntrospector.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paramName = beanDesc.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paramName = param.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paramName = _orderedProperties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paramName = _annotationIntrospector.findImplicitParamNameSuffix;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paramName = _bindings.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paramName = _accessorPropertyHandler.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paramName = _c.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paramName = ctor.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paramName = _avroContext.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paramName = _ioContext.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paramName = _forSerialization.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paramName = _collectionType.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paramName = _buildCreatorPropertyHandler.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paramName = _factoryConfig.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paramName = _findCreatorParamName(0);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paramName = viewId.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paramName = _accessorCreator.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paramName = _annotationIntrospector.findImplicitParamName(1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paramName = _accessorSpan.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paramName = _deser.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paramName = _serialization.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paramName = _ depthParamName.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paramName = _ conceptCreator.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paramName = removed.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paramName = _targetType.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paramName = _accessorActiveProperty.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paramName = filename.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paramName = subviewId.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paramName = NO_TYPES_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paramName = _concat.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paramName = _nodeFactory.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paramName = _abstract.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paramName = _right.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paramName = _csv.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paramName = setter.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paramName = clazz.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paramName = _35.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paramName = _nodes.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paramName = _paramNameSuffix.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paramName = _handledType.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paramName = _nodeCreator.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paramName = _restProperties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paramName = managedType.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paramName = _socket.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paramName = NO_TYPES.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paramName = _each.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paramName = _ret.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paramName = _instance.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paramName = _cfg.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paramName = _ keyType.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paramName = criteriaBuilder.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paramName = activeCreator.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paramName = LOGGER.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paramName = _Spring.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paramName = _ section.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paramName = _network.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paramName = _props.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paramName = sep.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paramName = _ language.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paramName = layers.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paramName = ser.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paramName = _chain.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paramName = _evt.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paramName = most.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paramName = _buildCreatorPropertyHandler.findImplicitParamName;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paramName = viewMapping.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paramName = _indent.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paramName = context.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paramName = _vendor.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paramName = _\").findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paramName = _creator.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paramName = _Operations.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paramName = FIX.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paramName = _managedPropertyHandler.findImplicitParamName;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paramName = async.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paramName =POINT.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paramName = _accessorPropertyHandler.findImplicitParamName;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paramName = _secondary.findImplicitParamNameSuffix;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paramName = _candidate.findImplicitParamName;",
                "identical": false
            }
        ],
        "buggy_line": "paramName = candidate.findImplicitParamName(0);",
        "fixed_line": "paramName = candidate.paramName(0);"
    },
    "Closure-86": {
        "fixes": [
            {
                "k": 1,
                "patch": "return false;",
                "identical": true
            },
            {
                "k": 2,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return false; // must be set toME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return false; // must be a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return false; // TODO: must shuffle both regular properties and the value is not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' would be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return false; // Skip this is: we don't know if there's not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return false; // Skip this is needed, we don't know if there's not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return false; // TODO: must shuffle both regular properties if there's not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return false; // nope, if not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return false; // since we don't know if not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return false; // must be set toME: a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return false; // TODO: must shuffle both regular properties and the value is not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return false; // Skip this ever true if not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return false; // Skip this is needed, we don't know if there's not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't++)",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppress-only",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return false; // see https://activiti.atlassian.net/browse/ACT-1626",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spans of the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return false; // Skip this is: we don't know if there's not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return false; // must be a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return false; // TODO: must shuffle both regular properties and the value is example.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'node we are the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' would be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't (false)",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppress't (false)",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppress't matched.",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't matched.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't matched of the methods parameters",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't /browse/o it is disabled",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't(15",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's GT",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'o-only",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppressDED",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spans of the methods parameters",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't /browse/o it is any",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't57",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't++) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'supp't matched.",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't++)",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppressable-only",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppress't know if there's GT.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't know if there's",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't /o it!",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '?)",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppress't know if there's",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppressable",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return false; // n is negative",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return false; // Skip this is: we don't know if there's not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't './browse/o it is disabled",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'value't++)",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare'",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return false; // must be set toME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return false; // Skip this is needed, we don't know if there's not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'value't matched.",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return false; // Skip this is needed, we don't know if there's not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't /browse/o it!",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't /browse/o it is",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an'tFlavor",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return false; // since we don't know if it is the root of all evil in xml",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's GT.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't++)",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't /browse/o it is an embedded compat address",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't /o it is any",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' would be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return false; // Skip this is: we don't know if there's not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return false; // must be set toME: a parameter should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'supp't know if there's GT.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't know if there's GT",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't++)",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'only",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return false; // must be set toME: a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't /browse/ACT-1626",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppressable?",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'match",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if it is found",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't './browse/o it is any",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if we don't return false (false)",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't lowercase",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spans of component",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'value't know if there's GT",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there'true",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't './browse/ACT-1626",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there' header name",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't './browse/o it is",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return false; // TODO: must shuffle both regular properties and the value is not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'value't know if there's",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' bytes",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't /o it is",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppress't know if there's value",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't /browse/o it is found",
                "identical": false
            }
        ],
        "buggy_line": "return true;",
        "fixed_line": "return false;"
    },
    "Csv-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c < '0' || c > '9' || c > '9') && c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c >= '0' && c <= '9') || c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c >= '0' && c <= '9') || c == 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c >= '0' && c <= '9' || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c >= '0' && c <= '9') || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c >= '0' && c <= '9') || c == 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c < '0' || c > '9') && i < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c >= '0' && c <= '9') || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c < '0' || c > '9') && c != 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c < 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c >= '0' && c <= '9' || c > '9' || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c < '0' || c > '9') &&addA' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c >= '0' && c <= '9 || c > '9') || c == 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c >= '0' && c <= '9') || c == 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c < 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c >= '0' && c <= '9') || c > 'A' || c < 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c >= '0' && c <= '9') || c == 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c < '0' || c > '9' || c > '9') && c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c >= '0' && c <= '9') || c > '9' || c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (c < '0' || c > '9' || c > '9') && c < 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c < 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c < '0' || c > '9' || c > '9') && c <= 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c >= '0' && c <= '9') || c > 'A' || c < 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c < '0' || c > '9' || c == 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c < '0' || c > '9' || c > '9') && i < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c >= '0' && c <= '9 || c > '9') || c == 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z');",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c < '0' || c > '9') && c <= 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c >= '0' && c <= '9') || c < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c < '0' || c > '9') &&_A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z') && c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c >= '0' && c <= '9') || c > 'A' || c == 'Z' || c == 'a' || c == 'z');",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c < 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c == 'Z' || c == 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c == 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c < '0' || c > '9') && i < 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c == 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z' || c > 'a' || c == 'z');",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c == 'Z' || c == 'a' || c == 'z') { // token",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c < '0' || c > '9') && i < 'A' || c > 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') { // token",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c < '0' || c > '9') && i < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z') && c <= 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c < '0' || c > '9') && ch < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c < 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c < '0' || c > '9' || c > '9') && c <= 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c < '0' || c > '9') && MIN_A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c >= '0' && c <= '9') || c > 'A' || c < 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c < '0' || c > '9' || c > '9') && c <= 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c == 'Z' || c == 'a' || c == 'z');",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c >= '0' && c <= '9') || c == 'A' || c == 'Z' || c == 'a' || c == 'z');",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z') && c <= 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c >= '0' && c <= '9') || c == 'A' || c == 'Z' || c == 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c >= '0' && c <= '9') || c == 'A' || c < 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c < '0' || c > '9') &&addA' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c >= '0' && c <= '9') || c < 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c < '0' || c > '9') && MIN_A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c >= '0' && c <= '9' || c == 'A' || c == 'Z' || c == 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z') && c <= 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z');",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c < '0' || c > '9') && c != 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            }
        ],
        "buggy_line": "if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {",
        "fixed_line": "if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {"
    },
    "Lang-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "str.getChars(0, width, bufferLen);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "str.getChars(0, width, strLen);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "str.getChars(0, width, len);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "str.getChars(0, width, padChar);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "str.getChars(0, width, height);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "str.getChars(0, width, bufferLen;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "str.getChars(0, width, strLen) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "str.getChars(0, width, size);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "str.getChars(0, width, len - strLen;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "str.getChars(0, width, padChar;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "str.getChars(0, width, bufferLen == padChar;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "str.getChars(0, width, strLen - padChar;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "str.getChars(0, len, buffer, size);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "str.getChars(0, width, bufferLen + strLen;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "str.getChars(0, width, padChar + strLen;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "str.getChars(0, width, length);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "str.getChars(0, width, strLen;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "str.getChars(0, width, strLen+1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "str.getChars(0, width, bufferLen+1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "str.getChars(0, width, bufferLen - strLen;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "str.getChars(0, width, padChar) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "str.getChars(0, width, strLen == padChar;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "str.getChars(0, width, tableLen);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "str.getChars(0, width, padLen);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "str.getChars(0, width, tagLen);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "str.getChars(0, width, bLen);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "str.getChars(0, len, strLen, padChar);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "str.getChars(0, width, bufferLen - padChar;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "str.getChars(0, width, contentLen);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "str.getChars(0, width, bufferLen) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "str.getChars(0, len, strLen);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "str.getChars(0, width, len + strLen;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "str.getChars(0, width, padOff + strLen;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "str.getChars(0, width, outLen);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "str.getChars(0, width, len - padChar;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "str.getChars(0, width, asLen);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "str.getChars(0, width, bufferLen == 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "str.getChars(0, width, bufferLen};",
                "identical": false
            },
            {
                "k": 39,
                "patch": "str.getChars(0, width, wireLen);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "str.getChars(0, width, strLen};",
                "identical": false
            },
            {
                "k": 41,
                "patch": "str.getChars(0, width, bufferLen).length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "str.getChars(0, width,SegmentLen);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "str.getChars(0, width, timeLen);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "str.getChars(0, width, strLen + size;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "str.getChars(0, width, bufferLen-1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "str.getChars(0, width, postLen);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "str.getChars(0, width,ItemLen);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "str.getChars(0, len, strLen, width);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "str.getChars(0, width, right);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "str.getChars(0, width, len+1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "str.getChars(0, width, bufferLen+4);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "str.getChars(0, width, strLen_, size);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "str.getChars(0, width,commitLen);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "str.getChars(0, width, strLen-1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "str.getChars(0, width,}Len);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "str.getChars(0, width, 6);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "str.getChars(0, width, strLen + len;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "str.getChars(0, width, strLen + padChar;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "str.getChars(0, width, prefixLen);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "str.getChars(0, width, _size);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "str.getChars(0, width, shift - 1) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "str.getChars(0, width, currentLen);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "str.getChars(0, width, bufferLen_, strLen);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "str.getChars(0, width, strLen - 1) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "str.getChars(0, width,Item);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "str.getChars(0, width, lastLen);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "str.getChars(0, width, containsLen);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "str.getChars(0, width,constructLen);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "str.getChars(0, width,Len);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "str.getChars(0, width,CSSLen);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "str.getChars(0, len, bufferLen);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "str.getChars(0, width, shortLen);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "str.getChars(0, width, NOTLen);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "str.getChars(0, width, len) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "str.getChars(0, width, childrenLen);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "str.getChars(0, width, numberLen);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "str.getChars(0, width, StringLen);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "str.getChars(0, width, strLen - padSeparatorLength;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "str.getChars(0, width, len - strLen];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "str.getChars(0, width, branchesLen);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "str.getChars(0, width, strLen - len;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "str.getChars(0, width,!Len);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "str.getChars(0, len, strLen, size);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "str.getChars(0, width, bufferLen_);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "str.getChars(0, width, addLen);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "str.getChars(0, width, padCharBufferLen);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "str.getChars(0, width, byteLen);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "str.getChars(0, width, msgLen);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "str.getChars(0, width, bLen;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "str.getChars(0, width, len - strLen);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "str.getChars(0, width, strLen - padCharacter;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "str.getChars(0, width, strLen - pad + strLen;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "str.getChars(0, width,causeLen);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "str.getChars(0, width, fieldLen);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "str.getChars(0, width, '-') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "str.getChars(0, width, buffer);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "str.getChars(0, width, this.length - padChar;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "str.getChars(0, width, strLen - padateLen;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "str.getChars(0, width,Val);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "str.getChars(0, width,IllegalArgumentLen);",
                "identical": false
            }
        ],
        "buggy_line": "str.getChars(0, strLen, buffer, size);",
        "fixed_line": "str.getChars(0, width, buffer, size);"
    },
    "Closure-114": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (right == newDepScope) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (right == rhs) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (namespaceURI) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (isDirected) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (isMIDDLE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (isFunction) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (nameNext.length == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (namespace == newDepScope) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (nameNode == newDepScope) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (n == rhs) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (IMDepScope) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (isMoving) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (namespace == null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (expression == newDepScope) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (isMainQuery) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (isObs) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (ns instanceof rhs) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (noOfPlayers == 2) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (replaced) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (right == double.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (ns.length == MAX_BUSIBLING_KEY) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (right == length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (nameNext.length == 1) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (isVisible) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (isActive) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (implicits) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (_forSerialization) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (isOfChild) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (isUpdatable) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (collect) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (modifiers) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (namespace == rhs) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (isLocal) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (negated) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (evt) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (isMSSQL) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (ns.length == MAX_BUF) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (newState == length) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (namespace == generator) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (isRequired) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (nameNode == h) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (isOfChildCount) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (modState.skipPreprocessorDirectives) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (ns.length == MAX_BUSIBLING_COUNT) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (args.length == 1) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (isOfChildCount == 2) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (expression == rhs) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (repairAtRule) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (isWrapper) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (baseNode == double. Don) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (implicit) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (ns.length == MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (isAnnotationChild) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (skip) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (skipNulls) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (isHigh) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (ns.length == 1) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (cyannotatedNode == h) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (newState == rhs) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (orActive) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (noOfPlayers == 3) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (namespace == h) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (nameNode.length == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (ns.length == 2) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (nameNode.length) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (region) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (converted) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (ns == rhs) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (isCreator) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (n == rhs.DELETE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (nameNext.length == 2) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (ns.length) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (baseNode == newDepScope) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (nameNext.length == 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (nameNext.length == MAX_BUSIBLING_KEY) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (isInfos) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (cyannotatedNode) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (cyannotatedNode == newDepScope) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (namespace == operator) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (n == rhs.this.name) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (nameNode == double.ENGINE_NAME) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (nameNode.isVisible) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (isId) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (isBin) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (newState.name) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (isInterrupted) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (record) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (ns.length == MAX_BUSIBLING_MESSAGE) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (n == rhs. Don) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (left) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (ns.length == MAX_BUSIBIGINT) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (toList) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (nameNode.length == 1) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (ns.length == MAX_RESERVED) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (islayout) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (updateClient) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (reserved) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (isOfChildCount == 1) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (namespace == assignment;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (each) {",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (!(parent.isCall() && parent.getFirstChild() == n)) {"
    },
    "Csv-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RECEL;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALE.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_LIBRARY);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_persistent.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public static final CSVFormat EXCEL = doc.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RE removeListener;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_syntax.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Context.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_IN_PROGRESS_KEY.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_LOCALE);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ removeListener.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_IN_LIST.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_ARRAY);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE[withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_language.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_COLUMN_INDEX);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_unsigned);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_FORMAT.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_LOCALE);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_COLUMN_INDEX);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PREFIX.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALENDAR_NAME_PREFIX.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_VARIABLE_PARTS_OF_ROUTE.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_NODE_TYPE_FUNCTION.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALENDAR_NAME_PREFIX;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PRODUCTION_MODE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PORTED_NAME_PREFIX.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALE[withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "public static final CSVFormat EXCEL = order.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_INSTANT_NAME_PREFIX.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_VALUE_IN_PROGRESS_KEY.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmpty(DEFAULT);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_CANCEL_IN_PROGRESS_KEY.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_VARIABLE_PARTS_OF_ROUTE.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_IN_LOCATION.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Rows.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_IN_LIST.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_LINE_LENGTH);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_VALUE_IN_PROGRESS_KEY.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_CANCEL_IN_PROGRESS_KEY.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_ARRAY);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_IN_PROGRESS_KEY.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PROLOCALE.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALE.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_DELIMITER;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_INSTANT_NAME_PREFIX.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_FEATURE_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmpty(persistent);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_persistent.withIgnoreEmptyLines(DEFAULT_LOCALE);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_EXP;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_Properties.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RULES.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_TYPE_FUNCTION.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_VARIABLE_PARTS_OF_ROUTE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_VARIABLE_PARTS_OF_ROUTE.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_CODE);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RESOLLOCALE.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RE Inline_MSSQL.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_MULATION_SECONDS);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RESOLLOCALE.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_TIMEOUT_IN_MS;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_FEATURE_RE removeListener);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_mediaType);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALE.withIgnoreEmptyLines(DEFAULT_COLUMN_INDEX);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_DIMENSIONS_DOWN.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_SEGMENTS.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_MULATION_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_EXP;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_SEGMENT;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_FEATURE_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_IN_LOCATION.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ANY_TYPE_FUNCTION.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SCHEMA.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_FEATURE_SKIPVIOUS);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MAX_VALUEChangeModel.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_FEATURE_ALLOW_SEGMENT;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(PREFIX);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "public static final CSVFormat EXCEL = doc.withIgnoreEmptyLines(DEFAULT_LIBRARY);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_PORTED_NAME_PREFIX.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MAX_VALUEHints.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOOPS_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_FEATURE_SKIP);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_INSTANT_NAME.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_FEATURE_SKIPVIOUS);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_ANY);",
                "identical": false
            }
        ],
        "buggy_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);",
        "fixed_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames(true);"
    },
    "Codec-3": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (Factory.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (contains(value, index + 1, 3, \"IER\")) {",
                "identical": true
            },
            {
                "k": 5,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (index > 0 && value, 0, \"IER\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (result.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (found.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (allowingSelfLoops && value, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (ctx.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (map.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (trimmedCssValue, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (containsKey(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (flushStyle.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (finalSql.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (trimmedCssValue, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if ( moz.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (contains(value, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (Factory.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (allowingSelfLoops.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (Event.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (color.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (finalSql.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (path.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (Config.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (Factory.contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (sss.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (Event.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (trimmedCssValue, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (result.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (type, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (insideNode, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (containsKey, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (f, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (COMMENT.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (Second.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if ( ].contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (HORIZONTAL.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (value.contains(index, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (insideNode, index + 1, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (value, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (found.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (depth == 1 && value, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if ( moz.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (PREDEFINED_CONSTANT, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if ( line.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (values.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(value, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (Point.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if ().contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (map.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (flushAttribute, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (ctx.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (index > 0 && value, 0, \"IER\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (depth == 1 && value, 0, \"IER\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (HORIZONTAL.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (PREDEFINED_CONSTANT, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (containsKey(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (allowingSelfLoops.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (depth == 1 && value, index, \"IER\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (url, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (type, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (f, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (PREDEFINED_CONSTANT, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (Factory.contains(value, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 2, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (trimmedCssValue, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 3, \"IER\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 4, \"IER\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (mode == 1 && value, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (sss.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (requestCaseWhen, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (containsEdge, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (containsKey(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (getContent, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (connection, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (allowingSelfLoops && value, index + 1, \"IER\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (SELF, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (cssName, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (insideNode, index + 1, \"IER\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (color, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (url, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 2, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (PREDEFINED_CONSTANT, index + 1, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (index > 0 && value, index + 1, \"IER\")) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (contains(value, index + 1, 4, \"IER\")) {",
        "fixed_line": "} else if (contains(value, index + 1, 3, \"IER\")) {"
    },
    "Mockito-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "catch (org.mockito.exceptions.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "catch (Abstractmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "catch (Entity.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "catch (Managed.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "catch (Comparable.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "catch (Submockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "catch (Enumeration.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "catch (Layer.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "catch (Zmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "catch (Empty.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "catch (org.mockito.exceptions.mission.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "catch (Object.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "catch (mx.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "catch (org.mockito.exceptions.Undefined.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "catch (Param.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "catch (Style.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "catch (Ref.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "catch (URmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "catch (org.mockito.exceptions.\u02c2.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "catch (org.mockito.exceptions. FETCH.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "catch (Mapping.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "catch (Cancelito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "catch (org.mockito.exceptions.PROPERTIES.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "catch (ArrayList.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "catch (org.mockito.exceptions. left.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "catch (mappings.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "catch (Pattern.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "catch (Title.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "catch (Manager.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "catch (MATCH.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "catch (Group.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "catch (org.mockito.exceptions. 24.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "catch (notification.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "catch (Method.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "catch (Form.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "catch ((),.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferente) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "catch (org.mockito.exceptions.MouseEvent.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "catch (org.mockito.exceptions.select.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "catch (Next.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "catch (org.mockito.exceptions.MouseEvent.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "catch ( flow.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "catch ( \\\"mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "catch (org.mockito.exceptions.any.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "catch (Iterator.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "catch (org.mockito.exceptions.ike.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "catch (org.mockito.exceptions.\u1800.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "catch (org.mockito.exceptions. processInstance.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "catch (org.mockito.exceptions. describes.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreStar e) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "catch (org.mockito.exceptions.\u5e7a.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "catch (.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "catch (Error.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "catch (View.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "catch ( layers.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "catch (os.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "catch (User.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "catch (Object.mockito.exceptions.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "catch (org.mockito.exceptions.\u02d6.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAre\u1272 e) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "catch (org.mockito.exceptions.utors.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "catch ([0].mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "catch (;mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "catch (Httpmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "catch (Enmock.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "catch (org.mockito.exceptions.\u25a2.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "catch (Pmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "catch (org.mockito.exceptions.sembler.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "catch (org.mockito.exceptions. US.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "catch (Fmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "catch (org.mockito.exceptions.\u0754.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "catch (org.mockito.exceptions.\ud857\udf86.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "catch (org.mockito.exceptions.DS.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "catch (org.mockito.exceptions.\u5ce1.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "catch (org.mockito.exceptions.TimeStamp.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "catch (org.mockito.exceptions.\u060b.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferentprocesses) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "catch (org.mockito.exceptions.verification.junit.Arguments == 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "catch (org.mockito.exceptions.Email.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "catch (org.mockito.exceptions. multiline.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent it) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "catch (Pushito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "catch (org.mockito.exceptions.artifactId.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "catch (Mapping.mockito.exceptions.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "catch (org.mockito.exceptions.\u28d3.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e>) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "catch (org.mockito.exceptions.ow.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "catch (org.mockito.exceptions. WebSocket.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "catch (Entity.mockito.exceptions.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "catch (org.mockito.exceptions. elim.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "catch (org.mockito.exceptions.\u59ae.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "catch (org.mockito.exceptions.\u1090.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "catch (org.mockito.exceptions.\u082e.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "catch (org.mockito.exceptions.Extensions.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "catch (org.mockito.exceptions. addMapping.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "catch (org.mockito.exceptions.verification.FunctionAreDifferent e) {",
                "identical": false
            }
        ],
        "buggy_line": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
        "fixed_line": "catch (AssertionError e) {"
    },
    "Closure-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (negativeZero == 0x && prev == '-') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (x < 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (negativeZero == 0x0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (negativeZero == 0x0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (negativeZero == 0x || prev == '-') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (negativeZero == 0x020 && prev == '-') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (negativeZero == 0x00 && prev == '-') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (negativeZero <= 0x && prev == '-') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (negativeZero >= 0x && prev == '-') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (negativeZero == 0x01 && prev == '-') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (negativeZero == 0xFIRST || prev == '-') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (negativeZero == 0x80 && prev == '-') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (negativeZero == 0x05) && prev == '-') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (negativeZero == 0x00 || prev == '-') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (negativeZero == 0x0[' && prev == '-') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (negativeZero == 0xWorkflow && prev == '-') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (negativeZero == 0x05) || prev == '-') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (negativeZero >= 0x && prev < '-') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (negativeZero == 0x020 || prev == '-') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (negativeZero == 0x02) && prev == '-') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (negativeZero <= 0x && prev >= '-') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (negativeZero == 0xREN && prev == '-') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (negativeZero == 0x0ows || prev == '-') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (negativeZero == 0x0f && prev == '-') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (negativeZero == 0x0 DISPLAY && prev == '-') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (negativeZero == 0x0Asc || prev == '-') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (x > 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (x >= 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (negativeZero == 0x10000 && prev == '-') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (negativeZero == 0x[' && prev == '-') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (negativeZero <= 0x && prev < '-') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (negativeZero == 0x0ows && prev == '-') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (negativeZero == 0x0[' || prev == '-') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (negativeZero == 0xdrZero && prev == '-') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (negativeZero == 0xGraph && prev == '-') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (negativeZero == 0x05) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (negativeZero == 0xURI || prev == '-') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (negativeZero == 0x0Elements && prev == '-') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (negativeZero == 0x dx || prev == '-') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (negativeZero == 0xifetime && prev == '-') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (negativeZero == 0xRENOne && prev == '-') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (negativeZero == 0x0E && prev == '-') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (negativeZero == 0x0B && prev == '-') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (negativeZero == 0xFIRST && prev == '-') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (negativeZero == 0x0A || prev == '-') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (negativeZero < 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (negativeZero == 0xjust && prev == '-') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (negativeZero == 0x0 menu && prev == '-') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (negativeZero == 0x directory && prev == '-') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (negativeZero == 0x pub && prev == '-') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (negativeZero == 0xmirror && prev == '-') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (negativeZero <= 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (x == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (negativeZero == 0x0200) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (negativeZero == 0x0len || prev == '-') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (negativeZero == 0xElast && prev == '-') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (negativeZero == 0x0Sync && prev == '-') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (negativeZero == 0x0 DISPLAY || prev == '-') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (negativeZero == 0xInstant && prev == '-') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (negativeZero == 0x00 && y == '-') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (negativeZero == 0x0Explicit || prev == '-') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (negativeZero == 0xRENDER && prev == '-') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (negativeZero == 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (negativeZero == 0xReference && prev == '-') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (negativeZero == 0xFlush && prev == '-') {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (negativeZero == 0x02, prev == '-') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (negativeZero == 0x oprot && prev == '-') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (negativeZero == 0xsecond && prev == '-') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (negativeZero == 0x dx && prev == '-') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (negativeZero == 0xEncode || prev == '-') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (negativeZero == 0x0len && prev == '-') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (negativeZero == 0xgap && prev == '-') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (negativeZero == 0x78 && prev == '-') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (negativeZero == 0xvoid && prev == '-') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (negativeZero == 0x3 && prev == '-') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (negativeZero == 0x02, prev >= '-') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (negativeZero == 0xloss && prev == '-') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (negativeZero <= 0x0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (negativeZero == 0xprototype && prev == '-') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (negativeZero == 0x jpa && prev == '-') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (x > 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (negativeZero == 0xseq || prev == '-') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (negativeZero == 0x locale && prev == '-') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (negativeZero == 0xDC && prev == '-') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (negativeZero == 0x' || prev == '-') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (negativeZero == 0x expressions && prev == '-') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (negativeZero > 0x0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (negativeZero == 0x03) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (negativeZero >= 0x && prev <= '-') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (x >= 0 && prev < '-') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (negativeZero == 0x0020) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (x < 0 || prev >= '-') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (negativeZero == 0x && prev < '-') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (negativeZero == 0x0 && prev < '-') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (negativeZero == 0x02, prev < '-') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (negativeZero > 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (negativeZero == 0x00 && prev >= '-') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (negativeZero == 0xdrZero && y == '-') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (negativeZero == 0 && x == '-') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (negativeZero == 0x05) && y == '-') {",
                "identical": false
            }
        ],
        "buggy_line": "if (x < 0 && prev == '-') {",
        "fixed_line": "if ((x < 0 || negativeZero) && prev == '-') {"
    },
    "Math-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return FastMath.pow(2 * FastMath, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 60 * 2) * 2;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return FastMath.pow(2 * FastMath +dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return FastMath.pow(2 * 1024, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2 * 2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * branch / 2) * 2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) / 2;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 60 * 2) * 2;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2 * 2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return FastMath.pow(2 *enter, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return FastMath.pow(2 * FastMath / 2) * 2;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return FastMath.pow(2 * 1024, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 4;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 2) / 2;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 4];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return FastMath.pow(2 * 1024, -dim * 2) / 2;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * parsed / 2) * 2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return FastMath.pow(2 * FastMath, -dim * branch / 2) * 2;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2) - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1 * 2 * 2;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 2 * 2;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return FastMath.pow(2 *pu, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * 4;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1) * 2;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *close5) / 2) * 2;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return FastMath.pow(2 * FastMath, -dim * parsed / 2) * 2;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return FastMath.pow(2 * when, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 3 * 2) / 2;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return FastMath.pow(2 *files.PI, -1, -1 * 2 * 2;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * 10;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *MIDDLE / 2) * 2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 60 * 2) * 4;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2) * 2;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return FastMath.pow(2 * urls, -1, -1 * 2 * 2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return FastMath.pow(2 * FastMath_PI, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return FastMath.pow(2 *files.PI, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return FastMath.pow(2 * wikipedia.PI, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return FastMath.pow(2 *when, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return FastMath.pow(2 * HMAC.PI, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *ChangeEvent;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 1.3 / 2) * 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * processInstanceId / 2) * 2;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return FastMath.pow(2 * FastMath, -dim / 2) * 4;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return FastMath.pow(2 * urls, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return FastMath.pow(2 * FastMath, -dim / 2) * 10;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return FastMath.pow(2 * 1024, -dim / 2) * 4;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return FastMath.pow(2 *Contact.PI, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return FastMath.pow(2 * Structure.PI, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return FastMath.pow(2 * levels.PI, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * 4];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * blockSize) / 2) * 2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *MUSTA / 2) * 2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return FastMath.pow(2 * levels.PI, -1, -1 * 2 * 2;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *<>() / 2) * 2;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * processInstanceId;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return FastMath.pow(2 * levels.PI, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * target;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return FastMath.pow(2 * Direction, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * parsed) / 2;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 10;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return FastMath.pow(2 *InfoEnabled.PI, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 60 * 2) / 2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * cos;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return FastMath.pow(2 * calculate, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return FastMath.pow(2 *364.PI, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return FastMath.pow(2 *InfoEnabled.PI, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *Peer * 2) / 2;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return FastMath.pow(2 *ToInt, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2 * 2) / 2;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return FastMath.pow(2 *ZIPK, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 4 bytes;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return FastMath.pow(2 *flight.PI, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 412;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 60 * 2) * 10;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return FastMath.pow(2 *Like, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return FastMath.pow(2 * 1024, -dim * 2) * 4;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * LoggerFactory * 2) / 2;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * blockSize) / 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1 * 2) / 4 * 3;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return FastMath.pow(2 * HMAC.PI, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return FastMath.pow(2 * when / 8, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *closeB / 2) * 2;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * parsed / 2) * 4;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 1.3) / 2) * 2;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2 * 2) - 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return FastMath.pow(2 * FastMath, -dim / 2) * 4];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * PI;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * branch / 2) * CU;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 5;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 41;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return FastMath.pow(2 *files.PI, -1 * 2 * 2;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return FastMath.pow(2 * lac, -dim / 2) * 2;",
                "identical": false
            }
        ],
        "buggy_line": "return FastMath.pow(2 * FastMath.PI, -dim / 2) *",
        "fixed_line": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *"
    },
    "Closure-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (result == null) { // should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (result == null) { // collection[like], map-public; caller should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (result == null) { // let's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (result == null) { // could also need to handle bundles, if we support such coercion?",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, that is allowed",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (result == null) { // then we support such coercion?",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (result == null) { // collection[like], map-public; caller should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, that was already miss the",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, result);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (result == null) { // could warn, then we support such coercion?",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw't support such coercion?",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (result == null) { // should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (result == null) { // collection[like], map; already miss the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the .util.NO_OBJECT, that was already miss the",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'raw't support such coercion?",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, clazz",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, justLTA",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (result == null) { // should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, that is allowed",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, clazz",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw't force accessible",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, that is allowed",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result)",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT is allowed",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_TYPE",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (result == null) { // collection[like], map; but we are not called by default",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, clazz is allowed",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, just already miss the",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (result == null) { // then we are the root-most span.",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT : result;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'raw't force accessible",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, just root",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result is allowed",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, result);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, before/after document",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_TYPE",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, that was already has no_TYPE",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw't allowed",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, justLTA",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (result == null) { // name, then we support such coercion?",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECTSFIELD_TYPE",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, just already miss the",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, must skip",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (result == null) { // collection[like], map-public; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, clazz is allowed",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, that",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, just copy",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw' write characters",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, that was already miss the",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (result == null) { // collection[like], map-public; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, that is allowed",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (result == null) { //LONG, then we support such coercion?",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the .util.NO_OBJECT, just already miss the",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'raw't allowed",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, just copy",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (result == null) { // collection[like], map; already got before/after document",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, clazz",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, result)",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, that is any",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (result == null) { // collection[like], map; already miss the .bpmn20.xml is in source",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (result == null) { // collection[like], map; already miss the .bpmn20.xml is in case",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, must skip",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, that was already miss the root",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw't deposit",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the .util.NO_OBJECT, as otherwise too?",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, then",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, just already has no_TYPE",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw't lowercase",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned.NO_OBJECT, just already miss the",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, looks like a that was already miss the",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, result",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw't SUBSCRIPTION_TYPE",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'raw' write characters",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECTSFIELD_TYPE",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (result == null) { // should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result; already miss the",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, just root",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, looks like :: that was already miss the",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (result == null) { // too? Just don't support such that was already miss the",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECTSStats.",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the .util.NO_OBJECT, looks like :: that was already miss the",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the .util.NO_OBJECT, let't force accessible",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw'treat",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT, result is allowed",
                "identical": false
            }
        ],
        "buggy_line": "if (result != null) {",
        "fixed_line": "if (!result.isNoType()) {"
    },
    "Closure-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean isOverride = t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean isOverride = t.inGlobalScope && propertyName;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean isOverride = t.inGlobalScope && t.next;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean isOverride = t.inGlobalScope || t.next;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean isOverride = t.inGlobalScope && t.outGlobalScope;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.outGlobalScope;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean isOverride = t.inGlobalScope && t.PROCESS;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean isOverride = t.inGlobalScope != null && propertyName;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean isOverride = t.inGlobalScope && t.VIEW;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean isOverride = t.inGlobalScope() && propertyName;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean isOverride = t.inGlobalScope() && t.next;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean isOverride = t.inGlobalScope && t.sink;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean isOverride = t.inGlobalScope && t.unsigned;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean isOverride = t.inGlobalScope && t;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean isOverride = t.inGlobalScope && t);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean isOverride = t.inGlobalScope && t.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean isOverride = t.inGlobalScope && t.unwrap;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean isOverride = t.inGlobalScope && t.url;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean isOverride = t.inGlobalScope && t.element;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean isOverride = t.inGlobalScope != JsonToken.END_ARRAY && propertyName;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean isOverride = t.inGlobalScope != JsonToken.END_OBJECT && propertyName;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean isOverride = t.inGlobalScope && t.GT;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean isOverride = t.inGlobalScope && t.tokenGlobalScope;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean isOverride = t.inGlobalScope && t.unescapedScope;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean isOverride = t.inGlobalScope() || t.next;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean isOverride = t.inGlobalScope && t.K_ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean isOverride = t.inGlobalScope() && t.VIEW;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.next;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean isOverride = t.inGlobalScope && t.lenMarker;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean isOverride = t.inGlobalScope && t.reportError;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean isOverride = t.inGlobalScope() && t.PROCESS;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean isOverride = t.inGlobalScope && t.parent;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGN_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.outGlobalScope) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean isOverride = t.inGlobalScope && t.unwrapAt;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean isOverride = t.inGlobalScope || t.outGlobalScope;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean isOverride = t.inGlobalScope && t.class;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean isOverride = t.inGlobalScope && t.inputEnd) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean isOverride = t.inGlobalScope && t.INLINE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.VIEW;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.ASSIGN_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGN;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean isOverride = t.inGlobalScope && t.outGlobal;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean isOverride = t.inGlobalScope && t.attributeName;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean isOverride = t.inGlobalScope && t.constructor;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean isOverride = t.inGlobalScope() && t.ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean isOverride = t.inGlobalScope || t.inputEnd;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGN_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean isOverride = t.inGlobalScope != Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean isOverride = t.inGlobalScope && t.isVisible;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean isOverride = t.inGlobalScope && t.len;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.unescapedScope;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean isOverride = t.inGlobalScope && t.VIOUS;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean isOverride = t.inGlobalScope && t.unwrapSupport;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean isOverride = t.inGlobalScope || t.inputEnd) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean isOverride = t.inGlobalScope && t.lenMarker) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean isOverride = t.inGlobalScope && t.isMarkedIgnored;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean isOverride = t.inGlobalScope && t.candidate;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean isOverride = t.inGlobalScope && t.charset;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean isOverride = t.inGlobalScope && t.parentCANCE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean isOverride = t.inGlobalScope && t.attributeName == Token.TK_COMMA) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean isOverride = t.inGlobalScope && t.isDefaultScope;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean isOverride = t.inGlobalScope && t.merge;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean isOverride = t.inGlobalScope && t.CLOSED;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean isOverride = t.inGlobalScope && t.toList;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean isOverride = t.inGlobalScope && t.SELECT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean isOverride = t.inGlobalScope && t.outGlobalScope) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean isOverride = t.inGlobalScope && t.unwrapEnd) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean isOverride = t.inGlobalScope && t.KEY;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.unsigned;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean isOverride = t.inGlobalScope != Token.TK_COMMA;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean isOverride = t.inGlobalScope && t.TRANSITION;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean isOverride = t.inGlobalScope && t.folder;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean isOverride = t.inGlobalScope && t.URI;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean isOverride = t.inGlobalScope && t.input;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean isOverride = t.inGlobalScope && t.DEFAULT_IDENTIFIER;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean isOverride = t.inGlobalScope && t.action;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean isOverride = t.inGlobalScope && t.rootValue;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean isOverride = t.inGlobalScope && t.Word;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean isOverride = t.inGlobalScope && t.DEFAULT_URI;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean isOverride = t.inGlobalScope != visibility) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean isOverride = t.inGlobalScope && t.arrayGlobalScope;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean isOverride = t.inGlobalScope && t.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean isOverride = t.inGlobalScope != DEFAULT_ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean isOverride = t.inGlobalScope && t.DEFAULT_HASH;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean isOverride = t.inGlobalScope && t.isVisible) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean isOverride = t.inGlobalScope && t.isDefault;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean isOverride = t.inGlobalScope && t.componentName;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean isOverride = t.inGlobalScope && t.reportErrorCount;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean isOverride = t.inGlobalScope && t.processInstanceId;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.unwrap;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean isOverride = t.inGlobalScope && t.outputTail;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean isOverride = t.inGlobalScope && t.PATH;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean isOverride = t.inGlobalScope && t.KEY_ALIAS;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean isOverride = t.inGlobalScope && t. accept;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean isOverride = t.inGlobalScope && t.K;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean isOverride = t.inGlobalScope && t.Diff;",
                "identical": false
            }
        ],
        "buggy_line": "boolean isOverride = t.inGlobalScope() &&",
        "fixed_line": "boolean isOverride = parent.getJSDocInfo() != null &&"
    },
    "JacksonDatabind-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "sb.append(';');",
                "identical": false
            },
            {
                "k": 2,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.",
                "identical": false
            },
            {
                "k": 3,
                "patch": "sb.append(';'); // end-of-referencedType",
                "identical": false
            },
            {
                "k": 4,
                "patch": "sb.append(';'); // just to ensure we don'll also check _referencedType.",
                "identical": false
            },
            {
                "k": 5,
                "patch": "sb.append(';'); // can this ever occur?",
                "identical": false
            },
            {
                "k": 6,
                "patch": "sb.append(';'); as 'class == _referencedType;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "sb.append(';'); // no need to ensure we'll also check _referencedType.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "sb.append(';'); // end marker, _referencedType.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "sb.append(';'); // just to ensure we should use the _referencedType.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.UNION",
                "identical": false
            },
            {
                "k": 11,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType",
                "identical": false
            },
            {
                "k": 12,
                "patch": "sb.append(';'); // just to ensure we'll also need to check _referencedType.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "sb.append(';'); // end-of-object, _referencedType.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "sb.append(';'); // just to ensure we don't need to check _referencedType.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "sb.append(';'); // end marker for unmatched first, _referencedType.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "sb.append(';'); // just to ensure we should check _referencedType.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "sb.append(';'); // just to ensure we'll also check _class",
                "identical": false
            },
            {
                "k": 18,
                "patch": "sb.append(';'); // just to ensure we don't need to _referencedType.",
                "identical": false
            },
            {
                "k": 19,
                "patch": "sb.append(';'); as 'class != _referencedType;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "sb.append(';'); // just to ensure we'll also need to _referencedType.",
                "identical": false
            },
            {
                "k": 21,
                "patch": "sb.append(';'); // just to ensure we don't been _referencedType.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "sb.append(';'); // no need to ensure we'll also check _class",
                "identical": false
            },
            {
                "k": 23,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. as well",
                "identical": false
            },
            {
                "k": 24,
                "patch": "sb.append(';'); // just to ensure we'll _referencedType.",
                "identical": false
            },
            {
                "k": 25,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 26,
                "patch": "sb.append(';'); // no changes, _classSignature);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "sb.append(';'); // nulls need to check _referencedType.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType\", _referencedType);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "sb.append(';'); // no changes, _referencedType);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.nullFirst;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPANOSECONDS;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "sb.append(';'); // just to ensure we don'll also check _referencedType",
                "identical": false
            },
            {
                "k": 34,
                "patch": "sb.append(';'); // just to ensure we don't _referencedType.",
                "identical": false
            },
            {
                "k": 35,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPAN_TYPE_STRINGSaturated;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPANNOTATIONS",
                "identical": false
            },
            {
                "k": 37,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPReaders",
                "identical": false
            },
            {
                "k": 38,
                "patch": "sb.append(';'); // end-of-name",
                "identical": false
            },
            {
                "k": 39,
                "patch": "sb.append(';'); // just to ensure we don'll also check _referencedType.UNION",
                "identical": false
            },
            {
                "k": 40,
                "patch": "sb.append(';'); // end marker for unmatched first, _referencedType);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "sb.append(';'); // end-of-c, _referencedType.",
                "identical": false
            },
            {
                "k": 42,
                "patch": "sb.append(';'); // just to ensure we can this ever occur?",
                "identical": false
            },
            {
                "k": 43,
                "patch": "sb.append(';'); // end marker, but also need to _referencedType.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPAN_TYPE_EQUALSaturated;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "sb.append(';'); // can't need to check _referencedType.",
                "identical": false
            },
            {
                "k": 46,
                "patch": "sb.append(';'); // just extra _referencedType.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. as 'class",
                "identical": false
            },
            {
                "k": 48,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.[0]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.]",
                "identical": false
            },
            {
                "k": 50,
                "patch": "sb.append(';'); // end marker, _referencedType.IS_class == sb; caller't been discovered",
                "identical": false
            },
            {
                "k": 51,
                "patch": "sb.append(';'); // end marker, _referencedType.GenericSignature);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "sb.append(';'); // end-of-nameTo _referencedType.",
                "identical": false
            },
            {
                "k": 53,
                "patch": "sb.append(';'); // no need to ensure we'll also check _referencedType.UNION",
                "identical": false
            },
            {
                "k": 54,
                "patch": "sb.append(';'); // just to ensure we don't been _referencedType",
                "identical": false
            },
            {
                "k": 55,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPAN_TYPE_ARRAY",
                "identical": false
            },
            {
                "k": 56,
                "patch": "sb.append(';'); // just to ensure we don'll also check _class",
                "identical": false
            },
            {
                "k": 57,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.IS_class",
                "identical": false
            },
            {
                "k": 58,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.UNNAMED_TYPE",
                "identical": false
            },
            {
                "k": 59,
                "patch": "sb.append(';'); // no need to ensure we'll also check _referencedType",
                "identical": false
            },
            {
                "k": 60,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. NULL_STRINGSaturated",
                "identical": false
            },
            {
                "k": 61,
                "patch": "sb.append(';'); // just to ensure we'll also check _class == sb;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "sb.append(';'); // just to ensure we don't been discovered",
                "identical": false
            },
            {
                "k": 63,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedTypeArguments",
                "identical": false
            },
            {
                "k": 64,
                "patch": "sb.append(';'); // no schema != _referencedType.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. NULL_ARRAY",
                "identical": false
            },
            {
                "k": 66,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedTypeSerializer.",
                "identical": false
            },
            {
                "k": 67,
                "patch": "sb.append(';'); // just to ensure we don't need to _referencedType",
                "identical": false
            },
            {
                "k": 68,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPAN_LOGGEDDED_OBJECT",
                "identical": false
            },
            {
                "k": 69,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.NO_class == sb;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.FOR_class",
                "identical": false
            },
            {
                "k": 71,
                "patch": "sb.append(';'); // end-of-name _referencedType.",
                "identical": false
            },
            {
                "k": 72,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. 10;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.class",
                "identical": false
            },
            {
                "k": 74,
                "patch": "sb.append(';'); // just to ensure we don't need to check _referencedType",
                "identical": false
            },
            {
                "k": 75,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPANOOM_1++) return _class;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "sb.append(';'); // just to ensure we'll also check _class]",
                "identical": false
            },
            {
                "k": 77,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. NULL_TYPE);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. AFTER_class",
                "identical": false
            },
            {
                "k": 79,
                "patch": "sb.append(';'); // no schema, _referencedType.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.NO_STRINGSaturated",
                "identical": false
            },
            {
                "k": 81,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPAN_class",
                "identical": false
            },
            {
                "k": 82,
                "patch": "sb.append(';'); // just to ensure we'll also need to check _referencedType",
                "identical": false
            },
            {
                "k": 83,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPAN_TYPE_STRINGSaturated",
                "identical": false
            },
            {
                "k": 84,
                "patch": "sb.append(';'); // end marker, _referencedType.IS_class == sb; caller't++) return _type;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "sb.append(';'); // just to ensure we don't get _referencedType",
                "identical": false
            },
            {
                "k": 86,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. NULL_TYPE",
                "identical": false
            },
            {
                "k": 87,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. double set a('<",
                "identical": false
            },
            {
                "k": 88,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPAN_TASKSaturated;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "sb.append(';'); // just to ensure we don'll also check _referencedType.nullFirst;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. off-class",
                "identical": false
            },
            {
                "k": 91,
                "patch": "sb.append(';'); // nulls need to _referencedType.",
                "identical": false
            },
            {
                "k": 92,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.FOR_class ==sb;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. double set a('< (sb)",
                "identical": false
            },
            {
                "k": 94,
                "patch": "sb.append(';'); // end marker, _referencedType.BAR_class == sb; no need toResolve...",
                "identical": false
            },
            {
                "k": 95,
                "patch": "sb.append(';'); // end marker for('< _referencedType.",
                "identical": false
            },
            {
                "k": 96,
                "patch": "sb.append(';'); // end-of-c, _referencedType.GenericSignature);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.GenericSignature);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPAN_TYPE_STRING",
                "identical": false
            },
            {
                "k": 99,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.DELETE",
                "identical": false
            },
            {
                "k": 100,
                "patch": "sb.append(';'); // end marker, _referencedType.IS_class == sb; caller't++) {",
                "identical": false
            }
        ],
        "buggy_line": "sb.append(';');",
        "fixed_line": "sb.append(\">;\");"
    },
    "JacksonDatabind-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class || kind == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class || types == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == String.class || provider == Object.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class ||KEY == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || UNKNOWN_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == String.class || TYPE_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to avoid double.class",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == String.class || rawValue == Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || raw == Object.class) { // skip to avoid double.class",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || raw == Object.class) { // [databind#116]",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class || raw == Object.class) { // special-class",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class || raw == boolean.class) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw ==String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class ||cl == Object.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special case",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class ||client == Object.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || !raw == Object.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, avoid double.class",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny-class",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class || raw == Object.class) { // special case",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class || raw == Object.class){",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, ok as well",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to be assigned.class",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to find",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class || raw == Object.class) { // token",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to a-class",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to check supers",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to check here as well",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class || parameters == Object.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to avoid double.class",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class ||(1) == Object.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class || raw == Object.class) { // special one too",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one-class",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class || boolean.class == Object.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class || raw == Object.class) { // common special case",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || id == Object.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || result == Object.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class || ser == Object.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == String.class || raw == Object.class) { // not avoid double.class",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to check event type",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need toboolean.class",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw't an int.class",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class || raw ==Object.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, common",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, can this.class",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || raw == Object.class) { // most likely already exists-class",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, short.class",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, needs extra work",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || constructor == Object.class) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || raw == Object.class) { // never have array as well",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to include possible comma too",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || raw == Object.class) { //my this.class",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, kind",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear, String.class",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || class == Object.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || raw == Object.class) { // E.class",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || raw == Object.class) { // never have array as with above, avoid double.class",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end-of-class",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, common special case",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need toResolve as well",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include null",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one too",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny; but also need toboolean.class",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class || var == Object.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, but not be assigned.class",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || initialized == Object.class) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to this.class",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to use argument as well",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw' nulls but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class || raw == Object.class) { // special this.class",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || wireType == Object.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to a TYPE",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || savedType == Object.class) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to a marker",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need toSubmit.class",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || raw == Object.class) { // not store 'raw'..'t an int.class",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one minor perf optimization",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one-class",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || raw == double.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny toboolean.class",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || raw == Object.class) { // never have array as with above, ok as well",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || raw == Object.class) { // common case",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include possible comma too",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, ok as well",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class || propName == Object.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || raw == Object.class) { // VOID, common special case",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Closure-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (target != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (target != null) { // let's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don' nulls but nodes",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we are we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (target != null) { // let's not yet; should we don't know if there's a 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we don't know if there are we support such coercion?",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (target != null) { // let's not yet; should we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we are we don't know if there's an array",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'id't know if there's an error here",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we don't know if there's an array",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'include' nulls but nodes",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (target != null) { // let's not yet; should we are we don't know if there's a 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (target != null) { // let's not yet; but we don't know if there's a 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (target != null) { // let's not yet; but we are we don't know if there's a 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'id't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw'Milliseconds are we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'id't know if there's an array",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' characters",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if there's an array",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if there's an error here",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'id't know if we don' nulls but nodes",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (target != null) { // for in case it's not yet; but we are we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'null't know if there's an error here",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we are we don' nulls but nodes",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'id' nulls but nodes",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we are we don't support such coercion?",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (target != null) { // let's not yet; but we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (target != null) { // for in case it's not yet; but we are we don't know if there's a 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we are we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we can get new in case there's",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'id't know if we are we support such coercion?",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but do we are we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'msg' nulls but nodes",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if there are we support such coercion?",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (target != null) { // let's not yet; but we are we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't support such coercion?",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (target != null) { // it's non-public, need to force accessible",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we are we don't know if there's an target",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'null't know if there's an array",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (target != null) { // for in case it's not yet; but we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don' characters",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'null't know if we don' nulls but nodes",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't been discovered yet",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we are we support such coercion?",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'id't know if we don't support such coercion?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if there's an array",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (target != null) { // let's not yet; but we are we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we don't know if there's an target",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (target != null) { // let's not yet; but we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (target != null) { // for in case it's not yet; but we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'id't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don' nulls but nodes",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't support getting the target",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'null't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (target != null) { // it's not yet; but we are we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don'an abstract class?",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw'Milliseconds are we don't know if there's an array",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'msg't know if we don' nulls but nodes",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we are we support such coercion?",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (target != null) { // it's not yet; but we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if it's an array",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'null' nulls but nodes",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (target != null) { // let's not yet; should we are we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if there's an error here",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we are we can get new in case there's",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we are we don't know if there's an array",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we don't support such coercion?",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'id't know if there's an array",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we don't force accessible",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but also need to force accessible",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'id't know if we don't support getting the target",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we are we don't know if there's an additional",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we don't know if there are we support such coercion?",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (target != null) { // it's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'id't know if there's an error here",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (target != null) { // for in case it's not yet; but we are we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'id't know if we don' characters",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'msg't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'null't know if there's an error here",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'include'",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but do we are we don't support such coercion?",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (target != null) { // it's not yet; should be assigned. Also declare the methods parameters as 'null't know if we don't support such coercion?",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if it's an error here",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (target != null) { // for in case it's not yet; but we are we don't know if there's an target",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'msg't know if there's an error here",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we are we don't know if there's an embedded compat address",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we are we can get new in case there's",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but do we are we don't know if there's an array",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (target != null) { // let's not yet; but we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but we can get new in case there's",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (target != null) { // let's not yet; should be assigned. Also declare the methods parameters as 'id't know if we can get new in case there's",
                "identical": false
            }
        ],
        "buggy_line": "if (target != null) {",
        "fixed_line": "if (target != null && target.getType() == Token.STRING) {"
    },
    "Jsoup-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" title\"};",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", this.title\"};",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final String[] preserveWhitespaceTags = {pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final String[] preserveWhitespaceTags = Wirepre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"P\"};",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final String[] preserveWhitespaceTags =haspre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" nickname\"};",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titlePaths;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" this.title\"};",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleCycle;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final String[] preserveWhitespaceTags = \";pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title24, \"title\"};",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" threshold\"};",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; //x00\";",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title.\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titlexFF;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" '+\"};",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"produ\"};",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final String[] preserveWhitespaceTags =primitivepre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \";",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", ERROR_MESSAGE);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"TITLE\"};",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final String[] preserveWhitespaceTags = \"[pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" sections\"};",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleLTA\"};",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleRe\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title potentially;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleDirection;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // : \"title\"};",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title filename\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" 7\"};",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final String[] preserveWhitespaceTags = foundpre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title shorten\"};",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title widget",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleLTA;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title violations;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"refresh\"};",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", 0, \"title\"};",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final String[] preservecontrolTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final String[] preserveWhitespaceTags = 1024pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"Clause\"};",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title)\" {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // NOSONAR",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", 1024;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title+)\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"up\"};",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleSampler;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"needs\"};",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleChanges;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" url\"};",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final String[] preserveWhitespaceTags =PROVIDERpre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final String[] preserve modeTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleWire;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title[2]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final String[] preserveWhitespaceTags = Handlepre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"interface\"};",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" ident\"};",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final String[] preserveWhitespaceTags = 30pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title square\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final String[] preserveInTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" getChildren\"};",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" PDF\"};",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleP;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final String[] preserveWhitespaceTags = Micropre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title){",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleAndroid;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title filename\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"editable\"};",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"handle\"};",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final String[] preserveWhitespaceTags = }).pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final String[] preserveWhitespaceTags =emberpre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"}\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleURSE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"Latency\"};",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"exit\"};",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final String[] preserveWhitespaceTags =][pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final String[] preserveWhitespaceTags = 11pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"p\"};",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" patient\"};",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final String[] preserveWhitespaceTags = Extractpre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // maximum length of \"title\"};",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleDirection\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final String[] preserveWhitespaceTags = 300pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final String[] preserveTypeTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title filename;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleFF;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleColumn;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleneeds\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title lowercase;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final String[] preserveWhitespaceTags =;\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final String[] preserveWhitespaceTags = quitepre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"Serialize\"};",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"Executed\"};",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" S\"};",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleURSE\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"substring\"};",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // [END_BUGGY] : \"title\"};",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final String[] preserveWhitespaceTags = 45pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"IN\"};",
                "identical": false
            }
        ],
        "buggy_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
        "fixed_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};"
    },
    "Jsoup-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"noframes\", \"title\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"category\", \"title\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + delegate\", \"title\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + properties;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \" '\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"ms\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"select\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"or\", \"title\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \" map\", \"title\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + username) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" longitude\", \"title\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + tb;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" map\", \"title\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"ELEMENT\", \"title\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"ms\", \"link\", \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"provider\", \"title\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"Magic\", \"title\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"NODE\", \"title\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"MSG\", \"title\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"Absolute\", \"title\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"Model\", \"title\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" fork\", \"title\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"ED\", \"title\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"ms\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"category\", \"title\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"change\", \"title\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + 1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"input\", \"title\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + current;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"title\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"select\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"ate\", \"title\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"a\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + server;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \" + html;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \" comments\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"select\", \"link\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"MSG\", \"title\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" sb\", \"title\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"getX\", \"title\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \" parent\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \" option\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"Element\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" false\", \"title\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENTS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + values;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"application\", \"title\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"Header\", \"title\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"e\", \"title\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" +xml;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"provider\", \"title\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"ate\", \"title\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + server + \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + year + \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + delegate\", \"title\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"category\", \"title\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"noframes\", \"title;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + height;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"Deserializer\", \"title\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \" parent\", \" + html;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \"n\", \"title\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"change\", \"title\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"ms\", \"link\", \"noframes\", \"title\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + namespaces;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + l;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"Model\", \"title\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" +)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"application\", \"title\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_IMPLEMENTED\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + c;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + resourceName;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + xml\", \"title\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" +slot;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + key + \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_VALUE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" +u;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_EMPTY;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \" subofFrequency\", \"title\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"\"));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"input\", \"title\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + ldom;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \" parent\", \" + html;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \"noframes\", \"title\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \" parent\", \" map\", \"title\")) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {",
        "fixed_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
    },
    "Jsoup-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return accum.toString().trim;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return accum.toString().trim();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return accum.toString;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return accum;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return accum.toString().trim()[0];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return accum.toString().trim();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return callbacks.toString().trim;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return delegate.toString;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return source.toString;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "returnConfiguration.toString;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return form.toString;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return form.toString().trim;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "returnOrientation.toString;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return(-1.toString;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "returninformation.toString().trim;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return(-1.toString().trim;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return MILLISECONDS.toString().trim;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return accum.toString().trimSpaces;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return accum.toString().trim);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return html;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "returnfragment.toString().trim();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return MILLISECONDS.toString().trim();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return node.toString;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return that.toString;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "returnfragment.toString().trim;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return callbacks.toString().trim();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "returntruncate.toString;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "returninformation.toString().trim();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return date.toString;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return visited.toString().trim;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return scaled.toString().trim;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return accum.toStringUTURE_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return MILLISECONDS.toString;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return resp.toString().trim();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "returnstar.toString().trim();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return accum.toString().trimyclable;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return req.toString().trim;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return scaled.toString;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return accum.toString()[0];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return outline.toString().trim;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "returnstar.toString;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return resp.toString;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return resp.toString().trim;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return accum.toString().trimmed;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "returnsquare.toString;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return visited.toString().trim();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return req.toString().trim();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return accum.toString().trim)FORM_URLENCODED;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return data.toString;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "returnNavigator.toString;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return body.toString;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "returnEmail.toString().trim;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return body.toString().trim;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return config.toString;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return accum.toString().trimED_NODE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "returnOrientation.toString().trim;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return f.toString;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return accum.toString().trim_QUOTED;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "returnfragment.toString;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return(-1.toString().trim();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "returnEmail.toString;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return accum.toString().trim)FORM_URROGATE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return delegate.toString().trim;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "returnConfiguration.toString().trim;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return accum.toString().trim)form;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return accum.toString().trim VALUE_TRANSITION;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return httpClient.toString;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return accum.toString().trim VALUE_TYPE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "returnNavigator.toString().trim;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return accum.toStringUTURE_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "returnstar.toString().trim;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return branches.toString;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return accum.toString().trim; // NOSONAR",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return accum.toString().trim)genConstants.outer;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "returnSymbol.NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return otherwise.toString;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return date.toString().trim;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return Conversion.toString;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return accum.toString().trimremoteAddress;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return adjacent.toString;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return accum.toString().trimBack;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "returninformation.toString;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return accum.toStringUTURE_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "returnSymbol.toString;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "returnMappings.toString;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return accum.toStringUTURE_FOR_outerORACLE;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return scope.toString;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return body.toString().trim();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "returnEmail.toString().trim();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return Program;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "returnSymbol.NULL;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return callbacks.toString;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return accum.toString().trim)_outer;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return accum.toString().trimED_MODE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "returnOrientation.toString().trim();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return f.toString().trim;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return accum.toString().trim; // since we don't get connection",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return adjacent.toString().trim;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return accum.toString().trim : accum;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return accum.toString().trim()}, EMPTY_ARRAY;",
                "identical": false
            }
        ],
        "buggy_line": "return accum.toString().trim();",
        "fixed_line": "return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();"
    },
    "Math-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this.ttValue;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return this.persistentValue;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return this.pname;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return this.emptyValue;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.exportedValue;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return this.lng(100).doubleValue;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return this.p90Value;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return this.heightValue;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return multiplyValue;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this.delegateValue;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this.pBeginValue;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return this.success(100).doubleValue;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return this.pitValue;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return this.subscriberValue;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return this.substit(100).doubleValue;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return this.ReplicasValue;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return this. EVENT(100).doubleValue;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return fractionValue;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this.ttS_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return this.tt;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return this. coerceValue;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return this.get fractionValue;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return this.leftValue;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return this.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return this.substitValue;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return this.pUREValue;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return this.controller(100).doubleValue;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this.pttValue;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this.permValue;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this. getLevelValue;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return multiply(100).doubleValue;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return this.substit(100;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return this.multValue;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return this.normalizedValue;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return this. NUMBERValue;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return this.pmessageValue;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return this.pABLEValue;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return this.arrayValue;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return this.RelativeValue;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return this.factorValue;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return this. recordingValue;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this.controller(100;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this.ttS_PERCENTAGE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return this.addedValue;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return this.credentialsValue;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return this.paddedValue;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return this.padValue;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this.pFinishedValue;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return this. ModValue;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return this. percentageValue;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this.ttS_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return this.0(100;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return this.searchValue;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return this.pResponseValue;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return this.targetValue;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return this.ttS_EXECUTION_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return this./1Value;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return this.CompValue;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return this.unnelValue;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return this.ttS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return this.pttS_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return this. AlwaysValue;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return this. emptyValue;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return this. matcherValue;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return this.persValue;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return this.StoredValue;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return this.ttS_EXECUTION_RESERVED_INDEX;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return this.adjValue;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return this.updatedValue;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return this.lrValue;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return this.ttS_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return this.lng(100;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return this. htmlValue;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return this.bucketValue;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return this.TranslationValue;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return this.ttS_PERCENTINEL;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return this.pS_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return this.scaledValue;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this.chunkValue;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return this.questionValue;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return this.ttS_EXECUTION_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return this. METValue;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return this. MessageValue;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return this.pnameValue;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return this.trinsicValue;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return this.ssValue;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return this.affectedValue;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return this.kindValue;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return this.joinedValue;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.mqValue;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return this.p1(100).doubleValue;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return this.offerValue;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return this.ttS;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return this.ttS_NOT_SET;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return this.DialogValue;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this.ttS_NOT_IMPFIRMATION;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this.ttS_NOT_IMPLEMENTEDGE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return this.ttS_PERCENTILES;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return this.tempValue;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return this.pS_EXECUTION_RESERVED_WORD;",
                "identical": false
            }
        ],
        "buggy_line": "return multiply(100).doubleValue();",
        "fixed_line": "return 100 * doubleValue();"
    },
    "Math-85": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (numIterations * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (numIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (numIterations * fb != 0.0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (element1 * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (numIterations * fb < 0.0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (initialValue * 0.0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (lowerIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (element1 * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (numIterations *\u03e4 > 0.0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (numIterations *traces > 0.0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (numIterations *\u4a76 > 0.0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (N * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (lowerIterations * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if ( imgIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (pluralIterations * 0.0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (blocked * 0.0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (numIterations * fb == 0.0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (gedIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (numIterations *!\" > 0.0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (numIterations * newIndex > 0.0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (numIterations * fb) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if ( projectName * 0.0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( ELSE * 0.0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (numIterations * polymorphism > 0.0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (nestedIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (numIterations * 0.0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (numIterations *\u432d >= 0.0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (traces * 0.0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (numIterations * ram > 0.0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (numIterations *=\"5\" > 0.0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (numIterations * onError > 0.0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (numIterations *natural > 0.0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (cache * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if ( ctrl * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (firstIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (numIterations * begins > 0.0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( ctrl * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (gedIterations * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( Requested * 0.0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (powers * 0.0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (role * 0.0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (x * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (yaml * 0.0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if ( labeled * 0.0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (throw * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (TEXT * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (numIterations * fb > 0.01) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (to * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (Sheet * 0.0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (attempt * 0.0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (400 * 0.0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( initIterations * 0.0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (stmt * 0.0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (canBe * 0.0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (oTime * 0.0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (=/ * 0.0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Tip * 0.0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if ( REMOVE * 0.0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( MediaStore * 0.0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if ( phantom * 0.0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( attrs * 0.0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (Existing * 0.0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (initialIterations * 0.0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( lookup * 0.0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( Category * 0.0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (Rot * 0.0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (ILE * 0.0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (initialValue >= 0.0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (\u5e1d * 0.0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (numIterations * fb >= 0.01) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (Trailing * 0.0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (provider * 0.0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ( lessThan * 0.0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( sender * 0.0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if ( scheme * 0.0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if ( toString * 0.0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( difficult * 0.0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if ( sample * 0.0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (ec * 0.0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if ( Mig * 0.0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (OTO * 0.0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (ptr >= 0.0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (subs * 0.0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (save * 0.0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (Languages * 0.0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (edData * 0.0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (\u059c * 0.0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (akes * 0.0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( parameterIndex * 0.0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (numIterations * 3) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (\")[0]. * 0.0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (shared * 0.0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (per * 0.0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (months * 0.0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (positive * 0.0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( InetAddress * 0.0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if ( init * 0.0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( initial * 0.0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( createUser * 0.01) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( hd * 0.0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (fa * fb >= 0.0 ) {",
        "fixed_line": "if (fa * fb > 0.0 ) {"
    },
    "Math-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (entry.compareTo(localDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (entry.compareTo(offs, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (entry.compareTo(toDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (entry.compareTo(loadDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps > 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (entry.compareTo(offs, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (entry.compareTo(localDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (entry.compareTo(si, entry, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (entry.compareTo(column, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (entry.compareTo(mask, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (entry.compareTo(publicKey, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (entry.compareTo(nrOfDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (entry.compareTo(A, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (entry.compareTo(toDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (entry.compareTo(cascadeOfDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (entry.compareTo(synchronVariableName, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (entry.compareTo(loadDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (entry.compareTo(mask, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (entry.compareTo(BASIC, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (entry.compareTo(this.start,Precision, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (entry.compareTo(DEPLOYMENT_NAME, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (entry.compareTo(si, entry, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (entry.compareTo(content, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (entry.compareTo(si, entry, 0d, maxUlps > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (entry.compareTo(this.system, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (entry.compareTo(source,Precision, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (entry.compareTo(synchronVariableName, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (entry.compareTo(DEPLOYMENT_NAME, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (entry.compareTo(BASIC, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (entry.compareTo(this.start, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (entry.compareTo(content, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (entry.compareTo(this.P, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (entry.compareTo(canVariableName, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (entry.compareTo(newDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (entry.compareTo(this.route, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (entry.compareTo(offs, entry, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (entry.compareTo(publicKey, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (entry.compareTo( live, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (entry.compareTo(d, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (entry.compareTo(column, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (entry.compareTo(earliest_PATTERN, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (entry.compareTo(system,unit, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (entry.compareTo( newsps, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (entry.compareTo(A, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (entry.compareTo( WRITE, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (entry.compareTo(this.SHORT, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (entry.compareTo(complete, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (entry.compareTo( Extractps, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (entry.compareTo( Matchingps, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (entry.compareTo(complete,Precision, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (entry.compareTo(cascadeOfDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (entry.compareTo(loadDrop, entry, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (entry.compareTo(BASIC, entry, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (entry.compareTo(INTEGER, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (entry.compareTo(nrOfDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (entry.compareTo(systemToDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (entry.compareTo(d, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (entry.compareTo(20OfDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (entry.compareTo( /*ps, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (entry.compareTo(this.route, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (entry.compareTo(('d, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (entry.compareTo(this.EDITOR, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (entry.compareTo( Extractps, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (entry.compareTo(INTEGER, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (entry.compareTo(A,Precision, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (entry.compareTo(DEPLOYMENT_NAME, 0d, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (entry.compareTo(e, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (entry.compareTo(span,Precision, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (entry.compareTo(Voiceps, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (entry.compareTo(Paint_NAME, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (entry.compareTo(complete, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (entry.compareTo(localDrop, entry, maxUlps > 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (entry.compareTo(source,Precision, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (entry.compareTo(localDrop, entry, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (entry.compareTo(BASIC, entry, 0d, maxUlps > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (entry.compareTo(system,unit, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (entry.compareTo(si, entry, 0d, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (entry.compareTo(column, 0d, maxUlps > 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (entry.compareTo(system, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (entry.compareTo(props, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (entry.compareTo(e, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (entry.compareTo(complete,Precision, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (entry.compareTo(A, 0d, maxUlps > 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (entry.compareTo(localDrop, entry, maxUlps) < 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (entry.compareTo(complete, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps) < 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (entry.compareTo(complete,Precision, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (entry.compareTo(complete,Precision, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (entry.compareTo( /*ps, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (entry.compareTo(earliest_PATTERN, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (entry.compareTo( column, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (entry.compareTo(chunk, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (entry.compareTo(Pd, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (entry.compareTo(A,Precision, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (entry.compareTo(off, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (entry.compareTo( WRITE, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (entry.compareTo(BASIC, entry, 0d, maxUlps) == 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",
        "fixed_line": "if (Precision.compareTo(entry, 0d, epsilon) > 0) {"
    },
    "Time-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "instantLocal, chrono,itsPivotYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "instantLocal, chrono, clauses, iPivotYear);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "instantLocal, chrono, Party, idPivotYear);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "instantLocal, chrono, iLocale,BEPivotYear);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "instantLocal, chrono, cmp, iPivotYear);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "instantLocal, chrono, date, iPivotYear);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "instantLocal, chrono, Party, iPivotYear);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "instantLocal, chrono,\u0a35Year, iPivotYear);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "instantLocal, chrono,Spacing, iPivotYear);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "instantLocal, chrono, zeYear, iPivotYear);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "instantLocal, chrono, bucket, iDefaultYear);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "instantLocal, chrono,tedYear, date, iPivotYear);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "instantLocal, chrono,.8Year, iPivotYear);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "instantLocal, chrono,ines, iPivotYear);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "instantLocal, chrono, hostName, iLocaleYear);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "instantLocal, chrono, BUYear, iPivotYear);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "instantLocal, chrono, iLocale, myYear);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "instantLocal, chrono, iLocale,ivotYear);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "instantLocal, chrono, enclosing, instantLocal, iDefaultYear);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "instantLocal, chrono, hostName, iPivotYear);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "instantLocal, chrono, 10, iLocale,BEPivotYear);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "instantLocal, chrono, date, iLocale,CENTER);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "instantLocal, chrono, nodeLocale,ivotYear);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "instantLocal, chrono, clauses, iDefaultYear);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "instantLocal, chrono, ids, iLocaleYear);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "instantLocal, chrono, clauses, vDefaultYear);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "instantLocal, chrono,quantity, instantLocal);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "instantLocal, chrono, 10, iLocale, bindings);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "instantLocal, chrono, getAddressYear, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "instantLocal, chrono, iLocale, `Year);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "instantLocal, chrono, date, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "instantLocal, chrono,itsPivotYear, deltaY);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "instantLocal, chrono, 10, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "instantLocal, chrono, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "instantLocal, chrono, iLocale,assandraYear);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "instantLocal, chrono, clauses, nullLocaleYear);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "instantLocal, chrono,instantiationTypes,ivotYear);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "instantLocal, chrono,NaNYear, iDefaultYear);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "instantLocal, chrono,zoomLocale, 0, 1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "instantLocal, chrono,zoomFactor, instantLocal, iDefaultYear);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "instantLocal, chrono, getAddressYear, iLocale,BEPivotYear);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "instantLocal, chrono, sentence, fineYear);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "instantLocal, chrono, 10, iLocale, piece);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "instantLocal, chrono, iLocale, bindings);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "instantLocal, chrono, iLocale, retrofit);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "instantLocal, chrono,tedYear, date, iDefaultYear);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "instantLocal, chrono, enclosing, instantLocal);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "instantLocal, chrono, iLocale, templateName);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "instantLocal, chrono,LF,ipYear);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "instantLocal, chrono, 10, iLocale,CENTER);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "instantLocal, chrono, getAddressYear, iLocale, 1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "instantLocal, chrono,iprot, jLocaleStr);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "instantLocal, chrono, iLocale, Des);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "instantLocal, chrono, addressLocale, deltaY);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "instantLocal, chrono,pinYear, 1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "instantLocal, chrono, clauses, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "instantLocal, chrono, clauses, lowest, instantLocal);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "instantLocal, chrono, iLocale,CENTER);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "instantLocal, chrono, zeYear, iLocale,BEPivotYear);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "instantLocal, chrono, iLocale, parser);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "instantLocal, chrono, zeYear, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "instantLocal, chrono, iLocale,UTC);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "instantLocal, chrono,\u0a35Year, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "instantLocal, chrono, 10, iLocale,Poly);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "instantLocal, chrono,zoomFactor, instantLocal, vDefaultYear);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "instantLocal, chrono, imhLocale, deltaY);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "instantLocal, chrono, iLocale, PleaseYear);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "instantLocal, chrono,768Year, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "instantLocal, chrono, getAddressYear, iLocale, parser);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "instantLocal, chrono,itsLocale, instantLocal);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "instantLocal, chrono, 10, iLocale, this.randomYear);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "instantLocal, chrono, getAddressYear, iLocale, payload);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "instantLocal, chrono, agg, iLocaleYear);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "instantLocal, chrono,pinYear, parser);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "instantLocal, chrono, 10, iLocale, blockLength);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "instantLocal, chrono, clauses, iLocale, payload);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "instantLocal, chrono,itsPivotYear, locale);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "instantLocal, chrono, 0, 0);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "instantLocal, chrono, iLocale, piece);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "instantLocal, chrono, zeYear, iLocale, payload);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "instantLocal, chrono,zoomLocale, 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "instantLocal, chrono, listStyleType, maxAvailableWidth, iDefaultYear);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "instantLocal, chrono, date, iLocale, this.randomYear);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "instantLocal, chrono, clauses, iLocale, blockLength);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "instantLocal, chrono, 10, iLocale, my);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "instantLocal, chrono, zeYear, iLocale, parser);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "instantLocal, chrono, 10, iLocale, this.createPos);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "instantLocal, chrono, clauses,hLocale, deltaY);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "instantLocal, chrono, date, iLocale, 1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "instantLocal, chrono,ines, iLocale,CENTER);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "instantLocal, chrono, clauses, iLocale, parser);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "instantLocal, chrono,\u0a35Year, iLocaleStr);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "instantLocal, chrono,zoomLocale,Parameters);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "instantLocal, chrono, BUYear, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "instantLocal, chrono,768Year, iLocale, parser);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "instantLocal, chrono, 10, 13 : 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "instantLocal, chrono, 10, iLocale, myYear);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "instantLocal, chrono, 10, iLocale, this.randomCount;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "instantLocal, chrono, 10, iLocale, blockOffset);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "instantLocal, chrono, zeYear, iLocale, viewDefaultYear);",
                "identical": false
            }
        ],
        "buggy_line": "instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);",
        "fixed_line": "instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));"
    },
    "Math-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (MathUtils.compareTo(entry, rhs, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (MathUtils.compareTo(right, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (MathUtils.compareTo(totalRatio, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (MathUtils.compareTo(zoom, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (MathUtils.compareTo(rows, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (MathUtils.compareTo(right, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (MathUtils.compareTo(template, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (MathUtils.compareTo(entry, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (MathUtils.compareTo(location, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (MathUtils.compareTo(totalBytes, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (MathUtils.compareTo(entry, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (MathUtils.compareTo(keys, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) > 0) {",
                "identical": true
            },
            {
                "k": 18,
                "patch": "if (MathUtils.compareTo(location, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (MathUtils.compareTo(types, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (MathUtils.compareTo(file, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (MathUtils.compareTo(owner, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (MathUtils.compareTo(erializer, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (MathUtils.compareTo( types, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (MathUtils.compareTo( '/, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (MathUtils.compareTo(lause, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (MathUtils.compareTo(INT, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (MathUtils.compareTo(vert, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (MathUtils.compareTo(keys, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (MathUtils.compareTo(erializer, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (MathUtils.compareTo(lowest, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) <= 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (MathUtils.compareTo( lines, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (MathUtils.compareTo(location, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (MathUtils.compareTo(INT, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (MathUtils.compareTo(CurrentPos, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (MathUtils.compareTo(shape, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (MathUtils.compareTo( lines, rhs, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (MathUtils.compareTo(entry, rhs, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (MathUtils.compareTo( zf, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (MathUtils.compareTo(Track, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (MathUtils.compareTo( zf, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (MathUtils.compareTo( zf, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (MathUtils.compareTo( 6:, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (MathUtils.compareTo(right, rhs, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (MathUtils.compareTo(right, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (MathUtils.compareTo(keys, 1, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (MathUtils.compareTo(Mail, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (MathUtils.compareTo(entry, rhs, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (MathUtils.compareTo(erializer, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (MathUtils.compareTo(entry, count > 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (MathUtils.compareTo( Delay, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (MathUtils.compareTo(location, 1, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (MathUtils.compareTo(entry, 1, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (MathUtils.compareTo(rhs, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (MathUtils.compareTo( getBit, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) && epsilon > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (MathUtils.compareTo(block, rhs, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (MathUtils.compareTo(distance, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (MathUtils.compareTo(start, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (MathUtils.compareTo( '/, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (MathUtils.compareTo( findRatio, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (MathUtils.compareTo(location, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (MathUtils.compareTo(low, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (MathUtils.compareTo(template, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (MathUtils.compareTo(raw, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (MathUtils.compareTo(rows, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (MathUtils.compareTo( types, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (MathUtils.compareTo( BI, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (MathUtils.compareTo(keys, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (MathUtils.compareTo(entry, count >= 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (MathUtils.compareTo(distance, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (MathUtils.compareTo(normal, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (MathUtils.compareTo(erializer, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (MathUtils.compareTo(response, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (MathUtils.compareTo( getMethod, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (MathUtils.compareTo(entry, block) >= 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (MathUtils.compareTo(file, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (MathUtils.compareTo(rhs, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (MathUtils.compareTo(lause, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (MathUtils.compareTo(start, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (MathUtils.compareTo(section, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (MathUtils.compareTo(distance, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (MathUtils.compareTo(span, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (MathUtils.compareTo(US, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (MathUtils.compareTo(Track, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (MathUtils.compareTo(right, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (MathUtils.compareTo(right, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (MathUtils.compareTo(scheme, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (MathUtils.compareTo(rows, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (MathUtils.compareTo( leap, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) < 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (MathUtils.compareTo(WIDTH, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (MathUtils.compareTo(origin, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (MathUtils.compareTo(nodes, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) <= 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) && epsilon;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (MathUtils.compareTo(types, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (MathUtils.compareTo( cr, 1, rhs) >= 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
        "fixed_line": "if (MathUtils.compareTo(entry, 0, epsilon) > 0) {"
    },
    "Closure-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "Context rhsContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Context rhsContext = Context.OTHER; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Context rhsContext = Context.OTHER_KEY;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but also check the next one",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Context rhsContext = Context.OTHER; // apply lazy how much was already added, but let's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // apply lazy delta groupId, but also check the next one",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet bother",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Context.OTHERContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw'",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' characters",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's used for now, but let's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not yet bother",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet skipped",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yetCANCE with the next one",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' nulls but also check the next one",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not yet skipped",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Context.Context = Context.OTHER;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ContextExprContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet read",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Context rhsContext = Context.OTHER; // apply lazy how much was already added, but let's not yet bother",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Context. lContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet, but this method",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' nulls but this method",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure it's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not found",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yet bother",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yetcc",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw'",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Context rhsContext = Context.Range;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't how much was already added.",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Context rhsContext = Context.OTHER; // apply lazy how much was already added, but let's not store 'raw' characters",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw'T getExpr",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet supported",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but also check the next one?",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yetCANCE with the next one",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't support!",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw'annotated than use the next one",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not yet method",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yet method",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's used for now, but let's not yet bother",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not store 'raw'",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yet bother",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's used below",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Context. rhsContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yetchars, but also check the next one",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ContextContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw'annotated the next one",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's get day by default",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Context canContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's used for now, but let's not store 'raw' characters",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yet",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet parsed at the next one",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yetchars, but this method",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Context rhsContext = Context.OTHER; // apply lazy how much was already added, but let's not yet skipped",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yet read",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Context.StrContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Context thContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Context rhsContext = Context.OTHER_BINDINGS;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not store 'raw' characters",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't how much was already miss the",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Context rhsContext = Context.OTHER; // apply lazy how much was already added, but let's not yet",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' + 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not yet",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not store 'raw'T getExpr",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw'T get day by default",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Context rhsContext = Context.USER;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not store 'raw'",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw'T getExpr",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yet skipped",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet input",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Context rhsContext = Context. maxAvailableWidth;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Context iterableContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's get 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store the methods parameters",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yet",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Context rhsContext = Context.OTHER_WITH_PREVIOUS;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there'schnell 2",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but also check the end of record;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yet supported",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw' characters",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's used for now, but let's not yet skipped",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not a timestamp...",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's get day by default",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not yet supported",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's used for now, but let's not yet",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Context rhsContext = Context.START;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not yetcc",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yetINDEX, but this method",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yetCANCE with the next one",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't get day by default",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yet method",
                "identical": false
            }
        ],
        "buggy_line": "Context rhsContext = Context.OTHER;",
        "fixed_line": "Context rhsContext = getContextForNoInOperator(context);"
    },
    "Codec-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 5,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 7,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'class",
                "identical": false
            },
            {
                "k": 9,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\"););",
                "identical": false
            },
            {
                "k": 10,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // automatic for FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '?)",
                "identical": false
            },
            {
                "k": 12,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'builder.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!",
                "identical": false
            },
            {
                "k": 14,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'point",
                "identical": false
            },
            {
                "k": 15,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'msg'",
                "identical": false
            },
            {
                "k": 16,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '12",
                "identical": false
            },
            {
                "k": 17,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 18,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'json",
                "identical": false
            },
            {
                "k": 19,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'bpmn20.xml",
                "identical": false
            },
            {
                "k": 20,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\";",
                "identical": false
            },
            {
                "k": 21,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'msg' characters",
                "identical": false
            },
            {
                "k": 23,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'project",
                "identical": false
            },
            {
                "k": 24,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'DIRECT",
                "identical": false
            },
            {
                "k": 25,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include'",
                "identical": false
            },
            {
                "k": 26,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; //SMALL not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' points",
                "identical": false
            },
            {
                "k": 28,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '=')",
                "identical": false
            },
            {
                "k": 29,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 30,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' sanity check",
                "identical": false
            },
            {
                "k": 31,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parametersen",
                "identical": false
            },
            {
                "k": 32,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // way",
                "identical": false
            },
            {
                "k": 33,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' \";",
                "identical": false
            },
            {
                "k": 34,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '('",
                "identical": false
            },
            {
                "k": 35,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key",
                "identical": false
            },
            {
                "k": 36,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' eff'",
                "identical": false
            },
            {
                "k": 37,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '",
                "identical": false
            },
            {
                "k": 38,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' write characters",
                "identical": false
            },
            {
                "k": 39,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'ln",
                "identical": false
            },
            {
                "k": 40,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 42,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'version'",
                "identical": false
            },
            {
                "k": 43,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: awhat not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'msg' write characters",
                "identical": false
            },
            {
                "k": 45,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key3",
                "identical": false
            },
            {
                "k": 46,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'keyviews",
                "identical": false
            },
            {
                "k": 47,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'old version",
                "identical": false
            },
            {
                "k": 48,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key2",
                "identical": false
            },
            {
                "k": 49,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' characters",
                "identical": false
            },
            {
                "k": 50,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '\").",
                "identical": false
            },
            {
                "k": 51,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'msg",
                "identical": false
            },
            {
                "k": 52,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw'",
                "identical": false
            },
            {
                "k": 53,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include' write characters",
                "identical": false
            },
            {
                "k": 54,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'group",
                "identical": false
            },
            {
                "k": 55,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'YEAR",
                "identical": false
            },
            {
                "k": 56,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'keyByQuery",
                "identical": false
            },
            {
                "k": 57,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include' characters",
                "identical": false
            },
            {
                "k": 58,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Selector",
                "identical": false
            },
            {
                "k": 59,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'finalAlias;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'class",
                "identical": false
            },
            {
                "k": 61,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final way",
                "identical": false
            },
            {
                "k": 62,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key Unicode",
                "identical": false
            },
            {
                "k": 63,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'media",
                "identical": false
            },
            {
                "k": 64,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' UUID",
                "identical": false
            },
            {
                "k": 65,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'projectName",
                "identical": false
            },
            {
                "k": 66,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // \";",
                "identical": false
            },
            {
                "k": 67,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'body'",
                "identical": false
            },
            {
                "k": 68,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'calendar'",
                "identical": false
            },
            {
                "k": 69,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suffix' characters",
                "identical": false
            },
            {
                "k": 70,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'options",
                "identical": false
            },
            {
                "k": 71,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'ename",
                "identical": false
            },
            {
                "k": 72,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'finalAlias",
                "identical": false
            },
            {
                "k": 73,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'browse/generate",
                "identical": false
            },
            {
                "k": 74,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '(';",
                "identical": false
            },
            {
                "k": 75,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' getColor'",
                "identical": false
            },
            {
                "k": 76,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suffix'",
                "identical": false
            },
            {
                "k": 77,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Variables",
                "identical": false
            },
            {
                "k": 78,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'MEDIA;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' ,",
                "identical": false
            },
            {
                "k": 80,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' getColor' characters",
                "identical": false
            },
            {
                "k": 81,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key version",
                "identical": false
            },
            {
                "k": 82,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'json'",
                "identical": false
            },
            {
                "k": 83,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key M",
                "identical": false
            },
            {
                "k": 84,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key True",
                "identical": false
            },
            {
                "k": 85,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'json' characters",
                "identical": false
            },
            {
                "k": 86,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'oough",
                "identical": false
            },
            {
                "k": 87,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'projectId",
                "identical": false
            },
            {
                "k": 88,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key",
                "identical": false
            },
            {
                "k": 89,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'has",
                "identical": false
            },
            {
                "k": 90,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'A M",
                "identical": false
            },
            {
                "k": 91,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'qualifiedName",
                "identical": false
            },
            {
                "k": 92,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Aough.",
                "identical": false
            },
            {
                "k": 93,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'SON-generate",
                "identical": false
            },
            {
                "k": 94,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'projectName",
                "identical": false
            },
            {
                "k": 95,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key3",
                "identical": false
            },
            {
                "k": 96,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'SHOW inverse",
                "identical": false
            },
            {
                "k": 97,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'msg/\"",
                "identical": false
            },
            {
                "k": 98,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 99,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' eff' characters",
                "identical": false
            },
            {
                "k": 100,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Cached' characters",
                "identical": false
            }
        ],
        "buggy_line": "txt = txt.replaceAll(\"^mb\", \"m2\");",
        "fixed_line": "txt = txt.replaceAll(\"mb$\", \"m2\");"
    },
    "Jsoup-47": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (inAttribute) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (inObject) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (intracing) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (inOrStatement) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (inES) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (intraces) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (inQUERY_REQUEST) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (inA) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (inCase) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (inAttribute)().inAttribute) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (inclz) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (inTaskId) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_CLOSED;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (inCaseWhen) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (inObjectKey) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (inAttribute) throw e;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (inAttribute) object;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (inAttribute)Corner_this.inAttribute) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (inclusive) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (inMon) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (this.inAttribute) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (inAttribute) buf;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (inAttribute)al_MESSAGE_PROPERTY;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (inAttribute) bytes;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (inAttribute) objectNode;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (inspans) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (inapiKey) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (inObject e) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (inPostgres) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (inArray) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (inAttribute)al_MATCHING_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (inAttribute) 0x05) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (in})) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (inAttribute)al_&lt;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (inAttribute) char;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (inAttribute) SEMUTATED;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (inAttribute) SEMUTURE_EVENT_PROCESSOR_CLOSED;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (inChecks) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (_inAttribute) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (inObject) buf;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (inviewType) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (inAttribute) start_MESSAGE_PROPERTY;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (inAttribute) throw e.inAttribute;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (in taskService) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (inOwner) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (inAttribute) start_converted) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (inAttribute)googleResolve) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (inAttribute)al_PROCESSOR_INFO;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (in exp) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (inAad) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (inAttribute) charof-inAttribute;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (inAttribute) 5) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (inlocal) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (in ch) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (inObjectMissing) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_NESTED_CLOSED;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSEMBEDDED_CLOSED;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (inAttribute) SEGMENT_URER_EVENT_PROCESSOR_CLOSED;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (inAttribute) SEGMENT_URROGATE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (in Color) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (inaccum) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_INFO;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (inWith) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (inObjectBefore) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (inAttribute)umulator;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_this.inAttribute;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (inAttribute)al_hashMask) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (ingreater) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (inAttribute)Descriptor;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (inAttribute)al_targetType.inAttribute;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (inAttribute)al_MESSAGE_ID;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (inAttribute) objectLeafAllowed) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (inAttribute)\\\\rappingal) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (intr) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (inAttribute)URER_EVENT_PROCESSOR_INFO;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (inAttribute) != accum.COMMA) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (inview) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (inheading) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_GROUP;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (inAttribute)URER_EVENT_PROCESSOR_CLOSED;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (inAttribute) callback_URER_EVENT_PROCESSOR_CLOSED;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (inAttribute)REQUEST_URING_DEGATE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_POINT;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_DELIMITER;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (inAttribute) != accum. inAttribute) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (inedBy) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (inAttribute)al_GATE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (ingzip) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (inAttribute) htmlForm.inAttribute) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_UNKNOWN;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (inAttribute) == '-') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (inAttribute) != accum.MESSAGE_PROPERTY) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_XML;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_CONNECTION;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (inAttribute)URER_MESSAGE_PROPERTY;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (inAttribute)Corner_this.inAttribute;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_ hi;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (inAttribute) additionalProperties;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (inAttribute) SEMICOLATION_EVENT_PROCESSOR_DEFINITION_ID;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (inAttribute)URLENATION_EVENT_PROCESSOR_CLOSED;",
                "identical": false
            }
        ],
        "buggy_line": "if (!inAttribute)",
        "fixed_line": "if (!inAttribute || escapeMode == EscapeMode.xhtml)"
    },
    "Closure-67": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (n.GETPROP_NAME) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (n.GETPROP_KEY) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (n.GETPROP_GENERATE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (n.GETPROP_DESC) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (n.GETPROP_INFO) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (n.GETPROP_SPACES) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (n.GETPROP_TYPE) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (n.GETPROP_GENERATES) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (n.GETPROP_VIEW) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (n.GETPROP_nodes) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (n.GETPROP_RESERVED) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (n.GETPROP_NAME;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (n.GETPROP_PROPERTY) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (n.GETPROP_reset) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (n.GETPROP_MODEL_KEY) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (n.GETPROP_UNKNOWN) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (n.GETPROP_laced) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (n.GETPROP_WITHINLINE) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (n.GETPROP_NAMED_CONNECTION) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (n.GETPROP;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (n.GETPROP_backgroundColor) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (n.GETPROP_STRICT_RESERVED) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (n.GETPROP_APPRODUCTION_MODE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (n.GETPROP_EXPRESSION) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (n.GETToSimpleAssign) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (n.GETPROP_Icon) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (n.GETPROP_PREFIXEDG options) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (n.GETPROP_EXECUTION) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (n.GETPROP_forSerialization) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (n.GETPROP_MESSAGE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (n.isVarOrSimpleAssign) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (n.GETPROP_Deser) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (n.GETPROP_numberOfMSSQL) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (n.GETPROP_NAMED_UNKNOWN) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (n.GETPROP_LOGGED) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (n.GETPROP_LABEMBEDDED) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (n.GETPROP_numberOfBoolean) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (n.GETPROP_URI) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (n.GETPROP_INLINE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (n.GETPROP_SPACE) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (n.GETPROP_numberOfDeath) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (n.GETPROP_INSTANCES) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (n.GETPROP_NAMED_ADDRESS) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (n.GETPROP_NAMED_MESSAGE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (n.GETPROP_ELEMENTS) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (n.GETPROP_CONNECTIONS) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (n.GETPROP_HASH) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (n.GETPROP_cast) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (n.GETPROP_MAPPINGS) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (n.GETPROP_NAMED_KEY) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (n.GETPROP_NODE) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (n.GETPROP_GENERATOR_KEY) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (n.GETPROP_PROCESS) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (n.GETPROP_NAMED_VIEW) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (n.GETPROP_INSTANCE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (n.GETPROP_IDENTIFIER_LOCATION) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (n.GETPROP_CONNECTION) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (n.GETPROP_INFOATION) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (n.GETPROP_Users_KEY) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (n.GETPROP_Box) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (n.GETPROP_id) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (n.GETPROP_LABELED) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (n.GETPROP_IDENTIFIER_NAME) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (n.GETPROP_APTERS) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (n.GETPROP_RESOLATION) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (n.GETPROP_ foundS) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (n.GETPROP_ fieldIdS) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (n.GETPROP_UUID) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (n.GETPROP_NAMED_APTERS) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (n.GETPROP_NAMED_VALUE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (n.GETPROP_NAMED_CONNECTIONS) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (n.GETPROP_numberOfPlayers == 2) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (n.GETPROP_Indexed) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (n.GETPROP_PREFIXEDGATE) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (o.GETPROP_NAME) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (n.GETPROP_numberOfPlayers) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (n.GETPROP_ foundShs) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (n.GETPROP_ID;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (n.GETPROP_SOURCE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (n.GETPROP_DONE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (n.GETPROP_PREFIXED) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (n.GETPROP_GENERATED) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (n.GETPROP_transformer) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (n.GETPROP_buf) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (n.GETPROP_ 255) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (n.GETPROP_CLASS) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (n.GETPROP_NAMED_CLASS) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (n.GETPROP_LABEMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (n.GETPROP_DIRECT) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "while (n.GETPROP_KEY) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (n.GETPROP_ EVENTS) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (n.GETPROP_MAP) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (n.GETPROP_MODEL_DELIMITER) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (n.GETPROP_Phs) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (n.GETPROP_}) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (n.GETPROP_numberOfMULATION) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (n.GETPROP_ == 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (n.GETPROP_GMENT) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (n.GETPROP_NAMED_NODE) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (n.GETPROP_SNAPSHOT) {",
                "identical": false
            }
        ],
        "buggy_line": ") {",
        "fixed_line": "&& assign.getParent().getType() == Token.EXPR_RESULT) {"
    },
    "Math-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "ret = (Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits -rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ret = (Double.doubleToRawLongBits(rhs) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len) <= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ret = (Double.doubleToRawLongBits(rhs) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsNamespace) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ret = (Double.doubleToRawLongBits(rhs) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits != Double.doubleToRawLongBits) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits(rhs.getImaginary;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - len) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits.\" + Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits : Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) / Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - len) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1 + Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1, Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 10, Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & len) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits << Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal())) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ret = (Double.doubleToRawLongBits -real) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsNamespace) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ret = (1Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsMONTH) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1 >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - len) / Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits | Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits).doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits <= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ret = (Double.doubleToRawLongBits -rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsRing) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits >> Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & 0xff.getImaginary;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ret = (Double.doubleToRawLongBits <= Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits slot) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits(rhs.getImaginary()));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits bucket) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsNamespace) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsNamespace && Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ret = (Double.doubleToRawLongBits(rhs) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits -= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits bucket) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsNamespace && Double.doubleToRawLongBits != Double.getImaginary;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & 0L) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1 == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ret = (Double.doubleToRawLongBitsLATIN || previous.doubleToRawLongBits.getRealaginary) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits != Double.doubleToRawLongBits) : Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - distance.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - user.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & 0x02) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsUrls) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & 0L, Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & 0L) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ret = (1Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ret = (Double.doubleToRawLongBitsLUS) != Double.doubleToRawLongBits -rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ret = (1 << Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsRing && Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsplay.doubleToRawLongBits)) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ret = (Double.doubleToRawLongBitsLTRLongBits(rhs.doubleToRawLongBits)) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits(rhs.getImaginary {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits(rhs.getImaginary(1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & 0L, Double.doubleToRawLongBits) != Double.getImaginary;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + 1 - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & Double.doubleToRawLongBits) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits \"imaginary) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsNamespace && Double.doubleToRawLongBits != Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ret = (Double.doubleToRawLongBitsLATINKBits(rhs.doubleToRawLongBits)) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits0, rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits <= Double.getImaginary;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ret = (Double.doubleToRawLongBitsPOS && Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits{",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits != Double.doubleToRawLongBits)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits -rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ret = (Double.doubleToRawLongBitsL << Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            }
        ],
        "buggy_line": "ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));",
        "fixed_line": "ret = (real == rhs.real) && (imaginary == rhs.imaginary);"
    },
    "Closure-73": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c > 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c > 0x1f || c == 0x7f) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c <= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c > 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // tiny/short ASCII",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c > 0x0f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // tiny",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c > 0x1f || c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty instance",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty -1",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c != 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop...",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c < 0x1f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty line is nope",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c == 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all...",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all then we support such coercion?",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c >= 0x0f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c >= 0x1f && c <= 0x7f) { //Clause",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure or partial",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all done with nope",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all ASCII",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // 13 or partial",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure this is nope",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop; nope",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure this is removed",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // tiny/short ASCII",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty name is nope",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure is nope",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c >= 0x1f && c <= 0x7f;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c > 0x1f && c <= 0x7f) { // over max?",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make empty line is nope",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can this ever occur?",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // tiny",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make empty instance",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all then",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all types",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c <= 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c > 0x1f && c <= 0x7f) { // tiny/short ASCII",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make sure or partial",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // [JACKSON-case letter means we can this ever occur?",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // [databind#116]",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty name",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make empty -1",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all?",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all done with 0x0800 - 0x7f",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // [JACKSON-case letter means we can get null",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // over max?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // or partial",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make sure all done with nope",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty name; nope",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make sure all then we support such coercion?",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty can do a tight inner loop; nope",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c < 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make sure this is nope",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty value",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c >= 0x1f && c <= 0x7f){",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // [ or partial",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (c >= 0x1f && c <= 0x7f) { //Corner the end of content",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty Empty is nope",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c > 0x1f && c <= 0x7f) { // If so, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure this is first",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // [JACKSON-case letter means we can do a tight inner loop;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all unmatched first",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make sure this is removed",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty name, nope",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop...",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c > 0x1f && c <= 0x7f) { //Clause",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c >= 0x1f && c <= 0x7f - 1) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c > 0x1f && c <= 0x7f) { // If so make sure all then we support such coercion?",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all elements schema",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c > 0x1f && c == 0x7f) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // [JACKSON-case letter means we can this is nope",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // expected case",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If it is nope",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make sure all ASCII",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c < 0x1f || c == 0x7f) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all unmatched first, nope",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c > 0x1f && c <= 0x7f) { // 13 or partial",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // include or partial",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If it is a marker",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty this is nope",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // [JACKSON-case letter means we can get -1",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all elements show up without scrollbar",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c > 0x1f && c <= 0x7f) { // If so make sure all done with nope",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // [JACKSON-case letter means we can dosing",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make sure all...",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // token",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c > 0x1f && c <= 0x7f) { // If so make empty instance",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // 6 or partial",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty flush...",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make sure is nope",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all then we don't been discovered yet",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c > 0x1f && c <= 0x7f) { // If so make sure or partial",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // [JACKSON-case letter means we can get nope",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // [JACKSON-case letter means we can this is removed",
                "identical": false
            }
        ],
        "buggy_line": "if (c > 0x1f && c <= 0x7f) {",
        "fixed_line": "if (c > 0x1f && c < 0x7f) {"
    },
    "JacksonDatabind-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (previous != null) || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (previous != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (previous != null) || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (previous != null && previous.equals(ann;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (previous == null) || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (previous == null) || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (previous != null && previous.equals(ann) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (previous != null) && previous.equals(ann;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (previous != null) && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (previous == null || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (previous != null && previous.equals(ann) || _value.equals(previous;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (previous == null || previous.equals(ann) || _annotations;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (previous != null && previous.equals(ann)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (previous != null && previous.equals(ann) || _annotations;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (previous == null || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (previous == null || previous.equals(ann) || _value.equals(previous;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (previous != null && previous.equals(ann) || _new.ann;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (previous == null || previous.equals(ann) || _next.equals(ann;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (previous != null && previous.equals(ann) || _field.equals(previous;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (previous != null && previous.equals(_ann);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (previous != null && previous.equals(ann) || _next.equals(ann;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (previous != null && previous.equals(ann), _annotations;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (previous != null && previous.equals(ann) || _secondary.equals(previous;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (previous != null) || previous.equals(_ann;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (previous != null && previous.equals(ann) || _value;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (previous != null && previous.equals(ann) _annotations;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (previous != null && previous.equals(ann) || _convert.equals(previous;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (previous != null && previous.equals(ann) || _tokens.equals(previous;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (previous != null && previous.equals(ann, _annotations);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (previous != null && previous.equals(ann) || _working.equals(previous;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (previous != null && previous.equals(ann) || _comp;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (previous == null || previous.equals(ann) || _objectId.equals(previous;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (previous == null || previous.equals(ann) || _new.ann;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (previous != null) || previous.equals(ann, _annotations;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (previous != null && previous.equals(ann) || _property.equals(previous;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (previous != null && previous.equals(ann) || _value.equals(previous);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (previous != null && previous.equals(ann) _value;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (previous != null && previous.equals(_next._annotations;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (previous != null && previous.equals(annCode) || _value.equals(previous;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (previous != null && _comp.equals(previous) || previous.ann;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (previous == null || previous.equals(ann) || _next.equals(ann);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (previous != null && previous.equals(ann) || _n.equals(previous;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (previous != null && previous.equals(ann)[0];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (previous != null && previous.equals(ann) || _valueClass;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (previous != null && _objectId.equals(previous) || previous.ann;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (previous == null || previous.equals(ann) || _secondary.equals(previous;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (previous != null && previous.equals(ann) || _parent.equals(previous;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (previous != null && previous.equals(_valueClass;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (previous != null && previous.equals(ann) || _compargs.equals(previous;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (previous == null || previous.equals(ann) || _n.equals(previous;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (previous != null && previous.equals(ann), _annotations);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (previous != null && previous.equals(_ann;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (previous != null) || previous.equals(ann, _valueClass);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (previous != null) || previous.equals(ann, _annotations);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (previous != null && previous.equals(_valueClass);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (previous != null && previous.equals(ann) || _objectId.equals(previous;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (previous != null) && _next.equals(ann;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (previous != null && _next.equals(ann) || previous.ann;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (previous != null && previous.equals(ann) || _valueType;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (previous == null || previous.equals(ann) || _ node.equals(ann;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (previous != null && _property.equals(previous) || previous.ann;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (previous != null && previous.equals(ann) : ann;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (previous != null && previous.equals(annCode) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (previous != null && previous.equals(ann) || _composer.equals(previous;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (previous != null && previous.equals(prop);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (previous != null) || previous.equals(annCode;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (previous == null || previous.equals(ann) || _value;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (previous == null || previous.equals(ann) || _valueClass;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (previous != null && previous.equals(ann) || _compaction;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (previous != null && _next.equals(ann);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (previous != null && previous.equals(ann >= _annotations;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (previous != null && previous.equals(ann) || _comp",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (previous == null || previous.equals(ann) || _comp;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (previous == null || previous.equals(ann)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (previous == null || previous.equals(ann) || _field.equals(previous;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (previous != null && previous.equals(ann) || _next.equals(ann);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (previous != null && previous.equals(ann) || _value.equals(target);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (previous != null && previous.equals(ann) || _compProperties.equals(previous;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (previous != null && previous.equals(ann)in;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (previous != null) || previous.equals(ann, offset);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (previous != null) && _next.equals(ann);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (previous != null) || previous.equals(ann, delegate);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (previous != null && previous.equals(ann) || _Long.equals(previous;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (previous != null && previous.equals(ann) || _compTail;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (previous != null) || previous.equals(annD;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (previous != null && previous.equals(ann) || _collect;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (previous != null && previous.equals(annCode) || _annotations;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (previous != null && previous.equals(ann) & _annotations;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (previous == null || previous.equals(ann) || _valueType;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (previous != null && previous.equals(ann) || _tail;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (previous != null && previous.equals(ann) || _merge;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (previous != null) || previous.equals(ann), _annotations;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (previous != null && previous.equals(ann) || _value.equals(next;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (previous != null && previous.equals(ann) ann;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (previous != null && previous.equals(propName);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (previous != null && previous.equals(other._annotations);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (previous != null && previous.equals(ann) || _annotated;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (previous != null && previous.equals( ann)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (previous != null && previous.equals(ann, _valueClass);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (previous != null && previous.equals(ann) || _elementType;",
                "identical": false
            }
        ],
        "buggy_line": "return (previous != null) && previous.equals(ann);",
        "fixed_line": "return (previous == null) || !previous.equals(ann);"
    },
    "Cli-40": {
        "fixes": [
            {
                "k": 1,
                "patch": "return str;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return createURL;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "returnstr;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return sql;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return UNRECOGNIZED;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return DATE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "returnNON_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "returnPROCESS_INSTANCE_NAME;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "returnNON_STRICT_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return \"\\\"_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "returnPROCESS_INSTANCE_ID;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return DATE_TIME_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return JsonToken.VALUE_EMBEDGE_OBJECT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return name;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returnNON_STRICT_RESERVED_AS;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "returnNON_STRICT_RESERVED_INDEX;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "returnNON_STRICT_RESERVED_ELEMENT;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return paramName;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return \"\\\"_STRICT_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "returnNON_STRICT_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "returnNON_STRICT_RESERVED_NAME;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return bytes;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return timeout;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return \"\\\"_STRICT_RESERVED_AS;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "returnNON_STRICT_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return out;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return \"\\\"_STRICT_RESERVED_ELEMENT;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return \"\\\"_STRICT_RESERVED_INDEX;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return \"\\\"_STRICT_RESERVED_NAME;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "returnNON_STRICT_RESERVED_PATTERN;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "returnNON_STRICT_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return \"\\\"_NOT_SET;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return command;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "returnNON_STRICT_RESERVED_(_str;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "returnNON_STRICT_RESERVED_TOKEN;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "returnNON_STRICT_RESERVED_IZ;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "returnNON_STRICT_RESERVED_PREFERENCE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "returnLOCAL_TIME_AFTER_END;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return \"\\\"_STRICT_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "returnNON_STRICT_RESERVED_CLOSED;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "returnNON_STRICT_RESERVED_STRING;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return \"\\\"_STRICT_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "returnNON_STRICT_RESERVED_ ssl;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return \"\\\"_STRICT_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "returnNON_STRICT_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return JsonToken.VALUE_ELEVATION;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "returnNON_STRICT_RESERVED_INFO;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "returnNON_STRICT_RESERVED_ values;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return definitions;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "returnNON_STRICT_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "returnNON_STRICT_RESERVED_ username;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "returnNON_STRICT_RESERVED_NO_NAME;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "returnNON_STRICT_RESERVED_ : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "returnNON_STRICT_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return mutable;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return \"\\\"_STRICT_RESERVED_PATTERN;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "returnNON_STRICT_RESERVED_FACTOR;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "returnNON_STRICT_RESERVED_ 19;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "returnNON_STRICT_RESERVED_ \";",
                "identical": false
            },
            {
                "k": 66,
                "patch": "returnNON_STRICT_RESERVED_ out;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return EMPTY_OBJECT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "returnNON_STRICT_RESERVED_LAST;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // since 2.7",
                "identical": false
            },
            {
                "k": 70,
                "patch": "returnNON_STRICT_RESERVED_CONFIG;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return buildURL;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "returnNON_STRICT_RESERVED_Instant;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "returnNON_STRICT_RESERVED_WEB;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "returnNON_STRICT_RESERVED_limit;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "returnNON_STRICT_RESERVED_IZATION;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "returnNON_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "returnPROCESS_DEFINITION_KEY;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return defaultValue;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "returnNON_STRICT_RESERVED_ENTRY;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "returnNON_STRICT_RESERVED_IP;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return \"\\\"_STRICT_RESERVED_TOKEN;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "returnNON_STRICT_RESERVED_FINAL;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "returnNON_STRICT_RESERVED_LOCATION;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "returnNON_STRICT_RESERVED_ minY;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return \"\\\"_STRICT_RESERVED_IZ;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "returnNON_STRICT_RESERVED_POSITION;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "returnNON_STRICT_RESERVED_NO_SEGMENT;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "returnNON_STRICT_RESERVED_Library;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "returnNON_STRICT_RESERVED_ datatype;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return JsonToken.VALUE_EVALUCTION;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return EMPTY_AS_LONG;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "returnNON_STRICT_RESERVED_STOP;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "returnNON_STRICT_RESERVED_ information;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "returnLOCAL_TIME_ELEMENT;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "returnNON_STRICT_RESERVED_ begin;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "returnNON_STRICT_RESERVED_clusive;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "returnNON_STRICT_RESERVED_PROCESS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "returnNON_STRICT_RESERVED_ str;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return \"\\\"_STRICT_RESERVED_NO_NAME;",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "throw new ParseException(\"Unable to handle the class: \" + clazz);"
    },
    "Chart-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultBefore);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultValue);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultTypeName);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultCallback_ZONE);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this(time,TATimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this(time, XmlTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this(time,0, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultHook argument);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE,Locale.getDefault());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this(time,mentTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this(time,IDENTIFIERTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultImpl);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this(time, RegularTimeVector.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this(time, clTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this(time, and RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(5);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultization argument);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this(time, RegularTimeInMillis.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultMessageZONE);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(1);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.ENGLISH;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultString);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this(time,resetTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this(time, extendedTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this(time, mon.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultUrl);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this(time,BinaryTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault-1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultEndTime);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this(time,WHTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this(time, ComTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this(time, RegularTimeOr.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this(time, RegularTimeBox.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this(time, RegularTimeParameters.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this(time,CountryTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this(time, RegularTimeest.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultANOSECONDS;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this(time, RegularPeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this(time, effTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultSessionFactory);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this(time, bazTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this(time, findTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault bindings);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault$);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this(time, route.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultdestination);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault dataType);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this(time, RegularTimeThrift.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultS);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this(time,ULTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this(time, markTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultS_OF_FALSE);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultdest);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultLeadingSpace);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this(time, UTF8_ENCODING.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultization(5);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this(time, RegularTimeChanged.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this(time, RegularTime.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultLIMIT);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this(time, argumentTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this(time,Period.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultANOSECONDS);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this(time,bottomTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault)*);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultMeterPerNode);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this(date, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(10);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultImpl",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this(time,ThereTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultgt;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this(time, out.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this(time, 36.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultEnded);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this(time,hasNextTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this(time, RegularTime folder.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this(time, isSelectedTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this(time, RegularTimeEvents.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this(time, RegularTimeToken.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultpt",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this(time, getProcessTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this(time,*,TimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, null.getDefault());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultEnded;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this(time,ASSTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this(time, closestTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this(time, varTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultMethodATION_ZONE);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultServer);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultBefore;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, annotated.getDefault());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this(time, CreateTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this(time,cerTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultImpl(5);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.ENGLISH);",
                "identical": false
            }
        ],
        "buggy_line": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
        "fixed_line": "this(time, zone, Locale.getDefault());"
    },
    "JacksonDatabind-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new SimpleType(type,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new SimpleType(type, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, contentType);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new SimpleType(_class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new SimpleType(ctxt,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new SimpleType(class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new SimpleType(subclass, typeHandler, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new SimpleType(parent, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new SimpleType(subclass, _class, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new SimpleType(config,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new SimpleType(N,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new SimpleType(s, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new SimpleType(parameterName, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new SimpleType(componentType,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new SimpleType( contentType, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new SimpleType(CT, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new SimpleType(int, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new SimpleType(CH, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _keyHandler, _valueHandler);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new SimpleType(value,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new SimpleType(s,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new SimpleType(converter,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new SimpleType(types, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new SimpleType(class, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new SimpleType(Interface,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new SimpleType(response, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new SimpleType(Position, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new SimpleType(sbindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _keyHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new SimpleType(NULL,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new SimpleType(Interface, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new SimpleType(t, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new SimpleType(c, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new SimpleType( contentType, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new SimpleType( [END_BUGGY] ,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _class);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new SimpleType(dclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new SimpleType(factor,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new SimpleType(s,subclass, _class, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new SimpleType(SELECT,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new SimpleType(e, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new SimpleType(container,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new SimpleType(Uri, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new SimpleType( pagination,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new SimpleType(flatMap,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new SimpleType( move,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new SimpleType(apply,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new SimpleType(subclass, _class, _bindings, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _asStatic);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new SimpleType(Any, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new SimpleType( types, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new SimpleType(class, _bindings, _superClass, _superInterfaces, _valueHandler, contentType, _asStatic);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, contentType);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new SimpleType(subclass, bindings, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new SimpleType(mime,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new SimpleType(essel,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new SimpleType(angle, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new SimpleType(selected, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new SimpleType( [{},{, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, contentType);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new SimpleType(key,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new SimpleType(_class,subclass, _bindings, _superClass, _superInterfaces, contentType, _valueHandler);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new SimpleType(Fields, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new SimpleType(class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new SimpleType(>\", _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new SimpleType(j, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new SimpleType(key, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new SimpleType( -1, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new SimpleType(_class,subclass, _bindings, _superClass, _superInterfaces, contentType, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new SimpleType( getObject, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new SimpleType(throwType, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new SimpleType(d, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new SimpleType(packageName, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new SimpleType(query, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new SimpleType(MAP, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new SimpleType(SELECT, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new SimpleType(class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new SimpleType( 2), _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new SimpleType(className, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new SimpleType(First, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new SimpleType(value, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new SimpleType(box, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new SimpleType(type, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new SimpleType(pp, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeHandler);",
                "identical": false
            }
        ],
        "buggy_line": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,",
        "fixed_line": "return new SimpleType(subclass, _bindings, this, _superInterfaces,"
    },
    "JxPath-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == context;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return computeS[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return compute(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return compute_TYPE[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return computeEdge[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return compute(args[0].computeValueAsynccontext), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.FALSE : args;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == long.FALSE;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return compute;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == boolean.FALSE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[0];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue \";",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue){",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return compute.computeValue[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return compute(args[0].computeValue MINcontext), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return computeS[0].computeValue(context), args[1].computeValue == context;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return compute_TYPE[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue = context;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueVIOUS;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return computeParameter[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return compute(args[0].computeValue[1].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return computepattern[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return compute rootPredicate[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue serializationExpression;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue F52;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue FLOWER;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return compute(args[0].computeValue(_context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueElem;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueSelected;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return compute(args[0].computeValueTocontextcontext), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return compute == args[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return computeS[0].computeValue(args[1].computeValue == args[1].computeValue;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue F5;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return computeQueryString[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue MINORACLE ? context : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return computeKey[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return computeEdge[0].computeValue(context), args[1].computeValue == context;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueCaption == context;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? Boolean.FALSE : args;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return compute(args[1].computeValueAsynccontext), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue=\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.TRUE : args;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return computeFlush[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.FALSE : args[0];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return computeIsargs[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue[3];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return compute(args[0].computeValue == args[1].computeValue;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue MINUS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return compute_TYPE[0].computeValue(context), args[1].computeValue == context;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue[1]) ? context.FALSE : args;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return compute_TYPE[0].computeValue(context) ? args[1].computeValue(args);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return computeing[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return compute(args[0].computeValue Fcontext), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue F30;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == context.FALSE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return compute_on[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue HashSet > 0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.FALSE : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue2(context)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueSer;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue5) ? context : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.FALSE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return computeS[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return compute(args[0].computeValue == args[1].computeValue[1].computeValue;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueDim == context;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == context);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return compute.computeValue[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context)) : args;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? this.FALSE : args;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueeth);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == K ? Boolean.FALSE : args;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return computeRoute[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return computeid[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return compute(args[0].computeValueElem ? args[1].computeValue(context) : args[0];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValuerevisionParam ? context : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValuerevision;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue Complete;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return compute_TYPES[0].computeValue(args[1].computeValue;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValuever ? context : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == KIUS;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueCaption;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(0 ? context : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue Fserializer;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? Boolean.TRUE : args;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return computeUrl[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[1];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return computeargs[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(0 ? 1 : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue) ? context.TRUE : args;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueCloseable;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue2);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValuever ? context.TRUE : args[1].computeValue;",
                "identical": false
            }
        ],
        "buggy_line": "return compute(args[0].computeValue(context), args[1].computeValue(context))",
        "fixed_line": "return compute(args[0].compute(context), args[1].compute(context))"
    },
    "Closure-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return allResultsMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return newResultsMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return n, recurse);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return allResultsMatch(n, top_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new MAYMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return allResultsMatch(n, had_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return allResultsMatch(n,(20AY_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return allResultsMatch_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return allResultsMatch(n,macro_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return allResultsMatch(n, exit_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return n, mAY_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return allResultsMatch(n,CT_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return allResultsMatch(n, rResult_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return newColMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new MAYMatch(n, otherResultsMatch_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return n, Storage_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return newMAYMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return tmp, MAY_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return allResultsMatch(n, setterAY_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return t, MAY_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return end, MAY_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return allResultsMatch(n, \"_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return newResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return allResultsMatch(n, usedInKD_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return newOneMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return ALL_COLUMNS(n, recurse);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return allResultsMatch(n, TYPE_BeString);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return MAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return allResultsMatch(n, top_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return t, MAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return newResultsMatch(n, otherToken.allResultsMatch_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return allResultsMatch(n, had_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return allResultsMatch(n, top_BeString);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return end, MAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return newIdentMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new MAYMatch(n, otherResultsMatchFirst_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return n, recurse;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return allResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return newResultsMatch(n, otherToken.create_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return newResultsMatch(n, recurse) + 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return newResultsMatch(n, TYPE_BeString);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new_BeString(n, recurse);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return tmp, MAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return newResultsMatch(n, otherToken.VALUE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return n, mAY_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return allResultsMatch(n,Values);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return nextNodeMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return newResultsMatch(n, recurse;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return newResultsMatch(n, otherToken.from_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return allResultsMatch(n, new_BeString);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return allResultsMatch(n, allowed);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return firstResult(n, recurse);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return firstResultMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return allResultsMatch(n, TYPE_ROOT_PREDICATE);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return allResultsMatch(n,macro_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return newResultsMatch(n, otherToken.BeD_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return allResultsMatch(n, recurse;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return NAME_VALUE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return newResultsMatch(n, otherToken.ZERO_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return allResultsMatch(n, 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return allResultsMatch(n,Utils.is_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return newsimplesimpleMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return allResultsMatch(n,(20AY_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return NULL_SURROGATE_BeString(n, recurse);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return cleanMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return allResultsMatch(n, \"_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new MAYMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return allResultsMatch(n, exit_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return allResultsMatch(n,CT_RE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return newResultsMatch(n, MAX_BeStringOOM_PREDICATE);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return allResultsMatch(n, recurse) + 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return newResultsMatch(n, allowed);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return newResultsMatch(n, otherToken.PROCESS_INSTANCE_PREDICATE);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return allResultsMatch(n, had_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return allResultsMatch(n,Types);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return allResultsMatch(n, calls);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return allResultsMatch(n, comparison);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return allResultsMatch(n, \", recurse);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new MAY_PREDICATE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return n, Storage_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _allResultsMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return allResultsMatch(n,CT_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return allResultsMatch(n, rResult_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return allResultsMatch(n, setterAY);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return newResultsMatch(n, other;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return allResultsMatch(n, top_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return allResultsMatch(n, setterAY_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return newResultsMatch(n, otherToken.allResultsMatchDICATE);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return newResultsMatch(n, otherToken. allResultsMatch_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new MAYMatch(n, otherResultsMatch_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return newResultsMatch(n, otherToken.allResultsMatch_SPACE_PREDICATE);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return newResultsMatch(n, recurse)};",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return newResultsMatch(n, TYPE_BeStringOOM_PREDICATE);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return NAME_VALUE_PREDICATE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return allResultsMatch(n, TYPE_BeStringOOM_PREDICATE);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return allResultsMatch(n, new_BeStringOOM_PREDICATE);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return allResultsMatch(n,Utils.is_Be_PREDICATE);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return allResultsMatch(n,Utils.host_PREDICATE);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return newResultsMatch(n, GridConstraintsName);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return n;",
                "identical": false
            }
        ],
        "buggy_line": "return allResultsMatch(n, MAY_BE_STRING_PREDICATE);",
        "fixed_line": "return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);"
    },
    "JacksonDatabind-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer, creatorProp);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_OBJECT, creatorProp);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _objectIdReader);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,creatorProp);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer, _objectIdReader);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, updatable, creatorProp);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,_.length == 3);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, dataLength);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, buffer, creatorProp);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, null)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, bean)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,'', creatorProp);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, dataLength - _objectIdReader);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,_.length == 1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, editorProp);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean - 1, propName);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (_annotationIntrospector.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, property, propName);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,sentence);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, maxLength, creatorProp);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,ASTER);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, contentType);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, declaredType, creatorProp);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, NULL_NODE_TYPE);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JSON_NODE_TYPE);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, typeId);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, BigDecimal, creatorProp);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_ARRAY, creatorProp);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, format);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, ((propName) != JsonToken.END_OBJECT, creatorProp);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, most);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, prop);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, coreLen);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, prop)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, treatedProp);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, status, creatorProp);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, chunk)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, dataLength - 1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, MESSAGEProp, creatorProp);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, responseHeaders, creatorProp);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, ((propName) == JsonToken.END_OBJECT, creatorProp);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, offset, propName);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _objectCodec, propName);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, MESSAGE_END_OF_OBJECT, creatorProp);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,GPS_END_OF_WEEK);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_OBJECT, idProp);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp == _objectIdReader);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, plain);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _propName);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.VALUE_NUMBER_INT, creatorProp);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,ToString);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp - _objectIdReader);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean + 1, propName);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, beanDesc);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _propNameExplicit, creatorProp);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,Category);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, variableProp);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean == propName);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp == propName);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _creatorProp);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, subviewType, creatorProp);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, pub);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_OBJECT,creatorProp);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_ARRAY);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, types);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _accessorpowers);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,anyProp);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, normal);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_OBJECT, _objectIdReader);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, language);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean._ext == JsonToken.END_OBJECT, propName);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, ((propName) creatorProp);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, MESSAGE_END_OBJECT, creatorProp);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.VALUE_EMBEDDED_OBJECT, creatorProp);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,prevProp);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, output);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, getNon);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, MESSAGE_VALUE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, sm)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, canonicalType);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, ((_END_OF_STRING) creatorProp);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,Spaces);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, owner);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, '0');",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean._ext);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, mediaType);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,GPS_END_OF_STRING);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, beanTypeName);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _propName, creatorProp);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,liest);",
                "identical": false
            }
        ],
        "buggy_line": "if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {",
        "fixed_line": "if (ext.handlePropertyValue(p, ctxt, propName, null)) {"
    },
    "Gson-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong && (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (last == NUMBER_OF_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeObject {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative=0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative_2) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (last == NUMBER_START_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative < 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (last < NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (last < NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i < NUMBER_OF_CHARACTERS && (last == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (inObject == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (last > NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeFile) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative, value)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (last == NUMBER_START_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative?",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (last != NUMBER_OF_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative >= 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeif)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || value == 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeOverride) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative = value;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative 500) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (last == NUMBER_OF_CHARIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong && (value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative -> {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative Person {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative >= 0;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if ( negative == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeTracker) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i < NUMBER_OF_CHARACTERS && (last == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative 7) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative getStyle) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative)))) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative, value) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeifted) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative > 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (last == NUMBER_CHAR_DIGIT ||digitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeCtx) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (i < NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative MockResponse) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (last == NUMBER_OF_CHARACTERS || fitsInLong && (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative keyword) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeObject {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (next == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative parse) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (inObject == NUMBER_CHAR_DIGIT || fitsInLong && (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative Entry) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeComponent {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeIALIZED) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative as') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative, 12)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative Person) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative > 100);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeefficient) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative > 255) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeROW) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negativeObject {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i < NUMBER_OF_CHARACTERS && (last == Long.MIN_VALUE || value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeGroup == float.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative right) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative, value)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative=0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative LinkedHashMap) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (extracted >= NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative(0, value) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeTASK_CHAR)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeFile) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (inclusiveType == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeOverride)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeFile;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative > 29) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value <= Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value >= Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative digest) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (inclusive == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative_2) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative?",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeObject) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (last < NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value != Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativemessage) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative(0, value)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negativeif)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {",
        "fixed_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative)) {"
    },
    "Closure-113": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parent != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (compiler == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parent != null) { // empty String disables wrapping; non-empty enables",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parent != null) { // let's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parent != null) { // we avoid self-loop?",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but...",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'class",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parent != null) { // we can this ever occur?",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parent != null) { // for mac, then we are the parent of record or input...",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parent != null) { // it's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as ' been discovered yet",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parent != null) { // may be filtered out unconditionally",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parent != null) { // ignore non-public in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto' span.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parent != null) { // we avoid self-loops in order to support pseudographs",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls in case",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parent != null) { // we avoid self-public in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parent != null) { // happens when annotation processing is disabled.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't parent",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't++) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parent != null) { // we get null if there are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parent != null) { // it's non-public, filtered in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parent != null) { // we avoid self-loops in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parent != null) { // empty String disables wrapping; non-most span.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but filtered in case",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto' nulls in case",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto/browse/SONAR-6792",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parent != null) { // for mac, then we are the root-most span.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't quit",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't++) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't quit",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'spare/browse/SONAR-6792",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parent != null) { // we avoid self-loops in case of record or input...",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto' nulls but...",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto' nulls but nodes",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto' characters",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't been discovered yet",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as ' been discovered",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto' header name",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't parent",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't matched.",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'short't quit",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but filtered",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but we can this ever occur?",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parent != null) { // we avoid self-case when annotation processing is disabled.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'empty' nulls but nodes",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parent != null) { // it's non-public, then",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto'tlaps",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parent != null) { // it's non-public in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parent != null) { // empty String disables wrapping; non-public in case there's not yet bother",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls in case it' characters",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't tableName...",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't matched.",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parent != null) { //allow, then we are the parent of record or input...",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't temporary",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parent != null) { // ignore non-enclosing in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto'tstyle.",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't return existing.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't modify schema",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't return before/browse/SONAR-6792",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't return before/browse/SONAR-6792",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't temporary",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parent != null) { // we are the parent of record or input...",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parent != null) { // let's not store 'raw' nulls but...",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't tableName...",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't nickname.",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parent != null) { // it's non-public, need to check the next one",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parent != null) { // it's non-public, filtered in case there's not yet bother",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't allocate missing...",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but filtered in case there's used below",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls in case there's used below",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parent != null) { // for empty doc, then we are the parent of record or input...",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but filtered in case it' characters",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parent != null) { // empty String disables wrapping; check the parent of record or input...",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw'tORTH",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'autoMIDDLE",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but filtered in case there's buffer",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw'tloading",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'short't parent",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't nickname.",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't mac, so we can this ever occur?",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parent != null) { // allows not called by the parent of record or input...",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parent != null) { // it's value we added.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw'tlaps",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' characters",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't mac, so we can this ever occur?",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'empty' nulls but...",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto't precision",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parent != null) { // empty String disables wrapping; non-public, then",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw't();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'caseInsensitive",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parent != null) { // ignore non-public in case there's not yet parent",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but filtered in case there's value",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto'tiation.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parent != null) { // just a parameter should not be assigned. Also declare the methods parameters as 'auto it'",
                "identical": false
            }
        ],
        "buggy_line": "if (provided != null) {",
        "fixed_line": "if (provided != null || requiresLevel.isOn()) {"
    },
    "Jsoup-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this == element;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return this == o.element;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return element == o;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return this == o;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return element == o.element;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return element == o.this;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return element == o.value;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return element == o.super;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this == o.value;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return element == o.PARENT;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this == o. element;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return element == o.type;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return element == o.key;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return other.element == o;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return element == o.this.element;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return this == o.this.element;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return element == o.ToValue;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return element == o.export;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return element == o.ToStart;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return this == o.type;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return element == o.this)UTURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return element == o.enced;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return element == o.Offset;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return element == o.session;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return this == other.element;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return element == o.child;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return element == o.is;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this == o.super;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this == o.mode;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return element == o.ToWrite;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return element == o.this);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return element == o.parent;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return element == o.this)UTURE_STRICT_RESER;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return element == o.2, _element;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return element == o.ignoreCase;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return element == o.class;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return element == o.event;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return this == o.ToValue;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return element == o.base;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return this == o.key;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return element == o.this._element;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return element == o.channel;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this == o.parent;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return other.this == o;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return element == o.column;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return this == o.booleanValue;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return element == o.end;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this == o.componentName;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return element == o.text;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return this == o.PARENT;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return element == this.element;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return element == o.this)UTURE_STRICT_RESERVED_LOCATION;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return element == o.get;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return element == o.inner;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return this == o.enced;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return element == o.messages;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return element == o.vert;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return element == o.this)UTURE_STRICT_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return element == o.export_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return element == o.this)UTURE_STRICT_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return element == o.right;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return element == o.export_;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return element == o.force;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return this == o.event;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return element == o. ch;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return element == o.ORDER_PRINTER;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return element == o.component;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return element == o.o;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return element == o.ID;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return element == o.export_PASSENGINE_ID;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return element == o.this)UTURE_STRICT_RESPONSE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return element == o.map;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return element == o.this)UTURE_STRICT_RESERVED;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return element == o.report;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return element == o.id;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return element == o.this)UTURE_STRICT_RESERVED_RESPONSE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return element == o.that;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return element == o.position;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return element == o.number;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return element == o.To;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return this == o.name;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return element == o.this)UTURE_STRICT_RESERIALIZATION;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return element == o.Typed;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return element == o.config;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return element == o.this)UTURE_STRICT_ENGINE_ID;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return element == o.this)UTURE_STRICT_CLASS;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return this == o.Offset;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return element == o.new;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return this == o.this. element;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return element == o.this)UTURE_STRICT_RESERVED_LABEL;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return element == o.this._value;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return element == o.doc;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return element == o.status;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return element == o.ar;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return element == o.ssl;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this == o.config;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return element == o.Columns;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return element == o.host;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return element == o.this)UTURE_STRICT_RESERVED_EVENT;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return element == o.ORDER_ID;",
                "identical": false
            }
        ],
        "buggy_line": "return this == o;",
        "fixed_line": "return tag.equals(element.tag);"
    },
    "Closure-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cfa.createEdge(leNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cfa.createEdge( usedNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cfa.createEdge(names, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cfa.createEdge(NULL, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cfa.createEdge(node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cfa.createEdge(resourceNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cfa.createEdge(itemsNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cfa.createEdge(NULLNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cfa.createEdge( node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cfa.createEdge(staticNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cfa.createEdge(SOCKETNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cfa.createEdge(leakNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cfa.createEdge(fromNode, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cfa.createEdge(response, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cfa.createEdge(DataStoreNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cfa.createEdge(invertNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cfa.createEdge(items, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cfa.createEdge(currentNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cfa.createEdge(SerNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cfa.createEdge(runNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cfa.createEdge(MethodNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cfa.createEdge(RestrictionsNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cfa.createEdge(Accumulator, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cfa.createEdge( refNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cfa.createEdge( replaceNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cfa.createEdge(s, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cfa.createEdge( doubleNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cfa.createEdge(containerNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cfa.createEdge(elementNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cfa.createEdge(serveNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cfa.createEdge(abstractNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cfa.createEdge(subclass, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cfa.createEdge(null, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cfa.createEdge(addedNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cfa.createEdge(xorNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cfa.createEdge(names, zeroNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cfa.createEdge(OMNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cfa.createEdge(ConceptNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cfa.createEdge(moduleNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cfa.createEdge(fromNode, parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cfa.createEdge((\"{Node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cfa.createEdge(efNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cfa.createEdge(izedNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cfa.createEdge(names, mapperNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cfa.createEdge(intermediateNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cfa.createEdge(cfNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cfa.createEdge( getFontNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cfa.createEdge(leName, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cfa.createEdge(IgnoredNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cfa.createEdge( \"), Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cfa.createEdge(detectNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cfa.createEdge( PRENode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cfa.createEdge(pfNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cfa.createEdge(CssNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cfa.createEdge(cloneNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cfa.createEdge(ObjectIdNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cfa.createEdge(edge, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cfa.createEdge(fourNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cfa.createEdge(TraversalNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cfa.createEdge( getKeyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cfa.createEdge( plusNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cfa.createEdge(InterfacesNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cfa.createEdge(BlockNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cfa.createEdge(sideNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cfa.createEdge(AreaNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cfa.createEdge(childNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cfa.createEdge(PropertyValueNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cfa.createEdge(elemNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cfa.createEdge(forwardNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cfa.createEdge(Method, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cfa.createEdge(isNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cfa.createEdge(ch, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cfa.createEdge(uuid, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cfa.createEdge( authenticationNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cfa.createEdge(DUNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cfa.createEdge(timestamp, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cfa.createEdge(validateNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cfa.createEdge(address, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cfa.createEdge(equalsIgnoreCaseNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cfa.createEdge(oddNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cfa.createEdge(operationNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cfa.createEdge(LOCNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cfa.createEdge(Interfaces, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cfa.createEdge(streamsNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cfa.createEdge(codec, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cfa.createEdge(parent, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cfa.createEdge(fromNode, Branch.UNVOLUME, finallyNode);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cfa.createEdge(parameter, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cfa.createEdge(RIGHT, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode instanceof finallyNode);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cfa.createEdge(fromNode, Branch.UNlick, finallyNode);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cfa.createEdge(nemonic, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cfa.createEdge(fromNode, Branch.UNastNode, finallyNode);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cfa.createEdge( ChannelBuffer, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cfa.createEdge(ctx, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cfa.createEdge(fromNode, Branch.UNprogram, finallyNode);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cfa.createEdge(fromNode, Branch.UN setAddress, finallyNode);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cfa.createEdge(fromNode, Branch.UN purch, finallyNode);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode;",
                "identical": false
            }
        ],
        "buggy_line": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
        "fixed_line": "cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);"
    },
    "Chart-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return \" title=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return \" title=\\\"\" + toolTipText);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return \" title=\\\"\" + toolTipText) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\"\";",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altC\";",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altUsed\";",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt 2",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" '\" + toolTipText;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return \" title=\\\"\" + toolTipText, \"\\\"\";",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altKeys;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alttedTipText",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alter;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alts\";",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altmentTipText",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt libC\";",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altegateText",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt maxLength\";",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return \" title=\\\"\" + toolTipText, '\" + toolTipText;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alts;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altRequiresText",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt \".\\\"\";",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt error here\";",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt getLast",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return \" title=\\\"\" + toolTipText : \"\\\" altTipText",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altclosed;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt+)",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return \" title=\\\"\" + toolTipText, '\" + toolTipText);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alttedTipText;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altinternText",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altSegments;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt error;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altIntegText",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altExecText",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" // add anTipText",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altfunctionsTipText",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altcalcText",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" from toolTipText",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altRINHERIT\";",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt HttpSessionText",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt countryText",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt CURRENTText",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\"\";",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt 2\";",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt CircleText",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return \" title=\\\"\" + toolTipText; // add anTipText",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt here\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt updatedText",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt 1",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alts",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altFailure;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altComponent;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt\u5373Text",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt pieceText",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altExtensions;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt data;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altUsed;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alter) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altautomText",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altRunnable;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altKeys) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altSpeed\\\"\";",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altAPHText",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt)\",",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altOfMonthText",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt)\", class;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return \" title=\\\"\" + toolTipText, \"\\\" alt libC\";",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt maxWidth",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altPercent;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt maxWidth;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altStartingText",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt200;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt11;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt)\", 2.;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" ++ ){",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt 4) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt scheme",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alter)",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return \" title=\\\"\" + toolTipText.length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altfinished",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt \".\";",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt draw;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return \" title=\\\"\" + toolTipText, \"\\\" alt 2",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altfunctionsTipText;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altmentTipText;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt operation",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt89;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt countryText;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt operations",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt dir;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt.\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" // add if from toolTipText",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt CircleText;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return \" title=\\\"\" + toolTipText / 60;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt dir\";",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt 4) + \"\\\"\";",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt)\", name;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altKeys.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" alt layer",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return \" title=\\\"\" + toolTipText / \"\\\" altPlace\\\"\";",
                "identical": false
            }
        ],
        "buggy_line": "return \" title=\\\"\" + toolTipText",
        "fixed_line": "return \" title=\\\"\" + ImageMapUtilities.htmlEscape(toolTipText)"
    },
    "Mockito-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return TokenType.TKUTURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return NR_OF_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return TokenType.TK_PROP_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return TokenType.TK_PROP_KEY;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return TokenType.TK_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return 0; // could also clear, but let's not yet bother",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return TokenType.TKUTURE_STRICT_RESERVED_WORD ) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or input",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return TokenType.TKUTURE_STRICT_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of input",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return TokenType.TK_PROP_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return TokenType.TKUTURE_STRICT_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end-of-this.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or input",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the same tree",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return TokenType.TKUTURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return CY_RESERVED_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of input",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return TokenType.TK_PROP_STRICT_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return CCS_BEFORE_PREFIX;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of input?",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return UNRECOGNIZED;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT ) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or \"",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return TokenType.TK_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record are the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end-of-this.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an'll also check the end of record or input",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return TokenType.TK_PIEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the firstArgument",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end-of-objectCodec",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the same tree",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an'll also check the end of record or input",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end marker",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return 0; // could also clear, but let's not yet method",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return TokenType.TKUTURE_STRICT_RESERVED_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or input...",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an into the end of record or input",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of input buffer",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'raw'll also check the end of record or input",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or \"",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of method",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return TokenType.TK_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or valid",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'anes",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an'));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTER;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or 1MIDDLE",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an but we are the end of record or input",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or \"false\"",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or exclude by default",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return TokenType.TK_COLUMNS; // since 2.7",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the op.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the end of input",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or starts with the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated theGur",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'anno additional",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTERANCE_RESERVED_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end-of-objectCodec",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the first at the end of input",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of input?",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an into the end of input",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or \"C\"",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or header",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or partial",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return CYNC_BOUNDARY_TTY_BIGINT;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of raw",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return TokenType.TK_BORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an't how much was prefixed with the end of record or input",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'anno graph",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return TokenType.TK_TO_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return TokenType.TK_PREFIXED;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return CYNC_BOUNDARY_TTY_BORDER_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of list",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of content",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return NR_OF_RESERVED_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'anthrowable",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or \"R allow the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an'll also check the end of input",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return TokenType.TKUTURE_STRICT_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an'll also check the end of record are the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an't how much was prefixed with the end of record or input",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return TokenType.TK_PROP_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end-of-object, method",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated theCREATOR we are the end of record or input",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the first at the end of record or input",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the end of record or write",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'an but we are the end of input",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return TokenType.TK_REORDER_COLUMNS; // default an underscore is the left it's not be assigned. Also declare the methods parameters as 'annotated the next one",
                "identical": false
            }
        ],
        "buggy_line": "return 1;",
        "fixed_line": "return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;"
    },
    "JacksonDatabind-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "found = key.equals(prop)];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 3,
                "patch": "found = key;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "found = key.equals(prop);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "found = key.equals(prop)]; // nope, must be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "found = key.equals(prop)]; // nope, must not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "found = key.equals(propName;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "found = prop.equals(prop)];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "found = key.equals(prop)]; // nope, not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "found = key.equals(prop)]; // nope, must not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "found = key.equals(prop)]*_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "found = key.equals(prop INHERIT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "found = indent.equals(prop)];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "found = key.equals(propName);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "found = key.equals(prop)]; // nope, must be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "found = key.equals(prop._key;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "found = key.equals(prop)]*_REDIS_SENTINEL;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare' bytes",
                "identical": false
            },
            {
                "k": 20,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 21,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'final')",
                "identical": false
            },
            {
                "k": 22,
                "patch": "found = key.equals(prop)]V6_PART_OF_STRING;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "found = key.equals(prop)] {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 25,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'ASCII't quit",
                "identical": false
            },
            {
                "k": 26,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'final')",
                "identical": false
            },
            {
                "k": 27,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare' characters",
                "identical": false
            },
            {
                "k": 28,
                "patch": "found = key.equals(propSet.getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare' nulls but nodes",
                "identical": false
            },
            {
                "k": 30,
                "patch": "found = key.equals(propType.getName());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'et",
                "identical": false
            },
            {
                "k": 32,
                "patch": "found = key.equals(prop)]*_RESERVED_findFromOrdered;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'sentence't quit",
                "identical": false
            },
            {
                "k": 34,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the end of record or input...",
                "identical": false
            },
            {
                "k": 35,
                "patch": "found = key.equals(prop)]; // nope, must be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'final')",
                "identical": false
            },
            {
                "k": 36,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'parent't quit",
                "identical": false
            },
            {
                "k": 37,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' bytes",
                "identical": false
            },
            {
                "k": 38,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare'",
                "identical": false
            },
            {
                "k": 39,
                "patch": "found = key.equals(prop)]; // nope, must not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'final')",
                "identical": false
            },
            {
                "k": 40,
                "patch": "found = key.equals(prop)]; // nope, must be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' bytes",
                "identical": false
            },
            {
                "k": 41,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as long as 'final'.",
                "identical": false
            },
            {
                "k": 42,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare't quit",
                "identical": false
            },
            {
                "k": 43,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'empty' characters",
                "identical": false
            },
            {
                "k": 44,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as '%'",
                "identical": false
            },
            {
                "k": 45,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'ASCII't quit",
                "identical": false
            },
            {
                "k": 46,
                "patch": "found = key.equals(prop)]);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "found = key.equals(prop)]; // nope, must not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' bytes",
                "identical": false
            },
            {
                "k": 48,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'an't quit",
                "identical": false
            },
            {
                "k": 49,
                "patch": "found = key.equals(prop)]; // nope, must be assigned. Also declare the end of record or input...",
                "identical": false
            },
            {
                "k": 50,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'match",
                "identical": false
            },
            {
                "k": 51,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName was already parameters as 'final'.",
                "identical": false
            },
            {
                "k": 52,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'ASCII't return found",
                "identical": false
            },
            {
                "k": 53,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'empty't quit",
                "identical": false
            },
            {
                "k": 54,
                "patch": "found = key.equals(prop INHERIT_RESERVED_findFromOrdered;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare't quit",
                "identical": false
            },
            {
                "k": 56,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' characters",
                "identical": false
            },
            {
                "k": 57,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'sentence' characters",
                "identical": false
            },
            {
                "k": 58,
                "patch": "found = key.equals(prop (!_ALLOW_NONUNIQUE_OPERATION_IDS)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "found = key.equals(prop)]; // nope, must be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'ASCII't quit",
                "identical": false
            },
            {
                "k": 60,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'sentence'",
                "identical": false
            },
            {
                "k": 61,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'any-ins",
                "identical": false
            },
            {
                "k": 62,
                "patch": "found = key.equals(prop)]; // nope, must not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'ASCII't quit",
                "identical": false
            },
            {
                "k": 63,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 64,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'sentence't quit",
                "identical": false
            },
            {
                "k": 65,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as '!",
                "identical": false
            },
            {
                "k": 66,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'empty' nulls but nodes",
                "identical": false
            },
            {
                "k": 67,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'raw't quit",
                "identical": false
            },
            {
                "k": 68,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'short't quit",
                "identical": false
            },
            {
                "k": 69,
                "patch": "found = key.equals(prop)]; // nope, must be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare't quit",
                "identical": false
            },
            {
                "k": 70,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'final'",
                "identical": false
            },
            {
                "k": 71,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' nulls but nodes",
                "identical": false
            },
            {
                "k": 72,
                "patch": "found = key.equals(prop)]; // nope, must be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' characters",
                "identical": false
            },
            {
                "k": 73,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 74,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'unit",
                "identical": false
            },
            {
                "k": 75,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the next one",
                "identical": false
            },
            {
                "k": 76,
                "patch": "found = key.equals(prop INHERIT_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'empty'",
                "identical": false
            },
            {
                "k": 78,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'ins't quit",
                "identical": false
            },
            {
                "k": 79,
                "patch": "found = key.equals(prop)]; // nope, must not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' characters",
                "identical": false
            },
            {
                "k": 80,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'et",
                "identical": false
            },
            {
                "k": 81,
                "patch": "found = key.equals(prop)]; // nope, must not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare't quit",
                "identical": false
            },
            {
                "k": 82,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'sentence' nulls but nodes",
                "identical": false
            },
            {
                "k": 83,
                "patch": "found = key.equals(prop INHERIT_RESERVED_FACTOR;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 85,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare's",
                "identical": false
            },
            {
                "k": 86,
                "patch": "found = key.equals(prop)]; // nope, not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'empty' characters",
                "identical": false
            },
            {
                "k": 87,
                "patch": "found = key.equals(prop)]; // nope, must not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 88,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as ' reversed't quit",
                "identical": false
            },
            {
                "k": 89,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'sentence't return found",
                "identical": false
            },
            {
                "k": 90,
                "patch": "found = key.equals(prop)]; // nope, must not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'sentence't quit",
                "identical": false
            },
            {
                "k": 91,
                "patch": "found = key.equals(prop)]; // nope, must be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'sentence't quit",
                "identical": false
            },
            {
                "k": 92,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'any-of-objectId",
                "identical": false
            },
            {
                "k": 93,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'final\"",
                "identical": false
            },
            {
                "k": 94,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'parent'",
                "identical": false
            },
            {
                "k": 95,
                "patch": "found = key.equals(prop)]*_findFromOrdered;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "found = key.equals(prop)]; // nope, must be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' nulls but nodes",
                "identical": false
            },
            {
                "k": 97,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'anyConstants.getName't quit",
                "identical": false
            },
            {
                "k": 98,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as ' commands",
                "identical": false
            },
            {
                "k": 99,
                "patch": "found = key.equals(prop)]; // nope, must not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' nulls but nodes",
                "identical": false
            },
            {
                "k": 100,
                "patch": "found = key.equals(prop)]; // nope, must be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            }
        ],
        "buggy_line": "found = key.equals(prop.getName());",
        "fixed_line": "found = key.equals(_hashArea[i-1]);"
    },
    "Math-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (tree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (tree.getAttribute) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (tree.getAttributeChITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (tree.getAttributeMIDDLE) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (tree.getAttributeBefore) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (tree.getAttributeCONTITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (tree.getAttributeQUOTED_INFINITY) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (tree.getAttribute useITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (tree.getAttribute drawITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (tree.getAttribute committed) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (tree.getAttribute > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( tree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (tree.getAttributeThreadPool) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (tree.getAttributeGITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (tree.getAttribute StringBuilder) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (tree.getAttribute(1, v) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (tree.getAttributeOCIATION_INFINITY) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (tree.getAttribute;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (tree.getAttributeOTED_INFINITY) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (tree.getAttribute obj) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (tree.getAttribute sized) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (tree.getAttributeMultipleATION_INFINITY) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (tree.getAttributeating_INFINITY) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (tree.getAttribute != currentBoolean) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (tree.getAttributeEncounter) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (tree.getAttribute instanceof whole) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (tree.getAttributeMultipleEdges) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (tree.getAttribute href) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (dissITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (tree.getAttributeDeserSize) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (tree.getAttribute append) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (tree.getAttributePADDING) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (tree.getAttribute){",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (tree.getAttribute SYD_INFINITY) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (tree.getAttribute fileSize) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (tree.getAttributePONE_INFINITY) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (tree.getAttributecssText) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (tree.getAttribute != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (tree.getAttributeVisible) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (tree.getAttributeked) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (tree.getAttribute<>(fITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (tree.getAttributeIMAGE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (tree.getAttribute(60, v) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (tree.getAttributeDisplay) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (tree.getAttribute != current) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (tree.getAttributeAt(0 == null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (tree.getAttributeScript) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (tree.getAttribute == null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (tree.getAttributeFlush) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (dissolve) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (tree.getAttributeToAdd) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (tree.getAttribute(6) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (tree.getAttribute susp) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (tree.getAttributeCaption) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (tree.getAttributeAbs) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (tree.getAttributeAt(0LTA) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (tree.getAttributePatient) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (tree.getAttributeRULE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (tree.getAttribute().length) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (tree.getAttributeAt(0L) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (tree.getAttributeer) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( tree.getAttribute) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (tree.getAttributeDelegate) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (tree.getAttribute(1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (tree.getAttributeWithoutDelimiter) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (tree.getAttribute '/') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (tree.getAttributecx) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (tree.getAttributeQUOTED) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (tree.getAttributeFragment) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (tree.getAttribute e) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (tree.getAttributeCharD_INFINITY) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (content.getAttribute()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (tree.getAttributeDeserSize2D) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (tree.getAttribute cssText) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (tree.getAttributeACITY) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (tree.getAttributePet) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (tree.getAttributeString) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (tree.getAttributeAtStart) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (tree.getAttribute preced) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (tree.getAttribute - firstArgument) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (tree.getAttributeatingSize2D > 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (tree.getAttribute<>(v) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (tree.getAttributeText) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (tree.getAttribute != 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (tree.getAttribute error) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (tree.getAttributeneeded) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (tree.getAttribute(500) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (tree.getAttributeErrorOffset) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (tree.getAttributeAtRule) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (tree.getAttributeatingEndpoint) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (tree.getAttribute baseDir) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (tree.getAttributeParameters) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (tree.getAttributeCharD != currentBoolean) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (tree.getAttributeCONTITIVE_INFINITY == null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (tree.getAttributeMember) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (tree.getAttributeAt(0LATINHERIT) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (tree.getAttribute instanceof wholeMIDDLE) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (tree.getAttributeFor) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (tree.getAttribute-1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (tree.getAttributeReturnType) {",
                "identical": false
            }
        ],
        "buggy_line": "if ((Boolean) tree.getAttribute()) {",
        "fixed_line": "if (tree.getCut() == null && (Boolean) tree.getAttribute()) {"
    },
    "Codec-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new String(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new String(bytes, Charsets.ISO_8859_1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new String(bytes, Charsets.ISO_8859_1});",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 > 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + bytes;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + this.bytes;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 8;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 12;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 0);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new String(bytes, Charsets.ISO_8859_1];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + suffix;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + this.bytes);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 5;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new String(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= this.bytes.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + EMPTY_8859_1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= maximum;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new String(bytes, Charsets.ISO_8859_1+1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= CAP_INF;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 5 ) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 1970",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 600;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 11;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 & bytes;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 & this.bytes);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new String(bytes, Charsets.ISO_8859_1+1, this.bytes.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= MIN_8859_1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= cc;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= HashSet;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + EMPTY_8859_1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >=Integ_1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >=logs_2;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= high;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Maybe) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= MIN_8859_1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + charset;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Maybe;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= DEFAULT_8859_1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= returned_2;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= metaData;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 - bytes;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + actual;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 15;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= DEFAULT_8859_1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + deltaY;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) + 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= file.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= count;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= high.class;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >=INSTANCE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new String(bytes, Charsets.ISO_8859_1+1, this.bytes.length);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + bindings;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 80;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 );",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 32;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= aliases.8, bytes;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 , bytes;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new String(bytes, Charsets.ISO_8859_1...",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 > 0);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= note_1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= max) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 fill;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= this.bytes;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 12);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 != Charsets.class;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 cipher;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >=Unable;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new String(bytes, Charsets.ISO_8859_1};",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 & bytes);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 8;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 64;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= readBytes;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= fullChunk.class;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new String(bytes, Charsets.ISO_8859_1), bytes;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= CAP_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 40;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + serializable;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 , bytes);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new String(bytes, Charsets.ISO_8859_1)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= ss;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 && bytes;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= and actual;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 +ATE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >=replacement;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 && bytes.length;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 & this.bytes;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 || bytes;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >=Server);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new String(bytes, Charsets.ISO_8859_1)",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new String(bytes, Charsets.ISO_8859_1head;",
                "identical": false
            }
        ],
        "buggy_line": "return new String(bytes, Charsets.ISO_8859_1);",
        "fixed_line": "return newString(bytes, Charsets.ISO_8859_1);"
    },
    "Chart-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "PathIterator iterator2 = p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1.getPathIterator;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "PathIterator iterator2 = p2.getPathIterator.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "PathIterator iterator2 = p2.getPathIterator.class;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pIdx);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p3);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pit1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1) - 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pit2);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "PathIterator iterator2 = p2.getPathIterator(ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "PathIterator iterator2 = p2.getPathIterator(iterator);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "PathIterator iterator2 = p2.getPathIterator().length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1.getPathIterator);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pEscape);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "PathIterator iterator2 = p2.getPathIterator(nextPathIterator);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p0);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2).",
                "identical": false
            },
            {
                "k": 25,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1)[0];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pproblem);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "PathIterator iterator2 = p2.getPathIteratorFrom(p2);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "PathIterator iterator2 = p2.getPathIterator();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pSTRACT);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "PathIterator iterator2 = node2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pattributePathIterator);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p5;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p MonoRule);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "PathIterator iterator2 = p2.getPathIterator(rootPathIterator);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p10.);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p(10,null);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p setColumn);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p << 6;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pdiff);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1) + 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p3;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p logger);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pit3);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p modulus);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "PathIterator iterator2 = p2.getPathIterator(PROCESS_INSTANCE_TYPE);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p -2);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "PathIterator iterator2 = p2.getPathIteratoring;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p height);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "PathIterator iterator2 = p2.getPathIterator(plink);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "PathIterator iterator2 = p2.getPathIterator(modulus);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "PathIterator iterator2 = p2.getPathIterator().height;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p 2.5);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "PathIterator iterator2 = _p2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p modulus;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p ped);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "PathIterator iterator2 = line2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p impl);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pused);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p 17);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "PathIterator iterator2 = model2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "PathIterator iterator2 =head2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p difference);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "PathIterator iterator2 = p2.getPathIterator.2;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p reference);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "PathIterator iterator2 = p2.getPathIterator( builder2);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "PathIterator iterator2 = p2.getPathIteratorClass;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pStack);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "PathIterator iterator2 = p2.getPathIterator.input;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pNAME);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "PathIterator iterator2 = p2.getPathIterator(phttp);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pName1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pQuotes);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pKEY);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pOperator);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1, this.1.getPathIterator;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p setColumnRule);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "PathIterator iterator2 = p2.getPathIterator(ptransform);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pmaster2);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2).null);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p3);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1, this.errorCode;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pchild2);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1) ;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2).or);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1.getPathIterator.class);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pcopy;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1, this.END_ARRAY;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1))[0];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "PathIterator iterator2 = p2.getPathIterator( builder1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p01;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pabsent);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "PathIterator iterator2 = p2.getPathIteratorated;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "PathIterator iterator2 = p2.getPathIterator.value;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pmaster;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1.getPathIteratorClass;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p 5;",
                "identical": false
            }
        ],
        "buggy_line": "PathIterator iterator2 = p1.getPathIterator(null);",
        "fixed_line": "PathIterator iterator2 = p2.getPathIterator(null);"
    },
    "Closure-130": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (name.globalSets == 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (name.globalSets != 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.length == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type != 1) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.aliasingGets) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type != 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && content.length == 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (name.globalSets == 1 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && key.length == 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (name.globalSets == 1 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && position.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.length == 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && position.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && position.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && content.length == 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && b.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.dataType == 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && b.aliasingGets) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && b.length == 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (name.globalSets != 1 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && position.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.dataLength == 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && headeringGets > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&3] == 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.alias) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.withSets) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && type != 1) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && vars.length == 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && key.length == 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.initialSets) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && content.length == 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && message.length == 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && type != 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && key.length == 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && key.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type != object) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b. DEFAULT_VALUE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (name.globalSets < 0 || name.localSets > 1 && content.length == 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && END_TYPE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && content.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && content.type == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (name.globalSets != 1 && name.localSets > 0 && content.length == 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && variables.length == 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && identifier.length == 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && serializeingGets > 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (name.globalSets > 0 && name.localSets == 0 && b.aliasingGets) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.aliasingGets) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && text.length == 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && result.length == 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.Data == 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && child.length == 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.ax == 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && position.aliasingGets) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (name.globalSets != 1 && name.localSets > 0 && b.length == 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (name.globalSets && name.localSets > 0 && name.length == 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && message.type == 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.cle) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.code == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (name.globalSets == 0 && name.localSets > 1 && type == 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && signalGets > 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && key.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.quad == 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && original.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && content.length > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && signalName) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (name.globalSets < 0 || name.localSets > 1 && b.length == 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type != i) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && object.length == 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && green {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && result.length > 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.aliasingGets;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.initialSets) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && content.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (name.globalSets == 0 || name.localSets == 0 && type != 1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.UNION) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.generator == 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.extraSets) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.withSets) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && END_TYPE) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.dataType == 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && key.length == 1) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b. Document) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.route) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && getter) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.Parents) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && identifier.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.replaceingGets > 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && original.aliasingGets) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&ew) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.merge;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b. green {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && b.length > 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.index;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (name.globalSets != 1 || name.localSets > 0 && type != 1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && original.aliasingGets == 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (name.globalSets == 1 && name.localSets == 0 &&",
        "fixed_line": "if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&"
    },
    "Chart-20": {
        "fixes": [
            {
                "k": 1,
                "patch": "super(value, stroke, paint,Big, alpha);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "super(value, stroke, paint, scala, alpha);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "super(value, stroke, paint, _paint, alpha);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "super(value, stroke, paint, builderForValue, alpha);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "super(REF, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "super( b, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "super(value, stroke, paint, Marker, alpha);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "super(value, stroke, paint,coordinate, alpha);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "super(value, stroke, paint, fork, alpha);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "super(off, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "super(value, stroke, paint, outline, alpha);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "super(alpha, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "super(value, stroke, paint, objectId, alpha);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "super(value, stroke, paint,Appearance, alpha);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "super(NATIVE, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "super(value, stroke, paint, getE, alpha);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "super(value, stroke, paint, messages, alpha);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "super(value, stroke, paint, camel, alpha);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "super( hex, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "super(value, stroke, paint,Seen, alpha);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "super(variable, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "super(chunk, paint, stroke, outline, alpha);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "super(value, stroke, paint, condition, alpha);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "super(value, stroke, paint,paint, alpha);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "super(blue, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "super(value, stroke, paint, documentation, alpha);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "super(value, stroke, paint, off, len);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "super(left, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "super( b, value, stroke, paint, _paint, alpha);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "super(value, stroke, paint,ends, alpha);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "super( enabled, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "super(value, stroke, paint, projection, alpha);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "super(value, stroke, paint, broadcast, alpha);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "super(value, stroke, paint, special, alpha);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "super(value, stroke, paint,StateChange, alpha);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "super(value, stroke, paint,NAMESPACE, alpha);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "super(value, stroke, paint, off, alpha);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "super(REF, value, stroke, paint, _paint, alpha);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "super(value, stroke, paint, OS, alpha);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "super(Datetime, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "super(value, stroke, paint, Jackson, alpha);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "super(alpha, value, stroke, paint, _paint, alpha);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "super(value, stroke, paint, zero, alpha);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "super(value, stroke, paint, fetch, alpha);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "super(value, stroke, paint, tx, dx, alpha);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "super(value, stroke, paint, g, alpha);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "super( characters, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "super($, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "super(value, stroke, paint, ix, alpha);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "super(value, stroke, paint,3, alpha);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "super(value, stroke, paint,put, alpha);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "super(value, stroke, paint, model, alpha);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "super( radius, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "super(value, stroke, outline, alpha, getter);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "super(en, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "super( Pref, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "super(iface, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "super(value, stroke, outline, alpha, out, stroke);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "super(alpha, value, stroke, paint, tx, alpha);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "super(value, stroke, paint,Persistent, alpha);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "super(value, stroke, outline, alpha, y);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "super(value, stroke, paint, uncol, alpha);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "super(value, stroke, paint, content, alpha);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "super( b, value, stroke, paint, tx, alpha);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "super( tz, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "super(value, stroke, paint, wrap, alpha);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "super(value, stroke, outline, alpha, value);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "super(value, stroke, paint,data, alpha);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "super(value, stroke, paint, 3;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "super(hmac, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "super( source, paint, stroke, alpha, additionalClear);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "super(value, stroke, paint,unt, alpha);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "super(value, stroke, paint,Relationship, alpha, y);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "super(value, stroke, paint,Relationship, alpha);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "super(chunk, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "super(value, stroke, paint, tx, alpha);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "super(name, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "super(value, stroke, outline, alpha, additionalStroke, alpha);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "super(value, stroke, paint,Relationship, alpha, additionalClear);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "super(value, stroke, outline, alpha,Appearance, alpha);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "super(value, stroke, paint,Relationship, alpha, lines);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "super(value, stroke, paint,Relationship, alpha, getter);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "super(value, stroke, paint,Relationship, alpha,Appearance);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "super(value, stroke, paint,Relationship, alpha, out);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "super(value, stroke, paint,Relationship, alpha,getY);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "super(value, stroke, paint,Relationship, alpha, value);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "super(value, stroke, paint,Relationship, alpha, classLoader, alpha);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "super(value, stroke, outline, alpha, digest, false);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "super(value, stroke, paint,put, value;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "super(value, stroke, outline, alpha, paint, alpha);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "super(value, stroke, paint,Stack, alpha, out);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "super(value, stroke, outline, alpha, wrap, value);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "super(value, stroke, paint,unt, alpha, out);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "super(value, stroke, paint,Stack, alpha, y);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "super(alpha, value, stroke, paint, _paint, outlineStroke);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "super(value, stroke, paint,Relationship, alpha, removeListener);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "super(value, stroke, paint,Relationship, alpha, commitStroke);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "super(value, stroke, paint,Relationship, alpha, expectedLength);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "super(value, stroke, outline, alpha, digest, serialized);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "super(delegates, paint, stroke, alpha, additionalClear);",
                "identical": false
            }
        ],
        "buggy_line": "super(paint, stroke, paint, stroke, alpha);",
        "fixed_line": "super(paint, stroke, outlinePaint, outlineStroke, alpha);"
    },
    "Mockito-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (actualTypeArgument) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (isTypeArgument) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (defaultTypeArgument) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (isCollection) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (is this.actualTypeArgument) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (typeParameter) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (isClientArgument) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (variableTypeArgument) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (isMainQuery) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (isElementEntityTypeArgument) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (isEntityTypeArgument) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (is ')TypeArgument) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (isualElement) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (ismyTypeArgument) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (is this.variableTypeArgument) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (isPrimitiveTypeArgument) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (isElement) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (isLocationArgument) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if(actualTypeArgument) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (isMapTypeArgument) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (isJavaTypeArgument) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (isOwnerTypeArgument) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (hasTypeArgument) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (islayoutTypeArgument) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (is(actualTypeArgument) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (isualActual) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (isLocationTypeArgument) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (isSerializableTypeArgument) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (isWildcard) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (requiredTypeArgument) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (swaggerTypeArgument) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (shouldTypeArgument) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (isNativeTypeArgument) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (nextTypeArgument) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (isNotLast) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (isFactory) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (isViewTypeArgument) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (channelTypeArgument) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (isNotEmpty) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (isMainQueryArgument) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (isKey) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (isElementTypeArgument) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (isExecutedTypeArgument) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (isDataArgument) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (is illegal) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (isElementualActual) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (isingTypeArgument) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (is startTypeArgument) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (isEnum) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (is removeTypeArgument) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (keyTypeArgument) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (isIsNormalScope) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (isualCapacity) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (includeTypeArgument) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if ( OptionsTypeArgument) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (expectedTypeArgument) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (isHashCode) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (isExtension) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (lookupTypeArgument) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (typeArgument) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (isEntityManager) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (isLocationObs) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (isLocationCollection) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (ENCODINGTypeArgument) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (isElementCollection) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (isMainQueryFlush) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (isFunction) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (formatTypeArgument) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (wrapTypeArgument) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (deleteTypeArgument) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (isInfos) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (isFlush) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (isualActualTypeArgument) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (isFrom) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (isHigh) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if ( textTypeArgument) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (RuleTypeArgument) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (isFile) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (isRequired) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (isToCollection) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (is) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (eHashCode) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (isLocation) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (isSeconds) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (isNone) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (isActive) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (isisset) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (RuleArgument) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (isElementualActualTypeArgument) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (iseld) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (isSimple) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (isClass) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (is version) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (isTimeMillis) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (isCall) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (isProperties) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (isParameter) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (isClause) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (is e) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (isPredicate) {",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (typeParameter != actualTypeArgument) {"
    },
    "Closure-168": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (t.getScopeDepth == 2) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (t.getScopeDepth == 2) { // end of record or input",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (t.getScopeDepth == 2) { // end of record or input...",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (t.getScopeDepth instanceof 2) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (t.getScopeDepth == 3) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (t.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (t.getScopeDepth == 2) { // null only before/after document",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (t.getScopeDepth == 2) { // No namespaces",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (t.getScopeDepth == 2) { // end-of-order",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (t.getScopeDepth == 2) { // handle headless",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (t.getScopeDepth == 2) { // handle LF later on",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (t.getScopeDepth == 2) { // end of input",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (t.getScopeDepth == 2) { // end of input?",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (t.getScopeDepth == 2) { // allows not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (t.getScopeDepthV6_PART_COUNT == 2) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (t.getScopeDepth == 2) { // only one-order",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (t.getScopeDepth == 2) { // end of input...",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (t.getScopeDepth == 2) { // nope, looks like-order",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (t.getScopeDepth == 2) { // skip to avoid double set false pos",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (t.getScopeDepth == 2) { //checkbox't been discovered yet",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (t.getScopeDepth == 2) { // nope, we don't been discovered yet",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (t.getScopeDepth == 2) { // for now, we don't support such coercion?",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can't been discovered yet",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we support such coercion?",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are the end of record or input",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (t.getScopeDepth == 2) { // add at the end of record or input",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (t.getScopeDepth == 2) { // nope, we don't support such coercion?",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (t.getScopeDepth == 2) { // only one allowed",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (t.getScopeDepth == 2) { // allows not, looks like-order",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (t.getScopeDepth == 2) { // no, looks like-order",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (t.getScopeDepth) == 2) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can be only one",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (t.getScopeDepth == 2) { // simple literals, we are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (t.getScopeDepth == 2) { // updatable, looks like-order",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are the next unmatched",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (t.getScopeDepth == 2) { // no, we don't been discovered yet",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can this ever occur?",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (t.getScopeDepth == 2) { // simple literals, we don't support such coercion?",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (t.getScopeDepth == 2) { // null only before/browse/after document",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we in case there's",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned.",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can not be assigned.",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (t.getScopeDepth == 2) { // simple literals, we don't been discovered yet",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (t.getScopeDepth == 2) { // AN-case letter means we can get new in case there's",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (t.getScopeDepth == 2) { // no, we don't support such coercion?",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (t.getScopeDepth == 2) { // shift-of-line means we can't been discovered yet",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (t.getScopeDepth == 2) { // only before/after document",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (t.getScopeDepth == 2) { // 2000, looks like-order",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (t.getScopeDepth == 2) { // allows not, we support such coercion?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (t.getScopeDepth == 2) { // handle environment includes",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (t.getScopeDepth == 2) { //Go't been discovered yet",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (t.getScopeDepth == 2) { // no-order",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are extra elements; maybe otherwise too...",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (t.getScopeDepth == 2) { //produces, common case",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't matched",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (t.getScopeDepth == 2) { // simple literals, we are extra elements; maybe otherwise size() would be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (t.getScopeDepth == 1) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (t.getScopeDepth == 2) { // and then we don't support such coercion?",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can get new in case there's",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't been discovered",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are extra elements; maybe otherwise too",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (t.getScopeDepth == 2) { // nope, we are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (t.getScopeDepth == 2) { // AN-case letter means we can not be assigned.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are not called by default",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (t.getScopeDepth == 2) { //produces, we are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (t.getScopeDepth == 2) { //Transformer, looks like-order",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are extra elements; maybe otherwise size() would be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we are not called by default",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (t.getScopeDepth == 2) { // updatable, looks like not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (t.getScopeDepth == 2) { // null only before/browse/trailing spaces is",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can not be assigned. Also declare the methods parameters as 'raw't been discovered yet",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (t.getScopeDepth == 2) { // null only before/after camelize)",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can't be yet",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (t.getScopeDepth == 2) { // AN-case letter means we can get new in case",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (t.getScopeDepth == 2) { // allows not, we are the next unmatched",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (t.getScopeDepth == 2) { // nope, looks like",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can be set in case",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (t.getScopeDepth == 2) { // no, looks like",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (t.getScopeDepth == 2) { // for now, we don't been discovered yet",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (t.getScopeDepth == 2) { // for now, we are the next unmatched",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (t.getScopeDepth == 2) { // allows not, looks like",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (t.getScopeDepth == 2) { // simple literals, we don't support!",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (t.getScopeDepth == 2) { // simple literals, we are extra elements; maybe otherwise too...",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't know if there's",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are the end of record or input...",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't lowercase",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (t.getScopeDepth == 2) { // AN-order",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can't be only one",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (t.getScopeDepth == 2) { // ignore non-order",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (t.getScopeDepth == 2) { // nope, we are extra elements; maybe otherwise too",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (t.getScopeDepth == 2) { // business as per-order",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (t.getScopeDepth == 2) { // for now, we don't support!",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (t.getScopeDepth == null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (t.getScopeDepth == 2) { // updatable, common case",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (t.getScopeDepth == 2) { // and then we don't support!",
                "identical": false
            }
        ],
        "buggy_line": "if (t.getScopeDepth() <= 2) {",
        "fixed_line": "if (t.getScopeDepth() <= 1) {"
    },
    "Lang-6": {
        "fixes": [
            {
                "k": 1,
                "patch": "pos += Character.charCount;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "pos += Character.charCount(codePointAt, pos);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "pos += Character.charCount(codePointAt, pos - pt;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "pos += Character.charCount(codePoint, pt);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "pos += Character.charCount(codePointAt, pos;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "pos += Character.charCount(codePointAt, pt);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "pos += Character.charCountPerCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "pos += Character.charCount(codePointAt, pos + pt;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "pos += Character.charCountPerNode.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "pos += Character.charCount(codePointAt, pos - 1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "pos += Character.charCount(codePointAt, pos) + 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "pos += Character.charCount(codePointAtStart, pos);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "pos += Character.charCount(codePointAt, pos - pt);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "pos += Character.charCount(codePoint, pt;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "pos += Character.charCount(codePointAt, pos) + pt;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "pos += Character.charCountBeforeCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "pos += Character.charCount(pos, pt);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "pos += Character.charCountedCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "pos += Character.charCount_QUAt(pos, pt);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "pos += Character.charCount(codePointAt, pos - extraStart;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "pos += Character.charCount(codePointAt, pos - extraSize;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "pos += Character.charCount(codePointAt, pos - extraCols;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "pos += Character.charCount.\"Character.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "pos += Character.charCountCharPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "pos += Character.charCount(codePoint, pos, pt);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "pos += Character.charCount(codePointAt, pt;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "pos += Character.charCount(codePointAt, pos + pt);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "pos += Character.charCountToCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "pos += Character.charCountHeadPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "pos += Character.charCount(codePointAt, pos));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "pos += Character.charCount MINCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "pos += Character.charCountRingCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "pos += Character.charCountOrCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "pos += Character.charCountQueryPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "pos += Character.charCount(codePointAt, pos) + extra;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "pos += Character.charCounttemplate.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "pos += Character.charCount(codePointAt, pos, pt);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "pos += Character.charCountDot.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "pos += Character.charCountE.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "pos += Character.charCountProject.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "pos += Character.charCountAt(pos, pt);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "pos += Character.charCount(codePointAtStart, pt);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "pos += Character.charCount(codePointAtBuilder, pt);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "pos += Character.charCount(codePointAt, pos - extralo;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "pos += Character.charCountJobPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "pos += Character.charCount(codePointAt, state;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "pos += Character.charCount(codePointAt, pos - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "pos += Character.charCount(codePoint, state;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "pos += Character.charCount(codePointAt;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "pos += Character.charCount(codePointAt, pos - extra;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "pos += Character.charCount(codePointAt, pos);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "pos += Character.charCount(codePointAt, pos -ocation;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "pos += Character.charCount contentTypePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "pos += Character.charCount(codePointAt, pos - extra elements;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "pos += Character.charCountBeforeAt(pos, pt);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "pos += Character.charCountLinePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "pos += Character.charCount(codePointAt_, pt);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "pos += Character.charCountPerCharacter.codePointAt(c, pt);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "pos += Character.charCount endpointPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "pos += Character.charCount(codePointAt, that.codePointAt;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "pos += Character.charCount(!codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "pos += Character.charCount servicePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "pos += Character.charCountPerPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "pos += Character.charCount(codePointAt, pos - args;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "pos += Character.charCountglobal(codePoint, pos, pt);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "pos += Character.charCount(codePointAt, pos - paramPointAt;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "pos += Character.charCount(codePointAt, pos) ;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "pos += Character.charCountPerCharacter.codePointAt(serviceName, pt);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "pos += Character.charCount(errorCodePoint, pos, pt);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "pos += Character.charCount(codePointAt, pos - tablePointAt;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "pos += Character.charCountOnAt(pos, pt);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "pos += Character.charCount(codePointAt, pos -ACCESS_SUFFIX;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "pos += Character.charCountPerBatchAt(pos, pt);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "pos += Character.charCountValuesAt(pos, pt);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "pos += Character.charCountzoomPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "pos += Character.charCount(codePointAt, pos) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "pos += Character.charCount(codePointAt, pos - response;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "pos += Character.charCount(lowestString, pt);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "pos += Character.charCountexpressionPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "pos += Character.charCountrPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "pos += Character.charCount(codePointAt, pos) pt;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "pos += Character.charCount(codePoint, pt - 1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "pos += Character.charCount(codePointAt, pos) + 1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "pos += Character.charCountHelperAt(pos, pt);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "pos += Character.charCount(codePointAtThis, pos);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "pos += Character.charCount(codePointAt, pos) node;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "pos += Character.charCountRawAt(pos, pt);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "pos += Character.charCounticalAt(pos, pt);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "pos += Character.charCountPerVertexAt(pos, pt);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "pos += Character.charCount(codePointAt_, pt;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "pos += Character.charCount(codePointAtAlias, pt);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "pos += Character.charCount(enclosing, pos);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "pos += Character.charCountTailClassAt(pos, pt);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "pos += Character.charCountPerLAt(pos, pt);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "pos += Character.charCount(codePointAt, pos - extraPos;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "pos += Character.charCount(input, pt);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "pos += Character.charCount bodyPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "pos += Character.charCount(codePointAt(0, pos);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "pos += Character.charCount(codePointAt,to - pt;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "pos += Character.charCount(codePointAt, pos - decode;",
                "identical": false
            }
        ],
        "buggy_line": "pos += Character.charCount(Character.codePointAt(input, pos));",
        "fixed_line": "pos += Character.charCount(Character.codePointAt(input, pt));"
    },
    "Mockito-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "primitiveValues.put(double.class, 0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "primitiveValues.put(double.class, 1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "primitiveValues.put(double.class,primitiveValues);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "primitiveValues.put(double.class, 0, 0);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "primitiveValues.put(double.class, tmpValues);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "primitiveValues.put(double.class, 0, 1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "primitiveValues.put(double.class, outputdouble.class);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "primitiveValues.put(double.class, persistedValues);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "primitiveValues.put(double.class, shortValues);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "primitiveValues.put(double.class, long.class);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "primitiveValues.put(double.class, 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "primitiveValues.put(double.class,tmpValues);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "primitiveValues.put(double.class, double.class);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "primitiveValues.put(double.class, null);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "primitiveValues.put(double.class, float.class);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "primitiveValues.put(double.class, count);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "primitiveValues.put(double.class, assumeValues);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "primitiveValues.put(double.class, deviceValues);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "primitiveValues.put(double.class, 2);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "primitiveValues.put(double.class, 60000Values);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "primitiveValues.put(double.class, progressValues);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "primitiveValues.put(double.class, bytesTodouble.class);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "primitiveValues.put(double.class,primitiveValue);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "primitiveValues.put(double.class, NOSON_DELIMITER);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "primitiveValues.put(double.class, aliasValues);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "primitiveValues.put(double.class,themeValues);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "primitiveValues.put(double.class, sectionValues);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "primitiveValues.put(double.class, matcher.class);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "primitiveValues.put(double.class, proValues);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "primitiveValues.put(double.class, pathValue);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "primitiveValues.put(double.class, widthValue);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "primitiveValues.put(double.class, optimize);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "primitiveValues.put(double.class,frameworkValues);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "primitiveValues.put(double.class, getHeightValues);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "primitiveValues.put(double.class, TextAreaValues);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "primitiveValues.put(double.class, builder.class);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "primitiveValues.put(double.class,SeparValues);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "primitiveValues.put(double.class, calculationValues);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "primitiveValues.put(double.class, ResultSet.class);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "primitiveValues.put(double.class, builder.primitiveValues);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "primitiveValues.put(double.class, username);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "primitiveValues.put(double.class, dirtyValues);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "primitiveValues.put(double.class, IdentValues);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "primitiveValues.put(double.class, incrementValues);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "primitiveValues.put(double.class, friendlyValues);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "primitiveValues.put(double.class, ByteArrayValues);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "primitiveValues.put(double.class, strValue);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "primitiveValues.put(double.class,QueuedValues);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "primitiveValues.put(double.class, topoValues);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "primitiveValues.put(double.class, Pattern.class);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "primitiveValues.put(double.class, origin);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "primitiveValues.put(double.class,HashesValues);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "primitiveValues.put(double.class, NIL);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "primitiveValues.put(double.class, 1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "primitiveValues.put(double.class,TypedValue);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "primitiveValues.put(double.class, outputdouble);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "primitiveValues.put(double.class, getProxyValues);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "primitiveValues.put(double.class, valValues);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "primitiveValues.put(double.class, this.primitiveValues);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "primitiveValues.put(double.class,_\" + 1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "primitiveValues.put(double.class, NOSON_CLOSED);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "primitiveValues.put(double.class, vertexValues);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "primitiveValues.put(double.class, variableValues);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "primitiveValues.put(double.class,CATEGORYValues);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "primitiveValues.put(double.class, this.double.class);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "primitiveValues.put(double.class, NOSON_DELTA);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "primitiveValues.put(double.class, accValues);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "primitiveValues.put(double.class, heading);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "primitiveValues.put(double.class, '_Values);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "primitiveValues.put(double.class, NAME);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "primitiveValues.put(double.class, RemoveValues);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "primitiveValues.put(double.class, jspValues);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "primitiveValues.put(double.class,App / 0);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "primitiveValues.put(double.class, variableName);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "primitiveValues.put(double.class, type);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "primitiveValues.put(double.class, NO_class);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "primitiveValues.put(double.class,XXValues);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "primitiveValues.put(double.class, dateValues);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "primitiveValues.put(double.class, HashMap);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "primitiveValues.put(double.class, NOSON_OF_WEEK);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "primitiveValues.put(double.class,Value);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "primitiveValues.put(double.class,2]);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "primitiveValues.put(double.class,ApiValues);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "primitiveValues.put(double.class, res);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "primitiveValues.put(double.class, invoker);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "primitiveValues.put(double.class, 16);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "primitiveValues.put(double.class, NOSON_OF_STRINGS);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "primitiveValues.put(double.class, minXValues);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "primitiveValues.put(double.class, ctx);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "primitiveValues.put(double.class, HashMapValue);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "primitiveValues.put(double.class, element);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "primitiveValues.put(double.class, NOSON_DEFINES);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "primitiveValues.put(double.class, headers);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "primitiveValues.put(double.class, NOSON_OF_STRING);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "primitiveValues.put(double.class, CSS);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "primitiveValues.put(double.class, pathLength);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "primitiveValues.put(double.class, uniqueValues);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "primitiveValues.put(double.class, shortValue);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "primitiveValues.put(double.class, connectionValue);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "primitiveValues.put(double.class,unit);",
                "identical": false
            }
        ],
        "buggy_line": "primitiveValues.put(double.class, 0);",
        "fixed_line": "primitiveValues.put(double.class, 0D);"
    },
    "Closure-62": {
        "fixes": [
            {
                "k": 1,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "&& i < charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "&& i < charno && charno == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "&& 0 == charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "&& i < charno && charno > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "&& 0 != charno && sourceExcerpt.length > 1) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "&& 0 != charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "&& i < charno && charno == sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "&& i < charno && charno >= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "&& charno != charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "&& i < charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "&& charno != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "&& 0 < charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "&& i < charno && charno >= sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "&& 0 != charno && sourceExcerpt.length > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "&& i < charno && charno == sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "&& 0 != charno && sourceExcerpt.length > i) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "&& 0 == charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "&& 0 != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "&& 0 != charno && sourceExcerpt.length == 1) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "&& 0no != charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "&& 0 != charno && sourceExcerpt.length - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "&& i < charno && charno != sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "&& 0 == charno && charno >= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "&& i < charno && charno.length == sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "&& 0no != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "&& i < charno && charno >= sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "&& i < charno && charno > sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "&& i == charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "&& i < charno && charno.length > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "&& i < charno && charno.length - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "&& 0no != charno && sourceExcerpt.length > 1) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "&& 0 < charno && charno >= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "&& 0 == charno && charno > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "&& charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "&& i < charno && charno.length == 2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "&& 0 != charno && sourceExcerpt.length > byte[sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "&& 0 != charno && sourceExcerpt.length() {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "&& i < charno && charno != sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "&& charno > charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "&& 0 != charno && sourceExcerpt.length > i;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "&& 0 != charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "&& i == charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "&& charno != charno && sourceExcerpt.length - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "&& 0 < charno && charno > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "&& Tno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "&& 0no != charno && sourceExcerpt.length > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "&& 0 != charno && sourceExcerpt.length > i++) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "&& i < charno && charno - sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "&& i < charno && charno.length == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "&& 0no != charno && sourceExcerpt.length > i) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "&& charno >= charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "&& 0 == charno && charno > sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "&& 0no != charno && sourceExcerpt.length - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "&& i < charno && charno.length > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "&& charno != charno && sourceExcerpt.length > i) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "&& charno != charno && sourceExcerpt.length > 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "&& 0 != charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "&& 0 != charno && sourceExcerpt.length > byteLength;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "&& charno != charno && sourceExcerpt.length > 1) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "&& i < charno && charno.length == 0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "&& 0 != charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "&& 0 < charno && charno == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "&& 0 != charno && sourceExcerpt.length > 5;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "&& i == charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "&& charno > charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "&& charno & charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "&& 0 < charno && charno != charcerpt.length()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "&& 0 != charno && sourceExcerpt.length > byte[sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "&& 0 != charno && sourceExcerpt.length > 16) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "&& 0no != charno && sourceExcerpt.length() {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "&& charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "&& 0 != charno && sourceExcerpt.length == 0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "&& 1 < charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "&& charno != charno && sourceExcerpt.length() {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "&& 0 != charno && sourceExcerpt.length > 3;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "&& i < charno && charno.length == sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "&& i < charno && charno - sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "&& 0 < charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "&& i == charno && charno > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "&& 0x0cerpt != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "&& 0 != charno && sourceExcerpt.length == 16) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "&& Tno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "&& 0 != charno && sourceExcerpt.length == byteLen;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "&& 0 != charno && sourceExcerpt.length > byteLen;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "&& charno & charno && sourceExcerpt.length == 1) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "&& 0 != charno && sourceExcerpt.length - 1) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "&& 0 != charno && sourceExcerpt.length == end;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "&& i < charno && charno.length == 1) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "&& 0x0cerpt != charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "&& 0no != charno && sourceExcerpt.length == 1) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "&& i == charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "&& 0xno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "&& postpt != charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "&& 0no != charno && sourceExcerpt.length > byte[sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "&& 0xff == charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "&& i < sourceExno && charno > sourceExcerpt.length;",
                "identical": false
            }
        ],
        "buggy_line": "&& 0 <= charno && charno < sourceExcerpt.length()) {",
        "fixed_line": "&& 0 <= charno && charno <= sourceExcerpt.length()) {"
    },
    "Codec-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxIdentifier);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxUtil.length);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "long len = getEncodeLength(url, szData, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "long len = getEncodeLength(url, inSize, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "long len = getEncodeLength(url,gre, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "long len = getEncodeLength(url, setUse_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "long len = getEncodeLength(url, inet, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "long len = getEncodeLength(url, timeout, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "long len = getEncodeLength(url, 0, len);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxIdentifier);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "long len = getEncodeLength(url, Free, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "long len = getEncodeLength(url,Point, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "long len = getEncodeLength(url, maxResult, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "long len = getEncodeLength(url,subscription, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "long len = getEncodeLength(url,ATCH_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "long len = getEncodeLength(url,Instant, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "long len = getEncodeLength(url, floating_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "long len = getEncodeLength(url,LEMENT_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "long len = getEncodeLength(url, OF_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, 8);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "long len = getEncodeLength(url, req_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "long len = getEncodeLength(url, OF_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxGapOffset);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxData.length);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxUtil.length);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "long len = getEncodeLength(url, less_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "long len = getEncodeLength(url, delimiter, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "long len = getEncodeLength(url, length, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "long len = getEncodeLength(url,TRANSLATOR_SEPARATOR, maxResultSize);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxIdentifier);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "long len = getEncodeLength(url, setUse_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, null);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "long len = getEncodeLength(url, maxResult, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "long len = getEncodeLength(url, req_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "long len = getEncodeLength(url,LEMENT_CHUNK_SIZE, maxAvailableWidth);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxResult);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, max length);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "long len = getEncodeLength(url,ATCH_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, 8;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "long len = getEncodeLength(url,NDI_CHUNK_SIZE, maxAvailableWidth);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "long len = getEncodeLength(url,Workbook_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxium_SEPARATOR;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "long len = getEncodeLength(url,LEMENT_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, DEFAULT_OF_STRING_SIZE);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "long len = getEncodeLength(url, JMenu_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxMarginSize);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "long len = getEncodeLength(url,Arn_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "long len = getEncodeLength(url,NDI_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "long len = getEncodeLength(url, SECONDS_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "long len = getEncodeLength(url, '-'_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "long len = getEncodeLength(url,users_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, getClient_SEPARATOR);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, 8);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, DEFAULT_BATCH_SIZE);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "long len = getEncodeLength(url,users_CHUNK_SIZE, maxAvailableWidth);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "long len = getEncodeLength(url, knowledge_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, vaData);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxData);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, cacheSize);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, allowLength);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, 8;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, preprocessor_SEPARATOR);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "long len = getEncodeLength(url,users_CHUNK_SIZE, maxIdentifier);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "long len = getEncodeLength(url, calculation_SEPARATOR, maxAvailableWidth);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "long len = getEncodeLength(url, methodName, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth,Mgr);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, DEFAULT_LENGTH_SEPARATOR);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "long len = getEncodeLength(url,EL_CHUNK_SIZE, maxIdentifier);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, DEFAULT_ikari_SEPARATOR);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth, DEFAULT_BATCH_SIZE);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, cacheSize);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "long len = getEncodeLength(url,ATCH_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "long len = getEncodeLength(url, contentStart, maxResultSize);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "long len = getEncodeLength(url,gar, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "long len = getEncodeLength(url, password, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, 0);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "long len = getEncodeLength(url, calculation_SEPARATOR, maxResultSize);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "long len = getEncodeLength(url, dateTime, maxResultSize);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "long len = getEncodeLength(url, setUse_CHUNK_SIZE, maxAvailableWidth, DEFAULT_BATCH_SIZE);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "long len = getEncodeLength(url, mediaType, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxResultSize;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxFilesSize);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "long len = getEncodeLength(url, setUse_CHUNK_SIZE, maxIdentifier);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth, DEFAULT_ikari_SEPARATOR);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, DEFAULT_TIMEOUT_SEPARATOR);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, maxWidth);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "long len = getEncodeLength(url, floating_CHUNK_SIZE, maxAvailableWidth, DEFAULT_BATCH_SIZE);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxData);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxiumLength);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxSpacing);",
                "identical": false
            }
        ],
        "buggy_line": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
        "fixed_line": "long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);"
    },
    "Math-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final double DEFAULT_EPSILON = 1024-9;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final double DEFAULT_EPSILON = 10;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final double DEFAULT_EPSILON = 11-9;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final double DEFAULT_EPSILON = 10);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final double DEFAULT_EPSILON = 10)e-9;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final double DEFAULT_EPSILON = 1024;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final double DEFAULT_EPSILON = 102410;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final double DEFAULT_EPSILON = 1024000e-9;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final double DEFAULT_EPSILON = 50e-9;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final double DEFAULT_EPSILON = 102424-9;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final double DEFAULT_EPSILON = 1024Transaction-9;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final double DEFAULT_EPSILON = 1000;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final double DEFAULT_EPSILON = 1024Empty-9;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final double DEFAULT_EPSILON = 1024 borrow;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final double DEFAULT_EPSILON = 1024TEXT-9;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final double DEFAULT_EPSILON = 1024 int-9;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final double DEFAULT_EPSILON = 102411;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final double DEFAULT_EPSILON = 1024Interface-9;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final double DEFAULT_EPSILON = 9-9;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final double DEFAULT_EPSILON = 9 9-9;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final double DEFAULT_EPSILON = 1024ren-9;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final double DEFAULT_EPSILON = 1024OPTIONS;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final double DEFAULT_EPSILON = 1024.0-9;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final double DEFAULT_EPSILON = 1024 * 1024;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final double DEFAULT_EPSILON = 1024FULL-9;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final double DEFAULT_EPSILON = 1024Value-9;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final double DEFAULT_EPSILON = 1024Positions.length-9;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final double DEFAULT_EPSILON = 1000e-9;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final double DEFAULT_EPSILON = 1024 display-9;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final double DEFAULT_EPSILON = 1024transform;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final double DEFAULT_EPSILON = 10249;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final double DEFAULT_EPSILON = 1024 removing;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final double DEFAULT_EPSILON = 1024file-9;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final double DEFAULT_EPSILON = 1024DE-9;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final double DEFAULT_EPSILON = 1024ically;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final double DEFAULT_EPSILON = 1024 edge-9;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final double DEFAULT_EPSILON = 1024Future;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final double DEFAULT_EPSILON = 1024metadata-9;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final double DEFAULT_EPSILON = 10240;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final double DEFAULT_EPSILON = 1024userId-9;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final double DEFAULT_EPSILON = 60-9;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final double DEFAULT_EPSILON = 102424, 10e-9;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final double DEFAULT_EPSILON = 10248-9;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final double DEFAULT_EPSILON = 1024$;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final double DEFAULT_EPSILON = 1024Empty;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final double DEFAULT_EPSILON = 1024+-9;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final double DEFAULT_EPSILON = 10) * 1024;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final double DEFAULT_EPSILON = 1024ED-9;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final double DEFAULT_EPSILON = 1024Comparison;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final double DEFAULT_EPSILON = 1024HTML;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final double DEFAULT_EPSILON = 10242;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final double DEFAULT_EPSILON = 1024Instead-9;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final double DEFAULT_EPSILON = 1024block-9;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final double DEFAULT_EPSILON = 1024Addresses-9;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final double DEFAULT_EPSILON = 1024];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final double DEFAULT_EPSILON = 10243;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final double DEFAULT_EPSILON = 1024pop-9;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final double DEFAULT_EPSILON = 1024WS-9;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final double DEFAULT_EPSILON = 14e-9;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final double DEFAULT_EPSILON = 102425;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final double DEFAULT_EPSILON = 1024ScrollPane;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final double DEFAULT_EPSILON = 1024Milliseconds-9;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final double DEFAULT_EPSILON = 1024Arguments-9;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final double DEFAULT_EPSILON = 10241190;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final double DEFAULT_EPSILON = 1024Mime;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final double DEFAULT_EPSILON = 1024 inheritance;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final double DEFAULT_EPSILON = 1024 formatted-9;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final double DEFAULT_EPSILON = 1024 9-9;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final double DEFAULT_EPSILON = 10241190-9;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final double DEFAULT_EPSILON = 10240008-9;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final double DEFAULT_EPSILON = 1024ean;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final double DEFAULT_EPSILON = 1024subscribe;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final double DEFAULT_EPSILON = 1024 expectedResult;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final double DEFAULT_EPSILON = 1024Future-9;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final double DEFAULT_EPSILON = 1024ire;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final double DEFAULT_EPSILON = 1024adjust;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final double DEFAULT_EPSILON = 1024 Lat;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final double DEFAULT_EPSILON = 1024 JPanel;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final double DEFAULT_EPSILON = 9 92;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final double DEFAULT_EPSILON = 1024PM;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final double DEFAULT_EPSILON = 1024Ns;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final double DEFAULT_EPSILON = 102415-9;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final double DEFAULT_EPSILON = 1024Positions;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final double DEFAULT_EPSILON = 10243)-9;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final double DEFAULT_EPSILON = 1024 getError;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final double DEFAULT_EPSILON = 1024 runtimeex-9;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final double DEFAULT_EPSILON = 1024 declare thecomparator-9;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final double DEFAULT_EPSILON = 102412;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final double DEFAULT_EPSILON = 10249-9;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final double DEFAULT_EPSILON = 10241;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final double DEFAULT_EPSILON = 1024ge-9;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final double DEFAULT_EPSILON = 10249 10;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final double DEFAULT_EPSILON = 1024TIME-9;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final double DEFAULT_EPSILON = 1024TIME;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final double DEFAULT_EPSILON = 100;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final double DEFAULT_EPSILON = 1024502;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final double DEFAULT_EPSILON = 10244, 10e-9;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final double DEFAULT_EPSILON = 9 9Parallel;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final double DEFAULT_EPSILON = 1024], 10);",
                "identical": false
            }
        ],
        "buggy_line": "private static final double DEFAULT_EPSILON = 10e-9;",
        "fixed_line": "private static final double DEFAULT_EPSILON = 10e-15;"
    },
    "Lang-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return locale.contains(locale);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return locale;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return cAvailableLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return language.contains(locale);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return languageLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return language;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return languageSet.contains(locale);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return cAvailableLocaleStr.contains(locale);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return code.contains(locale);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return languageSpecificPrSet.contains(locale);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return languageName.contains(locale);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return languageStack.contains(locale);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return locale.contains(locale;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return languageFormat.contains(locale);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return languageSpecificPrimitives.contains(locale);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return languageSpecificSet.contains(locale);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return localeSet.contains(locale);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return cseLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return locale.contains(locale) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return languageGtidSet.contains(locale);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return cToken.contains(locale);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return languageSpecificStatements.contains(locale);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return countryLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return languageSpecificGraph.contains(locale);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return localeLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return locale.contains(localeLocaleStr;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return c.contains(locale);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return languageROLLLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return locale != cAvailableLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return cLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return language != c.contains(locale);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return cForLocaleStr.contains(locale);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return codeLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return localeListLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return languageLookup.contains(locale);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return languageListLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return cListLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return codeSet.contains(locale);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "returnlocale.contains(locale);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return languageNameConstants.contains(locale);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return cTokenLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return languageType.contains(locale);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return language != locale.contains(locale);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return language == locale.contains(locale);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return locale.contains(locale)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return languageSpecificDeclaration.contains(locale);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return languageelseLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return languageRedisLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return languageMessages.contains(locale);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return locale != c.contains(locale);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return handleLocaleSet.contains(locale);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return cLocaleStr.contains(locale);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return cCountLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return cAvailableLocale.contains(locale;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return subLocaleStr.contains(locale);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return languagegeSet.contains(locale);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return defaultLocaleStr.contains(locale);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return languageInfos.contains(locale);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return localeStr.contains(locale);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return languageParams.contains(locale);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return languageList.contains(locale);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return languageLeft.contains(locale);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return languageView.contains(locale);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return languageProvider.contains(locale);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return languageVal.contains(locale);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return languageMapping.contains(locale);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return currLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return languageChoice.contains(locale);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return languageBuffer.contains(locale);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return languageResource.contains(locale);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return argLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return languageAuth.contains(locale);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return languageMatcher.contains(locale);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return cVariables.contains(locale);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return languageString.contains(locale);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return nameLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return languageFactory.contains(locale);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return languageMetadata.contains(locale);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return ctls.contains(locale);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return languages.contains(locale);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return languageObject.contains(locale);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return toLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return locale.contains(command);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return c.containsEdgeLocaleStr;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return languageParser.contains(locale);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return languageName.contains(localeLocaleStr;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return languageMap.contains(locale);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return languageDecoder.contains(locale);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return cAvailableLocale.contains(locale)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return declaringLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return languageSpan.contains(locale);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return locale.contains(localeLocaleStr);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return languageializers.contains(locale);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return languageValues.contains(locale);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "returnENUMLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return languageModule.contains(locale);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return languageNameConstants.contains(localeLocaleStr;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return locale.contains(localeStr;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return languagelabels.contains(locale);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return languageSet.contains(localeLocaleStr;",
                "identical": false
            }
        ],
        "buggy_line": "return cAvailableLocaleSet.contains(locale);",
        "fixed_line": "return availableLocaleList().contains(locale);"
    },
    "Lang-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "classes[i] = array[i].getClass;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "classes[i] = classes[i].getClass;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "classes[i] = array[i].getClass - 1];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "classes[i] = classes[i].getClass();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "classes[i] =array[i].getClass;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "classes[i] = array[i].getClass() - 1];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "classes[i] = type[i].getClass;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "classes[i] = new Class[i].getClass;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "classes[i] = array[i].getClass - 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "classes[i] = array[i].getClass - values[i].getClass;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "classes[i] = array[i].getClass() - 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "classes[i] = array[i].getClass().length - 1];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "classes[i] = array[i].getClass + i;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "classes[i] = array[i].getClass()];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "classes[i] = taskId[i].getClass;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "classes[i] = array[i].getClass().length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "classes[i] = array[i].getClass - values[i];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "classes[i] = array[i].getClass().getName;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "classes[i] = array[i].getClass != classes.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "classes[i] = var[i].getClass;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "classes[i] = Type[i].getClass;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "classes[i] = array[(i].getClass;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "classes[i] = args[i].getClass;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "classes[i] = array[i].getClass -39_CLASS_ARRAY_ELEMENTS[i].getClass;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "classes[i] = array[i].getClass > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "classes[i] = raw[i].getClass;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "classes[i] = array[i].getClass() - values[i].getClass;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "classes[i] = array[i].getClass -save_CLASS_ARRAY_ELEMENTS[i].getClass;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "classes[i] = value[i].getClass;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "classes[i] = _array[i].getClass;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENTS[i].getClass;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "classes[i] = binary[i].getClass;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "classes[i] = STYLE_CLASS[i].getClass;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "classes[i] = array[i].getClass != classes;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "classes[i] = type[i].getClass();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "classes[i] =array[i].getClass();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "classes[i] = package[i].getClass;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "classes[i] =iterable[i].getClass;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "classes[i] = record[i].getClass;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "classes[i] = array[i].getClass - 6];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "classes[i] = array[i].getClass - 2];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "classes[i] = column[i].getClass;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "classes[i] = back[i].getClass;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "classes[i] = array[i].getClass - values[i].getClass();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "classes[i] = array[i].getClass().h;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "classes[i] = accum[i].getClass;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "classes[i] = array[i].getClass -save_CLASS_ARRAY_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "classes[i] = new Class[i].getClass();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "classes[i] = getter[i].getClass;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "classes[i] =Activity[i].getClass;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "classes[i] = values[i].getClass;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "classes[i] = array[i].getClass - 6;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "classes[i] = array[i].getClass -END_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "classes[i] =cells[i].getClass;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "classes[i] = array[i].getClass 1];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "classes[i] =Pr[i].getClass;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "classes[i] = taskId[i].getClass();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "classes[i] = array[i].getClass + 1];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "classes[i] = array[i].getClass().getClass;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENT;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "classes[i] = allowed[i].getClass;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "classes[i] = array[i].getClass().array[i - 1];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "classes[i] = array[i].getClass % classes;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "classes[i] = invert[i].getClass;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "classes[i] = sd[i].getClass;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "classes[i] =FERENCE[i].getClass;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "classes[i] = event[i].getClass;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "classes[i] = array[i].getClass - i;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "classes[i] =reg[i].getClass;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "classes[i] = weight[i].getClass;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "classes[i] = array[i].getClass 0];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "classes[i] = array[i].getClass() - values[i];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "classes[i] = array[i].getClass -END_ARRAY_CLASS_ELEMENTS[i].getClass;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "classes[i] = array[i].getClass -save_ARRAY_CLASS_ELEMENTS[i].getClass;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "classes[i] = rawValue[i].getClass;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "classes[i] = in[i].getClass;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "classes[i] = t[i].getClass;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENTS;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "classes[i] = ct[i].getClass;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "classes[i] = array[i].getClass() - no_CLASS_ARRAY_ELEMENTS[i].getClass;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "classes[i] = fetches[i].getClass;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "classes[i] = execution[i].getClass;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "classes[i] = array[i].getClass().length - 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "classes[i] = array[i].getClass() - 6];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "classes[i] =door[i].getClass;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "classes[i] =Select[i].getClass;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "classes[i] = array[i].getClass - no_ARRAY_CLASS_ELEMENT;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "classes[i] = basePath[i].getClass;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "classes[i] = JAXBElement[i].getClass;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "classes[i] = Tom[i].getClass;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "classes[i] = array[i].getClass() - 6;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "classes[i] =Jpa[i].getClass;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "classes[i] =Category[i].getClass;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "classes[i] = array[i].getClass - no_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "classes[i] = buf[i].getClass;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "classes[i] = array[i].getClass - types[i].getClass;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "classes[i] = array[i].getClass -END_ARRAY_CLASS_ELEMENT;",
                "identical": false
            }
        ],
        "buggy_line": "classes[i] = array[i].getClass();",
        "fixed_line": "classes[i] = array[i] == null ? null : array[i].getClass();"
    },
    "Codec-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs2.length);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return CharSequenceUtils.regionMatches(cs2, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, true, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length};",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length};",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return CharSequenceUtils.regionMatches(cs2, false, 0, cs2, 0, Math.max(cs2.length);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, - 1, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length};",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length-22);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length()));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return CharSequenceUtils.regionMatches(cs2, false, 0, 1, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length) - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length(), cs2);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs2.length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length};",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length - 1, cs2.length);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length};",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs1, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs2.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length - 1, cs2.length);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length - 1, cs2.length);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length == 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, 1, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs2, cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length - 1, cs2.length);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length(), cs2);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return CharSequenceUtils.regionMatches(cs2, false, 0, 1, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs2.length);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length(), cs2.length == 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return CharSequenceUtils.regionMatches(cs2, false, 0, 1, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, 1, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, 1, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs3);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs2, cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length-22);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length-1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length == 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1 + cs1.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length << 1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length - 8;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length TimeUnit2.length);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length - 1, cs2.length;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length(), cs2.length};",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length(), cs2.length == 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, 0);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length-1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.lengthr2.length);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length()));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length2.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length};",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length - startIndex;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length - 8;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length - 1, cs2.length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length-2);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length2);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length(), cs1.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length(), cs1.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length - 2, cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length - 2, cs1.length(), cs2.length);",
                "identical": false
            }
        ],
        "buggy_line": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));",
        "fixed_line": "return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());"
    },
    "Math-69": {
        "fixes": [
            {
                "k": 1,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "out[i][j] = 1 * (1 - tDistributionRTL;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "out[i][j] = 1 * (1 - tDistributionComponent;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "out[i][j] = 2 * (1 - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "out[i][j] = 1 * (1 - tDistributionit.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "out[i][j] = 2 * (1 - tDistributionRTL;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "out[i][j] = 2 * (1 - tDistributionit.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "out[i][j] = 1 * (1 - tDistributionTypes.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "out[i][j] = t * (1 - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "out[i][j] = 1 * (1 - r.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "out[i][j] = 1 * (1 - tDistributionit.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "out[i][j] = 2 * (1 - tDistributionTypes.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "out[i][j] = 2 * (1 - data.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "out[i][j] = 1 * (1 - tDistributionTypes.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(0)];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(tPerNode)];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t, r);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability consumer,t);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "out[i][j] = 2 * (1 - item.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "out[i][j] = 2 * (1 - tDistributionComponent;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "out[i][j] = 2 * (1 - tDistributionit.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbabilityPanel;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "out[i][j] = 2 * (1 - 2) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "out[i][j] = 1 * (1 - tDistributionIcon;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "out[i][j] = 1 * (1 - r.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "out[i][j] = 2 * (1 - data.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "out[i][j] = 1 * (1 - tDistribution Symbol.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "out[i][j] = 1 * (1 - tDistributionit.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "out[i][j] = 1 * (1 - tDistributionStatements.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(tPerNode)];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "out[i][j] = 2 * (1 - flowComponent.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "out[i][j] = 2 * (1 - item.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "out[i][j] = 1 * (1 - tDistribution1) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "out[i][j] = 2 * (1 - deser.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbabilityPeriod;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbabilitytyp(t);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "out[i][j] = 1 * (1 - tDistributionParser.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "out[i][j] = t * (1 - r.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "out[i][j] = 1 * (1 - r.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "out[i][j] = 2 * (1 - startIndex;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "out[i][j] = 1 * (1 - tDistributionfloat.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "out[i][j] = 2 * (1 - tDistributionStr.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t0, r);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "out[i][j] = 3 * (1 - tDistributionit.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(0)t;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "out[i][j] = 2 * (1 - newConfig.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability thet;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "out[i][j] = 2 * (1 - tDistributionComponent.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "out[i][j] = 3 * (1 - tDistributionRTL;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "out[i][j] = 1 * (1 - tDistributionreset.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "out[i][j] = 1 * (1 - tDistributionStr.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "out[i][j] = 1 * (1 - tDistributionTypes.cumulativeProbability(tPerNode)];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "out[i][j] = n * (1 - tDistribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "out[i][j] = 2 * (1 -Keys.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "out[i][j] = 3 * (1 - tDistributionTypes.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "out[i][j] = 2 * (1 - delegate.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "out[i][j] = n * (1 - r.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "out[i][j] = 1 * (1 - tDistribution Symbol.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "out[i][j] = 2 * (1 -thread.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t, j) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "out[i][j] = 1 * (1 - tDistributionfloat.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "out[i][j] = 3 * (1 - tDistributionComponent;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "out[i][j] = t * (1 -Distribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability markerCount;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "out[i][j] = 1 * (1 - tDistributionfloat.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "out[i][j] = 2 * (1 - tDistribution1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "out[i][j] = 1 * (1 - tDistributionTypes.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "out[i][j] = 1 * (1 - tDistribution addt;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(0)];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t, j) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(tPerNode)];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "out[i][j] = 1 * (1 - tDistributionBlack.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbabilityLF;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbabilityROLLBAR_t;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "out[i][j] = 1 * (1 - tDistribution Symbol.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbabilityUPPER;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "out[i][j] = 2 * (1 -Called.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "out[i][j] = 2 * (1 - matching.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(tPerNode)];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "out[i][j] = 1 * (1 - tDistributionParser.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbabilitytyp(t));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "out[i][j] = 2 * (1 - flow.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "out[i][j] = 1 * (1 - tDistribution elements;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t, t);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "out[i][j] = 2 * (1 - tDistributionRT.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "out[i][j] = 1 * (1 - tDistribution[].cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "out[i][j] = 1 * (1 - tDistributionMEMBER;",
                "identical": false
            }
        ],
        "buggy_line": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
        "fixed_line": "out[i][j] = 2 * tDistribution.cumulativeProbability(-t);"
    },
    "Math-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "return solve(f, max);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return solve(min, max);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return solve(f, initial);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return solve(f, initial - min;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return solve(f, min);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return solve(f, max;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return solve(f, min;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return solve(f, max) MaxIterations;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return solve(f, initial;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return solve(f, initial - DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return solve(f, max5, MAX_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return solve(f, initial - 1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return solve(f, initial) MaxIterations;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return solve(last, max);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_ExceededException;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return solve(f, initial - DEFAULT_MAX_BATCH_SIZE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ExceededException;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_INTERVAL;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return solve(f, initial - DEFAULT_MAX_BATCH_COUNT;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return solve(f, initial - DEFAULT_MAX_CONNECTION;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return solve(f, initial - max;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_Exceed);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_Exceed);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_LICA_ExceededException;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_brid;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_COLUMNS;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return solve(catalog, max);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_CONNECTION;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return solve(f, initial - DEFAULT_ALLOW_TOPIC_ExceededException;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return solve(f, maxServiceEvaluationException);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_ExceedS;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_CIATION;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ROW;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_BATCH_ExceededException;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return solve(f, max5, MAX_MAX_BATCH_SIZE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return solve(f, initial - DEFAULT_ALLOW_LOOPS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ANCH;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_BATCH_COUNT;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_Exceediam;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return solve(f, max) Max_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return solve(min, max;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ IOUtils;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return solve(f, initial - DEFAULT_BOUNDARY_MAX_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_MIN_ExceededException;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_256;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_CAL;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return solve(f, max + 1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ACTIONS;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return solve(f, initial) interval;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return solve(f, initial - min);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return solve(f, initial - DEFAULT_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_ExceedCTIONS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return solve(f, initial - DEFAULT_MAX_AND_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_Exceed;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return solve(f, initial - DEFAULT_RESERVED_ALLOW_ExceededException;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_MATCHING;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_branch;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return solve(min, max) MaxIterations;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_Exceediam;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return solve(f, initial - DEFAULT_MAX_BATCH_INTERVAL;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_rebuild;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return solve(f, initial - DEFAULT_MAX_SECONDS;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_CONNECTION;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_PI;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_eaders;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ findByName;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_Depth;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return solve(f, max5, MAX_MAX_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_MESSAGE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_ExceedAGFunction f;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_AND;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return solve(f, initial - DEFAULT_TIMEZONE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return solve(f, initial - DEFAULT_MAX_BATCH_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_REQUEST;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return solve(f, initial - DEFAULT_MAX_BATCH_LICA_SIZE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return solve(f, initial - DEFAULT_BOUNDARY_TIMER;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_ExceedJSON;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ Qu;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_CISEED_COUNT;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return solve(f, initial - DEFAULT_MAX_DIGITS;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_Exceed;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return solve(f, max) MaxEmpty;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return solve(f, initial - DEFAULT_MAX_COUNT;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_INDEX;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ 3;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return solve(f, initial - DEFAULT_MAX_BOUNDARY_COUNT;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return solve(f, initial - DEFAULT_GENERIC_ExceededException;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return solve(f, initial - DEFAULT_MAX_BOUNDARY_TIMER;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return solve(f, max image);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_Exceedgenerator;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_Exceed</;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_BITS;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ coords;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return solve(f, initial - DEFAULT_MAX_CONTENT;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_SECONDS;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_COUNT;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return solve(f, initial - DEFAULT_MAX_INHERIT;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return solve(f, initial)prepareStatementEvaluationException;",
                "identical": false
            }
        ],
        "buggy_line": "return solve(min, max);",
        "fixed_line": "return solve(f, min, max);"
    },
    "JacksonDatabind-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "visitFloatFormat(typeHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "visitFloatFormat(typeHint, v2, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "visitFloatFormatVisitorvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "visitFloatFormat(typeHint, NR_BIG_INTEGER, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "visitFloatFormat(typeHint,ONE, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "visitFloatFormatseparator, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER instanceof JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "visitFloatFormat \"[visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "visitFloatFormatReaders, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "visitFloatFormatAs, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "visitFloatFormatTovisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "visitFloatFormatCategory(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "visitFloatFormatProxy, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "visitFloatFormat(typeHint, _NumberType, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "visitFloatFormat(typeHint, out, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "visitFloatFormat MIN_INTEGER, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "visitFloatFormatByvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "visitFloatFormatSer(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "visitFloatFormat orderBy, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "visitFloatFormatListener(typeHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "visitFloatFormatPath(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "visitFloatFormat(h, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "visitFloatFormat(\"visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER > JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "visitFloatFormateaders(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "visitFloatFormat(typeHint, NParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "visitFloatFormat(typeHint, rows, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "visitFloatFormatsvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "visitFloatFormatListener, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "visitFloatFormatDefinitionvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "visitFloatFormatCOL, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "visitFloatFormatrename, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "visitFloatFormatAsString, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "visitFloatFormat>visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "visitFloatFormatHint, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "visitFloatFormat normalized, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "visitFloatFormat createvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "visitFloatFormat(_typeHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "visitFloatFormatCOLUMNS, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "visitFloatFormat(_visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "visitFloatFormatistics(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "visitFloatFormatBean, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "visitFloatFormatAs, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "visitFloatFormatDeprecated(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "visitFloatFormatrename(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "visitFloatFormat =visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "visitFloatFormatCategory, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "visitFloatFormatBean, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "visitFloatFormat(typeHint, h, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "visitFloatFormatSerializervisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "visitFloatFormat upperBound, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "visitFloatFormatsuccess, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "visitFloatFormateaders, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "visitFloatFormat(typeHint, v2, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "visitFloatFormatClose, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "visitFloatFormat0(h, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "visitFloatFormatCharacter, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "visitFloatFormattmp, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "visitFloatFormat L, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER : _valueType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "visitFloatFormatIdHint, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER - 1) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "visitFloatFormatRecenter(typeHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "visitFloatFormatL, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "visitFloatFormat m, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "visitFloatFormatSwagger, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "visitFloatFormatstore, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "visitFloatFormatIllegalArgument, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "visitFloatFormat directory, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "visitFloatFormat protectedvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "visitFloatFormat(typeHint, o, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "visitFloatFormat uri, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "visitFloatFormat begin, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "visitFloatFormatsa, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "visitFloatFormatSync, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "visitFloatFormat ensure, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "visitFloatFormatoff, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "visitFloatFormatCategory, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "visitFloatFormatistics, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "visitFloatFormatAM, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "visitFloatFormatHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "visitFloatFormatListener = _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "visitFloatFormat(typeHint,6, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "visitFloatFormatHelper, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "visitFloatFormatapp, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "visitFloatFormat \"[, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "visitFloatFormat53, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "visitFloatFormat 255, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "visitFloatFormat \"\", typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "visitFloatFormatannotations, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "visitFloatFormat urls, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "visitFloatFormatdom, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "visitFloatFormatFlush, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "visitFloatFormatConverter, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "visitFloatFormatDistinct, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER+(0, JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "visitFloatFormatSer, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            }
        ],
        "buggy_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
        "fixed_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);"
    },
    "Closure-92": {
        "fixes": [
            {
                "k": 1,
                "patch": "int indexOfDot = code.indexOf('.');",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int indexOfDot = code.indexOf('.') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int indexOfDot = code.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int indexOfDot = code.indexOf('.') < 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int indexOfDot = codeNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int indexOfDot = codeNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int indexOfDot = value.indexOf('.');",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int indexOfDot = name.indexOf('.');",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int indexOfDot = codeNode.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int indexOfDot = code.indexOf('.') < 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int indexOfDot = code.indexOf('.') >= 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int indexOfDot = sqlForm.indexOf('.') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int indexOfDot = codePath.indexOf('.');",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int indexOfDot = codeNode.indexOf('.') < 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int indexOfDot = sb.indexOf('.');",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int indexOfDot = sqlS.indexOf('.') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int indexOfDot = filename.indexOf('.') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int indexOfDot = name.indexOf('.') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int indexOfDot = code.indexOf('.') > 0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int indexOfDot = r.indexOf('.');",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int indexOfDot = value.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int indexOfDot = value.indexOf('.') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int indexOfDot = codePath.indexOf('.') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int indexOfDot = filename.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int indexOfDot = code.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int indexOfDot = resourcePath.indexOf('.');",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int indexOfDot =Right.indexOf('.') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int indexOfDot = code.indexOf('.') < 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int indexOfDot = filename.indexOf('.');",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int indexOfDot =Right.indexOf('.');",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int indexOfDot = <firstNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int indexOfDot = sqlS.indexOf('.');",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int indexOfDot = realModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int indexOfDot =Chars.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int indexOfDot = firstNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int indexOfDot = resourcePath.indexOf('.') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int indexOfDot = sb.indexOf('.') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int indexOfDot =Chars.indexOf('.');",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int indexOfDot = firstNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int indexOfDot = messageNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int indexOfDot = realModule.indexOf('.') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int indexOfDot =Chars.indexOf('.') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int indexOfDot = newNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int indexOfDot =firstNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int indexOfDot = sqlNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int indexOfDot = codeEdge.indexOf('.') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int indexOfDot = r.indexOf('.') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int indexOfDot =**.indexOf('.') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int indexOfDot = defaultNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int indexOfDot = sqlSb.indexOf('.') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int indexOfDot = s.indexOf('.');",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int indexOfDot = channel.indexOf('.') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int indexOfDot = sqlNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int indexOfDot = sqlForm.indexOf('.');",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int indexOfDot =firstNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int indexOfDot = codegen.indexOf('.') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int indexOfDot =Right.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int indexOfDot = str.indexOf('.') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int indexOfDot = codeEdge.indexOf('.');",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int indexOfDot = jsonNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int indexOfDot = '0'.indexOf('.');",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int indexOfDot = pattern.indexOf('.');",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int indexOfDot = TABModule.indexOf('.') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int indexOfDot = sb.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int indexOfDot = [{.indexOf('.') {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int indexOfDot = name.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int indexOfDot = codePath.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int indexOfDot =bits.indexOf('.') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int indexOfDot = s.indexOf('.') < 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int indexOfDot = localName.indexOf('.');",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int indexOfDot = messageNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int indexOfDot = code.indexOf('.') size;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int indexOfDot = ipNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int indexOfDot = fullModule.indexOf('.') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int indexOfDot =bits.indexOf('.');",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int indexOfDot =maximumNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int indexOfDot = jsonNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int indexOfDot = hex.indexOf('.') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int indexOfDot = val.indexOf('.');",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int indexOfDot = codeEdge.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int indexOfDot = r.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int indexOfDot =CPModule.indexOf('.') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int indexOfDot = codegen.indexOf('.');",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int indexOfDot =CPModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int indexOfDot = code.indexOf('.');",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int indexOfDot = s.indexOf('.') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int indexOfDot = node.indexOf('.') {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int indexOfDot = Text.indexOf('.');",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int indexOfDot = unary.indexOf('.') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int indexOfDot = '0'.indexOf('.') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int indexOfDot = defaultNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int indexOfDot = error.indexOf('.');",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int indexOfDot = codeFunction.indexOf('.') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int indexOfDot = content.indexOf('.');",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int indexOfDot = path.indexOf('.');",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int indexOfDot =(\"\");.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int indexOfDot = code.indexOf('.')Box;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int indexOfDot = Text.indexOf('.') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int indexOfDot = args.indexOf('.');",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int indexOfDot =(\"\");.indexOf('.') {",
                "identical": false
            }
        ],
        "buggy_line": "int indexOfDot = namespace.indexOf('.');",
        "fixed_line": "int indexOfDot = namespace.lastIndexOf('.');"
    },
    "Jsoup-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i >= length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (i < length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (i >= last - 1) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (i >= length - 1) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (i < length - 1) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (i + 1 < length) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (i >= last + 1) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (i >= last && i < length) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (i >= startChar + 1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i >= startChar) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (i >= input.length) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i >= length + 1) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i >= position) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (i >= last - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (i >= last;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (i >= last) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i - startChar >= length) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i >= last && seq < input.length) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i >= length - 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i - start >= length) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i < length - 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (i == last - 1) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i >= last && seq < length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (i == i + 1 < input.length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (i >= isLength - 1) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (i == last - 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (i >= values.length) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (i >= s.length) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (i < input.length - 1) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i >= concept.length) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i == i + 1 < length) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i >= isLength - 1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (i >= EOF.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i >= last && i < input.length) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (i >= length -.length) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (i == length) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (i >= last && seq < input.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i == length - 1) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i - start) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i < input.length - 1; // last value of offset++) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i < input.length - 1; // last character that have at most 2 for length of offset++) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (i >= clen) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i >= 0 && i < length) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (i >= len - 1) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (i < last - 1) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i >= i + 1) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i - start < length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (i < l - 1; // last character read to have at least 7 for the last value of node i++) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i < input.length - 1; // last character that have at most 80 bits",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i < input.length - 1; // last character that have room for length of offset++) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (i >= n - 1) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i < length - 1; // last character read to have at least 7 for the last value of node i++) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (i - startChar >= input.length) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (i < l - 1; // last character read to have at most 80 bits",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (i < input.length - 1; // last character that have at most 80% of offset++) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (i - offset >= length) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (j >= length) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i < input.length - 1; // last character that have at least one for the last value of offset++) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i < length - 1; // last character read to have at most 80 bits",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i < input.length - 1; // last character that have at most 4 for length of offset++) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i == length - 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i < input.length - 1; // last character that have at most 80% of node i++) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (i < length - 1; // last character read to have at least 1 for the last value of node i++) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i < input.length - 1; // last character that have at least one for length of offset++) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i >= first.length) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (i < l - 1; // last character read to have at least 7 for the last value of vertex",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i >= 0 && i < last;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (i < input.length - 1; // last character that have at least 7 for the last value of offset++) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (i < input.length - 1; // last character that have at most 2 for length of node i++) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i < length - 1; // last character read to first at least 1 for the last value of node i++) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (i >= 0 && i < input.length) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i < l - 1; // last character read to have at least 7 for the last value of offset++) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (i >= position - 1) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i < l - 1; // last character read to have at least 7 for the last with the end of input",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i < l - 1; // last character read to have at least 7 for the last value of input",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (i >= length - position) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (i < input.length - 1; // last value of node i++) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (i == last) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (i < input.length - 1; // last character that have at least one for length of node i++) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (i < input.length - 1; // last character that have at most 4 for length of node i++) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (i < input.length - 1; // last character that have at least one for the last value of node i++) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (i < input.length - 1; // last character that be up to first at least 7 for the last value of offset++) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (i < input.length - 1; // last character that have at least one bits",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (i < input.length - 1; // last character that have at most 2 for length of offset = i++) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (i < input.length - 1; // last value >= length of offset++) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (i < length - 1; // last character read to have at least 7 for the last value of offset++) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i >= node.length) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i < input.length - 1; // last character that was included",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (i < input.length - 1; // last character that have room for the i++) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (i < length - 1; // last character read to have at most 80% of node i++) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i < input.length - 1; // last character that have at most 80% fullChunk to first length of offset++) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (i < length - 1; // last character read to have at most 1 for the last value of node i++) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (i == last + 1) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (i >= vertices.length) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i < length - 1; // last character read to have at most 4 for the last value of node i++) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (i < length - 1; // last character read to have room for the last value of node i++) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (i >= files.length) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (i < input.length - 1; // last character that have at most 80% of node to first span",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i < input.length - 1; // last!",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i < input.length - 1; // last character that have at least 7 for the last value of node i++) {",
                "identical": false
            }
        ],
        "buggy_line": "if (offset < length) {",
        "fixed_line": "if (offset < length && last <= length) {"
    },
    "Mockito-29": {
        "fixes": [
            {
                "k": 1,
                "patch": "description.appendText(description);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "description.appendText;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "description.appendText(wanted.toString;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "description.appendText(description;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "description.appendText = description;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "description.appendText(wanted.description);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "description.appendTextualCapacity;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "description.appendTextualDescription;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "description.appendText(wanted.toStringStringVariableName);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "description.appendText(wanted.toString);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "description.appendText( offQuoting.toString;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "description.appendText(ELEVATION_SERVICE_NAME;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "description.appendText getSwanted.toString;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "description.appendTextualoting.toString;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "description.appendTextgetItem.toString;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "description.appendText towanted.toString;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "description.appendTextLICwanted.toString;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "description.appendTextForQuoting.toString;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "description.appendTextualCapacity -= description.toString;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "description.appendText(wanted.description;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "description.appendTextualVariableName !=wanted.toString;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "description.appendText(wanted.toStringtraceEnabled;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "description.appendText( offQuoting.toString());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "description.appendText(wanted.toStringQuoting;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "description.appendText(wanted.toStringicDescription;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "description.appendText(wanted.toString=0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "description.appendText(wanted.toStringStringVariableName;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "description.appendTextContextwanted.toString;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "description.appendTextualElementVariable.toString;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "description.appendText mwanted.toString;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "description.appendText appendQuoting.toString;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "description.appendText \"+wanted.toString;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "description.appendText(wanted.toStringLICITINEL_URI;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "description.appendText(wanted.toStringLICIT_NAME;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "description.appendText(wanted.toString());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "description.appendText>(wanted.toString;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "description.appendTextSetwanted.toString;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "description.appendText becausewanted.toString;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "description.appendTextPerwanted.toString;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "description.appendText(ELEVATION_URI;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "description.appendText withwanted.toString;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "description.appendText(wanted.toStringTENANT_NAME;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "description.appendText directory.toString;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "description.appendText(wanted.toStringbatchSize);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "description.appendTextProgram.toString;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "description.appendTextFormatter.toString;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "description.appendTextThewanted.toString;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "description.appendText(wanted.toStringLICITIALIZED_NAME;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "description.appendTextualserviceName;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "description.appendText('<.toString;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "description.appendText(APP.description);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "description.appendText(Description;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "description.appendText(wanted.toStringQuoting);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "description.appendText(wanted.toStringtrace_NAME;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "description.appendText e.toString;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "description.appendText(1000Quoting(description);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "description.appendText(wanted.toStringicserviceName);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "description.appendText isNew.toString;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "description.appendText side.toString;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "description.appendText(wanted.toStringALTITUDE_SENTINEL_PREFERENCE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "description.appendText executor.toString;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "description.appendText(wanted.toStringotherName);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "description.appendText(wanted.toStringLICITIALIZED_URI;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "description.appendText(wanted.toStringString);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "description.appendTextualVariableName;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "description.appendText( directory.toString;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "description.appendText(ELEVATION_SEPARATOR;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "description.appendText( tuples.toString;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "description.appendText(wanted.toStringLICITED_URI;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "description.appendText mbean.toString;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "description.appendText(wanted.toStringALTITUDE_NAME;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "description.appendText(wanted.toStringALTITUDE_URI;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "description.appendTextSpace(description);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "description.appendText(wanted.toStringALTITUDE_SENTINEL_URI;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "description.appendText(wanted.toString});",
                "identical": false
            },
            {
                "k": 76,
                "patch": "description.appendText(wanted.toStringotherSetDescription;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "description.appendText(wanted.toStringproxyText;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "description.appendText(wanted.toStringStringserviceName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "description.appendText(wanted.toStringQuoting_NAME;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "description.appendText(ELEVATION_HEADER;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "description.appendTextualservice(description);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "description.appendText(DEFAULT_COUNTER);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "description.appendTextualSERVICE_NAME;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "description.appendText( plot.description);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "description.appendTextrotQuoting;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "description.appendTextualserviceNode;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "description.appendTextualCapacity) description;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "description.appendText((description !=wanted.toString;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "description.appendText(wanted.toStringURABLE_URI;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "description.appendTextNodefileName.toString;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "description.appendTextContext.toString;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "description.appendText(wanted.toStringJson);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "description.appendText(wanted.toString_NAME;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "description.appendText iterator.toString;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "description.appendText(wanted.toStringbatchSize;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "description.appendTextLICIT_NAME;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "description.appendText(wanted.toStringString;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "description.appendTextNode;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "description.appendText(wanted.toStringLICITED_NAME;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "description.appendText(wanted.toStringEndTime_NAME;",
                "identical": false
            }
        ],
        "buggy_line": "description.appendText(wanted.toString());",
        "fixed_line": "description.appendText(wanted == null ? \"null\" : wanted.toString());"
    },
    "Jsoup-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?($a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#ing \" +[0-9a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# \" +[0-9a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# deserialize +[0-9a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#multiply-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# from|X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?As-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?($a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# from|X)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# \" +[0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#multiply-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#ing \" +[0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#as|X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# deserialize +[0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# from|X)?)|[fA-zA-Z]+;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# \" +[0-9a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#ing \" +[0-9a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? service-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?($a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-zA-Z]+;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?As-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#as|X)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# deserialize +[0-9a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+?",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#multiply-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+ {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? +[0-9a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#nodes[fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#nodes[fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Thread-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#ContentType|X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|Generator-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?As-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+ description-zA-Z]+",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?server-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? service-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? setGa-fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? browsera-fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::x|X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#as|X)?)|[fA-zA-Z]+;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? found-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+){",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? response[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? response[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::x|X)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)| to-zA-Z]+",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+ \");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?\"]a-fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+ 10;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#nodes[fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?server-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#/x|X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?($a-fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+:Z]+\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?castera-fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Thread-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? +[0-9a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#multiply-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+ID-zA-Z]+",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? valid[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? found-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#ContentType|X)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::x|X)?)|[fA-zA-Z]+;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Thread-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# deserialize +[0-9a-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? +[0-9a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#ing \" +[0-9a-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#ing-x|X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#ContentType|X)?)|[fA-zA-Z]+;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+?\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? service-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|Generator-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#nodes[fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#as|X)?)|[a-zA-Z]+",
                "identical": false
            }
        ],
        "buggy_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");",
        "fixed_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");"
    },
    "Math-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "int sum = 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int sum = 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was included",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or NOSONAR",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with max length of 6 or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of line is NOSONAR",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of parameters as 'final'.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is NOSONAR",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was already has noOfPlayers for end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of input",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 'raw' need to 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1M is JRE 7+",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of 1M is JRE 7+",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of 1 for end-of-line can't been discovered yet",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 'raw' need to 0x0",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for single block entries",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is JRE 7 for single entry",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of 6 or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' so we support for end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1M is NOSONAR",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 'raw' need to 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for single block case",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'final'.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1M is any",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is NOSONAR",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or try to 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' characters",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is JRE 7 for single bit set",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of 6 or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' need to check for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is JRE 7 for single bit >= 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is any",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with max length of 6 or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of 6 or NOSONAR",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with 0x0",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was already added.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is JRE 7 bytes",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or -1",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' so we can use the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of 1K is JRE 7+",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is JRE 7 bytes",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' so we can use the end of record or 0x0",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of 1 for end-of-line means we can use the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 'raw' need to 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is JRE 7 for single bit",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' need to use the last character that was included",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is use the last character that was included",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' need to use the last character that was prefixed with 0x0",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for ATTRIBUTE_CLOSED;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' so we can use the end of record or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is JRE 7 for single width",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' so we support for end of record or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of 1M is any",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 7+",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is JRE 7 for single bit >= 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of list",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of 6 or 'raw' need to 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of 1 for end-of-line means we can use the n is any",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of line is any",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is JRE 7 for single width",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 1 for end-of-line means we can use the distance",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but also need to use the last character that was included",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of line is JRE 7+",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' so we support for end of record or 0x0",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1M is probably too...",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is it's",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 'raw' characters",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_'s",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is JRE 7 for single entry",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or -1 since matching != 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with 0",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' need to use the last character that was prefixed with 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was already has noOfPlayers for end of record or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' need to check for end-of-line means we can use the last value of list",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of 1 for end-of-line means we can use the parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is use the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of 1 for end-of-line means we can use the line is JRE 7+",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or try to 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was already has noOfPlayers for end of record or 0x0",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of 6 or 0x0",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' need to use the last value of 1 for end-of-line means we can still expand",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of stream",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of 1K is probably too...",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' one for end-of-line means we can use the n is any",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of stream",
                "identical": false
            }
        ],
        "buggy_line": "int sum = 0;",
        "fixed_line": "double sum = 0;"
    },
    "Math-75": {
        "fixes": [
            {
                "k": 1,
                "patch": "return getCumPct((v instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return getCumPct((v;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return getCumPct((v) v;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return getCumPct((v instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return getCumPct((v >>> 1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return getCumPct((v, v);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return getCumPct((v) v);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return getCumPct((v >>> 32<?>) v;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return getCumPct((v >>> 4);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return getCumPct((v);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return getCumPct((visComparable<?>) v;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return getCumPct((v >>> 4;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return getCumPct((v >>> succ<?>) v;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return getCumPct((vNode<?>) v;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return getCumPct((vNode instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return getCumPct((visComparable<?>) v);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return getCumPct((v >>> _value;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return getCumPct((v >>> Message<?>) v;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return getCumPct((v<Comparable<?>) v;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return getCumPct((v3, v;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return getCumPct((v >>> 0) v;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return getCumPct((v >>> T<?>) v;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return getCumPct((v metadata instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return getCumPct((v, _value);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return getCumPct((vNode<Comparable<?>) v;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return getCumPct((von instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return getCumPct((v:Comparable<?>) v;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return getCumPct((v6<?>) v;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return getCumPct((v >>> reason<?>) v;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return getCumPct((v, v;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return getCumPct((v1.0<?>) v;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return getCumPct((v >>> 32;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return getCumPct((v >>> AtomicInteger<?>) v;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return getCumPct((v >>>Comparable<?>) v;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return getCumPct((v<?>) v;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return getCumPct((v | v;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return getCumPct((v, v instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return getCumPct((v, v) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return getCumPct((vNode instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return getCumPct((v >>>Parent<?>) v;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return getCumPct((v3, v);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return getCumPct((v >>> org<?>) v;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return getCumPct((v >>>wait<?>) v;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return getCumPct((v >>> concept<?>) v;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return getCumPct((v >>> this.v);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return getCumPct((v:Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return getCumPct((v >>> schema<?>) v;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return getCumPct((vxServer<?>) v;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return getCumPct((v != 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return getCumPct((v >>> 4)];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return getCumPct((v p<?>) v;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return getCumPct((von instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return getCumPct((vAnnotated<?>) v;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return getCumPct((v >>> T>) v;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return getCumPct((v >>>24<?>) v;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return getCumPct((v instanceofComparable<?>) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return getCumPct((v >>> this.value;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return getCumPct((v >>> NReaders<?>) v;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return getCumPct((vConnection<?>) v;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return getCumPct((v3, v) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return getCumPct((v16<?>) v;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return getCumPct((v >>> 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return getCumPct((v ? v);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return getCumPct((v metadata instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return getCumPct((v >>>layout<?>) v;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return getCumPct((vV<?>) v;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return getCumPct((v @Json<?>) v;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return getCumPct((vdest<?>) v;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return getCumPct((vOfWeek<?>) v;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return getCumPct((v >>>conv;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return getCumPct((vUser<?>) v;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return getCumPct((v, v instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return getCumPct((vNode<?>) v);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return getCumPct((v - _value;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return getCumPct((v >>> pos) v;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return getCumPct((v % this.value);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return getCumPct((v, v);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return getCumPct((vd<?>) v;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return getCumPct((v1<?>) v;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return getCumPct((v1<?>) v);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return getCumPct((v >>> 32<?>) v);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return getCumPct((v, _value;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return getCumPct((v6<?>) v);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return getCumPct((v<Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return getCumPct((vx;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return getCumPct((v >>> 4) & v;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return getCumPct((v << 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return getCumPct((v instanceofComparable<?>) v(1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return getCumPct((v >>> this.v;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return getCumPct((v >>> 4)Node;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return getCumPct((v % this.value;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return getCumPct((v >>> NR_UNKNOWN;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return getCumPct((vNode<Comparable<?>>) v;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return getCumPct((v / _value;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return getCumPct((v >>> 1];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return getCumPct((v<?>) v);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return getCumPct((v[0];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return getCumPct((v1.0<?>) v);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return getCumPct((v >>> this.value);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return getCumPct((v >>> 2);",
                "identical": false
            }
        ],
        "buggy_line": "return getCumPct((Comparable<?>) v);",
        "fixed_line": "return getPct((Comparable<?>) v);"
    },
    "JacksonCore-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i < 0) { // all ASCII",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (i < 0) { // all; these are last 6 bits",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (i < 0) { // all digits",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c <= _maxSpecialChar) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (i < 0) { // all within buffer",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c == d) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (i == len) { // all within buffer",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (i == c) { // all within buffer",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c == _separatorChar) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i == c) { // all ASCII",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (i == c - 1) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i == len) { // all ASCII",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c == q) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c == d) { // end of record or input",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c == d) { // end of line is end of value, yay!",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (i == c - 1) { // all within buffer",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i == len) { // all good, nope",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i == len) { // not match? Just don't deposit",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i < c) { // all within buffer",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i < 0) { // all one later on",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i == _separatorChar) { // all within buffer",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c == d) { // end of record or input buffer, but not necessarily chunk",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i < 0) { // all good!",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (i < 0) { // all; these we hit the end of input buffer",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (i < 0) { // all; these are last byte",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (i < 0) { // all; these we hit the end of record or input",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (i == _separatorChar) { // all ASCII",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (i < 0) { // all one minor complication",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (i < 0) { // all; these we can this ever occur?",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i < 0) { // all one later with",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i < 0) { // all one this ever occur?",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i < 0) { // all; these are we hit the end of input buffer",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c == esc) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i == c) { // not found the end of record; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c == d) { // end of line is end of value, but not-of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c == _escapeChar) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c == _separatorChar) { // end of record or input buffer, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c == d) { // end of record or input buffer, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i == c - 1) { // end of line is end of value, yay!",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i == c) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i == c - 1) { // end of line is end of value, but not-of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (i == len) { // not match? Just don't do",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c == d) { // end of line is end of value, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (i == c) { // not found the end of value, yay!",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (i < 0) { // all; do we have at most 2 triplets...",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i == c - 1) { // end of line is end of value, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i == c - 1) { // end of line is end of value,of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c == d) { // end of line is end of value,of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i == len - 1) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i == c) { // end of line is end of value, yay!",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (i == c) { // all one minor complication",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i < 0) { // all; these are we hit the end of record or input",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c == d) { // end of record or input buffer, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c == _separatorChar) { // end of record or input buffer, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (i < 0) { // all; do we found the end of record or input",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (i == len) { // not all ASCII",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i < 0) { // all; these are we't do",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i == len) { // end of record or input buffer, but not necessarily chunk",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c == _quoteChar) { // doubledotsPerPoint; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i < 0) { // all; do we can this ever occur?",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c == d) { // end of record or input buffer, but not used as well",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i < 0) { // all; these are last char",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (i < 0) { // all32-of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c == _separatorChar) { // end of record or input buffer, but not necessarily chunk",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i < 0) { // all; these are we swithing days?",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (i < 0) { // all; these we hit the last 6 bits",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i == c) { // end of record or input buffer, but not necessarily chunk",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c == d) { // end of line is end of value, but not necessarily chunk",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (i < 0) { // all; these are we hit the last 6 bits",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i < 0) { // all one later with the end of input buffer",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (i == c - 1) { // end of line is end of value, but not used as well",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i == c) { // all one minor perf-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (i < 0) { // all; do we have at most 2 or multi-byte",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c == _separatorChar) { // end of record or input",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i < 0) { // all one later with max.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c == d) { // end of record or input buffer, can do a tight inner loop; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (i == c - 1) { // end of line is end of value, but not used by annotation",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c == d) { // end of record or input buffer, but not yet skipped",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (i < 0) { // all; do we found the end of input buffer",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (i <= MAX_INT_AS_LONG) { // all within buffer",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c == _quoteChar) { // doubledotsPerPoint, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c == d) { // end of line is end of value, but not an embedded",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (i == totalCode) { // all within buffer",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (i == c) { // end of record or input",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (i < 0) { // all32-of-line can do a tight inner loop; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (i == c) { // end of record or input buffer, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i < 0) { // all; these we hit the end of input?",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i < 0) { // all32-of-line can do a tight inner loop; these are last 6 bits",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (i == c) { // all good, can do a tight inner loop; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c == d) { // end of record or input buffer, but not all",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i == c - 1) { // all good!",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (i < 0) { // all; these are we hit the end of input?",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (i < 0) { // all one later with the end of value, yay!",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (i == c - 1) { // end of line is end of value, but not yet",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i < 0) { // all...",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c == _separatorChar) { // end of record or input buffer, can do a tight inner loop;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (i < 0) { // all; these we hit the end of input",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (i < 0) { // all at most 2 triplets...",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i == c) { // all one later on",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i == c) { // all good, can do a tight inner loop:",
                "identical": false
            }
        ],
        "buggy_line": "if (i <= maxCode) {",
        "fixed_line": "if (i < maxCode) {"
    },
    "Closure-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (fnType == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (fnType != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (fnType == null && fnType != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (t != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-public, too",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-Function",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-Function",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (selected != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we have nulls in case",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-case letter means we can this ever occur?",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't support such coercion?",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (fnType == null) { // and then we don't support such coercion?",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-empty enables",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-class",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we can this ever occur?",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-empty enables",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-class",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (fnType == null) { // and then we can this ever occur?",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-most span.",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but we don't else if (fnType != null",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-expression",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping for unchecked exceptions",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-public, fnType",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (fnType != null) { // as per [JACKSON-407] -- allow disabling wrapping; non-Function",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-CIRC",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-most span.",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null && fnType != null",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-CIRC",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null)",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null)",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null){",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-expression",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-case letter means we can this ever occur?",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- so we can this ever occur?",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-case letter means we can this.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but...",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (fnType == null) { // nope, as per [JACKSON-407] -- allow disabling wrapping; non-Function",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but we have nulls in case",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but nodes",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; keep both regular properties and JumboType",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-empty",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; must skip",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null in case",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (fnType == null) { // nope, as per [JACKSON-407] -- allow disabling wrapping;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-caseInsensitive",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (fnType == null) { // nope, as per [JACKSON-407] -- allow disabling wrapping; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-CIATION",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] --",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping is JRE 7+",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow name",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but we don't support such coercion?",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-case letter means we can this occur?",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but we don't else if (fnType != null in case",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-only",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-case when annotation processing is disabled",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-case letter means we can this ever occur?",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (fnType == null) { // as per [JACKSON-407] --",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; no% of type",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-only",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; no% of type",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; no core annotations",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-CIATION",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-public input",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (fnType != null) { // as per [JACKSON-407] -- allow disabling wrapping; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't support such",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but do we have nulls in case",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we have array",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-caseInsensitive",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; no core annotations",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null?",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (fnType == null) { // nope, as per [JACKSON-407] -- allow disabling wrapping; non-empty enables",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow and JumboType",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (fnType == null) { // special-case letter means we can this ever occur?",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but nodes",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-public, too...",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-public, drop it",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but...",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-741]",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but we can this ever occur?",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (fnType == null) { // nope, as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we want",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (fnType == null) { // nope, as per [JACKSON-407] -- allow disabling wrapping; non-class",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-of-Function",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (n != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-public input",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null in case of type",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-case letter means we can this.",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-case when annotation",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-empty",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; caller should have array",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't should this.",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (fnType == null) { // nope, as per [JACKSON-407] -- allow disabling wrapping; but we have nulls in case",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null20.xml",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; must skip",
                "identical": false
            }
        ],
        "buggy_line": "if (fnType != null) {",
        "fixed_line": "if (fnType != null && fnType.hasInstanceType()) {"
    },
    "Chart-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (endIndex >= 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (initialIndex < 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (endIndex < 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (startIndex >= 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (startIndex < 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (beginIndex < 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (endIndex == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (sizeIndex < 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (attributes < 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (batchSize == 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (beginIndex == 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (ending == 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (initialIndex == 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (sizeIndex == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (nextIndex >= 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (nextIndex < 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if ( type == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (length < 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (dataIndex < 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if ( type == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (endIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (itemIndex < 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (CATEGORY_TASKS.length == 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if ( type == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (length < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (delimiter < 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (initialIndex == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (beginIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (tableIndex < 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (endIndex <= 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (endIndex == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (sizeIndex == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (OKUPIndex < 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (isString == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (sizeIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (dataIndex >= 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (startIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (nrIndex < 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (endIndex >= 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (length < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (ending < 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (spanIndex < 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the end of",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (readerIndex < 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (beginIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (endIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (sizeIndex == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (lastIndex < 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (initialIndex == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (itemsIndex == 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (isString == 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (sizeIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the end of",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (endIndex == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is example.",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if ( type == 0) {// Add root path if the .bpmn20.xml is in the root of the end of",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (size < 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (initialIndex < 0) {// Add root path if the end of inputString",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( type == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the end of",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (attributes.length == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (isString == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if ( stopIndex < 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (isUseIndex >= 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (startIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if ( type == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value we should not be assigned.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (endIndex >= 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( type == 0) {// Add root path if the .bpmn20.xml is example.",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (OKUPIndex == 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (emptyIndex < 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value we should not be assigned.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (offset < 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (endIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the end of",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (attributesLength < 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (attributes < 0) {// Add root not .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (headerIndex < 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (length < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if ( type == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value is example\\n' characters",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if ( type == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the end of input",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (itemIndex == 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( stopIndex == 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (endIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the end of",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (isUseIndex < 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the end of inputString",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (is endIndex == 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (endIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (messageIndex < 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( type == 0) {// Add root path if the .bpmn20.xml is in the root of the end of input",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (resolveIndex < 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the end of buffer",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (endIndex >= 0) {// Add root path if the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (initialIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value we should use the end of",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (initialIndex >= 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( type == 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value we don' characters",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (endIndex < 0) {// Add root path if the .bpmn20.xml is in the root of the bar file and the value we should not be assigned.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (beginIndex == 0) {// Add root path if the .bpmn20.xml is example.",
                "identical": false
            }
        ],
        "buggy_line": "if (endIndex < 0) {",
        "fixed_line": "if ((endIndex < 0)  || (endIndex < startIndex)) {"
    },
    "Jsoup-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "clone.classNames;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "clone.classNames != clone.classNames;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "clone.classNames[0];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "clone.classNamesTo(clone);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "clone.classNames = clone;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "clone.classNamesget(this.classNames;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "clone.classNamesTo(clone;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "clone.classNames++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "clone.classNamesToCANCE;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "clone.classNamesParam;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "clone.classNamesTo(this.classNames;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "clone.classNames();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "clone.classNamesRING_CLOUD_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "clone.classNamesBEFORE_COMPENSATION;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "clone.classNamesToPOWEST_this.classNames;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "clone.classNamesSaturated;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "clone.classNames FLOW_CONTROL;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "clone.classNames IMEILING_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "clone.classNamesed;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "clone.classNamesget(this.classNames);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "clone.classNames != clone.CONVERTICAL_OR) return clone;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "clone.classNamesToCANCE_IS_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "clone.classNamesRING_CLOUD_FOR_SIGNIFICANCE;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "clone.classNames != clone.CONVERTER_COMPENSATION;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "clone.classNames > clone.class;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "clone.classNamesMATCH return clone;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "clone.classNamesTo(this.classNames);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "clone.classNames IMEILING_EVENT_COMPENSATION;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "clone.classNames IMEI_EVENT_COMPENSATION;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "clone.classNamesS;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "clone.classNamesToCANCE_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "clone.classNamesTo = clone;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "clone.classNames IMEI_EVENT_PROCESSOR) return clone;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "clone.classNames instanceof clone;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "clone.classNames != clone.startsWith(this.classNames;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "clone.classNames != clone.CONVERTICAL_OR) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "clone.classNames){",
                "identical": false
            },
            {
                "k": 38,
                "patch": "clone.classNamesExpr;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "clone.classNames varName = clone;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "clone.classNames IMEILING_EVENT_PROCESSOR) return clone;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "clone.classNamesSAMELTA;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "clone.classNamesCANCE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "clone.classNamesToJOIN;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "clone.classNamesTo(clone, clone);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "clone.classNames<>(clone;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "clone.classNamesToSplit;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "clone.classNames IMEI_EVENT_PROCESSOR;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "clone.classNamesValueMap;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "clone.classNames != clone.clone;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "clone.classNamesDeser;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "clone.classNamesCANCETo(clone);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "clone.classNamesSAMEL_NOT_BEFORE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "clone.classNamesget(clone);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "clone.classNames UTF8_ENCODING;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "clone.classNames IMEILING_EVENT_PROCESSOR;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "clone.classNamesTo(_classNames;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "clone.classNames IMEI_EVENT_DEFINITION_KEY;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "clone.classNames throw clone;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "clone.classNamesTo, clone);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "clone.classNamesToPos = clone;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "clone.classNamesDot++) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "clone.classNamesBEFORE_TASK;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "clone.classNames IMEI_EVENT_SUBSCRIBEFORE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "clone.classNames IMEI_EVENT_this.class;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "clone.classNames IMEI_EVENT_TASK;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "clone.classNamesObs;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "clone.classNames parameters;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "clone.classNamesToTop;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "clone.classNamesToValue;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "clone.classNamesRING_CLOUD_FOR_SIGNIFIRMATION;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "clone.classNamesToCANCE_IS_FOR_SIGNIFIRMATION;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "clone.classNames IMEILING_EVENT_PROCESSOR) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "clone.classNamesToBody;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "clone.classNamesToi;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "clone.classNames prev;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "clone.classNames IMEILES;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "clone.classNames IMEILING_EVENT_TASK;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "clone.classNamesToSplit = clone;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "clone.classNames IMEI_EVENT_PROCESSOR) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "clone.classNamesRING_CLOUD_FOR_SIGNIFIDER;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "clone.classNamesToCANCE_IS_FOR_SIGNIFIDER;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "clone.classNamesRING_CLOUD_LOGGED;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "clone.classNames IMEI_EVENT_CLASS;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "clone.classNamesToEntity;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "clone.classNamesNegative;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "clone.classNames[0];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "clone.classNamesBEFORE_variableNames;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "clone.classNames sw;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "clone.classNames IMEI_EVENT_OBJECT;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "clone.classNames UTF8_ENCODING();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "clone.classNamesInvoked;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "clone.classNames IMEI_EVENT_RULES;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "clone.classNamesCURRENT_SOURCESaturated;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "clone.classNamesTo()) return clone;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "clone.classNamesToken;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "clone.classNamesToSplit_PROP_KEY;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "clone.classNames IMEI_EVENT_END;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "clone.classNames != clone.CONVERTICAL_OR;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "clone.classNames IMEILING_EVENT_DEFINITION_KEY;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "clone.classNames : clone;",
                "identical": false
            }
        ],
        "buggy_line": "clone.classNames();",
        "fixed_line": "clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames"
    },
    "Math-63": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (x.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) && x == y;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x < y;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (y.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == right;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y), x == y;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == x;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y, x == y;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == '/') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) == y;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (double.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) - x == y;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (int.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (int.x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y, x + y;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (Double.isNaN(x || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) ? x + y;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (x.isNaN(x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) { x == y;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == double.class;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (Long.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == right;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (byte.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) { x == y; }",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yt || x == y;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == LEFT;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) - y;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == south;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)[ || x == y;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == '/') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == 0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == int.class;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y[0] || x == y;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 20;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == jt;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y -> x == y;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) == x;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == '/'){",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == tableName;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)), x == y;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (y.isNaN(x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return ( getChildCount.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (Status.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (Executor.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (String.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) ? y : x;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == float.class;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == jt;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y ==clusive;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return ( flags.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yold x == y;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == ({;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 2;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y+1) || x == y;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y ==Descriptor;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y ==B;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == URI;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == value;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == R;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y(10, x == y;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) <= y;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y ==Editable;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == \"/;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (Double.isNaN(x) || Double.isNaN(ySubscriber || x == y;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) % this.y;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y ==Description;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yInstruction || x == y;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == DELETE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y ==Ele;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == style;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == t;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == upper;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == i;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)+ || x == y;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == v;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yImports || x == y;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == \"0;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (Short.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == z;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y constructing || x == y;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y). || x == y;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y ==comm;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (Double.classNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yency || x == y;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yMETHOD || x == y;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) ? x == y;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) && y == 0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y + x == y;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y throw x == y;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y - x == y;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == 0;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) ? x + 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == localChildren;",
                "identical": false
            }
        ],
        "buggy_line": "return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
        "fixed_line": "return equals(x, y, 1);"
    },
    "Closure-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (options.dependencyOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (options.dependencyOptions.needsManagement) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (options.dependencyOptions.needsManagementED && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (options.dependencyOptions.needsManagement() || options.closurePass) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (options.dependencyOptions.needsManagement() && options.closurePass) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (options.dependencyOptions.needsManagementED && options.closurePass) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (options.dependencyOptions != options.closurePass) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (options.dependencyOptions.needsManagementUser && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (options.dependencyOptions != 0 && options.closurePass) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (options.dependencyOptions.needsManagementUser && options.closurePass) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (options.dependencyOptions != 0 && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (options.dependencyOptions || options.closurePass) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (options.dependencyOptions.needsManagement && options.closurePass) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (options.dependencyOptions.needsManagement == 0 && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (options.dependencyOptions.needsManagement() || options.closurePass;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass instanceof options.closurePass) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass){",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (options.dependencyOptions.needsManagement() || inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (options.dependencyOptions.needsManagementContent && options.closurePass) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (options.dependencyOptions.needsManagement != 0 && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (options.dependencyOptions.needsManagementPosition && options.closurePass) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if(options.dependencyOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (options.dependencyOptions.needsManagementUrl && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (options.dependencyOptions.needsManagement Arrays && options.closurePass) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (options.dependencyOptions.needsManagementAttr && options.closurePass) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (options.dependencyOptions.needsManagementOL && options.closurePass) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (options.dependencyOptions.needsManagementDown && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (options.dependencyOptions.needsManagementED || options.closurePass) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (options.dependencyOptions.needsManagementBaseline || options.closurePass) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (options.dependencyOptions.needsManagementBuffers && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (options.dependencyOptions.needsManagementRoute && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (options.dependencyOptions.needsManagementER_MESSAGE && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (options.dependencyOptions.needsManagemented && options.closurePass) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (options.dependencyOptions.needsManagement * options.closurePass) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (options.dependencyOptions.needsManagement == 0 && options.closurePass) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (options.dependencyOptions.needsManagementMatch && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (options.dependencyOptions.needsManagementPosition || options.closurePass) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (options.dependencyOptions != this.closurePass) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (options.dependencyOptions.needsManagementCallback && options.closurePass) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (dependencyOptions.needsManagement() && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (options.dependencyOptions.needsManagement && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (options.dependencyOptions.needsManagementPosition && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs, options.closurePass) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (options.dependencyOptions.needsManagementDown && options.closurePass) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (dependency.needsManagement() && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (options.dependencyOptions.needsManagementRule && options.closurePass) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (options.dependencyOptions.needsManagementOIN && options.closurePass) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (options.dependencyOptions.needsManagementAttr && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (options.dependencyOptions.needsManagement() ||fff.closurePass) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (options.dependencyOptions.needsManagement() && doc.closurePass) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (options.dependencyOptions.needsManagementQueryString && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (options.dependencyOptions.needsManagement() && dosingType.closurePass) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (options.dependencyOptions.needsManagement() && inputsInputs.closurePass) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (options.dependencyOptions.needsManagementFullName && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (options.dependencyOptions.needsManagementRule && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (options.dependencyOptions.needsManagement generator && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (options.dependencyOptions.needsManagement != 0 && options.closurePass) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (options.dependencyOptions.needsManagementEntity && options.closurePass) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (options.dependencyOptions.needsManagement() &&fff.closurePass) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (options.dependencyOptions.needsManagementAt && options.closurePass) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (options.dependencyOptions != ANY_VALUE && options.closurePass) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePassV) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (options.dependencyOptions != FALSE.needsManagement) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (options.dependencyOptions.needsManagementER_MESSAGE && options.closurePass) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (options.dependencyOptions.needsManagement(this.closurePass) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.TCPass) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (options.dependencyOptions != ST_PROGRESS) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (options.dependencyOptions != background.closurePass) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (options.dependencyOptions != tree.closurePass) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (options.dependencyOptions.needsManagement() && options.closurePass;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs2.closurePass) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (options.dependencyOptions.needsManagementED && inputsInputs.closurePass) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (options.dependencyOptions != schema.closurePass) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass = options.closurePass) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs instanceofclosurePass) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs*Pass) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (options.dependencyOptions && options.closurePass;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs[1].closurePass) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass == options.closurePass) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePassed) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePassVIOUS) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (options.dependencyOptions.needsManagement() && TimedPass) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (options.dependencyOptions !=Import.needsManagement) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (options.dependencyOptions.needsManagement() &&\u8bbePass) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (options.dependencyOptions.needsManagement() && DeadPass) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePassV == options.closurePass) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePassV != options.closurePass) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (options.dependencyOptions != c.closurePass) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.CHARPass) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePassV){",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (options.dependencyOptions != publish.needsManagement) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass == this.closurePass) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass++) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (options.dependencyOptions != Criteria.needsManagement) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (options.dependencyOptions.needsManagement() || options.closurePass){",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (options.dependencyOptions != template.closurePass) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.KernelPass) {",
                "identical": false
            }
        ],
        "buggy_line": "if (options.dependencyOptions.needsManagement() && options.closurePass) {",
        "fixed_line": "if (options.dependencyOptions.needsManagement()) {"
    },
    "Lang-61": {
        "fixes": [
            {
                "k": 1,
                "patch": "int len = thisBuf.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int len = thisBuf.length - this._index;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int len = thisBuf.length - this._outputTail;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int len = thisBuf.length - this._str;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int len = thisBuf.length - start;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int len = thisBuf.length - this._inputPtr;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int len = thisBuf.length - this._inputStart;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int len = thisBuf.length - 8;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int len = thisBuf.length - this._textBuffer.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int len = thisBuf.length - thisQuotes.length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int len = thisBuf.length - thisBytes.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int len = thisBuf.length - this._inputLen;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int len = thisBuf.length - thisLen;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int len = thisBuf.length - thisinator.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int len = thisBuf.length - this._len;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int len = thisBuf.length - this._strLen;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int len = thisBuf.length - thisColumnSeparator.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int len = thisBuf.length - this._children.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int len = thisBuf.length - this._properties.length;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int len = thisBuf.length - this._buffer;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int len = thisBuf.length - this identifierLen;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int len = thisBuf.length - thisparametersLen;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int len = thisBuf.length - thisConstraintLength;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int len = thisBuf.length - thisCalendarLen;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int len = thisBuf.length - this._packageLen;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int len = thisBuf.length - this._Embedded;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int len = thisBuf.length - this._currentSegment.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int len = thisBuf.length - this.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int len = thisBuf.length - this Object.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int len = thisBuf.length - this methodLen;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int len = thisBuf.length - thisProperty.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int len = thisBuf.length - this._border.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int len = thisBuf.length - thistyBytes.length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int len = thisBuf.length - this._textLen;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int len = thisBuf.length - this._maxLength;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int len = thisBuf.length - thisSequenceLen;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int len = thisBuf.length - this2.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int len = thisBuf.length - this._upperCount;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int len = thisBuf.length - thisBuffer.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int len = thisBuf.length - this suffix.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int len = thisBuf.length - thisThread.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int len = thisBuf.length - this._target;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int len = thisBuf.length - this branches.length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int len = thisBuf.length - thisKEYWORD.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int len = thisBuf.length - this getDefault;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int len = thisBuf.length - this contentLen;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int len = thisBuf.length - this imei;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int len = thisBuf.length - thisequality.length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int len = thisBuf.length - this tags.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int len = thisBuf.length - this._targetOffset;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int len = thisBuf.length - this resources;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int len = thisBuf.length - this._inputEnd;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int len = thisBuf.length - thisStr.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int len = thisBuf.length - thismask;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int len = thisBuf.length - thisStart;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int len = thisBuf.length - this._ix;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int len = thisBuf.length - this._i;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int len = thisBuf.length - thisSelected;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int len = thisBuf.length - this))) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int len = thisBuf.length - this._borderLen;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int len = thisBuf.length - this -1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int len = thisBuf.length - thisCodes;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int len = thisBuf.length - this._packageName;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int len = thisBuf.length - thisSeen;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int len = thisBuf.length - this shift;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int len = thisBuf.length - thisnextInt;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int len = thisBuf.length - this._maxSendAmount;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int len = thisBuf.length - this._textCount;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int len = thisBuf.length - this 1];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int len = this.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int len = thisBuf.length - this._defaultValue;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int len = thisBuf.length - this._targetType;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int len = thisBuf.length - thisConstraintLen;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int len = thisBuf.length - this._BLOCK;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int len = thisBuf.length - this._maxColor;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int len = thisBuf.length - this Support;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int len = thisBuf.length - this._StringLength;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int len = thisBuf.length - this ctxt;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int len = thisBuf.length - this._schema;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int len = thisBuf.length - pos;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int len = thisBuf.length - this bpmnLen;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int len = thisBuf.length - this._textBytes;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int len = thisBuf.length - byteLen;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int len = thisBuf.length - this Filter;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int len = thisBuf.length - this1.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int len = thisBuf.length - thiscent;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int len = thisBuf.length - this._icBytes;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int len = thisBuf.length - this._targetBuffer.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int len = thisBuf.length - this[i;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int len = thisBuf.length - thisOffset;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int len = thisBuf.length - this save;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int len = thisBuf.length - this._separator;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int len = thisBuf.length - strLen;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int len = thisBuf.length - this StringLen;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int len = thisBuf.length - this._features;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int len = thisBuf.length - this available;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int len = thisBuf.length - this ROW;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int len = thisBuf.length - this._packageSize;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int len = thisBuf.length - ix;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int len = thisBuf.length - thisces;",
                "identical": false
            }
        ],
        "buggy_line": "int len = thisBuf.length - strLen;",
        "fixed_line": "int len = size - strLen + 1;"
    },
    "Chart-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "new Range(0.0, constraint.getWidth() / w[2];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "new Range(0.0, constraint.getWidth() / w[3];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "new Range(0.0, constraint.getWidth() / w[3]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[1]);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[3];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "new Range(0.0, constraint.getWidth() - w[2];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] + h[2];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - hConstraint;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[0];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] + h;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w]\";",
                "identical": false
            },
            {
                "k": 17,
                "patch": "new Range(0.0, constraint.getWidth() / w[0], h[2];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[1];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), 16;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] : 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[3];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "new Range(0.0, constraint.getWidth() / w[1];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w[1]];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] + h];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] + h;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "new Range(0.0, constraint.getWidth() / w[1]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[3]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] - h",
                "identical": false
            },
            {
                "k": 30,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - c2;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "new Range(0.0, constraint.getWidth() / this.w[2]), c4;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - h[2];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[3];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[0];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.w[3];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[0];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "new Range(0.0, constraint.getWidth() / w[1]), this.right;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - totalPercent;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] = h;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[1], w[2];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4Out;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[1];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4NUMBER;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "new Range(0.0, constraint.getWidth() / this.w[2]), c4[1]);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w]);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "new Range(0.0, constraint.getWidth() / this.w[2];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] - 1];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[1] - 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c400;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "new Range(0.0, constraint.getWidth() / w[2] : 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "new Range(0.0, constraint.getWidth() / this.w[2]), c4);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] - h];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "new Range(0.0, constraint.getWidth() / w[2];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] };",
                "identical": false
            },
            {
                "k": 56,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[1] + 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "new Range(0.0, constraint.getWidth() / w[1], h[2];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] = h",
                "identical": false
            },
            {
                "k": 59,
                "patch": "new Range(0.0, constraint.getWidth() - w[0], h[2];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] - h;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "new Range(0.0, constraint.getWidth() - w[2]), c4[1]);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "new Range(0.0, constraint.getWidth() / w[0], c4;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[0];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4 };",
                "identical": false
            },
            {
                "k": 65,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] - hspacing;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right };",
                "identical": false
            },
            {
                "k": 67,
                "patch": "new Range(0.0, constraint.getWidth() / w[2] {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "new Range(0.0, constraint.getWidth() / w[0], h[1]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w[3]]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - h2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w[1] - 1];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[1]);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[1]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - hConstraintType[1];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "new Range(0.0, constraint.getWidth() / w[1], h[2]);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "new Range(0.0, constraint.getWidth() / w[1]), c4;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "new Range(0.0, constraint.getWidth() * w[2];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] = 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "new Range(0.0, constraint.getWidth() / w[0], this.right;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "new Range(0.0, constraint.getWidth() - w[2]), c4;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "new Range(0.0, constraint.getWidth() / w[1]), h[2];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - this.right;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - totalConstraint;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] = this.right;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] = this.right;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[3];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "new Range(0.0, constraint.getWidth() / w[1], this.w[2];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.w[2];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] = 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - h];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - h;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - this.w[2];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "new Range(0.0, constraint.getWidth() / w[3 {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "new Range(0.0, constraint.getWidth() / w[1], this.right[2]), c4);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "new Range(0.0, constraint.getWidth() * w[2]), c4[1]);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "new Range(0.0, constraint.getWidth() / w[1], this.right[2]), c4;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "new Range(0.0, constraint.getWidth() - w[2]), this.right[3];",
                "identical": false
            }
        ],
        "buggy_line": "new Range(0.0, constraint.getWidth() - w[2]),",
        "fixed_line": "new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),"
    },
    "Codec-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "this(true);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.true = encoding;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.true = y;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.true = DEFAULT_LOCALE;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.true;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.true = DEFAULT_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.true =false;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.true = result;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.true = DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.true = threshold;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.false = y;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this(true;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.true = current64;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.true = DEFAULT_DIVIDER_LOCATION;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.false = DEFAULT_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.true = DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.false = encoding;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.false =true;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.true = call;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.true = DEFAULT_PROCESS_DEFINITION_KEY;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.true = DEFAULT_RESOLATION_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.false = DEFAULT_LOCALE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.false;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.true = DEFAULT_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.true = DEFAULT_BINDINGS;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.true = DEFAULT_TIMEZONE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.true = DEFAULT_PRODUCTION_MODE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.true = DEFAULT_SELF_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.true = y_;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.true = DEFAULT_SELF_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.true = DEFAULT_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_EVENT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.true = DEFAULT_DELIMITER;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.true = DEFAULT_TIMEOUT_IN_MS;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.trueFlowId = DEFAULT_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.true = DEFAULT_SELF_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.true = DEFAULT_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_IDENT;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.true = DEFAULT_TTY_PRINTER;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_DELIMITER;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_NAME;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.true = DEFAULT_DUCTION_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.true = y1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.true = DEFAULT_DUCTION_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.true = DEFAULT_RESOLATION_DATE_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_CLOSED;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.false = DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_Deser;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.trueDescription = DEFAULT_LOCALE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_DELIMITER;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_DELIMITER;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_TIMEZONE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.true = DEFAULT_ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.true = DEFAULT_RESERIALIZATION_URL;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.true = DEFAULT_SELF_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.true = IDLE_TIME;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.true = DEFAULT_DIMENSION;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.true = DEFAULT_SELF_RESERVED_INDEX;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_Def;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_FLOAT;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.false = DEFAULT_LOOP_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.true = DEFAULT_GENERIC_ARRAY;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.trueDescription = DEFAULT_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.true = DEFAULT_RESERVED_TIMEZONE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.true = DEFAULT_RESERIALIZATION_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.true = DEFAULT_ALLOW_LOCALE;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_TIMEZONE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.true = DEFAULT_ARRAY_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.true = DEFAULT_ORACLE_PREPAINT;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.true = DEFAULT_DUCTION_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.true = DEFAULT_SELF_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_ALLOW_TYPE;",
                "identical": false
            }
        ],
        "buggy_line": "this(false);",
        "fixed_line": "this(0);"
    },
    "Chart-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dataset = dataset;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dataset =Dataset;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dataset = coordinator;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dataset = 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dataset = X_;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dataset = newPie;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dataset = trimmed;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dataset = 0.0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dataset = client;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dataset = previous;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dataset = MAX_VALUE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dataset = cluster;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dataset = X_IN_COLUMN;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dataset = X_FEATURE_USE_HEADER;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dataset = failure;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dataset = X_ELEVATION_COLUMN;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dataset = X_COLUMN;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dataset = X_QUOTED_COLUMN;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dataset = MAX_QUOTED_COLUMN;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dataset = viewType;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dataset = MAX_GENERATOR_COLUMN;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dataset = columnNames;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dataset = X_, dataset;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dataset = string;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dataset = X_GEOCODING_COLUMN;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dataset = X_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dataset = Client;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dataset = X;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dataset = X_OTED_COLUMN;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dataset = 0, dataset;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dataset = dataset; // NOSONAR",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dataset = advanced;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dataset = urls;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dataset = selection;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dataset = X_BOUNDARY_COLUMN;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dataset = previousX_;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dataset = Move;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dataset = decode;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dataset =Word;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dataset = restriction;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dataset = rect;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dataset = ring;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dataset =info;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dataset = orig;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dataset =axes;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dataset = blocks;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dataset = col;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dataset = X_QUOTED;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dataset = X_NOT_IN_COLUMN;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dataset = Bad;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dataset = cb;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dataset = params;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dataset =Pair;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dataset = instanceId;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dataset = png;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dataset = X_OCIATION_COLUMN;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dataset = total;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dataset =\u6ca1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dataset = X_SPLIT_COLUMN;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dataset = queries;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dataset = obs;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dataset = X_CLAMIDDLE_COLUMN;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dataset = bit;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dataset =Units;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dataset = FileUtils;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dataset = X_SPANNOTATIONS;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dataset = X_CLAVE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dataset = bucket;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dataset = group;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dataset =params;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dataset =11;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dataset =Messages;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dataset =\u62ce;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dataset = X_CLAIM_COLUMN;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dataset = newValue;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dataset = MAX_MIDDLE_COLUMN;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dataset = names;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dataset = scope;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dataset =Unit;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dataset = getContaining;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dataset = MAX_BUFLOCALE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dataset = X_FEATURE_ALLOW_COLUMN;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dataset = origin;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dataset = nodes;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dataset = X_GEOOM;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dataset = configure;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dataset = MAX_INLINE_COLUMN;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dataset = n;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dataset =Graph;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dataset = absolute;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dataset = factory;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dataset = renamed;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dataset =Seq;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dataset = addresses;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dataset =apped;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dataset = my;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dataset = X_NOT_IN_USE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dataset = X_GEOTED;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dataset = data;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dataset = X_INHERIT;",
                "identical": false
            }
        ],
        "buggy_line": "this.dataset = dataset;",
        "fixed_line": "setDataset(dataset);"
    },
    "Gson-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (Double.isNaN(value instanceof Double.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (Double.isNaN(value) && Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (Double.isNaN(value instanceof Double.TYPE) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (Double.isNaN(value instanceof Double.description) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (Double.isNaN(value) && Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (Double.isNaN(value instanceof Double.UTF8) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (Double.isNaN(value instanceof Double.UTFInfinite(value)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (Double.isNaN(value instanceof Double.MAX_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (Double.isNaN(value instanceof Double.USInfinite(value)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (Double.isNaN(value instanceof Double.STRINGS_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (Double.isNaN(value instanceof Double.UTFInfinite(value) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (Double.isNaN(value instanceof Double.ENGINE_NAME) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value)){",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Double.isNaN(value instanceof Double.SEPARATOR) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (Double.isNaN(value instanceof Double.NAMED_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (Double.isNaN(value instanceof Double.NEInfinite(value)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (Double.isNaN(value instanceof Double.NEInfinite(value) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value){",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (Double.isNaN(value instanceof Double.Absolute_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (Double.isNaN(value instanceof Double.class || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (Double.isNaN(value instanceof Double.WAIT) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (Double.isNaN(value instanceof Double.mime_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (Double.isNaN(value instanceof Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (Double.isNaN(value instanceof Double.Relationship_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (Double.isNaN(value instanceof Double. || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (Double.isNaN(value instanceof Double.USInfinite(value) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (Double.isNaN(value instanceof Double.START_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Double.isNaN(value instanceof Double.class || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (Double.isNaN(value instanceof Double.Infinite(value)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (Double.isNaN(value instanceof Double.STRING) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite == value) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value instanceof Double.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (Double.isNaN(value instanceof Double. claim_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (Double.isNaN(value instanceof Double. || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (Double.isNaN(value instanceof Double.NULL) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (Double.isNaN(value instanceof Double.OBD)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Double.isNaN(value instanceof Double.OBD) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (Double.isNaN(value instanceof Double.Relationship_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (Double.isNaN(value instanceof Double.UTF8) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Double.isNaN(value instanceof Double.EInfinite(value)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (Double.isNaN(value) || Double.isInfinite == Double.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (Double.isNaN(value instanceof Double.MAX_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (Double.isNaN(value instanceof Double.NAMED_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Double.isNaN(value instanceof Double.StandardInfinite(value)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (Double.isNaN(value instanceof Double.POSITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (Double.isNaN(value instanceof Double.START_PACKEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (Double.isNaN(value instanceof Double.mime_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (Double.isNaN(value) || Double.isInfinite == Double.UTF8) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (Double.isNaN(value instanceof Double.START_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Double.isNaN(value instanceof Double.START_PACKEDDED_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (Double.isNaN(value instanceof Double.DEFAULTInfinite(value)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (Double.isNaN(value instanceof Double.Uri) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (Double.isNaN(value instanceof Double.EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (Double.isNaN(value) || Double.isInfinite = value;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (Double.isNaN(value instanceof Double. missing) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (Double.isNaN(value instanceof Double.STRINGInfinite(value)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (Double.isNaN(value instanceof Double.Infinite(value) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (Double.isNaN(value instanceof Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (Double.isNaN(value instanceof Double.START_PACKEDDED_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Double.isNaN(value instanceof Double.DOT(value) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Double.isNaN(value instanceof Double.VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (Double.isNaN(value instanceof Double.FIXEDDED_VALUE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (Double.isNaN(value instanceof Double.STRINGS_GENERATE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (Double.isNaN(value instanceof Double.Absolute_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (Double.isNaN(value instanceof Double. andInfinite(value) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (Double.isNaN(value instanceof Double.intInfinite(value)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite == _value) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value[0] {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (Double.isNaN(value instanceof Double.START_PACKED) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (Double.isNaN(value) || Double.isInfinite == Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (Double.isNaN(value instanceof Double. claim_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Double.isNaN(value instanceof Double.START_VALUE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Double.isNaN(value instanceof Double.mime(value) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (Double.isNaN(value instanceof Double.DOUBLE) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value instanceof Double.UTF8) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Double.isNaN(value instanceof Double.EMBEDDED_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (Double.isNaN(value) || Double.isInfinite == Double.TYPE) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (Double.isNaN(value instanceof Double.SH(value) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (Double.isNaN(value instanceof Double.intInfinite(value) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite == 204) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (Double.isNaN(value instanceof Double.DOT(value)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (Double.isNaN(value instanceof Double. claim_VALUE) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (Double.isNaN(value) || Double.isInfinite == Double.MIDDLE) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (Double.isNaN(value instanceof Double.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite-value) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (Double.isNaN(value instanceof Double.OBD_CONNECTIONS) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (Double.isNaN(value instanceof Double.TRUE) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (Double.isNaN(value instanceof Double.EMBEDDED_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (Double.isNaN(value instanceof Double.FIRST) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Double.isNaN(value instanceof Double.FUNCTIONInfinite(value)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (Double.isNaN(value instanceof Double.Text(value) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Double.isNaN(value instanceof Double.EADAP10) {",
                "identical": false
            }
        ],
        "buggy_line": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
        "fixed_line": "if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {"
    },
    "Math-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "return chromosomes.iterator;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return chromosome.iterator;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return Idosomes.iterator;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return chromosome.iterator();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return chromosomes.iteratorC_CREATOR_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return chromosomes;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return chromARMomes.iterator;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return Idosomes.iterator();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return chromosomes.iterator().next;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return chromosomes.iteratorC_CREATOR_PREVIOUS;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_NAME;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return chromosomes.iteratorED_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_MAPPINGS;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_NAME;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS_NAME;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_IPV;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_IPV;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_IPVIOUS;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_PATTERN;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMASTERED_ call;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_PATTERN;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return chromosomes.iteratorED_ IteratorUTURE_FOR_COMMAY_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMASTERED_ call;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_IPVIOUS;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMPEOPS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_TRANSLATOR_PREVIOUS;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return chromosomes.iteratorUTosomes;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return chromosomes.iteratorC_CREATOR_DELIMUTURE_FOR_COMMAY_ call;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_FACTOR;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return chromosomes.iteratorCUTURE_GIN_FOR_COMMAY_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_ call;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_CODED;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_BEAN;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_FACTOR;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return chromARMomes.iterator();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return chromosomes.iteratorC_CREATOR_DELIMUTURE_FOR_COMMAY_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return chromosomes.iteratorED_MAXIMUM_POSITION_IN_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMASTER;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_PACKED;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_RESERVED_IPV;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return chromosomes.iteratorC_CREATOR_DELIMUTURE_FOR_COMMAY_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_RESERVED_ Iterator;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_CODED;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return chromosomes.iterator areDatabaseUTURE_FOR_COMMAY_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return chrom pb.iterator;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return chromosomes.iteratorC_CREATOR_DELIMUTURE_FOR_COMMASTER;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_DELIMITER;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_CONFIGURABLE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return chromosomes.iteratorUTrog_RESERVED_IPVIOUS;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_RESERVED_ROW;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMASTER;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_ Iterator;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_ACLEVIOUS;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return JsonToken.VALUE_EMBEDDED_CREATOR_PREVIOUS;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_CONFIGURLENCODED;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_CLOSED;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_ACLEVIOUS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_DELIMITER;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return chromosomes.iteratorCUTURE_GIN_FOR_COMMAY_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_CONFIGURROGATE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_ call;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_COMPONENT;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_KEY;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_RESERVED_IPVIOUS;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_ Iterator;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_Deser;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_eaders;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_ROW;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return chromosomes.iteratorCANCE_CREATOR_PREVIOUS;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return Losomes.iterator;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_DEGATEWAYPOINTS;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return chromosomes.iteratorCUTURE_GIN_FOR_COMMAY_RESERVED_IPV;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return chromosomes.iteratorED_ IteratorUTURE_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_TRANSLATORS;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_INDEX;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_DELIM;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_KEY;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return chromosomes.iteratorC_CREATOR_DELIMUTURE_FOR_COMMAY_RESERVED_NAME;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_FOR_COMMASTER;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return chromosomes.iteratorED_ IteratorUTURE_FOR_COMMAY_RESERVED_IPVIOUS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_AXS;",
                "identical": false
            }
        ],
        "buggy_line": "return chromosomes.iterator();",
        "fixed_line": "return getChromosomes().iterator();"
    },
    "JacksonXml-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "_rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 3,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root",
                "identical": false
            },
            {
                "k": 4,
                "patch": "_rootNameLookup = root;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't modify schema",
                "identical": false
            },
            {
                "k": 6,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't modify schema",
                "identical": false
            },
            {
                "k": 7,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't modify schema",
                "identical": false
            },
            {
                "k": 8,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 10,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't modify schema",
                "identical": false
            },
            {
                "k": 11,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root name",
                "identical": false
            },
            {
                "k": 12,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't know if root name",
                "identical": false
            },
            {
                "k": 13,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't know if root name",
                "identical": false
            },
            {
                "k": 14,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name: a parameter should not be assigned. Also declare the methods parameters as 'root",
                "identical": false
            },
            {
                "k": 15,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't know if root name",
                "identical": false
            },
            {
                "k": 16,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'bpmn20.xml",
                "identical": false
            },
            {
                "k": 17,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't modify schema",
                "identical": false
            },
            {
                "k": 18,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name: a parameter should not be assigned. Also declare the methods parameters as 'root't modify schema",
                "identical": false
            },
            {
                "k": 19,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we't a parameter should not be assigned. Also declare the methods parameters as 'root",
                "identical": false
            },
            {
                "k": 20,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name: a parameter should not be assigned. Also declare the methods parameters as 'parent't modify schema",
                "identical": false
            },
            {
                "k": 21,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root to ensure we don't modify schema",
                "identical": false
            },
            {
                "k": 23,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't [databind#116]",
                "identical": false
            },
            {
                "k": 24,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root || _defaultNameLookup",
                "identical": false
            },
            {
                "k": 25,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if root name",
                "identical": false
            },
            {
                "k": 26,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we't a parameter should not be assigned. Also declare the methods parameters as 'root name",
                "identical": false
            },
            {
                "k": 27,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'ASCII't modify schema",
                "identical": false
            },
            {
                "k": 28,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 's't modify schema",
                "identical": false
            },
            {
                "k": 29,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we't a parameter should not be assigned. Also declare the methods parameters as 'rootNameLookup",
                "identical": false
            },
            {
                "k": 30,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'additional't modify schema",
                "identical": false
            },
            {
                "k": 31,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'n't modify schema",
                "identical": false
            },
            {
                "k": 32,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root' nulls but nodes",
                "identical": false
            },
            {
                "k": 33,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't [databind#116]",
                "identical": false
            },
            {
                "k": 34,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't lowercase",
                "identical": false
            },
            {
                "k": 35,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name: a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 36,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't lowercase",
                "identical": false
            },
            {
                "k": 37,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'alt't modify schema",
                "identical": false
            },
            {
                "k": 38,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name: a parameter should not be assigned. Also declare the methods parameters as 'raw't modify schema",
                "identical": false
            },
            {
                "k": 39,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key't modify schema",
                "identical": false
            },
            {
                "k": 40,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't lowercase",
                "identical": false
            },
            {
                "k": 41,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 42,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'project't modify schema",
                "identical": false
            },
            {
                "k": 43,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'annotated't modify schema",
                "identical": false
            },
            {
                "k": 44,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't [JACKSON-741]",
                "identical": false
            },
            {
                "k": 45,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'old't modify schema",
                "identical": false
            },
            {
                "k": 46,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root can't modify schema",
                "identical": false
            },
            {
                "k": 47,
                "patch": "_rootNameLookup = src._rootNameLookup; // [databind#116]",
                "identical": false
            },
            {
                "k": 48,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't know if [databind#116]",
                "identical": false
            },
            {
                "k": 49,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root root name",
                "identical": false
            },
            {
                "k": 50,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't an array",
                "identical": false
            },
            {
                "k": 51,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'frame't modify schema",
                "identical": false
            },
            {
                "k": 52,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name: a parameter should not be assigned. Also declare the methods parameters as 'root || _defaultNameLookup",
                "identical": false
            },
            {
                "k": 53,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't [JACKSON-only",
                "identical": false
            },
            {
                "k": 54,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'time't modify schema",
                "identical": false
            },
            {
                "k": 55,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't know if [databind#116]",
                "identical": false
            },
            {
                "k": 56,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't know if buffered",
                "identical": false
            },
            {
                "k": 57,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't [databind#116]",
                "identical": false
            },
            {
                "k": 58,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent'tse",
                "identical": false
            },
            {
                "k": 59,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root to ensure we can this ever occur?",
                "identical": false
            },
            {
                "k": 60,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name: a parameter should not be assigned. Also declare the methods parameters as 'root to ensure we don't modify schema",
                "identical": false
            },
            {
                "k": 61,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'queue't modify schema",
                "identical": false
            },
            {
                "k": 62,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root to ensure we don't know if root name",
                "identical": false
            },
            {
                "k": 63,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't know if buffered",
                "identical": false
            },
            {
                "k": 64,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't [JACKSON-check;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't modify schema",
                "identical": false
            },
            {
                "k": 66,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't [JACKSON-741]",
                "identical": false
            },
            {
                "k": 67,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' serverName't modify schema",
                "identical": false
            },
            {
                "k": 68,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we't a parameter should not be assigned. Also declare the methods parameters as 'root || _defaultNameLookup",
                "identical": false
            },
            {
                "k": 69,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't do nothing",
                "identical": false
            },
            {
                "k": 70,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't [JACKSON-741]",
                "identical": false
            },
            {
                "k": 71,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'sentence't modify schema",
                "identical": false
            },
            {
                "k": 72,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't know if [JACKSON-only",
                "identical": false
            },
            {
                "k": 73,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'empty't modify schema",
                "identical": false
            },
            {
                "k": 74,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Handler't modify schema",
                "identical": false
            },
            {
                "k": 75,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'creator't modify schema",
                "identical": false
            },
            {
                "k": 76,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we't a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 77,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't know if [databind#116]",
                "identical": false
            },
            {
                "k": 78,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root http't modify schema",
                "identical": false
            },
            {
                "k": 79,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent'tended",
                "identical": false
            },
            {
                "k": 80,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't an array",
                "identical": false
            },
            {
                "k": 81,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't know if [JACKSON-741]",
                "identical": false
            },
            {
                "k": 82,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'decimal't modify schema",
                "identical": false
            },
            {
                "k": 83,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't [JACKSON-check;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw'tended",
                "identical": false
            },
            {
                "k": 85,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't know if [JACKSON-check;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'micro't modify schema",
                "identical": false
            },
            {
                "k": 87,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't [JACKSON-only",
                "identical": false
            },
            {
                "k": 88,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root\", root name);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name: a parameter should not be assigned. Also declare the methods parameters as 'root' nulls but nodes",
                "identical": false
            },
            {
                "k": 90,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't know if buffered",
                "identical": false
            },
            {
                "k": 91,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't [JACKSON-check;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'rootFieldName't modify schema",
                "identical": false
            },
            {
                "k": 93,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't an int",
                "identical": false
            },
            {
                "k": 94,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't know if [JACKSON-only",
                "identical": false
            },
            {
                "k": 95,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't an int",
                "identical": false
            },
            {
                "k": 96,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root't [JACKSON-407]\"",
                "identical": false
            },
            {
                "k": 97,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent't know if [JACKSON-only",
                "identical": false
            },
            {
                "k": 98,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw't [JACKSON-only",
                "identical": false
            },
            {
                "k": 99,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root to ensure we't modify schema",
                "identical": false
            },
            {
                "k": 100,
                "patch": "_rootNameLookup = src._rootNameLookup; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'root'tse",
                "identical": false
            }
        ],
        "buggy_line": "_rootNameLookup = src._rootNameLookup;",
        "fixed_line": "_rootNameLookup = new XmlRootNameLookup();"
    },
    "Codec-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "return StringUtils.newStringUtf8(binaryData, false));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return StringUtils.newStringUtf8(binaryData, true));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return StringUtils.newStringUtf8(binaryData, true;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return StringUtils.newStringUtf8(binaryData, false;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return StringUtils.newStringUtf8( getFileData, false));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return StringUtils.newStringUtf8(config, false));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return StringUtils.newStringUtf8(binaryData, false % true;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return StringUtils.newStringUtf8( binaryData, false));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return StringUtils.newStringUtf8(binaryData, true) + 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return StringUtils.newStringUtf8(propertiesBase64String, false));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return StringUtils.newStringUtf8(serviceData, false));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return StringUtils.newStringUtf8(binaryData, false) + 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true : false;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return StringUtils.newStringUtf8(binaryData, false);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return StringUtils.newStringUtf8(binaryData, false);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return StringUtils.newStringUtf8(binaryData, true);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return StringUtils.newStringUtf8(binaryData, false ? true : false;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true : false));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return StringUtils.newStringUtf8( getFileData, true));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return StringUtils.newStringUtf8(binaryData, false*",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true : false);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return StringUtils.newStringUtf8(PASSBase64String, false));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return StringUtils.newStringUtf8(binaryData, true) / true;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return StringUtils.newStringUtf8(commentsData, false));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return StringUtils.newStringUtf8(binaryData, false / true;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return StringUtils.newStringUtf8( hmacData, false));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return StringUtils.newStringUtf8(binaryData, false) / true;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return StringUtils.newStringUtf8(binaryData, false ? true : false);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return StringUtils.newStringUtf8(base64String, false));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return StringUtils.newStringUtf8( ParameterBase64String, false));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return StringUtils.newStringUtf8(binaryData, true);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return StringUtils.newStringUtf8( srcBase64String, false));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return StringUtils.newStringUtf8(binaryData, true)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return StringUtils.newStringUtf8(contentBase64String, false));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return StringUtils.newStringUtf8(parseBase64String, false));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return StringUtils.newStringUtf8(binaryData, false)) / true;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return StringUtils.newStringUtf8(config, true));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return StringUtils.newStringUtf8(ImportsBase64String, false));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return StringUtils.newStringUtf8(triData, false));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return StringUtils.newStringUtf8(smallData, false));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return StringUtils.newStringUtf8(binaryData, false), true;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return StringUtils.newStringUtf8(actualData, false));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return StringUtils.newStringUtf8(ATTERBase64String, false));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return StringUtils.newStringUtf8(noData, false));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return StringUtils.newStringUtf8( getFieldNameBase64String, false));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return StringUtils.newStringUtf8( concatBase64String, false));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return StringUtils.newStringUtf8(26,Base64String, false));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return StringUtils.newStringUtf8(binaryData, true / true;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return StringUtils.newStringUtf8(CasesData, false));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return StringUtils.newStringUtf8(binaryData, false ? true);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return StringUtils.newStringUtf8(vesBase64String, false));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return StringUtils.newStringUtf8(binaryData, false)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return StringUtils.newStringUtf8(binaryData, false and true ? binaryData);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return StringUtils.newStringUtf8(binaryData, true*",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return StringUtils.newStringUtf8(HIGHData, false));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return StringUtils.newStringUtf8( LOGBase64String, false));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return StringUtils.newStringUtf8( historicData, true));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return StringUtils.newStringUtf8(binaryData, false ? true : false));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return StringUtils.newStringUtf8( historicData, false));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return StringUtils.newStringUtf8(binaryData, true*36Data);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return StringUtils.newStringUtf8(binaryData, false));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return StringUtils.newStringUtf8( existence, false));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return StringUtils.newStringUtf8( parenthesisData, false));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return StringUtils.newStringUtf8(colsData, false));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return StringUtils.newStringUtf8(potential, true));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return StringUtils.newStringUtf8(binaryData, false ? true));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return StringUtils.newStringUtf8(serviceData, true));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return StringUtils.newStringUtf8(whereData, false));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return StringUtils.newStringUtf8(ETData, false));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return StringUtils.newStringUtf8(binaryData, true}, false;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return StringUtils.newStringUtf8(binaryData, false)) + 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return StringUtils.newStringUtf8(currData, false));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return StringUtils.newStringUtf8(binaryData, false pos, true);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return StringUtils.newStringUtf8( binaryData, true));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return StringUtils.newStringUtf8(binaryData, true)) / true;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return StringUtils.newStringUtf8(PositiveData, false));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return StringUtils.newStringUtf8(linesData, false));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return StringUtils.newStringUtf8(binaryData, true) % false;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return StringUtils.newStringUtf8(rlData, false));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return StringUtils.newStringUtf8( makeData, false));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return StringUtils.newStringUtf8(AttemptData, false));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return StringUtils.newStringUtf8(binaryData, true)) + 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return StringUtils.newStringUtf8(tenantId, false));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return StringUtils.newStringUtf8(potential, false));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return StringUtils.newStringUtf8(binaryData, false});",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return StringUtils.newStringUtf8( string, false));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return StringUtils.newStringUtf8( output64String, false));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return StringUtils.newStringUtf8(binaryData, true) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return StringUtils.newStringUtf8(binaryData, false % true));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return StringUtils.newStringUtf8( PROXY_ALL, false));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return StringUtils.newStringUtf8(binaryData, false and true) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return StringUtils.newStringUtf8(binaryData, false and true);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return StringUtils.newStringUtf8(ImportsBase64String, true));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return StringUtils.newStringUtf8( DAY_OF_WEEK, true));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return StringUtils.newStringUtf8( anyData, false));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return StringUtils.newStringUtf8(binaryData, falseNULL);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return StringUtils.newStringUtf8(binaryData, false and true;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return StringUtils.newStringUtf8(propertiesBase64String, true));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return StringUtils.newStringUtf8(tagData, false));",
                "identical": false
            }
        ],
        "buggy_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
        "fixed_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));"
    },
    "Math-94": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (u * v == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (u * v < 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (v * v == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (v * v < 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (v1 * v == 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (u * v <= 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (2 * v == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (v1 * v <= 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (v * 2 == 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (u * v >= 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (v1 * v < 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (v * v >= 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (2 * v <= 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (u / 2 == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (v / 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (u * v > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (u / v == 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (v * v <= 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (2 * v < 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (u / this.abs1 - v <= 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (u / Byte * v == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (u / 2 * v == 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (u / this.abs1 - v == 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (u / this.abs1 - v >= 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (u / this.v == 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (v * 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (v * 2 < 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (v * d < 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (u / this.abs1 - v) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (u / this.abs1 - v > 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (v /Math.abs(v) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (u % 2 == 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (v * 1 == 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (u * 2 == 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (v / Math.abs(u) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (v * shift - 1) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (v /Math.abs(u) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (v % 2 == 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (v * shift - v >= 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (v * d == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (u / this.abs1 - v % 1 == 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (u1 * v == 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (u / 24 * v == 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (u / METERS_BIG_OF_RESERVED_CHARACTERS) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (u / this.abs1 - v < 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (u / this.abs1 - v % 1MIDDLE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ifu * v == 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (v * shift) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (v * 2 > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (u * 2 < 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (v * shift - 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (v1 * v % 1 == 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (u / this.absY_OF_A_MINUTE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (v / Math.abs(u) <= 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (v *w < 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (u / this.absY_END_OF_STRING) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (u * vdabs(v) <= 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (u / METERS_INT_AS_END_OF_STRING == 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (u / this.abs] == 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (u / 2 - 1 == 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (u / this.abs1 - v + 1 > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (v1 * v >= 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (v1 * v + 1 < 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (u * vdabs(v) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (v * shift == 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (u / METERS_BIG_OF_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (u / 2 * v < 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (u / this.abs1 - v % 1MIDDLE > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (v * i == 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (u / 2 != 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if(u * v < 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (u / METERS_BIG_OF_RESERVED_CHARACTERS, v == 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (u / METERS_BIG_DECIMAL) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (v /Math.abs_END_OF_STRING) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (u / this.abs(v) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (v *Enabled == 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (u / this.absY_END_OF_STRING == 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (v / Math.abs(u) >= 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (u / METERS_BIG_OF_RESERVED_CHARACTERS.abs(v) <= 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (u /WaitTime == 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (u / this.abs1 - v + 1) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (u / this.abs1 - v % 1MLICA_OF_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (v *w > 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (u * v2 < 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (v * ignore == 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (u / this.absY_END_OF_RESERVED_CHARACTERS) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (v * k <= 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (u / 60 * 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (u / 60 * 1000) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (v * T.length > 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (2 * v > 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (u / METERS_BIG_OF_RESERVED_INDEX + v == 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ifu * v < 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (2 * v >= 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (u / this.absY - v >= 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (u / METERS_INT_AS_END_OF_RESERVED_CHARACTERS) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (u / METERS_BIG_OF_RESERVED_CHARACTERS.abs(v) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (u / METERS_BIG_TOKENS + 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (u / this.v < 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (u / 1000 == 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (u * v == 0) {",
        "fixed_line": "if ((u == 0) || (v == 0)) {"
    },
    "Csv-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new LinkedHashMap<String, Integer>(3);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new LinkedHashMap<String, Integer>(4);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 0);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new LinkedHashMap<String, Integer>(40, this.headerMap);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new LinkedHashMap<String, Integer>(50_XML_PREFERENCE, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != that.headerMap);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new LinkedHashMap<String, Integer>(criteriaBuilder, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_STOP;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new LinkedHashMap<String, Integer>(8);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_ROOT;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_IN_PROGRESS;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap <= 16;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 16;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != args.length;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new LinkedHashMap<String, Integer>(10);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap <= 8;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_G_CALENDAR;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new LinkedHashMap<String, Integer>(40, input.headerMap);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new LinkedHashMap<String, Integer>(50);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONFIRMATION;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONFIRMATION);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_COMPLETED;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_CLOSED;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_G_COMMA);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 500;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new LinkedHashMap<String, Integer>(otMap);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap <= 63) + 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_COMMA);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_SIGNIFICANCE_ON_CLOSED;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != parser.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new LinkedHashMap<String, Integer>(40,this.headerMap);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_COMMA);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_COMPENSATION;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap !=p);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_XHTML;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 8;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_IN_CLOSED;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new LinkedHashMap<String, Integer>(50_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_IN_MS;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap + 8;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new LinkedHashMap<String, Integer>(Math.headerMap);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap > 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap !=p;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != threshold;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != context);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CLASS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new LinkedHashMap<String, Integer>(16, 16;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != font1);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_IN_LIST;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != args.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_EMBEDDED_CLOSED;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != DEFAULT_VALUE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != VOID;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != connections;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_COMPENSATION);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_IN_USE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_STRING;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != SELECTED);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 1.0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != that.headerMap;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_COMPLETED);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 0L);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_ objectName;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != generator);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new LinkedHashMap<String, Integer>(50Type.headerMap);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != componentName1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_COMPLETE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_UNION);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_COMMASTER) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap !=persistent);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_SIGNIFIRMATION;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap <= 63) ;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CLOSED;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_URL;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_G_CALENDAR);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 0L;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new LinkedHashMap<String, Integer>( on this.headerMap);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_DEFINITION;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 4;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new LinkedHashMap<String, Integer>( this.headerMap);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_ESCAPE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != threshold);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new LinkedHashMap<String, Integer>(50_VALUE);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != EMPTY;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_ctxt;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_SIGNAL;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_SOURCE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_IN_XHTML;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_FROM;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_IN_INTERVAL_MS;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_IN_EVENT);",
                "identical": false
            }
        ],
        "buggy_line": "return new LinkedHashMap<String, Integer>(this.headerMap);",
        "fixed_line": "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);"
    },
    "JacksonDatabind-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass2;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass+1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassExecutorRawClass);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass});",
                "identical": false
            },
            {
                "k": 9,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass(), t.class);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != t.class);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass+t.class);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass+t.class;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassname);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != boolean.class);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassonTypeClass);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()+t.class;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass \"+t.class;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass++) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > t.class);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassExecutorRawClass;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > 0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > t.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass8) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > boolean.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()+t.class);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassonType);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClasswait",
                "identical": false
            },
            {
                "k": 30,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClasstransformerClass);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > t.class;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > boolean.class);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass coerClass);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassANNOTATION_STRING;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != boolean.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass builder.class);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassAPPLICATION_FINAL;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass \"+t.class);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassclientRawClass);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass definition_FINAL;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass))) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassPlatform;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass(1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass)).",
                "identical": false
            },
            {
                "k": 46,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != t.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != JsonToken.class);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass() != t.class;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass!\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassMS;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != t.class;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassioTypeClass);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass too_FINAL;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassconv",
                "identical": false
            },
            {
                "k": 56,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassook_FINAL;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > data.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassExecutorRawClass()));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassPresent;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > byte.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassStyleClass);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClasscls_FINAL;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassstrategy_FINAL;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass number_FINAL;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassStyleClass;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassCode;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClasspojoType);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass() != boolean.class;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassK_FINAL;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassDecl_FINAL;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassonTypeClass;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassK_STRINGS);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassBuffers.class);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > 1);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass24;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassSubject_STRING;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClasspojo);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > data.class);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassPlatform);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass number",
                "identical": false
            },
            {
                "k": 81,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass 1).",
                "identical": false
            },
            {
                "k": 82,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass).",
                "identical": false
            },
            {
                "k": 83,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass NOSONAR",
                "identical": false
            },
            {
                "k": 84,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassString);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > data.class;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != JsonToken.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass definition_FINALARM);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassinObject()));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassPlatform_FINALARM);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassam;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassANNOTATIONS_STRING;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassHOUR_STRING;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass').",
                "identical": false
            },
            {
                "k": 94,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassANNOTATION_ORAL;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassonTypeArguments);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClasson != t.class);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass NReaders;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassK_STRING;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassSubject_FINAL;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassANNOTATIONS_FINAL;",
                "identical": false
            }
        ],
        "buggy_line": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
        "fixed_line": "&& !TreeNode.class.isAssignableFrom(t.getRawClass()));"
    },
    "Lang-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "Calendar c = new GregorianCalendar;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Calendar c = new GregorianCalendar(date);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Calendar c = new GregorianCalendar[0];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Calendar c = new GregorianCalendar(date;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Calendar c = new GregorianCalendar_COLUMN;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Calendar c = new GregorianCalendarPattern;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Calendar c = new GregorianCalendar_PRECISE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Calendar c = new GregorianCalendar(0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Calendar c = new GregorianCalendar(), DATE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Calendar c = new GregorianCalendarContext;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Calendar c = new GregorianCalendar_DATE_AND;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Calendar c = new GregorianCalendar.date;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Calendar c = new GregorianCalendar_POSITION;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Calendar c = new GregorianCalendar_DATE_FORMAT;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Calendar c = new GregorianCalendarDecoder(1024, DATE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Calendar c = new GregorianCalendarC_DATE_FORMAT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Calendar c = new GregorianCalendarResult;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Calendar c = new GregorianCalendar_TIMEZONE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Calendar c = new GregorianCalendarType;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Calendar c = new GregorianCalendarC_DATE_AND;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Calendar c = new GregorianCalendar << 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Calendar c = new GregorianCalendar << 8;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Calendar c = new GregorianCalendarVar(date);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Calendar c = new GregorianCalendar<>(date;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Calendar c = new GregorianCalendarS_TIMEZONE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Calendar c = new GregorianCalendar[date;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Calendar c = new GregorianCalendarC_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Calendar c = new GregorianCalendarConstants.DATE_AND_TIMEZONE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Calendar c = new GregorianCalendaredmeters;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Calendar c = new GregorianCalendar_northEMBEDDED_DATE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Calendar c = new GregorianCalendar(1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Calendar c = new GregorianCalendarDecoder(1024;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Calendar c = new GregorianCalendar_ this.date;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Calendar c = new GregorianCalendarDecoder(25;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Calendar c = new GregorianCalendar_MIDDLE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Calendar c = new GregorianCalendarFrommTimeZone;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Calendar c = new GregorianCalendar_PREFERENCE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Calendar c = new GregorianCalendar.degree;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Calendar c = new GregorianCalendar_PREVIOUS;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Calendar c = new GregorianCalendar_COUNT;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Calendar c = new GregorianCalendarnodes;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Calendar c = new GregorianCalendarS_CONFIGURER_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Calendar c = new GregorianCalendar_MUST_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Calendar c = new GregorianCalendarated;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Calendar c = new GregorianCalendar_FINISHED_PATTERN;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Calendar c = new GregorianCalendar<>();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Calendar c = new GregorianCalendarCANCE_COLUMN;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Calendar c = new GregorianCalendar_delimiter;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Calendar c = new GregorianCalendar_PATTERN;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Calendar c = new GregorianCalendarConstants.DATE_FORMAT;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Calendar c = new GregorianCalendarFOR_TIMEZONE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Calendar c = new GregorianCalendarC_COLUMN;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Calendar c = new GregorianCalendarDecoder(1024, DATE_TIME_FORMAT);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Calendar c = new GregorianCalendaredmTimeZone;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Calendar c = new GregorianCalendar[2];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Calendar c = new GregorianCalendar_SECOND;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Calendar c = new GregorianCalendar_northEMBEDDED_COLUMN;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Calendar c = new GregorianCalendarC_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Calendar c = new GregorianCalendarDecoder(1024);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Calendar c = new GregorianCalendarUpdatemTimeZone;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Calendar c = new GregorianCalendaredmillis;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Calendar c = new GregorianCalendar_FINISHED_COUNT;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Calendar c = new GregorianCalendar_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Calendar c = new GregorianCalendarQuery;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Calendar c = new GregorianCalendarS_FINISHED_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Calendar c = new GregorianCalendarCANCE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Calendar c = new GregorianCalendar_PRECIATION_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Calendar c = new GregorianCalendarC;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Calendar c = new GregorianCalendarLine;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Calendar c = new GregorianCalendarCANCE_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Calendar c = new GregorianCalendarSetmTimeZone;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Calendar c = new GregorianCalendarS_COLUMN;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Calendar c = new GregorianCalendar_ON_DELIM;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Calendar c = new GregorianCalendarCount;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Calendar c = new GregorianCalendar_MUST_NOT_BE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Calendar c = new GregorianCalendarS_CONFIGURER_DATE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Calendar c = new GregorianCalendarS;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Calendar c = new GregorianCalendarQP;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Calendar c = new GregorianCalendar(1000);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Calendar c = new GregorianCalendar0);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Calendar c = new GregorianCalendar_PREDICATE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Calendar c = new GregorianCalendarDecoder(1024, date;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Calendar c = new GregorianCalendar_northELEVATION;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Calendar c = new GregorianCalendar(600, date;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Calendar c = new GregorianCalendar_DATE_TIMEZONE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Calendar c = new GregorianCalendar_FINISHED_INDEX;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Calendar c = new GregorianCalendar_northEMBEDDED_PATTERN;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Calendar c = new GregorianCalendar_date;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Calendar c = new GregorianCalendar_ON_CLOSED;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Calendar c = new GregorianCalendar(date) + 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Calendar c = new GregorianCalendar(), DATE_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Calendar c = new GregorianCalendar_PRECISE_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Calendar c = new GregorianCalendar_MULATION;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Calendar c = new GregorianCalendarpointType;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Calendar c = new GregorianCalendar_MUST_DATE_AND;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Calendar c = new GregorianCalendarSpeed;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Calendar c = new GregorianCalendarData;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Calendar c = new GregorianCalendar(0 << 8;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Calendar c = new GregorianCalendarConstants.DATE_TIMEZONE;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Calendar c = new GregorianCalendar-1;",
                "identical": false
            }
        ],
        "buggy_line": "Calendar c = new GregorianCalendar(mTimeZone);",
        "fixed_line": "Calendar c = new GregorianCalendar(mTimeZone, mLocale);"
    },
    "Jsoup-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static StringString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static String nullString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static StringBuffers = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static StringPositionString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static String filePath = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static String jsonString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static StringNumberString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static String _String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static StringdataString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static String subString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static String parentString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static StringViewString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static String map = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static StringF = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static String apiString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static String booleanString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static String NULL = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static StringSeen = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static String asciiString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static String orphan = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static StringBuffersString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static String sString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static StringIDString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static StringString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static String strString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static String applyString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static String matrix = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static String contentTypeString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static Stringpush = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static String instructions = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static String> = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static StringFree = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static String NRString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static StringslotString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static String scriptString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static StringNonString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static StringdatabindString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static String STD = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static StringIntString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static String intString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static String topologyString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static StringDir = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static String remoteString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static StringInvoString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static String edition = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static String allString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static String shapeString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static String SegmentString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static String rString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static String TYPE_String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static String getFactory = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static String String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static StringEMPTY_MAP = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static StringReader = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static String getSString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static String sharedString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static String targetString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static String projectString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static StringHOSTString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static String labelString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static String containerString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static Stringopen = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static StringencryptionString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static String 96String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static String Bean = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static StringparamString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static StringK = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static String13String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static String calculatorString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static String HEADER = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static StringRESPONSE = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static StringDef = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static String NULL_TYPE = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static StringBitString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static String getFactoryString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static String defaultValue = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static String NString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static StringFILL = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static String httpString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static String info = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static String textString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static StringToken = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static String persistenceString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static String StringUtil = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static Stringcomplete = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static String 96 = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static String endIndex = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static String temperature = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static String[] = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static StringSetting = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static String cost = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static Stringich = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static StringQueryString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static StringChars = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static String fully = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static String rgb = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static StringString = String.valueOf(0x0000FF;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static String nullString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static String Bit = String.valueOf(0x0000;",
                "identical": false
            }
        ],
        "buggy_line": "private static String nullString = String.valueOf(0x0000);",
        "fixed_line": "private static String nullString = String.valueOf('\\u0000');"
    },
    "Jsoup-43": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (element.equals(element)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (element.equals(i)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (element.equals(element)) returnEps;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (element.equals(new)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (element.equals(element)) returnEOLATION;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (element.equals(element)) returnEOL;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (element.equals(t)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (element.equals(elements)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (element.equals(\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (element.equals(element)) returnEOLVED_ENTRY;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (element.equals(element)) returnEOLVED_VALUE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (element.equals(element)) returnEOLVED_WIDTH;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (element.equals(element)) returnE == element;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (element.equals ALL_COLUMNS) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (element.equals(element)) returnEOLOR;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (element.equals(this.element)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (element.equals(element)) returnEMBEDDED_NOT_BEFORE, element);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (element.equals(element)) returnEOLVED_BEFORE, element);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT, element);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (element.equals(current)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (element.equalsNull) returnEps;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (element.equals(element)) returnEMBEDDED_VALUE;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (element.equals(\"0\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (element.equals(element)) returnEOLVED_POSITION;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (element.equals(element)) returnEOLVED_BEFORE, element;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (element.equals( labels)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (element.equals(newValue)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (element.equals(element)) return builder.element;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (element.equals(element)) returnEMBEDDED;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (element.equals(newName)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (element.equals(element)) returnEMBEDDED_NOT_BEFORE, element;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (element.equals(search)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (element.equals(element)) returnE == STATE_BEFORE_START;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (element.equals == NR_OF_WEEK) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (element.equals) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (element.equals(element)) return container;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (element.equals(E == element)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (element.equals(element)) return[element;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (element.equals(Repres)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (element.equals(element)) returnEOLER;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (element.equals ALL_COLUMNS) returnEps; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (element.equals(element)) return VOID;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT, element;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (element.equals(element)) returnEPOCHART_NO_ i;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (element.equals(element)) returnE prefix;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (element.equals(element)) returnEOLVERTITUDE_VALUE;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (element.equals(element)) returnEcomma;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (element.equals(element)) returnEOLVED_ADAPTER;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (element.equals(element)) returnEOLVERTour;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (element.equals(Generic)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (element.equals(element)) returnEOLDIMENSIONS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (element.equals(Absolute)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (element.equals(element)) returnEMONTH;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (element.equals(element)) returnEOLVED_NO_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (element.equals( orderBy)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (element.equals(substit)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (element.equals(element)) returnEITUDE_VALUE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (element.equals(u)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (element.equals(element)) returnEMBEDDED_BEFORE, element);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (element.equals( element)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (element.equals(element)) returnEOLVED_NO_RESERVED_ENTRY;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (element.equals(element)) returnEVAL;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (element.equals(element)) returnEOLVED_SPLIT;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (element.equals(element)) return username;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (element.equals(element)) returnEOLVED_NO_NOT_BEFORE, element);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (element.equals(element)) returnEOLVER_BEFORE, element);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (element.equals(element)) returnEMBEDDED_ELEMENT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (element.equalsNull) return[element;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (element.equals(element)) returnEOLENGINE_NAME;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (element.equals(element)) returnEOLVED_MARKER;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (element.equals(element)) returnEOLVED_BEFORE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (element.equals(element)) returnEOLV == element;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (element.equals(i)) returnEOLATION;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (element.equals(element)) returnEffBM) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (element.equals(element)) returnEOLVED_unit;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (element.equals(element)) returnEOLVED_NO_ENTRY;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (element.equals(element)) returnEOLVED_NO_CONTENT;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (element.equals(element)) returnEOLVED_NO_NAME;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (element.equals(element)) return deploy;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (element.equals(element)) return i;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (element.equals(element)) returnE second;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (element.equals(element)) return y;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (element.equals(element)) returnEMBEDDED_BEFORE, element;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (element.equals(element)) returnEOLVED_ADING_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (element.equals(element)) returnEMBEDDED_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (element.equals(element)) returnW path;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (elementDescriptor.equals(element)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (element.equals(element)) returnEsink;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (element.equals(element)) returnEOLVED_INT;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (element.equals(element)) returnEps; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (element.equals(element)) returnEOLOR < elements;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (element.equals(element)) returnEOLVER_BEFORE, element;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (element.equals(element)) returnEOLDISTINCT) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (element.equals(element)) returnEOLVED_ADING_DELTA;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (element.equals(element)) returnEOLVERTION;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (element.equals(address)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (element.equals(\"E == element) {",
                "identical": false
            }
        ],
        "buggy_line": "if (element.equals(search))",
        "fixed_line": "if (element == search)"
    },
    "Math-58": {
        "fixes": [
            {
                "k": 1,
                "patch": "return fit.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return fit(guessedetric.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return fit(guessed.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return fit(guessed, guess);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return fit(guessed, guess;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return fit(guessed, guess.Parametric);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return fit.Parametric;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return fit(guessed, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return fit(guessed, guess.Parametric;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return fit(guessedetric.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return fit.Parametric(guessed, guess);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return fit(guessedView.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return fit(guessedFactory.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return fit(guessedHash.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return fit(guessedetric;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return fit(guess, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return fit(guessed >= guess.Parametric;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return fit(guessedetric != guess.Parametric;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return fit(guessedJob.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return fit(guessedExtension.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return fit.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return fit(guessedate.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return fit(guessed, guess.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return fit(guessed;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return fit(guessed.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return fit.Parametric(guessed);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return fit(guess, guess.Parametric);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return fit(PATTERN, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return fit(guessedBoolean.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return fit(guess, guess.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return fit(guessedetric.Parametric;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return fit(guessedDesc.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return fit(guessedative.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return fit(guessedetric.Parametric, guess);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return fit(guessedOrig.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return fit(guessedService.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return fit(guessed == guess.Parametric;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return fit(guessedBuilder.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return fit(guessedNodes.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return fit(guessed);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return fit(guessed && guess.Parametric;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return fit(guessedBox.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return fit(guessedetric(), guess;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return fit(guessed -> guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return fit;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return fit(instantiation.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return fit(guessedMethod.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return fit(guessedEncounter.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return fit(guessedEdge.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return fit(guessed && guess;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return fit(guessed {}.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return fit(mail.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return fit(8, guess.Parametric);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return fit.Parametric(guess, guess);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return fit(httpMethod.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return fit(PATTERN, guess.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return fit.Parametric(guessed, guess;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return fit(PATTERN, guess.Parametric);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return fit(guessed > guess.Parametric;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return fit(forward.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return fit(guessedFactory.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return fit(tags.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return fit(methodetric.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return fit(guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return fit(ByteBuffer.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return fit( Hyper.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return fit(guessedNodeParametric(), guess;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return fit(guessed)etric;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return fit(guessed[Parametric(), guess;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return fit(guessed && guess.length > 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return fit(math, guess.Parametric);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return fitPathParametric.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return fit(guessed < guess.Parametric;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return fit(assign, guess.Parametric);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return fit(guessedTypedValueParametric(), guess;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return fit(guessedFlowParametric(), guess;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return fit( paging.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return fit(guessed.Parametric;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return fit(guess, guess;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return fit(guessedHash.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return fit(px.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return fit(guessedGeneratorParametric(), guess;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return fit(guessedOrig.Parametric;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return fit(guessedView.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return fit(guess, guess.Parametric;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return fit(config.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return fit(guessedHash;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return fit(sep.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return fit(guessedToGu;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return fit(guessedetric.Parametric);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return fit(guess, guess);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return fit(httpMethod, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return fit(guessed >= guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return fit.Parametric(guessed;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return fit( sync.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return fit.Parametric(guessed >= guess.length;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return fit(guessed >= guess.Parametric);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return fit(pathname, guess.Parametric);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return fit(pathname, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return fit(PATTERN, guess;",
                "identical": false
            }
        ],
        "buggy_line": "return fit(new Gaussian.Parametric(), guess);",
        "fixed_line": "return fit(guess);"
    },
    "Math-105": {
        "fixes": [
            {
                "k": 1,
                "patch": "return sumXY * 31 / sumXY;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return sumXY * 1 / sumXY;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return sumXY * 1024 * sumXY;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return sumXY * this.sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return sumXY * KEYXY / sumXX_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return sumXY * classXY / sumXY;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return sumXY * 10) / sumXY;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return sumXY * 8 / sumXY;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return sumXY * rightXY / sumXY;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return sumXY * intent / sumXY;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return sumXY * DummyXY / sumXY;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return sumXY * 2 / sumXY;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return sumXY *FIX / sumXY;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return sumXY * namedXY / sumXY;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return sumXY * 1 + sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return sumXY * paddingXY / sumXY;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return sumXY * refresh / sumXY;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return sumXY * 2 + sumXY;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return sumXY * Auth / sumXY;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return sumXY *NCY / sumXY;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return sumXY * approximate / sumXY;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return sumXY * shiftXY / sumXX;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return sumXY * shiftXY / sumXX_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return sumXY * accumS_PER_SEGMENT * sumXY;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return sumXY * 1 + sumXY / sum_;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return sumXY *DIGXY / sumXY;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return sumXY * this.nXY / sumXY;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return sumXY * 0 / sumXY;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return sumXY * KEYXY / sumXX_FEATURE_USE_HEADER;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return sumXY * KEYXY / sumXX;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return sumXY *atesXY / sumXY;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return sumXY * 100) / sumXY;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return sumXY * ClientResponse / sumXY;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return sumXY * User / sumXY;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return sumXY * THE / sumXY;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return sumXY *ret / sumXY;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return sumXY *.2 / sumXY;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return sumXY * 10) + sumXY;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return sumXY * PI / sumXY;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return sumXY * shiftXY / sumXX_;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return sumXY * result + sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return sumXY * getLabel / sumXY;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return sumXY * contentLength / sumXY;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return sumXY * orderByXY / sumXX_;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return sumXY * componentType / sumXY;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return sumXY * rectangle / sumXY;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return sumXY * outputStreamXY / sumXY;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return sumXY *ANY / sumXY;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return sumXY * accumS_PER_SEGMENT / sumXY;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return sumXY * 1 + sumXY / sumXX_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return sumXY * KI_PER_SEGMENT / sumXY;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return sumXY * LONGXY / sumXY;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return sumXY *ManagerFactory / sumXY;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return sumXY * getLXY / sumXY;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return sumXY *animate / sumXY;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return sumXY *ORDS / sumXY;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return sumXY * indexXY / sumXY;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return sumXY * KEYXY / sumXX_OF_A_MINIMAL;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return sumXY * Category / sumXY;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return sumXY * 31 + sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return sumXY *OR_NAME_PREFIX / sumXY;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return sumXY * KEYXY / sumXX_TIMER;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return sumXY * KEYXY / sumXX_;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return sumXY * this.sumXY / sumXX_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return sumXY * KEYXY / sumXX_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return sumXY *Under + sumXY / sumXX_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return sumXY *aped / sumXY;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return sumXY *OR_NAME_PREFIX + sumXY / this.sum;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return sumXY * orderByXY / sumXY;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return sumXY * 2 + sumXY / String.class;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return sumXY * STRING / sumXY;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return sumXY * datatype + sumXY;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return sumXY * currentIndex / sumXY;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return sumXY * shiftXY / sumXX_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return sumXY * 24 / sumXY;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return sumXY * 1 - sumXY / sum_;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return sumXY * KEYXY / sumXX_OF_TENANT_FIELD;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return sumXY * 1 + sumXY / sumNull;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return sumXY * datatype / sumXY;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return sumXY * dep / sumXY;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return sumXY * KEYXY / sumXX_TOTAL;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return sumXY * KEYXY / sumXX_RADIUS;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return sumXY *ORX / sumXY;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return sumXY * KEYXY / sumXX_FEATURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return sumXY * 16 / sumXY;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return sumXY * KI_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return sumXY * 1 + sumXY / sum;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return sumXY * 60 * 1000;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return sumXY * currentIndex + sumXY / this.sum;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return sumXY * se / sumXY;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return sumXY * 31 + sumXY / sum_;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return sumXY *OR_NAME_PREFIX + sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return sumXY * 1 + sumXY / sumXX_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return sumXY * 2 + sumXY / this.sum;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return sumXY * result + sumXY / sum_;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return sumXY * </X / sumXY;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return sumXY *ikariXY / sumXY;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return sumXY * mimeTypeXY / sumXY;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return sumXY * STRING + sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return sumXY * KEYXY / sumXX_FIELD;",
                "identical": false
            }
        ],
        "buggy_line": "return sumYY - sumXY * sumXY / sumXX;",
        "fixed_line": "return Math.max(0d, sumYY - sumXY * sumXY / sumXX);"
    },
    "JacksonCore-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (_hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (_hasSegments;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (_hasSegments) return _segment;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (_hasSegments) return JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (_hasSegments) return JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (_hasSegmentsExplicitlySet) return _currentSegment;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (_hasSegmentsToWrite) return _currentSegment;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (_closed) return _currentSegment;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (_hasSegments) return JsonToken.START_ARRAY;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (_hasSegments == null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (_hasSegments) return _segmentId;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (_hasSegments) return JsonToken.NOT_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (_hasSegmentsWithArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (_hasSegmentsFlush) return _currentSegment;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (_hasSegmentsContentString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (_hasSegmentsCreator) return _currentSegment;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (_hasSegments) return _segmentBytes;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (_hasSegmentsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (_closed) return _segment;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (_hasSegments) return NO_hasSegments;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (_hasSegments) return STATE_hasSegments;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (_hasSegmentsString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (_hasSegmentsToChange) return _currentSegment;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (_null != STATE_hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (_hasSegments.length) return _currentSegment;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT ) return _currentSegment;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (_hasSegments) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (_hasSegmentsForString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (_tokenIncomplete) return _currentSegment;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (_hasSegments) return JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (_hasSegments) return NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (_hasSegments+1) return _currentSegment;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (_hasSegments) return _segmentCount;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_forSerialization) return _currentSegment;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (_hasSegments) return _segmentString;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (_hasSegments) return JsonToken.NOT_AVAILABLE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (_completedAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (_hasSegmentsToInclude) return _currentSegment;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (_hasSegments. return _currentSegment;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (_hasSegmentsInstanceArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (_hasSegmentsCreatorString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (_hasAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (_hasSegments '/') return _currentSegment;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (_hasSegments) return NO_CHARS;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (_hasSegmentsInstanceString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (_hasSegmentsExplicitString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (_hasSegmentsPrefixString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (_hasSegments) return JsonToken.NOT_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (_hasSegmentsField) return _currentSegment;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (_hasSegments) return _currentSegment.DEFAULT_hasSegments;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (_hasSegmentsIncomplete) return _currentSegment;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (_hasSegmentsAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (_hasSegments) return JsonToken.NOT_FEATURE_USE_HEADER;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (_hasSegments) return _currentSize;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (_hasSegments) return _segmentPtr;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (_hasSegments) return JsonToken.END_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (_wrapAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (_hasSegmentsVisible) return _currentSegment;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (_hasSegmentsExplicit) return _currentSegment;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (_hasSegments) return JsonToken.PROCESS_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT, _currentSegment;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (_hasSegments) return JsonToken.NOT_ARRAY;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (_hasSegments) return _currentString;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (_hasSegmentsImpl) return _currentSegment;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (_hasSegments) return JsonToken.NOT_FEATURE_ALLOW_COMMENTS;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (_hasSegmentsSpace) return _currentSegment;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (_completed) return _currentSegment;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT;// should check the _currentSegment;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (_hasSegments) return JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT;// end-of-currentSegment;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (_hasSegments && _currentSegment;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (_hasSegmentsEnabled) return _currentSegment;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (_hasSegments; // must point all) return _currentSegment;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (_autoAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT;// should check _currentSegment;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if _hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT; // can't need to check _currentSegment",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (_hasSegmentsStr) return _currentSegment;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (_hasSegments) return JsonToken.NOT_FEATURE_SKIP_FIRST_DATA_ROW;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (_cfgFlush) return _currentSegment;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (_hasSegments) return _segment._currentSegment;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (_hasSegments) return JsonToken.NOT_FEATURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT;// should check",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (_hasSegments domain) return _currentSegment;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EADING_ARRAY;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_FEATURE_ALLOW_COMMENTS;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (_hasSegments) return _segmentSize;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (_hasSegments>) return _currentSegment;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT; // can't need to check",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (_segmentString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (_stateString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (_hasSegments) return JsonToken.NOT_EMBEDDED_OBJECT ) return _currentSegment;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (_countString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT; // can't need to check the _currentSegment",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (_hasSegments) return _segmentid;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT; // can't need to check when annotation processing is disabled",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (_hasSegments) return NO_hasSegments; // can't need to check _currentSegment.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT;//top-level a _currentSegment;",
                "identical": false
            }
        ],
        "buggy_line": "if (!_hasSegments)  return _currentSegment;",
        "fixed_line": "if (!_hasSegments && _currentSegment != null)  return _currentSegment;"
    },
    "Math-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (a < b ? Float.NEGATE : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (a < b ? Float.NEG : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (b < 0 ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (a < b ? Float.NEGATE : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (a < b ? Float.NEG : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (a < b ? Float.NEGATE : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (a < b ? Float.NEG : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (a < b ? Float.NEGATE : (E) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (a < b ? Float.MIN_VALUE : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (b < 0 ? 0 : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (b < 0 ? b : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (b < 0 ? b : (Float.NaN(a * b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (a < b ? Float.NEG : (E) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (a < b ? Float.NEGATE_TYPE : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (b <= 0 ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (a < b ? Float.NEGATIVE_STRING : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (a == b ? Float.NEGATE : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (a instanceof b ? b : (Float.isNaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (a instanceof b ? b : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (b < 0 ? b : (Float.NaN(a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (a < b ? Float.NEGATE_TYPE : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (a == b ? Float.NEGATE : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (a == b ? Float.NEGATE : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (a < b ? 0 : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (b < 0 ? b : (Float.NaN(a + b) ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (a < b ? Float.NEGATIVE_LENGTH : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (a < b ? Float.NEGATE : (d - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a * b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (a < b ? Float.NEG : (Float != b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (a < b ? Float.NEGATIVE_b : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (a == b ? Float.NEG : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (b instanceof b ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (a < b ? Float.NEGATE_TYPE : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a + b) ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (b < 0 ? 7 : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (a instanceof b ? b : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (a <= b ? Float.NEG : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (b <= 0 ? b : (Float.NaN(a * b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (a < b ? c : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (a < b ? Float.NEGATE_TYPE : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (a < 0 ? b : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (a < b ? Float.MIN_VALUE : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (b == b ? 0 : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (a < b ? css : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (a < b ? Float.NEGATE : (first + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (a < b ? Float.NEGATE_TYPE : (Float.NaN(a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (a < b ? Float.NEGATE : (Float != b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (a < 0 ? b : (Float.isNaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (b >= 0 ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (b < 0 ? Float.NEGATE : (a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (a < b ? Float.NEST : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (a < b ? Float.TYPE : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (a < b ? Float.NEGATIVE_b : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (a < b ? Float.NEGATE : (b) ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (a < b ? Float.NEGATE : (b + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (a < b ? Float.NENaN : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (a == b ? 0 : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (a < b ? Float.VALUE_b : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (a < 0 ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (a < b ? Float.NEGATIVE_E : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (a < b ? Float.VALUE_E : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (a < b ? Float.NEGATIVE_TYPE : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (a <= b ? Float.NEGATE : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (b < 0 ? b : (Float.isNaN(a * b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (a < b ? Float.CLOSE_a : (Float.isNaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (a <= b ? Float.NEGATE : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (b instanceof b ? b : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (a < b ? Float.data : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (a == b ? Float.NEGATE : (E) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (b <= 0 ? b : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (a < b ? 0 : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (b < 0 ? b : (Float.isNaN(a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (a < b ? Float.VALUE : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (a < b ? Float.NEGZIP : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (a < b ? Float.NEGATIVE_SIZE : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (a < b ? Float.TYPE : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (a < b ? Float.NEG4 : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (a < b ? Float.NEGATE_TYPE : (Float.NaN(a * b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (a < b ? Float.NEGATIVE_STRING : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (a < b ? Float.NEGES : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (a < b ? Float.NEG : (Float) ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (a < b ? Float.NEGATE : (b - b) ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (b < 0 ? Float.NEGATE : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (a < b ? Float.NEGATE_TYPE : (E) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (a < b ? Float.NEGZIP : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (b == b ? Float.NEGATE : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (a < b ? Float.NEGATIVE_TYPE : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (b ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (a < b ? Float.NEGcommand : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (a < b ? Float.NEGES : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (a < b ? Float.B : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (a < b ? Float.SIZE : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (a < b ? Float.NEGens : (b) ? Float.NaN : b;",
                "identical": false
            }
        ],
        "buggy_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);",
        "fixed_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);"
    },
    "JacksonDatabind-97": {
        "fixes": [
            {
                "k": 1,
                "patch": "gen.writeObject(_value);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' characters",
                "identical": false
            },
            {
                "k": 3,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value'",
                "identical": false
            },
            {
                "k": 4,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' nulls but nodes",
                "identical": false
            },
            {
                "k": 5,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value-only",
                "identical": false
            },
            {
                "k": 6,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual -= _value;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' bytes",
                "identical": false
            },
            {
                "k": 8,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual information",
                "identical": false
            },
            {
                "k": 9,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value'll also check",
                "identical": false
            },
            {
                "k": 10,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual throw _value;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual queue",
                "identical": false
            },
            {
                "k": 12,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or later on",
                "identical": false
            },
            {
                "k": 13,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or an array",
                "identical": false
            },
            {
                "k": 15,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextualized",
                "identical": false
            },
            {
                "k": 16,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value [databind#116]",
                "identical": false
            },
            {
                "k": 17,
                "patch": "gen.writeObject(_value;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' bits",
                "identical": false
            },
            {
                "k": 19,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value-check;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "gen.writeObject(_value); // can't occur but let's not yet bother",
                "identical": false
            },
            {
                "k": 21,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextualok",
                "identical": false
            },
            {
                "k": 22,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual too",
                "identical": false
            },
            {
                "k": 23,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't modify",
                "identical": false
            },
            {
                "k": 24,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value'Code",
                "identical": false
            },
            {
                "k": 25,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' write characters",
                "identical": false
            },
            {
                "k": 26,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' header",
                "identical": false
            },
            {
                "k": 27,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or throw _value;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or too",
                "identical": false
            },
            {
                "k": 29,
                "patch": "gen.writeObject(_value); // can't be yet skipped",
                "identical": false
            },
            {
                "k": 30,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't modify schema",
                "identical": false
            },
            {
                "k": 31,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or NOSON",
                "identical": false
            },
            {
                "k": 33,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' characters",
                "identical": false
            },
            {
                "k": 34,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' nulls but nodes",
                "identical": false
            },
            {
                "k": 35,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value",
                "identical": false
            },
            {
                "k": 36,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual -= _valueInstantiator",
                "identical": false
            },
            {
                "k": 38,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value'",
                "identical": false
            },
            {
                "k": 39,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual throw _valueInstantiator",
                "identical": false
            },
            {
                "k": 40,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual queue...",
                "identical": false
            },
            {
                "k": 41,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or JDBC",
                "identical": false
            },
            {
                "k": 42,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' cc",
                "identical": false
            },
            {
                "k": 43,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' nulls but also check",
                "identical": false
            },
            {
                "k": 44,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value'field",
                "identical": false
            },
            {
                "k": 45,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual bean",
                "identical": false
            },
            {
                "k": 46,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or an int",
                "identical": false
            },
            {
                "k": 47,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual % _value;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' % _value;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value'\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value'index",
                "identical": false
            },
            {
                "k": 51,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or4) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or v",
                "identical": false
            },
            {
                "k": 53,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or \"false\"",
                "identical": false
            },
            {
                "k": 54,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or into the end of record;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextualFormat",
                "identical": false
            },
            {
                "k": 56,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value'file",
                "identical": false
            },
            {
                "k": 57,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' respectively",
                "identical": false
            },
            {
                "k": 58,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or simplify",
                "identical": false
            },
            {
                "k": 59,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' form",
                "identical": false
            },
            {
                "k": 60,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or into the end-of-value",
                "identical": false
            },
            {
                "k": 61,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value || _valueInstantiator",
                "identical": false
            },
            {
                "k": 62,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value'll also check _valueInstantiator",
                "identical": false
            },
            {
                "k": 63,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or if contextual -= _value;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't an array",
                "identical": false
            },
            {
                "k": 65,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextualTask",
                "identical": false
            },
            {
                "k": 66,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value-suppressable...",
                "identical": false
            },
            {
                "k": 67,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or Size",
                "identical": false
            },
            {
                "k": 68,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' write later on",
                "identical": false
            },
            {
                "k": 69,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or partial",
                "identical": false
            },
            {
                "k": 70,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or later on",
                "identical": false
            },
            {
                "k": 71,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' yay!",
                "identical": false
            },
            {
                "k": 72,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' need to contextual -= _value;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual but nodes",
                "identical": false
            },
            {
                "k": 74,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual 60.0",
                "identical": false
            },
            {
                "k": 75,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' one",
                "identical": false
            },
            {
                "k": 76,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual queue nope",
                "identical": false
            },
            {
                "k": 77,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or before/browse/trailing spaces is an array",
                "identical": false
            },
            {
                "k": 78,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual too many?",
                "identical": false
            },
            {
                "k": 79,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual cycle inlined _valueInstantiator",
                "identical": false
            },
            {
                "k": 80,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' orOB",
                "identical": false
            },
            {
                "k": 81,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' value",
                "identical": false
            },
            {
                "k": 82,
                "patch": "gen.writeObject(_value); // [databind#116]",
                "identical": false
            },
            {
                "k": 83,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual.\"",
                "identical": false
            },
            {
                "k": 84,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextualment",
                "identical": false
            },
            {
                "k": 85,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual cycle",
                "identical": false
            },
            {
                "k": 86,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or getSet but also check",
                "identical": false
            },
            {
                "k": 87,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual on",
                "identical": false
            },
            {
                "k": 88,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' system",
                "identical": false
            },
            {
                "k": 89,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual-201 inlined _valueInstantiator",
                "identical": false
            },
            {
                "k": 90,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' bytes",
                "identical": false
            },
            {
                "k": 91,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextual queue inlined _valueInstantiator",
                "identical": false
            },
            {
                "k": 92,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or qual but also check",
                "identical": false
            },
            {
                "k": 93,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value'll!",
                "identical": false
            },
            {
                "k": 94,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or if contextualized",
                "identical": false
            },
            {
                "k": 95,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or too many\"",
                "identical": false
            },
            {
                "k": 96,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or fully-check;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or before",
                "identical": false
            },
            {
                "k": 98,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextualcomp",
                "identical": false
            },
            {
                "k": 99,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' contextualbuild",
                "identical": false
            },
            {
                "k": 100,
                "patch": "gen.writeObject(_value); // can't a parameter should not be assigned. Also declare the methods parameters as 'value' or getSet but nodes",
                "identical": false
            }
        ],
        "buggy_line": "gen.writeObject(_value);",
        "fixed_line": "ctxt.defaultSerializeValue(_value, gen);"
    },
    "Jsoup-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "accum.append(escapeMode);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "accum.append(escapeMode;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "accum.append(ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "accum.append(c);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "accum.append(processMode);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "accum.append(cteName);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "accum.append(escapeMode == EscapeMode.PLACEHOLDER;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "accum.append(destMode);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "accum.append(v);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "accum.append(escapeMode == EscapeMode.MILLISECONDS;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "accum.append(SECTION_NODE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "accum.append(escapeMode == EscapeMode.MODE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "accum.append(SECTION_BREAK_DELIMITER;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "accum.append(escapeMode == EscapeMode.MAP;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "accum.append(escapeMode == EscapeMode.APOLATION_STOP;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "accum.append(escapeMode == EscapeMode.QUOTED;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "accum.append(escapeMode, c);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "accum.append(escapeMode == EscapeMode.COMPLETED;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "accum.append(IF_MATCHING_THRESHOLD;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "accum.append(ENGINE_SERVICE_NAME;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "accum.append(escapeMode == EscapeMode.PREDICATE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "accum.append(escapeMode == EscapeMode.EMPTY;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "accum.append(ENGINE_MATCHING;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "accum.append(escapeMode == EscapeMode.boolean.inputter;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "accum.append(SECTION_BREAK_TYPES);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "accum.append(ofMode);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "accum.append(accum);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "accum.append(escapeMode == EscapeMode.inputter;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "accum.append(escapeMode == EscapeMode.VIEW;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_RESERVED;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "accum.append(escapeMode)) break;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "accum.append(escapeMode == EscapeMode.FOR_MATCHING;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_ GRAPH;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_ GRAPH) break;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_STYLE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "accum.append(escapeMode == EscapeMode.PLACEHING;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "accum.append(cteName;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "accum.append(escapeMode == NONE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "accum.append(escapeMode == EscapeMode.boolean.PREDICATE;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "accum.append(SECTION_BREAK_DEMAND;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "accum.append(escapeMode == EscapeMode.SUB;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "accum.append(this.c);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "accum.append(escapeMode == EscapeMode.FOR_BREAK;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "accum.append(escapeMode == EscapeMode.APPROPOW_2_10;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "accum.append(stringMode);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "accum.append(escapeMode, long.accum);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "accum.append(escapeMode == EscapeMode.ROUTE;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_PROPERTY;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "accum.append(escapeMode == EscapeMode.accum;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "accum.append(escapeMode == EscapeMode.boolean.QUOTED;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "accum.append(escapeMode == EscapeMode.04;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "accum.append(escapeMode == EscapeMode. Thread;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_MATCHING;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "accum.append(dlt;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_LBRACELL;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "accum.append(escapeMode == EscapeMode.icro;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "accum.append(escapeMode,c);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "accum.append(escapeMode == EscapeMode.SECTION;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "accum.append(escapeMode == EscapeMode.boolean.class);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "accum.append(escapeMode == EscapeMode.boolean.MAP;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_ accept;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "accum.append(escapeMode) break;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "accum.append(escapeMode))Ts;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "accum.append(latitude);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "accum.append(escapeMode == EscapeMode.PLACEHAS_BREAK;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "accum.append(escapeMode, '-'));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_BYTES;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "accum.append(c, EscapeMode);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "accum.append(escapeMode == EscapeMode.DISPLAY;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "accum.append(dur;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "accum.append(doptionalMode);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "accum.append(escapeMode,STATUS_DELIMITER;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "accum.append(escapeMode, mapping);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "accum.append(escapeMode == EscapeMode.APOLERANCE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "accum.append(escapeMode == EscapeMode.APOLATION_ GRAPH;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "accum.append(ABEL_MATCHING_THRESHOLD;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "accum.append(escapeMode == EscapeMode.APOLATION_MODE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "accum.append(escapeMode, long.inputter);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "accum.append(escapeMode == EscapeMode.FOR_STOP;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_STOP;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_BOX;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "accum.append(SECTION_PREFIX, processMode);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "accum.append(escapeMode,STATUS_SCALAR);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "accum.append(damping;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "accum.append(escapeMode == EscapeMode.FOR_CANCELED;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "accum.append(escapeMode)) continue;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "accum.append(escapeMode == EscapeMode. getPayload;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "accum.append(escapeMode == EscapeMode.ALIAS;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "accum.append(escapeMode == EscapeMode.PLACEHAS_DELIMITER;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "accum.append(escapeMode,STATUS_SCALAR",
                "identical": false
            },
            {
                "k": 92,
                "patch": "accum.append(escapeMode == EscapeMode.MATCH_EXCANCELED;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "accum.append(escapeMode == EscapeMode.APOLATION_MATCHING;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "accum.append(escapeMode == EscapeMode.MESSAGE_item;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "accum.append(escapeMode == EscapeMode.BOTTOM;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "accum.append(escapeMode == EscapeMode.APOLATION_CLOSED;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "accum.append(escapeMode == EscapeMode.STOP;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "accum.append(escapeMode == EscapeMode.MATCHING;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "accum.append(escapeMode == EscapeMode.PLACEHAS_CLASS;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "accum.append(escapeMode == EscapeMode.FOR_BIGINT;",
                "identical": false
            }
        ],
        "buggy_line": "accum.append(c);",
        "fixed_line": "accum.append(\"&#xa0;\");"
    },
    "Closure-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "jsDocParameter.getJSType(), false);",
                "identical": true
            },
            {
                "k": 2,
                "patch": "jsDocParameter.getJSType(), false;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "jsDocParameter.getJSType(), false) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "jsDocParameter.getJSType(), falseUserType;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "jsDocParameter.getJSType(), false){",
                "identical": false
            },
            {
                "k": 6,
                "patch": "jsDocParameter.getJSType(), true;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "jsDocParameter.getJSType(), false for {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "jsDocParameter.getJSType(), false - astParameter) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "jsDocParameter.getJSType(), falseUserType == true;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter : false;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "jsDocParameter.getJSType(), false});",
                "identical": false
            },
            {
                "k": 15,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, astParameter) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "jsDocParameter.getJSType(), falseCode;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "jsDocParameter.getJSType(), falseUserTypeArgumentsMBEDDED {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, astParameter);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, jsDocParameter);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "jsDocParameter.getJSType(), false partitionerName == false;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "jsDocParameter.getJSType(), falseUserType == false;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "jsDocParameter.getJSType(), false0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "jsDocParameter.getJSType(), false - astParameter;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter) : false;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "jsDocParameter.getJSType(), falseBAR_POSITION;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "jsDocParameter.getJSType(), false_\" + jsDocParameter) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "jsDocParameter.getJSType(), falseUserType, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "jsDocParameter.getJSType(), false while while (jsDocParameter) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "jsDocParameter.getJSType(), false_\" + jsDocParameter;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "jsDocParameter.getJSType(), false watchingDocParameter == false;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "jsDocParameter.getJSType(), falseUserTypeArgumentsMBEDDED) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "jsDocParameter.getJSType(), false];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "jsDocParameter.getJSType(), falseBAR_BY_INDEX, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "jsDocParameter.getJSType(), falseCharsetName;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "jsDocParameter.getJSType(), falseUserType, jsDocParameter);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "jsDocParameter.getJSType(), falseseparatorChar;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "jsDocParameter.getJSType(), false+1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "jsDocParameter.getJSType(), falseBuffers;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter == false;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "jsDocParameter.getJSType(), false > jsDocParameter) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "jsDocParameter.getJSType(), falseDurationField) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "jsDocParameter.getJSType(), false watchingDocParameter;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "jsDocParameter.getJSType(), falseBAR_XMLFound && jsDocParameter) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "jsDocParameter.getJSType(), falseCharsetName == false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "jsDocParameter.getJSType(), falseUserTypeEOF) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "jsDocParameter.getJSType(), falseITE_LENGTH_PREFERENCE, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "jsDocParameter.getJSType(), true);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "jsDocParameter.getJSType(), false require;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "jsDocParameter.getJSType(), false for simpleName;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "jsDocParameter.getJSType(), falseBAR_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "jsDocParameter.getJSType(), false partitionerName;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "jsDocParameter.getJSType(), false != true;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "jsDocParameter.getJSType(), false firstCache == false;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "jsDocParameter.getJSType(), false watchingDocParameter) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "jsDocParameter.getJSType(), false forenableDocParameter;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "jsDocParameter.getJSType(), falseUserTypeForastParameter;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "jsDocParameter.getJSType(), false firstactualOutParameter;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "jsDocParameter.getJSType(), falseBAR_LISTENER) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "jsDocParameter.getJSType(), falseBAR_BY_INDEX, jsDocParameter);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "jsDocParameter.getJSType(), false % jsDocParameter) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "jsDocParameter.getJSType(), falseBAR_VALUE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter == false);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "jsDocParameter.getJSType(), false - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "jsDocParameter.getJSType(), false LinkedHashMapBytes) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, astParameter;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "jsDocParameter.getJSType(), false;} {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "jsDocParameter.getJSType(), false is needed) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "jsDocParameter.getJSType(), falseBAR_LISTENER {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "jsDocParameter.getJSType(), falseITE_LENGTH_PREFERENCE + jsDocParameter) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "jsDocParameter.getJSType(), false for result;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "jsDocParameter.getJSType(), falseBAR_POSITION) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "jsDocParameter.getJSType(), falseBAR_MAP) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "jsDocParameter.getJSType(), falseFF resultParameter;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "jsDocParameter.getJSType(), falseITE_LENGTH_PREFERENCE, jsDocParameter);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "jsDocParameter.getJSType(), falseUserTypeVal;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "jsDocParameter.getJSType(), falseOPTION);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "jsDocParameter.getJSType(), false JSON_MESSAGE_TYPE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "jsDocParameter.getJSType(), false % jsDocParameter;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "jsDocParameter.getJSType(), false is 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "jsDocParameter.getJSType(), false were {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "jsDocParameter.getJSType(), false+4\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "jsDocParameter.getJSType(), false, jsDocParameter == false) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "jsDocParameter.getJSType(), false >>> 1);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "jsDocParameter.getJSType(), false is children) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "jsDocParameter.getJSType(), false for listDocType;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "jsDocParameter.getJSType(), falseUserType",
                "identical": false
            },
            {
                "k": 91,
                "patch": "jsDocParameter.getJSType(), false minSlotDate) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, jsDocParameter == false;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "jsDocParameter.getJSType(), falseITE_LENGTH_PREFERENCE, this.jsDocParameter);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "jsDocParameter.getJSType(), falseBAR_FOR_SIGNIFIDERParameter;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML\";",
                "identical": false
            },
            {
                "k": 96,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML == false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "jsDocParameter.getJSType(), false << 24) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "jsDocParameter.getJSType(), falseBAR_FOR_LISTENER {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "jsDocParameter.getJSType(), falsetitle);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "jsDocParameter.getJSType(), falseEXTEND_POSITION_PARAMETER_NAME;",
                "identical": false
            }
        ],
        "buggy_line": "jsDocParameter.getJSType(), true);",
        "fixed_line": "jsDocParameter.getJSType(), false);"
    },
    "Lang-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return foundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return foundDigit || !hasExp;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return val >= 0 && !hasExp;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or input...",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal!",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of input buffer",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of input?",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of input",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return foundDigitWidget || !hasExp;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge (this.chars[i]",
                "identical": false
            },
            {
                "k": 14,
                "patch": "returnfoundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return foundDigit && !hasExp; // 1M is an array as 'spare't a parameter should not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return foundDigit && !hasMore;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return foundDigit && !hasExp; // 1M is an array as 'spare't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the end of input",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the end of record or input...",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return foundDigit && !hasExp; // 1M is an array as 'spare't a parameter should not be assigned. Also declare the end of input",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal...",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of input...",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal[i]",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or an array",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't been discovered yet",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal, !chars.length) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or partial",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return val && !hasExp;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the end of input?",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since 2.7",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return foundDigit && !hasString;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimalON",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 0x0",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or CUTURE_RESERVED_OBJECT) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we hit the end of input",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't modify schema",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return foundDigit && !hasExp; // 1M is an array as 'spare't a parameter should not be assigned. Also declare the end of record or input...",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we hit the end of input?",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 0x0 is an array",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or input buffer",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't lowercase",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge (typeAsInt)",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the end of record or decimal!",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimalAMEL') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return foundDigit && !hasExp; // 1M is an array as 'spare't a parameter should not be assigned. Also declare the end of input?",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge (this.chars) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal, !chars.",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or IPv4-Mapped",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record orJSON, !chars.length) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return foundDigit && !hasExp; // end-of-chars, so we should check the end of record or input",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the end of record or partial",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't need to handle LF later on",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal str",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we can return found an array",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or input?",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or an error here",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we can return found",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge (chars[i]",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the end of input buffer",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't++) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge (this.found) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimalAMELTRn't been discovered yet",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge (typeAsInt) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 0x0 is disabled",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal3;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal missing, !chars.length) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimalnew -1 since 2.7",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal&",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record orJSON, !chars.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't how much was already added.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 'spare'",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return foundDigit && !hasExp;//already internal't a 'spare'll also check the end of record or input...",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal missing, !chars.",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we support!",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't lowercase as 'final'.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or proceed with the end of input",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal by default",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 0x0 is it's",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 'final'.",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the end of record or -1",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimalj++) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or NO_OBJECT, !chars.length) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the end of input...",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return foundDigit && !hasExp; // has an array as 'spare't a parameter should not be assigned. Also declare the end of record or IPv4-Mapped",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 1M is an array",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we added.",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't how much was gotten",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal beyond last value equals to 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't getExp;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't lowercase as well",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we have multiple",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't matched",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't matched uncolored vertex",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 10);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or ch, !chars.length) {",
                "identical": false
            }
        ],
        "buggy_line": "return foundDigit && !hasExp;",
        "fixed_line": "return foundDigit && !hasExp && !hasDecPoint;"
    },
    "Csv-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "final boolean emptyHeader = header.trim().isEmpty;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final boolean emptyHeader = header.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final boolean emptyHeader = header.trim().isEmpty) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final boolean emptyHeader = header.trim().isEmpty()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final boolean emptyHeader = header.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final boolean emptyHeader = header.trim().isEmpty 12;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final boolean emptyHeader = header.trim().isEmptyFor;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader[0] : containsHeader;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final boolean emptyHeader = header.trim().isEmpty()[0];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final boolean emptyHeader = header.trim().isEmptyTEXT;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final boolean emptyHeader = header.trim().isEmptyObs;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_HEADER_ELEMENTS : containsHeader;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final boolean emptyHeader = header.trim().isEmpty()){",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final boolean emptyHeader = header.trim().isEmptyTreeNode;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final boolean emptyHeader = header.trim().isEmpty prevHeader;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final boolean emptyHeader = header.trim().isEmpty0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() && header;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final boolean emptyHeader = header.trim().isEmpty brackets;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? 6 : containsHeader;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LIST_DELIMITER : containsHeader;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final boolean emptyHeader = header.trim().isEmptybeanName;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final boolean emptyHeader = header.trim().isEmpty Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_ELEMENT_SEPARATOR : containsHeader;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_HEADER_LENGTH : containsHeader;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final boolean emptyHeader = header.trim().isEmptyve;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final boolean emptyHeader = header.trim().isEmptySubUS_ASCII;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final boolean emptyHeader = header.trim().isEmpty | containsHeader;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final boolean emptyHeader = header.trim().isEmptydegreeHeader;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final boolean emptyHeader = header.trim().isEmptyers;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LISTENER_DELIMITER : containsHeader;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final boolean emptyHeader = header.trim().isEmpty<>(header);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final boolean emptyHeader = header.trim().isEmpty additionalHeader;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final boolean emptyHeader = header.trim().isEmpty cssHeader;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final boolean emptyHeader = header.trim().isEmpty});",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final boolean emptyHeader = header.trim().isEmpty72;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final boolean emptyHeader = header.trim().isEmptyTheHeader;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final boolean emptyHeader = header.trim().isEmptylockHeader;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final boolean emptyHeader = header.trim().isEmptyoud_HEADER;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? null : containsHeader;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final boolean emptyHeader = header.trim().isEmpty=\\\";",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? -1 : containsHeader;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final boolean emptyHeader = header.trim().isEmptyineHeader;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_VARIABLE_PARTS_OF_ROUTE : header;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final boolean emptyHeader = header.trim().isEmpty but;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final boolean emptyHeader = header.trim().isEmptyUrl;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? hasHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final boolean emptyHeader = header.trim().isEmptydelta;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final boolean emptyHeader = header.trim().isEmpty << 6;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final boolean emptyHeader = header.trim().isEmptyMethod;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LIST_DELIMITER : header;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final boolean emptyHeader = header.trim().isEmptyStatic;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() map;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? INHERIT : containsHeader;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ?fontsHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final boolean emptyHeader = header.trim().isEmptyCANCE_HEADER;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final boolean emptyHeader = header.trim().isEmpty lineNumber;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ?truncatedHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final boolean emptyHeader = header.trim().isEmpty at most;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final boolean emptyHeader = header.trim();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final boolean emptyHeader = header.trim().isEmpty<>(header;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final boolean emptyHeader = header.trim().isEmptyoud_DATA_TYPE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ?sections : containsHeader;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? TRUEHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final boolean emptyHeader = header.trim().isEmptySuper;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final boolean emptyHeader = header.trim().isEmptyEx;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final boolean emptyHeader = header.trim().isEmptyBase;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final boolean emptyHeader = header.trim().isEmpty chunks;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final boolean emptyHeader = header.trim().isEmpty(8;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_SERVER_ELEMENTS : containsHeader;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final boolean emptyHeader = header.trim().isEmpty){",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_TYPE_STRING_ELEMENTS : containsHeader;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final boolean emptyHeader = header.trim().isEmptyoud_HEIGHT_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? cacheHeader[0] : containsHeader;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? validateHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final boolean emptyHeader = header.trim().isEmptyOnly;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final boolean emptyHeader = header.trim().isEmptyoud_ROUTE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final boolean emptyHeader = header.trim().isEmptyEOF;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_TYPE_BEFORE_EMPTY;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final boolean emptyHeader = header.trim().isEmptyTypeName;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? 500 : containsHeader;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final boolean emptyHeader = header.trim().isEmptyFor && header;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final boolean emptyHeader = header.trim().isEmptyExtensions;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_TYPE_LIST : containsHeader;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ?localHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_DELIMITER : containsHeader;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_VARIABLE_PARTS : containsHeader;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final boolean emptyHeader = header.trim().isEmpty escapes;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_VARIABLE_PARTS_OF_ROUTE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LIST : containsHeader;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final boolean emptyHeader = header.trim().isEmptySECOND;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_VARIABLE_DATA_ELEMENTS : containsHeader;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final boolean emptyHeader = header.trim().isEmpty at leastED_WITH_PLACEHOLDER;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final boolean emptyHeader = header.trim().isEmptyColumnHeader;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LINE_LENGTH : containsHeader;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? bodyHeader : containsHeader;",
                "identical": false
            }
        ],
        "buggy_line": "final boolean emptyHeader = header.trim().isEmpty();",
        "fixed_line": "final boolean emptyHeader = header == null || header.trim().isEmpty();"
    },
    "Closure-65": {
        "fixes": [
            {
                "k": 1,
                "patch": "case '\\0': sb.append(\"\\\\0\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case '\\0': sb.append(\"\\\\0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "case '\\0': sb.append(\"\\\\0; break;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case '\\0':sb.append(\"\\\\0\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "case '\\0': sb.append(\"\\\\0\", i;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case '\\0': sb.append(\"\\\\0\")) break;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "case '\\0': sb.append(\"\\\\0 (i;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case '\\0': sb.append(\"\\\\0 must break;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "case '\\0': sb.append(\"\\\\0(1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "case '\\0': sb.append(\"\\\\0\").append(c;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case '\\0': sb.append(\"\\\\0) break;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "case '\\0': sb.append(\"\\\\0'));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case '\\0': sb.append(\"\\\\0\\n;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case '\\0': sb.append(\"\\\\0\"), i;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as '\").append(c;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 19,
                "patch": "case '\\0': sb.append(\"\\\\0);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "case '\\0': sb.append(\"\\\\0, break;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case '\\0': sb.append(\"\\\\0(c;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as '\").append(c;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'i++) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "case '\\0': sb.append(\"\\\\0\").append(i;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "case '\\0': sb.append(\"\\\\0'); break;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "case '\\0': sb.append(\"\\\\M + i;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case '\\0': sb.append(\"\\\\0\"), break;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "case '\\0': sb.append(\"\\\\0 + i;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "case '\\0': sb.append(\"\\\\0 (i + 1) break;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as '(';",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case '\\0': sb.append(\"\\\\0 \");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case '\\0': sb.append(\"\\\\0At;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as 'i++) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as ']",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case '\\0': sb.append(\"\\\\0; breakons must not be negative butME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as '(';",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: must not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the end of record;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'spans",
                "identical": false
            },
            {
                "k": 43,
                "patch": "case '\\0': sb.append(\"\\\\0\\\\ byte break;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case '\\0': sb.append(\"\\\\ation;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case '\\0': sb.append(\"\\\\0; breakons must not be negative butME: a parameter should not be assigned. Also declare the methods parameters as '\").append(c;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as ']",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case '\\0': sb.append(\"\\\\0; break't++) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as '12",
                "identical": false
            },
            {
                "k": 49,
                "patch": "case '\\0': sb.append(\"\\\\0(i;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case '\\0': sb.append(\"\\\\0; break't \"\\\").append(c;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'i});",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case '\\0': sb.append(\"\\\\0 translate;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case '\\0': sb.append(\"\\\\0\\n\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: must not be assigned. Also declare the methods parameters as '\").append(c;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as 'spans",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'iAbs",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'spare'",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the end of input",
                "identical": false
            },
            {
                "k": 59,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'index",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case '\\0': sb.append(\"\\\\0cl;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'spare' char",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'final')",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case '\\0': sb.append(\"\\\\05) break;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'spare' characters",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'index++) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'spare' nulls but nodes",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case '\\0': sb.append(\"\\\\0C break;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'EDDED_COLUMN_INDEX + i;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as '12",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: must not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 72,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as '\").append(_separatorChar;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the end of record;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case '\\0': sb.append(\"\\\\0InputStream;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case '\\0': sb.append(\"\\\\0; break't origin",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as ' ')');",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case '\\0': sb.append(\"\\\\0; breakons must not be negative butME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as 'i});",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case '\\0': sb.append(\"\\\\0",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as 'iAbs",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'spare'\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case '\\0': sb.append(\"\\\\0');",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'index()",
                "identical": false
            },
            {
                "k": 84,
                "patch": "case '\\0': sb.append(\"\\\\0; breakons must not be negative butME: a parameter should not be assigned. Also declare the methods parameters as 'i++) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as '\").append(c == '\\n') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the end of input",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'i++)",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as 'spare' char",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as 'index",
                "identical": false
            },
            {
                "k": 90,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as 'spare'",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as 'auto'\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case '\\0': sb.append(\"\\\\0; breakons must not be negative butME: a parameter should not be assigned. Also declare the methods parameters as '(';",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: must not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 94,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as '\").append(c == '\\n') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as 'spare' characters",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case '\\0': sb.append(\"\\\\0++) break;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the end of quad;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case '\\0': sb.append(\"\\\\0; break'tME: a parameter should not be assigned. Also declare the methods parameters as 'index++) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case '\\0': sb.append(\"\\\\0; break'ME: a parameter should not be assigned. Also declare the methods parameters as '`'\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case '\\0': sb.append(\"\\\\0; break't \");",
                "identical": false
            }
        ],
        "buggy_line": "case '\\0': sb.append(\"\\\\0\"); break;",
        "fixed_line": "case '\\0': sb.append(\"\\\\000\"); break;"
    },
    "Mockito-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (m instanceof CapturesArguments){",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if ( m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (m instanceof CapturesArguments && k) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (k instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (captures instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (frees instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (captureFromk instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (f instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar != CapturesArguments) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (this.m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (m instanceof CapturesArguments && k != CapturesArguments) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if ( margin instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (m instanceof CapturesArguments && kd == CapturesArguments) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (m instanceof CapturesArguments == CapturesArguments) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (m instanceof CapturesArguments && k == CapturesArguments) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (o instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (m instanceof CapturesArguments && kclass == CapturesArguments) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Th instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (MoreFromk instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (duration instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (m instanceof CapturesArguments.length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( k instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (degk instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (m instanceof CapturesArguments > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (m instanceof CapturesArguments && kHAS_MORE_ROUNDS) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharTASK_FINISHED_PRETTY_PRINTER) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharTASK_FINISHED_EVENT_PRETTY_PRINTER) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (free instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (m instanceof CapturesArguments && kTypeErrorsArguments) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (m instanceof CapturesArguments && k;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharTASK_FINISHED_PREVIOUS) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (r instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (offs instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (sort instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (n instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (m instanceof CapturesArguments && k.length > 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (acc instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (CENTk instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (m instanceof CapturesArguments && k.length == 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (m instanceof CapturesArguments && kcassandraFromkSLATOR_PRETTY_PRINTER) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (m instanceof CapturesArguments[i+1];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharTASK_FINISHED_EVENT_PREVIOUS) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (v instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Def instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharStateField) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parent instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (m instanceof CapturesArguments[i+1]) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( EDs instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (m instanceof CapturesArguments && ktreatTypeArguments) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (m instanceof CapturesArguments && kiator) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (m instanceof CapturesArguments - m) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (jsonArray instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (m instanceof CapturesArguments > m) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (m instanceof CapturesArguments && k NIL) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (m instanceof CapturesArguments;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (stack instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (captureClass instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (exts instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (m instanceof CapturesArguments && k > m) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (m instanceof CapturesArguments && kcascending) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (m instanceof CapturesArguments && kInOrder) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (captureType instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (m instanceof CapturesArguments && kdotsPerPoint) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (m instanceof CapturesArguments[k+1];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (m instanceof CapturesArguments && kATEWAY_COMPENSATION) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (freeFormat instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (m instanceof CapturesTypeArguments) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (1(m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (Subtype instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (intf instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (m instanceof CapturesArguments && k){",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (m instanceof CapturesArguments && kcassandraFromkStateArguments) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (h instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharTASK_LATINLINE) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( m instanceof CapturesArguments){",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (internals instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (uuid instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (workflow instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (setter instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (m instanceof CapturesArguments() {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (m instanceof CapturesArguments && kylesheet) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (getX instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( columnIndex instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharTASK_FINAL) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (m instanceof CapturesArguments && kcassandraFromkSLATOR_SPLIT) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (m instanceof CapturesArguments && kclazz) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (m instanceof CapturesArguments && k {@) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharTASK_FINISHED_POSITION) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharTASK_FINISHED_EVENT_PREFERENCE) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (m instanceof CapturesArguments && kd Class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (m instanceof CapturesArguments && kMarkedPos) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (payload instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (m instanceof CapturesArguments && k NOSONAR) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar > m) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (m instanceof CapturesArguments && kcassandraFromkSLATOR_PREVIOUS) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (m instanceof CapturesArguments && k UTF8_) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharTASK_FINISHED_PREFERENCE) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (m instanceof CapturesArguments[k];",
                "identical": false
            }
        ],
        "buggy_line": "if (m instanceof CapturesArguments) {",
        "fixed_line": "if (m instanceof CapturesArguments && i.getArguments().length > k) {"
    },
    "JacksonDatabind-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = explicitorals.getIgnored;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored =capitalorals.getIgnored;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = explicitorals.getIgnored();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = reasonorals.getIgnored;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignorals.getIgnored + ignoreAny;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignorals.getIgnored++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = ignorals.getIgnored + 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = anyAny.getIgnored();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = reasonorals.getIgnored();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = ignorals.getIgnoredUTATED;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = ignorals.getIgnored<>(repairAny;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignorals.getIgnored<>(repairAny);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignorals.getIgnored<>(modelName);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = ignorals.getIgnored - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = ignorals.getIgnored DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored =capitalorals.getIgnored();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored =Zorals.getIgnored;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignorals.getIgnored<>(repairAny)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignorals.getIgnored BET;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.getIgnored + 1, ignorals;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored =ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = georals.getIgnored;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = Korals.getIgnored;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = ignorals.getIgnored<>(hasAny)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = }, ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = getDescriptororals.getIgnored;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = includeorals.getIgnored;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getIgnored+1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored =DECorals.getIgnored;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getIgnoredError(ignoreAny);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored =minuteorals.getIgnored;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = parsedToals.getIgnored;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignorals.getIgnored ;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored =DSorals.getIgnored;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = ignorals.getIgnored<>(hasAny;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ABorals.getIgnored;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignorals.getIgnored battery;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored =OrUpdateorals.getIgnored;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = }, ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = ignorals.getIgnored<>(dayAny;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = Snapshotorals.getIgnored;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = /=orals.getIgnored;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = Multipartorals.getIgnored;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignorals.getIgnored<>(includeAny);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignorals.getIgnored<>((), ignoreAny;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getIgnored 12;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = getAny.getIgnored();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = alreadyorals.getIgnored;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignorals.getIgnored DEFAULT_MESSAGE_PROPERTY_NAME;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.getIgnored<>(ignored;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = ignorals.getIgnored<>(includeAny)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored =resentationorals.getIgnored;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = ignorals.getIgnoredVector();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = ignorals.getIgnored<>(ignAny;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = savedorals.getIgnored;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGURLENCODED;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored =OrUpdateorals.getIgnored();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignorals.getIgnored<>(includeAny;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = recursiveorals.getIgnored;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored =().orals.getIgnored;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = ignorals.getIgnored<>(mimeType)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = ignorals.getIgnored DEFAULT_AND_ELEVATION_KEY;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = hasMoreorals.getIgnored;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = explorals.getIgnored;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = ignorals.getIgnored<>(replaced_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = ignorals.getIgnored<>(updateAny;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = NOorals.getIgnored;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored =ESorals.getIgnored;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = ignorals.getIgnored {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGS;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = ignorals.getIgnored endpoint;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = ignorals.getIgnored<>(replaced_LINE_MIME_TYPES)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored =AttributeNameorals.getIgnored;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = errorMessageorals.getIgnored;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored =EQUALorals.getIgnored;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored =00000020orals.getIgnored;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignorals.getIgnored<>(replaced_MIME_TYPES)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignorals.getIgnored DEFAULT_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = ignorals.getIgnored<>(successorals)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = ignorals.getIgnoredDataKey;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignorals.getIgnored2;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored =HeightToals.getIgnored;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getIgnoredUTATED_VIEW;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = explicit.getIgnored();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignorals.getIgnored<>(hasAny);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ignorals.getIgnored + 1).orals;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignorals.getIgnored DEFAULT_AND_EMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = arguments.getIgnored;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = ignorals.getIgnored<>(replaced_COLUMNS;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = ignorals.getIgnoredNEL;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignorals.getIgnored<>(replaced_LINE_MIME_TYPES;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored =ulorals.getIgnored;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignorals.getIgnored<>(millisName);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignorals.getIgnored<>(anyAny;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Mockito-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "return StringDescription.toString;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return StringDescription.toString(arg;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return StringDescription.toString(arg);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return StringDescription.toString(arg) m;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return StringDescription;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return StringDescription.toString) m;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return StringDescription.toString) arg;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return StringDescription.toString(arg) arg;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return StringDescription.toString endpoint;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return StringDescription.toString m).equals(arg;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return StringDescription.toString(16).equals(arg);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return StringDescription.toString Em).equals(arg;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return StringDescription.toString m;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return StringDescription.toStringL).equals(arg);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return StringDescription.toString m).equals(arg);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return StringDescription.toString Em).equals(arg);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return StringDescription.toStringS).equals(arg;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return StringDescription.toStringBody).equals(arg);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return StringDescription.toString(16).equals(arg)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return StringDescription.toStringFromarg;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return StringDescription.toStringS).equals(arg);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return StringDescription.toStringBody).equals(arg;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return StringDescription.toString(16).equals(arg;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return StringDescription.toString(arg).length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return StringDescription.toString(arg);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return StringDescription.toStringBEFORE_NULLS;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return StringDescription.toStringL).equals(arg;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return StringDescription != arg.toString;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return StringDescription.toString(arg, arg;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return StringDescription.toString(arg)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return StringDescription.toString .equals(arg;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return StringDescription.toString MINUS_OBJECT;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return StringDescription.toString MINOR_NAME;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return StringDescription.toStringS;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return StringDescription.toString(arg). m;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return StringDescription.toString)(m).equals(arg;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return StringDescription.toString MINUS_FOR_SIGNIFICANCE_NULLS;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return StringDescription.toString(16;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return StringDescription.toString(arg) + 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return StringDescription.toString(arg)[0];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return StringDescription.toStringParameter(arg;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return StringDescription.toStringTo m).equals(arg);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return StringDescription.toString MINOR_FOR_SIGNIFICANCE_NULLS;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return StringDescription.toString MINUS_KEY;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return StringDescription.toStringTo m).equals(arg;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return StringDescription.toString(m).toString;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return StringDescription.toString);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return StringDescription.toString MINUS_ASCII;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return StringDescription.toStringTo(arg;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return StringDescription.toString .equals(arg);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return StringDescription.toString src._arg;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return StringDescription.toString(_valueClass;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return StringDescription.toStringTree(arg;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return StringDescription.toString(arg0, arg;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return StringDescription.toString seconds;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return StringDescription.toString MINUS_BYTES;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return StringDescription.toString(_valueType).equals(arg);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return StringDescription.toString(arg).equals(arg);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return StringDescription.toString MINOR_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return StringDescription.toStringBody;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return StringDescription.toString MINOR_FOR_SIGNIFICANCE_PATTERN;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return StringDescription.toString MINOR_FOR_COMPARSERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return StringDescription.toStringTo(arg);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return StringDescription.toString(arg).equals(arg;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return StringDescription.toString MINUS_FOR_SIGNIFICANCE_PATTERN;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return StringDescription.toString MINOR_FOR_SIGNIFICANCE_PREFERENCE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return StringDescription.toString MINUS_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return StringDescription.toString MINUS_FOR_SIGNIFICANCE_PREFERENCE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return StringDescription.toString MINOR_FOR_COMPARSERVED_NULLS;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return StringDescription.toString Em).equals(arg)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return StringDescription.toStringTypeName;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return StringDescription.toString MINOR_NULLS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return StringDescription.toString(_valueType).equals(arg;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return StringDescription.toStringTo m;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return StringDescription.toString MINUS_ELEMENTS;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return StringDescription.toString[0];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return StringDescription.toString MINUS_STRINGS;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return StringDescription.toString MINUS_FOR_EMPTY;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return StringDescription.toString MINUS_OBJECTS;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return StringDescription.toStringWithm;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return StringDescription.toStringMember;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return StringDescription.toString(m;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return StringDescription.toString MINORACLE_PRETTY_PRINTER;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return StringDescription.toString MINUS_FOR_SIGNIFICte;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return StringDescription.toString(_arg;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return StringDescription.toString(argS).equals(arg);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return StringDescription.toString)(m).equals(arg);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return StringDescription.toString MINOR_FOR_SIGNIFICANCE_CLASS;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return StringDescription.toString_PREFIXED_NULLS;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return StringDescription.toString_NAME;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return StringDescription.toString content;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return StringDescription.toString MINUS_FOR_MAPS;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return StringDescription.toString MINUS_FOR_SIGNIFICANCE_CLASS;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return StringDescription.toString MINUS_FOR_SIGNIFICANCE_STRINGS;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return StringDescription.toStringNode m).equals(arg;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return StringDescription.toString MINUS_FOR_SIGNIFICANCE_STRING;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return StringDescription.toString(argS).equals(arg;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return StringDescription.toStringToarg;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return StringDescription.toStringQueryString;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return StringDescription.toString MINOR_FOR_COMMASTER;",
                "identical": false
            }
        ],
        "buggy_line": "return StringDescription.toString(m).equals(arg.toString());",
        "fixed_line": "return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());"
    },
    "Math-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "return ZERO;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return max;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JOIN",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return //; caller should be assigned. Also declare the end of record;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-()",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return _isNaN;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the end of record or input",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-only",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return composed;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-LE",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-Directories, 0.0)",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-x0080 {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON- ? 1 : 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return //; caller should be assigned. Also declare the methods parameters;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet bother",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-() {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-public, 0.0)",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return NO_COLUMNS; // 0.0 it's not yet [JACKSON-only",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return //; caller should be assigned. Also declare the end ofED_CODED;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means end of",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the end of record or IPv4-Mapped",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return NO_COLUMNS; // need to do we don't know the end of record or input",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-is header",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return NO_COLUMNS; // 0.0 it's not yet [JACKSON-x0080 {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return NO_COLUMNS; // need to ensure we are the end of record or input",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-is",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return comm;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return NO_COLUMNS; // end of record or multi-of-line means we need not yet bother",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-generate",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return NO_COLUMNS; // 0.0 it's not yet [JACKSON-LE",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return NO_COLUMNS; // end of record or input",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return NEWLINE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return NO_COLUMNS; // 0.0 it's not yet [JOIN",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-407] --",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON- queue",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACK\\n\"",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-double.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return NO_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it's not yet bother",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the not yet [JACKSON-()",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACK, 0.0)",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-of-line means end of record;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the not yet [JACKSON-() {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means \"true\"",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-args",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return NO_COLUMNS; // 0.0 it's not yet [JACKSON-is header",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the end of record or 0x0080 {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it!",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-qu",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-isAM.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-expression",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-class",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-LIMIT",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the not yet [JACKSON-only",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return NO_COLUMNS; // 0.0 it's not yet [JACKSON- ? 1 : 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return NO_COLUMNS; // 0.0 it's not yet [JACKSON-()",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return NO_COLUMNS; // 0.0 it's not yet [JACKSON-() {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return NO_COLUMNS; // 0.0 it's not yet [JACKSON-407] --",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-DATE",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means \".",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-isNaN;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return NO_COLUMNS; // need to ensure we are the end of",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-of-line.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-of-line means we 0.0",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-of-object, 0.0)",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-null.",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-of-line means end of",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-741]",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-MIDDLE",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON- 60.0",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-public, 0.0",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yetDONAR",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return NO_COLUMNS; // 0.0 it's not yet [JACKSON-line means we need to escape.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means \"}",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return \"-_FEATURE_SKIP_FIRST;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON- show up",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return \"-_FEATURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return //; caller should be assigned. Also declare theACTUTURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACK 0.0",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means \"",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-IOException",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the>() {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return NO_COLUMNS; // end of record or NOSONAR",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return NO_COLUMNS; // need to ensure we are the end of input",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-public.",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return NO_COLUMNS; // need to escape.",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-.",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-STOP",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-Tab",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-issTo",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-of-object, 0.0",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the not yet [JACKSON- ? 1 : 0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-Ge",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return NO_COLUMNS; // end of record or IPv4-Mapped",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON- the next one",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the not yet [JACKSON-741]",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return //; caller should be assigned. Also declare the end of",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return NO_COLUMNS; // need to endpoint it't know the end of record or input",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-4060",
                "identical": false
            }
        ],
        "buggy_line": "return NaN;",
        "fixed_line": "return INF;"
    },
    "JacksonDatabind-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parser);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _bindAndReadValues.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _parser);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return _dataFormatReaders.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), offset;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), offset;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _bindAndReadValues(_dataFormatReadersFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), query);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), JSON_NODE_TYPE);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parser;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return _masterAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return _depAndReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), client);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), delta);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), objectId);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _typeFactory);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), context);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), meaders);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _checkAndReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), query;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserDReaders);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return _bindAndReadValues.createParser(src), _parserFactory;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return _putAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), query);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), src._dataFormatReaders);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _parser;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return _bindAndReadValues.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _pReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), JSON_NODE_TYPE);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), objectId);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), JsonToken.VALUE_EMBEDDED_OBJECT);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return _insertAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _masterAndReadValues(_parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), DEFAULT_MODIFIRMATION_LENGTH);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), src._dataFormatReaders;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory._parserFactory);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return _bindAndReadValues(_considerFilter.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFeaturesToChange);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), limit);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), true);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), JSON_ARRAY);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return _masterAndReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), tf;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return _bindAndReadValues.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return _pReadValues(_parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return _pReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataType);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return _needAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return _bindAndReadValues(_considerFilter.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _persistentAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return _filteredAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), offseteaders);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _depAndReadValues(_dataFormatReaders.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return _arrayDelegateAndReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFeatures;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return _masterAndReadValues(_dataFormatReaders.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), waitMilliseconds);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return _depBindAndReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFeaturesToChange;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), DEFAULT_peaders);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return _considerFilter(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _persistentAndReadValues(_parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), DEFAULT_VALUE);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), \"src;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), JsonToken.VALUE_NULL);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), delta);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return _cbAndReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), _objectCodec);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return _typeFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return _insertAndReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), ctxt);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFactory;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), stringReaders);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), JsonToken.FIELD_NAME);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), view);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return _pReadValues(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _putAndReadValues(_parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), DEFAULT_ARRAY_ELEMENT_SEPARATOR);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), JSON_NODE_TYPE);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), _objectCodecReaders);",
                "identical": false
            }
        ],
        "buggy_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),",
        "fixed_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length),"
    },
    "Math-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (double) * methodName / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (double) * getNumberOfSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (double) * spaceSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (double) * index / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (double) * spanSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (double) * spanCount / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (double)getSampleSize / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (double) * abortSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (double) * programmSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (double) * SASuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (double) * gotSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (double) * getNumberOfSuccesses;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (double) *(3 / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (double) * getSSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (double) *ProgramSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (double) * ERROR_MESSAGE / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (double) *CHARSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (double) * marginSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (double) * 2 / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (double) * localSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (double) * @Successes / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (double) / getNumberOfSuccesses()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (double) *Instantiator / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (double) * MAX_BUSINESS_KEY / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (double) * setBytesSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (double) * EncodingUtilsSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (double) hasSampleSize / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (double) * getNumberOfSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (double) *computeSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (double) *dependsSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (double) *helperSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (double) * flagsSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (double) * totalSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (double) *webSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (double) *annotatedes / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (double) * name / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (double) *addSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (double) * cosSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (double) *Enabled / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (double) * writeMethodes / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (double) *ANDARD / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (double) *localizedSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (double) *illa / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (double) * indexList / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (double) * threshold / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (double) *ALL / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (double) * methodName / (double) - getPopulationSize;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (double) * span / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (double) * shift / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (double) *localctx / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (double) * MAX_TIME_FORMAT / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (double) * _getEventes / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (double) *2) / (double.class;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (double) * T / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (double) * getNumberOfSuccesses / (double) - getPopulationSize;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (double) * MAX_NAME_DATE_FORMAT / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (double) * 1000 / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (double) / getNumberOfSuccesses()) + (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (double) * programmSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (double) *().double / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (double) / getNumberOfSuccesses;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (double) * getPopulationSize;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (double) * multiCount / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (double) * getSSuccesses / (double) - getPopulationSize;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (double)getSampleSize / (double.class) getPopulationSize;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (double) * programmSuccesses()) / (double.class;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (double) * 45 / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (double) / getNumberOfSuccesses()) - (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (double) / getNumberOfSuccesses()) + (double.class;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (double) * abortSuccesses;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (double) * gotSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (double) * spanSuccesses;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (double) * spanCount / (double.class;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (double) / getNumberOfSuccesses()) * 1000;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (double) / getNumberOfSuccesses()) * T;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (double) * MAX_BUSINESS_KEY;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (double) * spanCount;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (double) / getNumberOfSuccesses()) * TdopulationSize;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (double) * methodName / (double)getSize;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (double) * getNumberOfSuccesses()) / (double.class;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (double) * gotSuccesses;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (double) * gotSuccesses()) / (double.class;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (double) * MAX_NAME_DATE_FORMAT / (double) - getPopulationSize;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (double) * getNumberOfSuccesses()) / (double.getSize;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (double) * getNumberOfSuccesses / (double) valueulationSize;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (double) * _getSampleSize;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (double) * gotSuccesses()) / (double.get;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (double) * 2 / (double.class;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (double) * spanCount / (double.getSize;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (double) / _dopulationSize;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (double) * methodName / (double)ConfigurationSize;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (double) / getNumberOfSuccesses()) * EARLICA_TIME;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (double) * getNumberOfSuccesses / (double)getSize;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (double) * programmSuccesses;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (double) * _getEventes;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (double) * index / (double.class;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (double) * methodName / (double)CharulationSize;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (double) * getNumberOfSuccesses()) / (double.get;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (double) * totalSuccesses;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (double) * getNumberOfSuccesses()) / (double.getCode;",
                "identical": false
            }
        ],
        "buggy_line": "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
        "fixed_line": "return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());"
    },
    "Codec-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "25, 26, 27, 28,RELATION_HEADER, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "25, 26, 27, 28, 1). -1, -1, -1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "25, 26, 27, 28,)), -1, -1, -1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "25, 26, 27, 28,digest20, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "25, 26, 27, 28,digest20, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "25, 26, 27, 28, 29,.length, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "25, 26, 27, 28, 29, 2, 3, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "25, 26, 27, 28, 29, 2, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "25, 26, 27, 28, 29,converter.length, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "25, 26, 27, 28, 29,StandardCharsets.length, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "25, 26, 27, 28, 29,Split MINUS -1, -1, -1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "25, 26, 27, 28,Up };",
                "identical": false
            },
            {
                "k": 15,
                "patch": "25, 26, 27, 28, 29,Split : -1, -1, -1);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "25, 26, 27, 28, 29, 30, 31, 32,many, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "25, 26, 27, 28, \", 0, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "25, 26, 27, 28,RELATION_TIME_COLUMN_INDEX, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "25, 26, 27, 28, AST -1, -1, -1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "25, 26, 27, 28, 29, '; 1), -1, -1, -1);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "25, 26, 27, 28, 6, -1, -1, -2, NO_VALUE : -1, -1, -1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "25, 26, 27, 28, 29, __8, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "25, 26, 27, 28, [{},{}), -1, -1, -1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + 1 - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "25, 26, 27, 28, 29,Split greaterThan -1, -1, -1);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "25, 26, 27, 28, 29,& -1, -1, -1);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "25, 26, 27, 28, 1), -1, -1, -1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_COUNT, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "25, 26, 27, 28, 1), 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "25, 26, 27, 28, [{},{})\", -1, -1, -1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "25, 26, 27, 28, 29, 2, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "25, 26, 27, 28, 29, 458, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "25, 26, 27, 28, \", -1, -1, -1);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "25, 26, 27, 28, 6, -1, -1, -2, NO_VALUE, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "25, 26, 27, 28, 29,petId };",
                "identical": false
            },
            {
                "k": 37,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_INHERIT, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "25, 26, 27, 28, 29, Direction -1, -1, -1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "25, 26, 27, 28, 29, 30, 31, 32,7, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "25, 26, 27, 28, 29,StandardCharsets.HAS -1, -1, -1);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "25, 26, 27, 28, 29, 30, 31, 32,many - 1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "25, 26, 27, 28, 29,getImage000001 -1, -1, -1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "25, 26, 27, 28, distances -1, -1, -1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "25, 26, 27, 28,RELATION_CODED, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "25, 26, 27, 28, \", 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_INHER -1, -1, -1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_INLINE -1, -1, -1);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "25, 26, 27, 28, 29,2, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "25, 26, 27, 28, 29, AAtomic -1, -1, -1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "25, 26, 27, 28, 6, -1, -1, -2, NO_VALUE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "25, 26, 27, 28, 29,.length };",
                "identical": false
            },
            {
                "k": 52,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_TOKENS, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "25, 26, 27, 28, 29,Split deserialize -1, -1, -1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "25, 26, 27, 28, 29, 30, 31, 32,Illegal - 1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "25, 26, 27, 28, 29,Split MIN_BREAK8, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + -1, -1, -1);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_INLINE, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "25, 26, 27, 28, 29, pair -1, -1, -1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + 1 - 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "25, 26, 27, 28, 29,pet -1, -1, -1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "25, 26, 27, 28,RELATION_ON_CLOSED, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "25, 26, 27, 28, 29,con -1, -1, -1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "25, 26, 27, 28, 29,Split MINIMUM_BIGNEGATIVE_COUNT, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "25, 26, 27, 28, reg -1, -1, -1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_ 3, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "25, 26, 27, 28, 29, 45 -1, -1, -1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_INHERIT - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_INLINE : -1, -1, -1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "25, 26, 27, 28, 6, -1, -1, -180478, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "25, 26, 27, 28, 29,Split MINIMUM_BIGNEGATIVE_TOKENS, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_DESC, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "25, 26, 27, 28, 29,2, - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "25, 26, 27, 28, 29,Enabled };",
                "identical": false
            },
            {
                "k": 74,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_ 1024, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "25, 26, 27, 28, 29, 30, 31, 32,Function };",
                "identical": false
            },
            {
                "k": 76,
                "patch": "25, 26, 27, 28, 29,length };",
                "identical": false
            },
            {
                "k": 77,
                "patch": "25, 26, 27, 28, 29, 30, 31, 32,13 };",
                "identical": false
            },
            {
                "k": 78,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + 1), -1, -1, -1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "25, 26, 27, 28, 29,Split -1, -1, -1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "25, 26, 27, 28,RELATION_ -1, -1, -1);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "25, 26, 27, 28, 29,StandardCharsets.H -1, -1, -1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "25, 26, 27, 28, 29,Split MIN_BREAK 31, 32,outh -1, -1, -1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEG -1, -1, -1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "25, 26, 27, 28,RELATION_ON_DEG -1, -1, -1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "25, 26, 27, 28, 29,Split MINUS -1, -1, -2, NO_VALUE : -1, -1, -1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_TIMEOUT, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "25, 26, 27, 28, 29, 30, 31, 32,many - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_INHERIT11 -1, -1, -1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_BATCH_SIZE };",
                "identical": false
            },
            {
                "k": 90,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_ARRAY, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "25, 26, 27, 28, 29,18 };",
                "identical": false
            },
            {
                "k": 92,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_INHERIT };",
                "identical": false
            },
            {
                "k": 93,
                "patch": "25, 26, 27, 28, 29,Split MINIMUM_BIGNEGATIVE_DESC, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + 1 - -1, -1, -1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_COUNTS, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_STYLE8, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_RFID, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_ PROCESSS, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGNEGATIVE_WIDTHS, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "25, 26, 27, 28, 29,Split MIN_BIGINT, -1, -1, -1);",
                "identical": false
            }
        ],
        "buggy_line": "25, 26, 27, 28, 29, 30, 31, 32,",
        "fixed_line": "25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V"
    },
    "Chart-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "int g = (int) this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int g = (1 << this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int g = (int) this.lowerBound - v.upperBound;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int g = (int) this.lowerBound / (this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int g = (int) this.lowerBound / (v.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int g = (int) this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int g = (int) ((v / this.lowerBound;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / 255.0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / 255;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int g = (1 << this.lowerBound - this.upperBound) / (v.upperBound;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int g = (int)this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / 255.0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int g = (int) this.lowerBound % this.upperBound;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int g = (int) ((v / this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int g = (int) ((this.upperBound - this.upperBound) / 255.0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int g = (int) this.lowerBound && this.upperBound;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int g = (int) this.lowerBound / (v.upperBound % 255;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int g = (int) ((v / this.lowerBound && this.upperBound;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int g = (int) this.lowerBound / (this.upperBound % 255;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int g = (int) this.upperBound - this.lowerBound / (v.upperBound;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int g = (int) this.lowerBound / (v.upperBound;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int g = (int) this.lowerBound * 255.0 / (this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int g = (int) this.lowerBound / (this.upperBound;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int g = (int) ((v * 255.0 / (this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int g = (int) this.lowerBound / 100 + this.upperBound;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int g = (int) this.lowerBound / 100 && this.upperBound;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int g = (1 << this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int g = (int) this.upperBound / (v.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int g =int) this.lowerBound / (this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int g = (int) ((v / this.lowerBound % 255;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int g = (int) this.lowerBound * 255.0 / (this.upperBound;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int g = (int) this.lowerBound / ((this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int g = (1 << v) * 255.0 / (this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / 255;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int g = (int) this.lowerBound / (v.upperBound % 255.0;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int g = (1 << this.lowerBound - this.upperBound) / (this.upperBound;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int g = (int) v / this.lowerBound;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int g = (1 << v) - this.lowerBound;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int g = (int) this.lowerBound / 100 - this.upperBound;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int g = (int)this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int g = (int) this.lowerBound / (this.upperBound % 255.0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int g = (1 << this.lowerBound - this.upperBound / (v.upperBound) - this.upperBound;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int g = (int) this.lowerBound / ((this.upperBound - this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int g = (int) this.upperBound * 255.0 / (this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int g = (1000.0 - this.lowerBound % (this.upperBound) / 255;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int g = (1 << this.lowerBound) - this.upperBound;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int g = (int) ((v / this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int g = (int) ((v - this.lowerBound % 255;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int g = (int) this.lowerBound / ((v - this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int g = (int) ((v * this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int g = (1000.0 - this.lowerBound && (this.upperBound) / 255;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int g = (int) ((this.upperBound - this.upperBound) / 255;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int g = (int) this.upperBound / (this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int g = (int) this.lowerBound - this.upperBound / (v.upperBound;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int g = (int) this.lowerBound / (_value - this.upperBound;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int g = (int) ((v - this.lowerBound / (this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int g = (1 << this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int g = (int) this.upperBound * 255.0 / (this.upperBound;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int g =int) this.lowerBound / (v.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int g = (int) this.lowerBound - this.upperBound % 255;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int g = (int) Math.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int g = (int) this.lowerBound % 100 / (this.upperBound;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int g = (int) this.upperBound - this.lowerBound / (this.upperBound;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int g = (int) Math.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int g = (\"int) this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int g = (int) this.lowerBound -v.upperBound;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int g = (1 << v) - this.upperBound;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int g = (int) ((v / this.upperBound;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int g = (1000 * value - this.lowerBound;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int g = (int) this.lowerBound / (v.upperBound * 255.0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int g = (1 << this.lowerBound) / (v.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int g = (1 << this.lowerBound && this.upperBound;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int g = (int) this.lowerBound % 100 / (this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int g = (int) ((v * 255.0 / (this.upperBound;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int g = (int) this.lowerBound / (this.upperBound && this.upperBound;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int g = (int) ((v * this.lowerBound && this.upperBound;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int g = (int)this.upperBound - this.lowerBound / (v.upperBound;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int g = (int) Math.lowerBound % this.upperBound;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int g = (int) ((v / this.lowerBound % 255.0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int g = (int) this.lowerBound / node.lowerBound;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int g = (int) this.upperBound - this.lowerBound / (v.upperBound);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int g = (int) value / this.lowerBound;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int g = (int) ((v / 255.0 - this.upperBound;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int g = (int) this.upperBound / (v.upperBound % 255;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int g = (int) ((v * 255.0 / (this.upperBound) - this.upperBound;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int g = (int) this.upperBound - this.lowerBound % 255;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int g = (int) Rvalue - this.lowerBound;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int g = (int)v / this.lowerBound;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int g = (int)this.lowerBound / this.upperBound;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int g = (int) 0, value.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int g = (int) this.lowerBound - this.upperBound / (this.upperBound;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int g = (int) this.lowerBound && this.upperBound != 0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int g = (int)ToValue / this.lowerBound;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int g = (int) ((v * this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int g = (int) this.lowerBound / ((this.upperBound - this.upperBound) * 255;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int g = (int) this.lowerBound / 256)) * (this.upperBound;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound % 255;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int g = (int) this.upperBound / (v.upperBound % 255.0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int g = (1000.0 - this.lowerBound && (this.upperBound % 255) * 255;",
                "identical": false
            }
        ],
        "buggy_line": "int g = (int) ((value - this.lowerBound) / (this.upperBound",
        "fixed_line": "int g = (int) ((v - this.lowerBound) / (this.upperBound"
    },
    "Math-80": {
        "fixes": [
            {
                "k": 1,
                "patch": "int j = 4 * n - 2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int j = 4 * n - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int j = 2 * n - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int j = 4 * k - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int j = 4 * k - 2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int j = 4 * k / 2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int j = pingPong * n - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int j = Perl * n - 2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int j = newPositions.length * n - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int j = 2 * n - 2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int j = 4 * step - 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int j =bar * n - 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int j = pingPong * n - 2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int j = odd.length * n - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int j = step * n - 2;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int j = Perl * n - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int j = newCol * n - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int j = step * n - 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int j = new * n - 2;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int j = buffer.length * n - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int j =bar * n - 2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int j = newCol * n - 2;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int j = a.length * n - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int j = 5 * n - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int j = 400.length * n - 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int j = i * n - 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int j = odd * n - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int j = new * n - 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int j = new[n * n - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int j = common.length * n - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int j = ctPong * n - 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int j = pieces.length * n - 1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int j =Rows.length * n - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int j = newPositions.length * n - 2;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int j =Scope.length * n - 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int j = val / 2;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int j = 1] * n - 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int j = 3 * n - 2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int j = m - 1 * n - 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int j = new 10 * n - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int j = n * m - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int j = 5 * n - 2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int j =length * n - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int j = new 10 * n - 2;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int j = comparator * n - 2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int j =xc * n - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int j = 10 * n - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int j = n * 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int j = 6 * n - 2;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int j = ctPong * n - 2;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int j = 15 * n - 2;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int j = expression * n - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int j = k / 2;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int j = newCount * n - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int j = 3 * n - 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int j = 4 * index - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int j = new Way * n - 2;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int j = http * n - 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int j = odd * n - 2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int j = Un * n - 2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int j = 4 * 2;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int j = i * n - 2;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int j = left * n - 2;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int j = 4 * 1024 - 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int j = n - 2;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int j = 4 * 8 - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int j =compare * n - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int j = directory * n - 2;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int j =getName * n - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int j = newCount * n - 2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int j = new[n * n - 2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int j = 1 * n - 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int j =[5] * n - 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int j = 5 * k - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int j =fix * n - 2;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int j = 55 * n - 2;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int j = n * k - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int j = targetType * n - 2;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int j = bit * n - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int j =SSL * n - 2;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int j = 400.length * n - 2;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int j = selection * n - 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int j = buffer.length * n - 2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int j = DATE * n - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int j = 9 * n - 2;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int j = directory * n - 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int j = comparator * n - 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int j = 7 * n - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int j =>() * n - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int j = ct * n - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int j = completed * n - 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int j = 300 * n - 2;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int j = libraries * n - 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int j = 2 * k - 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int j = targets * n - 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int j = 10 * n - 2;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int j =Amount * n - 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int j = common.length * n - 2;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int j = libraries * n - 2;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int j = 500 * n - 1;",
                "identical": false
            }
        ],
        "buggy_line": "int j = 4 * n - 1;",
        "fixed_line": "int j = 4 * (n - 1);"
    },
    "Cli-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "nextLineTabStop = width - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 3,
                "patch": "nextLineTabStop = loop.length - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "nextLineTabStop = height - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "nextLineTabStop = width / 2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "nextLineTabStop = list.length - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "nextLineTabStop = - width - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "nextLineTabStop = 4 - 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "nextLineTabStop = NR_BIGNEGStop - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "nextLineTabStop = 6 - 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "nextLineTabStop = width / 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include'",
                "identical": false
            },
            {
                "k": 13,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end ofbinding as 'final'.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "nextLineTabStop = width / SECONDS.length - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '//' characters",
                "identical": false
            },
            {
                "k": 16,
                "patch": "nextLineTabStop = NR_OF_WEEK - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "nextLineTabStop = NR_OF_REASON_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of list",
                "identical": false
            },
            {
                "k": 19,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include' characters",
                "identical": false
            },
            {
                "k": 20,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of sign",
                "identical": false
            },
            {
                "k": 21,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final')",
                "identical": false
            },
            {
                "k": 22,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of",
                "identical": false
            },
            {
                "k": 23,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'project",
                "identical": false
            },
            {
                "k": 24,
                "patch": "nextLineTabStop = 4 - noOfLine;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'bpmn20.xml",
                "identical": false
            },
            {
                "k": 26,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 28,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'n' characters",
                "identical": false
            },
            {
                "k": 29,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'finalAlias",
                "identical": false
            },
            {
                "k": 30,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include't matched",
                "identical": false
            },
            {
                "k": 31,
                "patch": "nextLineTabStop =<NewLine - 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of input",
                "identical": false
            },
            {
                "k": 33,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final DEFAULT_trimmedCss",
                "identical": false
            },
            {
                "k": 34,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'empty' characters",
                "identical": false
            },
            {
                "k": 35,
                "patch": "nextLineTabStop = line.length - 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '",
                "identical": false
            },
            {
                "k": 37,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final DEFAULT_trim()",
                "identical": false
            },
            {
                "k": 38,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 39,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '//'t matched",
                "identical": false
            },
            {
                "k": 40,
                "patch": "nextLineTabStop = list - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '% of sign",
                "identical": false
            },
            {
                "k": 42,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'finalATTRIBUTE",
                "identical": false
            },
            {
                "k": 43,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of empty name",
                "identical": false
            },
            {
                "k": 44,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '?",
                "identical": false
            },
            {
                "k": 45,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'case when we have at least 1",
                "identical": false
            },
            {
                "k": 46,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '%'",
                "identical": false
            },
            {
                "k": 47,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'n't matched",
                "identical": false
            },
            {
                "k": 48,
                "patch": "nextLineTabStop = exception.length - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 50,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include'tfahn\\r",
                "identical": false
            },
            {
                "k": 51,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of api",
                "identical": false
            },
            {
                "k": 52,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key' characters",
                "identical": false
            },
            {
                "k": 53,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '//' nulls but nodes",
                "identical": false
            },
            {
                "k": 54,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity'",
                "identical": false
            },
            {
                "k": 55,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '//' one",
                "identical": false
            },
            {
                "k": 56,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include'Code",
                "identical": false
            },
            {
                "k": 57,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '// sign",
                "identical": false
            },
            {
                "k": 58,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 59,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'msg' characters",
                "identical": false
            },
            {
                "k": 60,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of paramName",
                "identical": false
            },
            {
                "k": 61,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the 'final'.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '//'ll also check",
                "identical": false
            },
            {
                "k": 63,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final change",
                "identical": false
            },
            {
                "k": 64,
                "patch": "nextLineTabStop = 4 - width - 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '//' header",
                "identical": false
            },
            {
                "k": 66,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include't lowercase",
                "identical": false
            },
            {
                "k": 67,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of input?",
                "identical": false
            },
            {
                "k": 68,
                "patch": "nextLineTabStop = NR_OF_RESERVED_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 's",
                "identical": false
            },
            {
                "k": 70,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'deep",
                "identical": false
            },
            {
                "k": 71,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'tx' characters",
                "identical": false
            },
            {
                "k": 72,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '%' characters",
                "identical": false
            },
            {
                "k": 73,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ']",
                "identical": false
            },
            {
                "k": 74,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of name",
                "identical": false
            },
            {
                "k": 75,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '//'t lowercase",
                "identical": false
            },
            {
                "k": 76,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include' nulls but nodes",
                "identical": false
            },
            {
                "k": 77,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!",
                "identical": false
            },
            {
                "k": 78,
                "patch": "nextLineTabStop = file.length - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'score space",
                "identical": false
            },
            {
                "k": 80,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the paste operator",
                "identical": false
            },
            {
                "k": 81,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of sure this.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'auto' characters",
                "identical": false
            },
            {
                "k": 83,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final DEFAULT_trimmed",
                "identical": false
            },
            {
                "k": 84,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of secretKey",
                "identical": false
            },
            {
                "k": 85,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include'\\n",
                "identical": false
            },
            {
                "k": 86,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'format",
                "identical": false
            },
            {
                "k": 87,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' old, nope",
                "identical": false
            },
            {
                "k": 88,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'defaultNewLine",
                "identical": false
            },
            {
                "k": 89,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the end of stream",
                "identical": false
            },
            {
                "k": 90,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'has",
                "identical": false
            },
            {
                "k": 91,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include' or 'final'.",
                "identical": false
            },
            {
                "k": 92,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'MASK' characters",
                "identical": false
            },
            {
                "k": 93,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'finalLocale",
                "identical": false
            },
            {
                "k": 94,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'finallaced' characters",
                "identical": false
            },
            {
                "k": 95,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as '\"",
                "identical": false
            },
            {
                "k": 96,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' ERROR' characters",
                "identical": false
            },
            {
                "k": 97,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include'\\n\"",
                "identical": false
            },
            {
                "k": 98,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the last 6 bits",
                "identical": false
            },
            {
                "k": 99,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' out' characters",
                "identical": false
            },
            {
                "k": 100,
                "patch": "nextLineTabStop = width - 1; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include' header",
                "identical": false
            }
        ],
        "buggy_line": "nextLineTabStop = width - 1;",
        "fixed_line": "nextLineTabStop = 1;"
    },
    "Time-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (nextTransition > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (offset < 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (nextTransition == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (nextLocal > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (previousTransition > 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if ( nextTransition > 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (nextLocal == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (offset > 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (instantAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if ( nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (offset == 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (nextTransition < 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (nextMinstantiationTypes.length > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (nextLocal < 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (nextMinstantAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (offset >= 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (nextMinstantiation > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (instantiationTypes.length > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (instantiation > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (offsetLocal == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (offsetLocal > 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (nextUninstantiationTypes.length > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (nextLocal instanceof 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (next 6,Adjusted > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (nextTransition > maxRetryed) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (nextTransition > maxGap) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (nextPair > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (nextSize < 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (nextUninstantiation > 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (nextTotalAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (nextConverterAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (nextryAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (nextTransition > speedAdjusted) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (nextLocal >= nextAdjusted) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (nextRetryed > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (nextTransition > maxTransition) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if ( nextAdjusted < 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (nextLeading > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (nextMinstantiationTypes.length == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (nextAdjusted < 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (nextRemoteAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (nextField < 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (nextPaired > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (offsetLocal < 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (AppAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if ( nextUninstantiationTypes.length > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (nextLocal >= 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (nextTransition > max gAdjusted) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (nextTransition > nextAdjusted) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (next\u4ab9ed > 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (nextMinstantiation < 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if ( nextUninstantiation > 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (nextIndex > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if ( previousTransition > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (tail == 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (nextTimestamp > 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (digitAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (newTransition > 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (maxTransition > 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if ( offsetAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (nextInactiveed > 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (next actions < 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (nexthitsed > 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (next methodsed > 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (nextInjectored > 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (mappingAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (next interrupt > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (insideTransition > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (nextAdjusted >= 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (instantiationTypes.length == 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if ( ResponseEntityAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (nextTransition > max) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (stripAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (limit > 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (nextMinstantAdjusted < 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (nextGap > 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (next0000 < 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (nextAbs < 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (previousTransition == 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (nextNode == 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (nextTransition > maxRetryCount) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (nextEdge == 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (nextSpacing > 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (nextcomment > 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (nextPackage > 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (nextTransition instanceof 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (nextTransition > maxSpacing.length) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (nextColumn > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (nextEnabled == 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (nextChar == 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (nextTransition > max Embedded) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (next == 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (nextryAdjusted < 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (c == 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (nextlassfish > 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (nextTransition > speedThreshold) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (nextMinstantAdjusted != 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (nextMinstantiationTypes > 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (nextAlias == 0) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (offsetLocal > 0) {",
        "fixed_line": "} else if (offsetLocal >= 0) {"
    },
    "Time-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "Partial newPartial = new Partial(index, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Partial newPartial = new Partial(i, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Partial newPartial = new Partial(index, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Partial newPartial = new Partial(index, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Partial newPartial = new Partial, i, newValues);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Partial newPartial = new Partial(i, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Partial newPartial = new Partial(start, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Partial newPartial = new Partial(this.index, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Partial newPartial = new Partial(this.index, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Partial newPartial = new Partial(index, newTypes, i, newValues);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Partial newPartial = new Partial(location, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Partial newPartial = new Partial(index, newValues, i);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Partial newPartial = new Partial(i, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Partial newPartial = new Partial;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Partial newPartial = new Partial(alias, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Partial newPartial = new Partial(index, newValues, i + 1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Partial newPartial = new Partial(newValues, this.index, newValues);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Partial newPartial = new Partial(count, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Partial newPartial = new Partial(required, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Partial newPartial = new Partial(can, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Partial newPartial = new Partial(out, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Partial newPartial = new Partial(index, newTypes, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Partial newPartial = new Partial(this.index, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Partial newPartial = new Partial[i, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Partial newPartial = new Partial(i, newValues, 0, i);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Partial newPartial = new Partial(out, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Partial newPartial = new Partial(clientValues, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Partial newPartial = new Partial(resultValues, 0, i, newValues);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Partial newPartial = new Partial[i, newValues, i + 1];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Partial newPartial = new Partial(pointType, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Partial newPartial = new Partial(pointType, newTypes, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Partial newPartial = new Partial(name, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Partial newPartial = new Partial(len, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Partial newPartial = new Partial(alias, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Partial newPartial = new Partial(i, newValues, i + 1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Partial newPartial = new Partial(post, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Partial newPartial = new Partial(array, i, newValues);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Partial newPartial = new Partial(entityManager, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1, this.length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Partial newPartial = new Partial(report, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Partial newPartial = new Partial(this.index, newValues, i);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Partial newPartial = new Partial(len, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1, this.arraycopy;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Partial newPartial = new Partial(ir, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Partial newPartial = new Partial(index, newValues, i + 1, this.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Partial newPartial = new Partial(index, newTypes, 0, iValues.length);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Partial newPartial = new Partial(cn, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Partial newPartial = new Partial(clock, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Partial newPartial = new Partial(start, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Partial newPartial = new Partial(pos, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Partial newPartial = new Partial(px, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Partial newPartial = new Partial(i, newValues, i + 1, this.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1, this.index;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Partial newPartial = new Partial(file, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Partial newPartial = new Partial(k, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Partial newPartial = new Partial(this.index, newValues, i + 1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Partial newPartial = new Partial(index, newTypes, 0, iValues.length;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Partial newPartial = new Partial(dir, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Partial newPartial = new Partial(WithValues, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Partial newPartial = new Partial(args, 0, i, newValues);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Partial newPartial = new Partial(length, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Partial newPartial = new Partial(count, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Partial newPartial = new Partial(baseDir, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Partial newPartial = new Partial(location, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Partial newPartial = new Partial(newValues, 0, i, newValues);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Partial newPartial = new Partial(currentValues, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Partial newPartial = new Partial(i, newTypes, i, newValues);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Partial newPartial = new Partial(alias, newTypes, i, newValues);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Partial newPartial = new Partial(location, newTypes, i, newValues);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Partial newPartial = new Partial(mapping, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Partial newPartial = new Partial(rows, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Partial newPartial = new Partial(clientValues, newTypes, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Partial newPartial = new Partial(kind, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Partial newPartial = new Partial[i - 1], newValues, i;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Partial newPartial = new Partial(i, newValues, i + 1, newValues;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Partial newPartial = new Partial( index, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Partial newPartial = new Partial(index, newTypes, 0, i;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1, this.index - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Partial newPartial = new Partial(this.index, newTypes, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Partial newPartial = new Partial( points, this.index, newValues);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Partial newPartial = new Partial(this.index, newValues, 0, i);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Partial newPartial = new Partial( longitude, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Partial newPartial = new Partial(i, newValues, i);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Partial newPartial = new Partial(newValues, messageTypes, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Partial newPartial = new Partial(getTime, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Partial newPartial = new Partial(client, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Partial newPartial = new Partial(out, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Partial newPartial = new Partial(array, 0, i, newValues);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Partial newPartial = new Partial(index, newValues, 0, i);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Partial newPartial = new Partial(SIZE, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Partial newPartial = new Partial[i], i, newValues);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Partial newPartial = new Partial(system, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Partial newPartial = new Partial(this.index, newValues, i + 1, this.length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1, newValues;",
                "identical": false
            }
        ],
        "buggy_line": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
        "fixed_line": "Partial newPartial = new Partial(newTypes, newValues, iChronology);"
    },
    "Csv-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (current == '\\n') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (current != '\\n') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if current == '\\n') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if(current == '\\n') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if last == '\\n') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.current != '\\n') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if(current != '\\n') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.lastCharInvalid one for the lastChar; current != '\\n') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to on the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-lineCounter but we should never really gets this.current != '\\n') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (last == '\\n') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to check the lastChar",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the bar file and the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to on the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to make sure all done with the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the bar file and the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (current == '\\n') { // one not yet; should we are the root of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (current == '\\n') { // we are the root-line means we can get new in current; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to for the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should this.current != '\\n') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (current == '\\n') { // end of record; but also need to check the root of the bar file and the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (current == '\\n') {//fit current; but we are the root of the bar file and the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.lastCharInvalid != '\\n') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to check the lastChar",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-lineCounter but we should never really gets this.lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (current == '\\n') {//fit current; but also need to the root of the bar file and the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'parent'",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.lastChar = current;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to make sure all uncolored the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (current == '\\n') { current; but we are the root of the bar file and the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should this.lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if current != '\\n') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to check the .bpmn20.xml",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (current == '\\n') { // end of line; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (current == '\\n') { // end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to check the bar file and the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to give accurate error here",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to make sure allChar != '\\n') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to on the lastChar",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the lastChar == '\\n') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (current == '\\n') { // one not yet; should we are the root of the bar file and the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.lastChar; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (current == '\\n') { // one not yet; should we are the root of the end of record; but also need to check the lastChar",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'empty'",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to give accurate error here",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to make sure all within buffer",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'spansINHERIT -> current != '\\n') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'parent' nulls but nodes",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ifcurrent == '\\n') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to make sure all elements show up without scrollbar",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (current == '\\n') { // we are the root-line means we can get new in current; but also need to check the lastChar",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (current == '\\n') { // we are the root-line means we can get new in current; but also need to make empty should check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to check the methods parameters",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to make sure all within buffer",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (current == '\\n') { // we are the root of the bar file and the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'bpmn20.xml",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'spansINHERIT -> current;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to make sure all elements show up without scrollbar",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to check the lastCharInvalid != '\\n') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.lastChar; second won't how much was already miss the",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to check the lastChar't how much was already added.",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'spans '.') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to on the lastChar",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'spans$;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'include' nulls but nodes",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to make sure all done with the lastChar",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.lastChar; but also need to give accurate error here",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (current == '\\n') { // we are the root of the end of record; but also need to check the lastChar",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'empty' nulls but nodes",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'A' nulls but nodes",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to for the lastChar",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'raw' characters",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (current == '\\n') { // we are the root-line means we can get new in current; but also need to make sure all within buffer",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.lastChar",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this. != '\\n') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'spansINHERIT",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (current == '\\n') { // one not yet; should we are the root of the end of record; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'parent' characters",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (current == '\\n') { // current quad; should we are the root of the end of record; but also need to force accessible",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (current == '\\n') { // one get new in current; should we are the root of the end of record; but also need to make sure allChar",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.lastChar;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (current == '\\n') { // one not yet; should we are the root of the end of record; but also need to check the methods parameters",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'spare' characters",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'spansD', current;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'empty' characters",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (current == '\\n') {\\ the root of the bar file and the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as 'spansINHERIT\"",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should never really gets this.lastCharInvalid one for the lastChar; current < '\\n') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if current == '\\n') {// compressed like ::1.equals(\"pre-line\"), the root of the bar file and the value we should not be assigned. Also declare the methods parameters as '=') {",
                "identical": false
            }
        ],
        "buggy_line": "if (current == '\\n') {",
        "fixed_line": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) {"
    },
    "Chart-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (dataset == null) {",
                "identical": true
            },
            {
                "k": 2,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (this.dataset == null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (dataset != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (forSerialization == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (switch == null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (rs == null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (pm == null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (We == null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (forSerialization != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (row != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if ( ending == null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (image != null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (groupCount == null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (url != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (oct == null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (ize == null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (forAttributes == null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (As == null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (ay == null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (valid != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (State != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (os != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (taskId != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (cs == null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if ( setProperty == null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (op != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (existing != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (data != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (Re == null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (for != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (cs != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (variables == null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (ArgumentCount == null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (Csv == null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (forced == null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (Mon != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (CsvCount == null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (desired != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (property != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (ize != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (driver == null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (len == null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (mimeType == null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (position != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (groupId != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (ART == null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (selection != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (commands == null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( setSelected == null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (sig == null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (forStart != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (count != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (forInterfaces == null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (download != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (props == null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (ToBytes == null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (Label != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (Queues == null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (children == null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (copy == null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if ( getLocalName == null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (peed == null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( sign == null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (allocate == null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (capacity == null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (allocate != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (cn == null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (executor != null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (complete != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if ( clone != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (className == null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (custom == null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( setName == null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (SHORT == null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (request != null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if ( payload != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (}' == null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (an != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Metrics == null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (sign == null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (dom == null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (an == null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (params != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (su == null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( part != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (metric != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( qualifier != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (client != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (callback != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (pair == null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (fileName != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (super != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if ( optimize != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (LEVEL == null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( result != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (className != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if ( rect != null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (Csv != null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (dataset == null){",
                "identical": false
            }
        ],
        "buggy_line": "if (dataset != null) {",
        "fixed_line": "if (dataset == null) {"
    },
    "Math-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "for (int i = 0; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "for (int i = 0; i < weightsWts.length; i++) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "for (int i = 0; i < weightsType.length; i++) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "for (int i = 0; i < weightsCount; i++) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "for (int i = 0; i < weights(), sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "for (int i = 0; i < startWts.length; i++) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "for (int i = 0; i < optWts.length; i++) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "for (int i = 0; i < origWts.length; i++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "for (int i = 0; i < attributesWts.length; i++) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "for (int i = 0; i < weights.length / weights.length; i++) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "for (int i = 0; i < sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "for (int i = 0; i < accessWts.length; i++) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "for (int i = 0; i < stripWts.length; i++) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "for (int i = 0; i < paramWts.length; i++) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "for (int i = 0; i < exceptionWts.length; i++) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "for (int i = 0; i < weights.length; i+= sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "for (int i = 0; i < numWts.length; i++) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "for (int i = 0; i < ':Wts.length; i++) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "for (int i = 0; i <LinkWts.length; i++) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "for (int i = 0; i < weightsc.length; i++) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "for (int i = 0; i < lineWts.length; i++) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "for (int i = 0; i < statusWts.length; i++) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "for (int i = 0; i <getNameWts.length; i++) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "for (int i = 0; i < weights.length; i++) {append(sumWts, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue 1.0 / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "for (int i = 0; i < weightsBoxes.length; i++) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (int i = 0; i < weightsEts.length; i++) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "for (int i = 0; i < forceWts.length; i++) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "for (int i = 0; i < weights.length; i+= numWts.length; i++) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "for (int i = 0; i <RedisWts.length; i++) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "for (int i = 0; i < choice.length; i++) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "for (int i = 0; i < trimWts.length; i++) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "for (int i = 0; i < weights.length; i++) {B / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "for (int i = 0; i <BasicWts.length; i++) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "for (int i = 0; i < drWts.length; i++) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "for (int i = 0; i <deWts.length; i++) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "for (int i = 0; i < weights.length; i++) { / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "for (int i = 0; i < weightsWffCols; i++) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "for (int i = 0; i < weights.length; i++) { buffer, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (int i = 0; i <ApiWts.length; i++) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (int i = 0; i < weightsAType.length; i++) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "for (int i = 0; i <sha.length; i++) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue HashSet / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "for (int i = 1; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (int i = 0; i < BOOLEAN.length; i++) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "for (int i = 0; i < weights.length; i++) {// compressed, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "for (int i = 0; i < branch.length; i++) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "for (int i = 0; i < AST.length; i++) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (int i = 0; i < weights.length; i+= height / weights.length; i++) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "for (int i = 0; i < weightsWType.length; i++) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "for (int i = 0; i < decrement.length; i++) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (int i = 0; i < weights.length; i++) { threadId / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "for (int i = 0; i < weights.length; i++) {append(sumWtsUNIT, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "for (int i = 0; i < 48.length; i++) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (int i = 0; i < weights.length; i++) { appId, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (int i = 0; i < parameter.length; i++) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "for (int i = 0; i < weights.length; i++) {sentence / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (int i = 0; i < weights.length; i++) {Calculation, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "for (int i = 0; i < namespaces.length; i++) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "for (int i = 0; i < weightsHashMap.length; i++) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "for (int i = 0; i < Device.length; i++) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValueRequired, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "for (int i = 0; i < args.length; i++) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "for (int i = 0; i < weights.length; i++) {Invalid / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "for (int i = 0; i < weightsural.length; i++) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "for (int i = 0; i < weights.length; i++) { threadId + weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (int i = 0; i < weights.length; i++) {remoteAddress.length; i++) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (int i = 0; i <navig.length; i++) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (int i = 0; i <\u8bb8.length; i++) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "for (int i = 0; i < weights.length-1; i++) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "for (int i = 0; i < weightsSet.length; i++) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "for (int i = 0; i < weightsT.length; i++) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "for (int i = 0; i < weightsContent.length; i++) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "for (int i = 0; i < weightsPages.length; i++) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "for (int i = 0; i < attributes.length; i++) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue 1.0, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "for (int i = 0; i < reorder.length; i++) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "for (int i = 0; i < weights.length; i++) {// compressed with the sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (int i = 0; i <ences.length; i++) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "for (int i = 0; i < weights.length; i++) {remoteAddress.length / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue lazy, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "for (int i = 0; i < weights[i; i++) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "for (int i = 0; i < weights.length; i++) {append(sumWtsT, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "for (int i = 0; i <ically.length; i++) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (int i = 0; i < En.length; i++) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "for (int i = 0; i < weightsStart.length; i++) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "for (int i = 0; i < weights.length; i+=2) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "for (int i = 0; i <\u2d17.length; i++) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "for (int i = 0; i < Participant.length; i++) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "for(int i = 0; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "for (int i = 0; i <DEFINED.length; i++) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "for (int i = 0; i <ColumnName.length; i++) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (int i = 0; i != weights.length; i++) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "for (int i = 0; i < getRootNode.length; i++) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (int i = 0; i < SB.length; i++) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "for (int i = 0; i < weightsct.length; i++) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "for (int i = 0; i < accum.length; i++) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "for (int i = 0; i <ak.length; i++) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "for (int i = 0; i < weights.length; i+= height++) {",
                "identical": false
            }
        ],
        "buggy_line": "for (int i = 0; i < weights.length; i++) {",
        "fixed_line": "for (int i = begin; i < begin + length; i++) {"
    },
    "JacksonDatabind-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "return actual;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return NO_OBJECTS;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return NO_TYPES;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _defaultValueDeserializer;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _actualValueDeserializer;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return EMPTY_TYPES;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return ROUTEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _deser;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT ) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return NO_ARRAY_ELEMENT_TYPES;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return _defaultValueSerializers;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return EMPTY_OBJECTS;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return NO_ARRAY_ELEMENT_NULL;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return NO_ARRAY_ELEMENT_END;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return JsonToken.VALUE_NUMBER_INTEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return NO_ARRAY_ELEMENT_URI;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return EMPTY_ARRAY;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return NO_ARRAY_ELEMENT_CORRESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return NO_ARRAY_ELEMENT_KEY;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_OBJECTS;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return JsonToken.VALUE_NUMBER_ARRAY;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return NO_ARRAY_ELEMENT_OBJECT;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return NO_ARRAY_CORRESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return ROUTEMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // null only before/after document",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return NO_ARRAY_ELEMENT_MAPPINGS;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _actualValueSerializers;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return NO_ARRAY_ELEMENTS;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return NO_ARRAY_ELEMENT_REDIS_SENTINEL;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return NO_ARRAY_ELEMENT_COLLECTION;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return NO_CHARS;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return _property;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return NO_ARRAY_ELEMENT_NAME;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _collectionType;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return NO_ARRAY_CORRESERVED_OBJECTS;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return EMPTY_OBJECT;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // null only before/after camelize)",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_PACKED;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or if EMPTY_ARRAY",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // [databind#116]",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return EMPTY_CURRESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return NO_ARRAY_ASYNC_MAPPINGS;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return NO_ARRAY_ELEMENT_HASH;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // since 2.7",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return NO_ARRAY_ELEMENT_MAPPING;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or if not yet",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // null only before/after camelize root",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or if null",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return NO_ARRAY_START_PACKED;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or this ever occur?",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or if not used as well",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or exclude by default",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or if EMPTY_OBJECT",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return NO_ARRAY_ELEMENT_FLOAT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or if not used as otherwise too...",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or if not used as expected",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_HASH;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // nullHex but also need to check the end of record or if EMPTY_ARRAY",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or if not used by default",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return NO_ARRAY_ELEMENT_+\"RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // null only before/after with no need to check the end of record or if EMPTY_ARRAY",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return _deserializer.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return NO_ARRAY_ELEMENT_CORRELATED;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also need to check the end of record or if EMPTY_ARRAY",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or null",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return NO_ARRAY_CORRECTION;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // can this ever occur?",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // null only before/after camelize no need to check the end of record or if EMPTY_ARRAY",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // null only before/after camelize nope",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return NO_ARRAY_ELEMENT_REDIS_OBJECT;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return NO_ARRAY_ELEMENT_ _actualValueDeserializer;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_FLOAT;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return JsonToken.VALUE_EMBEDGE_OBJECT;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // null only before/after camelize could also need to check the end of record or if EMPTY_ARRAY",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // nope, can this ever occur?",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_MODIFIDER;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // should check the offset, nope",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_TYPES;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return _actual;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or if non-only",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // null only before/after camelize could also check the end of record or if EMPTY_ARRAY",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_MODIFIRMATION;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or should check",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return NO_ARRAY_START_OBJECTS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // just to ensure we'll also check the end of record or input",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // can't occur but also need to check the end of record or if EMPTY_ARRAY",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "return NullifyingDeserializer.instance;"
    },
    "Closure-52": {
        "fixes": [
            {
                "k": 1,
                "patch": "return c == 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return c - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return c > 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return c >= 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.index >= 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return Token.TK_QUOTED_IDENTIFIER;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return Token.TK_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return Token.TK_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return i == 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return TokenType.ASSIGN_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return Token.TK_SHORT_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return Token.TK_QUOTED_STRING;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return c._lastIndex;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return Token.TK_QUOTED_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return TokenType.ASSIGN_EMBEDDED_LOG_RECORDS;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return TokenType.FUTURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return Token.TK_QUOTED_LOG_RECORDS;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return c._lastIndex >= 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHARACT;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return Token.TK_PERCENTAGE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return Token.TK_BUFFER_LENGTH - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return TokenType.FUTURE_LOG_RECORDS;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return this.index == 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return Token.TK_QUOTED_IDENTIFIER > 0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return BRACKET_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return Token.TK_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return Token.TK_EMBEDDED_LOG_RECORDS;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return Token.TK_SHORT_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return FS_SHORT_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return c.length > 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return Token.TK_BUFFER_LENGTH;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return TokenType.FUTURE_QUOTED_IDENTIFIER;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return Token.TK_SHOW_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return TokenType.ASSIGN_EMBEDDED_CHAR;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return c._last == 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return i >= 0;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return c;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return Token.TK_BUFFER_SIZE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return len > 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_ALT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return TokenType.ASSIGN_EMBEDDED_QUOTED_IDENTIFIER;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return Token.TK_BUFFER_LENGTH > 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return Token.TK_QUOTED_AS_LONG;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return BRACKET_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return Token.TK_QUOTED_ _inputPtr - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return Token.TK_END_OF_STRING > 0;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return Token.TK_RBRACKET;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return c.value >= 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return Token.TK_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return Token.TK_SHORT_STRING == 0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return TokenType.ASSIGN_EMBEDDED_BYTES;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_ e;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return TokenType.ASSIGN_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHARS;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return Token.TK_EMBEDDED_OBJECT <= 0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return Token.TK_CAMEL;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return Token.TK_SHORT_END_OF_STRING > 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return Token.TK_SHORT_END;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return Token.TK_EMBEDDED_OBJECT - 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return BRACKET_modulus;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return Token.TK_QUOTED_CHAR;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return Token.TK_QUOTED_IDENTIFIER >= 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return Token.TK_QUOTED_ALT;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return Token.TK_EMBEDDED_OBJECT > 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return Token.TK_INT;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_ coords;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return Token.TK_EMBEDDED_CHAR;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return Token.TK_BEFORE_BYTES > 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return c = s.length > 0;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return Token.TK_QUOTED_END;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return Token.TK_B - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_LEN;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return c % this.len;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return Token.TK_QUOTED_NEGATIVE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return Token.TK_FLOAT - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return TokenType.ASSIGN_EMBEDDED_OF_STRING;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return TokenType.ASSIGN_EMBEDDED_QUOTED_STRING;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return TokenType.NONE > 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return c % this.index;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return TokenType.FUTURE_LOG_PATTERN;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return Token.TK_EMBEDDED_BYTES;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHARACTED;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return TokenType.ASSIGN_EMBEDDED_CHARS;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return Token.TK_CHARS >= 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return BRACKET_END_OF_STRING > 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return Token.TK_QUOTED_EMBEDDED_CHAR;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return c._lastNumber - 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return c % 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return Token.TK_END_OF_STRING[index - 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return c._index >= 0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return FS_CHARS >= 0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return -1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return BRACKET_c >= 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return BRACKET_LOG_RECORDS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return Token.TK_QUOTED_EMBEDDED_OBJECT - 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return TokenType.FUTURE_QUOTED_STRING;",
                "identical": false
            }
        ],
        "buggy_line": "return len > 0;",
        "fixed_line": "return len > 0 && s.charAt(0) != '0';"
    },
    "Lang-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (str.startsWith(\"0x\") && str.length == 1) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (str.startsWith(\"0x\") && str.Kind(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (str.startsWith(\"0x\") && str.equals(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (str.startsWith(\"0x\") && str. border.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (str.startsWith(\"0x\") && str.length == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (str.startsWith(\"0x\") && str.next(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (str.startsWith(\"0x\") && str.length == 2) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (str.startsWith(\"0x\") && str.length == 5) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (str.startsWith(\"0x\") && str.length == 32) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (str.startsWith(\"0x\") && str.simple(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (str.startsWith(\"0x\") && str.length == 4) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (str.startsWith(\"0x\") && str.length == 126) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (str.startsWith(\"0x\") && str.length == 204) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (str.startsWith(\"0x\") && str.getValue(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (str.startsWith(\"0x\") && str.toUpperCase(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (str.startsWith(\"0x\") && str.indexOf(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (str.startsWith(\"0x\") && str.length == 3) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (str.startsWith(\"0x\") && str.IN-0x\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (str.startsWith(\"0x\") && str. PAGE_-0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (str.startsWith(\"0x\") && str.length == 33) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (str.startsWith(\"0x\") && str.Page(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x08\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (str.startsWith(\"0x\") && str.-0x\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (str.startsWith(\"0x\") && str.append(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x+1) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (str.startsWith(\"0x\") && str. new-0x\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (str.startsWith(\"0x\") && str. height(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x.\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (str.startsWith(\"0x\") && str.length == 1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (str.startsWith(\"0x\") && str.2.-0x\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (str.startsWith(\"0x\") && str.1.-0x\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (str.startsWith(\"0x\") && str.flush(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (str.startsWith(\"0x\") && str.reply(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-1\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (str.startsWith(\"0x\") && str.length == 63) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (str.startsWith(\"0x\") && str.endsWith-0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x value\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (str.startsWith(\"0x\") && str. setVersionx\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (str.startsWith(\"0x\") && str.Rendering(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (str.startsWith(\"0x\") && str.compareTo(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (str.startsWith(\"0x\") && str.Urisx\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\\\") {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (str.startsWith(\"0x\") && str.length == 11) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (str.startsWith(\"0x\") && str.HEADER(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (str.startsWith(\"0x\") && str.length > 1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (str.startsWith(\"0x\") && str.length == \".-0x\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (str.startsWith(\"0x\") && str.length == 16) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (str.startsWith(\"0x\") && str. item(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (str.startsWith(\"0x\") && str.has-0x\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\" cassandrax\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (str.startsWith(\"0x\") && str.ends<-0x\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (str.startsWith(\"0x\") && str.should(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (str.startsWith(\"0x\") && str.length ==+1) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (str.startsWith(\"0x\") && str.charAt(0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (str.startsWith(\"0x\") && str. rate == 5) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (str.startsWith(\"0x\") && str.length == 31) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x '9') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (str.startsWith(\"0x\") && str.ends(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (str.startsWith(\"0x\") && str.drx\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x-println\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"1.-0x\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (str.startsWith(\"0x\") && str.Kind(\"-0x\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"0,\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (str.startsWith(\"0x\") && str.length == 20') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (str.startsWith(\"0x\") && str. increasex\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (str.startsWith(\"0x\") && str.substring(1) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (str.startsWith(\"0x\") && str.resolve(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x00\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0xFileSystemx\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x'\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (str.startsWith(\"0x\") && str.charAt(0) == '0') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0 0\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (str.startsWith(\"0x\") && str.length == 6) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (str.startsWith(\"0x\") && str.length() > 1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0 \"\\\"\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (str.startsWith(\"0x\") && str.length == '0') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (str.startsWith(\"0x\") && str.length == 0x10000) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (str.startsWith(\"0x\") && str.DIRECTORY_-0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (str.startsWith(\"0x\") && str.length == 1)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (str.startsWith(\"0x\") && str.Voicex\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x{",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (str.startsWith(\"0x\") && str.length == 11') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (str.startsWith(\"0x\") && str.length == 4 {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (str.startsWith(\"0x\") && str.length ==-1) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\"))) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (str.startsWith(\"0x\") && str.length == 13) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (str.startsWith(\"0x\") && str.attribute-0x\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (str.startsWith(\"0x\") && str.length() == 1) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (str.startsWith(\"0x\") && str.length == 20) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (str.startsWith(\"0x\") && str. getC-0x\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (str.startsWith(\"0x\") && str.length == 203) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (str.startsWith(\"0x\") && str.length == 0x0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (str.startsWith(\"0x\") && str.-3x\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
        "fixed_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {"
    },
    "Lang-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && - 1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cal1.get(Calendar.HOURHOUR && day2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && day;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cal1.get(Calendar.HOURD == cal2.get(Calendar.HOUR_OF_YEAR) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cal1.get(Calendar.HOURHOUR && - cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY && == cal2.get(Calendar.HOUR) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cal1.get(Calendar.HOUR && == cal2.get(Calendar.HOUR_OF_DAY) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && day);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && rows2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cal1.get(Calendar.HOUR && day2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cal1.get(Calendar.HOURHOUR && replace2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cal1.get(Calendar.HOURHOUR && pred2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && - 1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && rows2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cal1.get(Calendar.HOUR && == cal2.get(Calendar.HOUR_OF_DAY) || cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_WEEK) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && day;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cal1.get(Calendar.HOURHOUR &&YEAR2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) - 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && query2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) || cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY && == cal2.get(Calendar.HOUR) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY && == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && rows2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && query2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR - 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && next;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && seconds;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR &&Root);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_YEAR) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cal1.get(Calendar.HOUR && == cal2.get(Calendar.HOUR_OF_DAY) - 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && rows2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cal1.get(Calendar.HOURHOUR && pred2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) && 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cal1.get(Calendar.HOURHOUR && - cal2.get(Calendar.HOUR_OF_YEAR) + 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY && == cal2.get(Calendar.HOUR) - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cal1.get(Calendar.HOURHOUR && - cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && query2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cal1.get(Calendar.HOURHOUR && day2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && day);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && query2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY && == cal2.get(Calendar.HOUR) || cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cal1.get(Calendar.HOUR_OF_WEEK) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cal1.get(Calendar.HOUR && - cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cal1.get(Calendar.HOURD == cal2.get(Calendar.HOUR_OF_YEAR) && cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cal1.get(Calendar.HOUR - cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && maxResults;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && node2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cal1.get(Calendar.HOUR && == cal2.get(Calendar.HOUR_OF_DAY) && 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cal1.get(Calendar.HOUR && == cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cal1.get(Calendar.HOURHOUR && - cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cal1.get(Calendar.HOUR && == cal2.get(Calendar.HOUR) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR &&YEAR;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR) - 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY && == cal2.get(Calendar.HOUR) + 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && camelize);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY && == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cal1.get(Calendar.HOUR = cal2.get(Calendar.HOUR_OF_DAY) - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR - 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_YEAR) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && db2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && Column2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cal1.get(Calendar.HOUR = cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && count2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && count2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR_OF_DAY && day);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY && == cal2.get(Calendar.HOUR) - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR &&Size);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR &&Path);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && seconds;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR &&Root);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cal1.get(Calendar.HOURHOURS_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && node2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && replace);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && count2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_YEAR) && 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && count2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR &&state;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && Column2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cal1.get(Calendar.HOUR && pred2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR) + 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR && next;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cal1.get(Calendar.HOURHOUR && - cal2.get(Calendar.HOUR_OF_DAY) == 1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cal1.get(Calendar.HOURHOUR, cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_WEEK) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && db2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_WEEK) == cal2.get(Calendar.HOUR && - 1);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && - 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) && rows2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && position);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) &&Init2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && next);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cal1.get(Calendar.HOUR && == cal2.get(Calendar.HOUR_OF_YEAR) {",
                "identical": false
            }
        ],
        "buggy_line": "cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&",
        "fixed_line": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&"
    }
}