{
    "Math-94": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (u * v == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (u * v == 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (u * v < 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (u * v < 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (v * v == 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (v * v == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (v * v < 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (v * v < 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (v1 * v == 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (v1 * v == 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (u * v <= 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (u * v <= 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (2 * v == 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (2 * v == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (v1 * v <= 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (v1 * v <= 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (v * 2 == 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (v * 2 == 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (u * v >= 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (u * v >= 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (v1 * v < 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (v1 * v < 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (v * v >= 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (v * v >= 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (2 * v <= 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (2 * v <= 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (u / 2 == 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (u / 2 == 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (v / 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (v / 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (u * v > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (u * v > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (u / v == 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (u / v == 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (v * v <= 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (v * v <= 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (2 * v < 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (2 * v < 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (u / this.abs1 - v <= 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (u / this.abs1 - v <= 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (u / Byte * v == 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (u / Byte * v == 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (u / 2 * v == 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (u / 2 * v == 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (u / this.abs1 - v == 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (u / this.abs1 - v == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (v /Math.abs(v) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (v /Math.abs(v) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (u / this.abs1 - v >= 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (u / this.abs1 - v >= 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (u / this.v == 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (u / this.v == 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (v * 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (v * 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (v * 2 < 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (v * 2 < 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (v * d < 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (v * d < 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (u / this.abs1 - v) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (u / this.abs1 - v) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (u / this.abs1 - v > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (u / this.abs1 - v > 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (u % 2 == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (u % 2 == 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (v /Math.abs_MARKER_END_OF_STRING == 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (v /Math.abs_MARKER_END_OF_STRING == 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (v * 1 == 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (v * 1 == 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (u * 2 == 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (u * 2 == 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (v * shift - 1) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (v * shift - 1) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (v /Math.abs_MARKER_END_OF_STRING == v) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (v /Math.abs_MARKER_END_OF_STRING == v) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (v /Math.abs(u) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (v /Math.abs(u) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (v % 2 == 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (v % 2 == 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (v * d == 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (v * d == 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (u / this.abs1 - v % 1 == 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (u / this.abs1 - v % 1 == 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (u1 * v == 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (u1 * v == 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (u / this.abs1 - v < 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (u / this.abs1 - v < 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (u / this.abs1 - v % 1MIDDLE) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (u / this.abs1 - v % 1MIDDLE) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ifu * v == 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ifu * v == 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (v * shift) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (v * shift) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (v * 2 > 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (v * 2 > 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (u * 2 < 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (u * 2 < 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (v * shift - 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (v * shift - 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (u / this.absabs_END_OF_STRING == 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (u / this.absabs_END_OF_STRING == 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (u * v == 0) {",
        "fixed_line": "if ((u == 0) || (v == 0)) {"
    },
    "Codec-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "this(true);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this(true);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.true = encoding;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.true = encoding;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.true =true;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.true =true;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.true = y;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.true = y;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.true = DEFAULT_LOCALE;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.true = DEFAULT_LOCALE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.true;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.true;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.true = DEFAULT_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.true = DEFAULT_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.true = DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.true = DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.true =false;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.true =false;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.true = result;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.true = result;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.true = DEFAULT_DIMENSIONS_DOWN;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.true = DEFAULT_DIMENSIONS_DOWN;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.true = threshold;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.true = threshold;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.false = y;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.false = y;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.true = DEFAULT_DIMENSION_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.true = DEFAULT_DIMENSION_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this(true;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this(true;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.true = DEFAULT_PROCESS_DEFINITION_KEY;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.true = DEFAULT_PROCESS_DEFINITION_KEY;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.true = DEFAULT_RESOLATION_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.true = DEFAULT_RESOLATION_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.true = DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.true = DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.true = current64;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.true = current64;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.true = DEFAULT_DIVIDER_LOCATION;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.true = DEFAULT_DIVIDER_LOCATION;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.false = DEFAULT_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.false = DEFAULT_DIMENSIONS;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.false = encoding;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.false = encoding;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.false =true;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.false =true;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.true = call;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.true = call;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.true = DEFAULT_RESOLVER_TIME_AFTER_END;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.true = DEFAULT_RESOLVER_TIME_AFTER_END;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.false = DEFAULT_LOCALE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.false = DEFAULT_LOCALE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.false;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.false;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.true = DEFAULT_DIMENSIONS_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.true = DEFAULT_DIMENSIONS_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.true = DEFAULT_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.true = DEFAULT_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.true = DEFAULT_SELF_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.true = DEFAULT_SELF_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.true = DEFAULT_LOOP_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.true = DEFAULT_BINDINGS;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.true = DEFAULT_BINDINGS;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.true = DEFAULT_TIMEOUT_IN_MS;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.true = DEFAULT_TIMEOUT_IN_MS;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.true = DEFAULT_SENTINEL_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.true = DEFAULT_GENERATOR_FEATURE_STRICT_RESERVED_COLUMNS;",
                "identical": false
            }
        ],
        "buggy_line": "this(false);",
        "fixed_line": "this(0);"
    },
    "JacksonCore-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "char c = str.charAt(i++);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "char c = str.charAt(i++);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "char c = str.charAt(i++;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "char c = str.charAt(i++;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "char c = str.charAt(i++ ) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "char c = str.charAt(i++ ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "char c = str.charAt(i++ << i;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "char c = str.charAt(i++ << i;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "char c = input.charAt(i++);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "char c = input.charAt(i++);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "char c = str.charAt(i++];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "char c = str.charAt(i++];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "char c = str.charAt(i++ << 1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "char c = str.charAt(i++ << 1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "char c = str.charAt(i++i++) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "char c = str.charAt(i++i++) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "char c = str.charAt(i++i++;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "char c = str.charAt(i++i++;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "char c = str.charAt(i++ - 1) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "char c = str.charAt(i++ - 1) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "char c = input.charAt(i++;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "char c = input.charAt(i++;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "char c = str.charAt(i++inIndex++) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "char c = str.charAt(i++inIndex++) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "char c = str.charAt(i++) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "char c = str.charAt(i++) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "char c = str.charAt(i++ + i;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "char c = str.charAt(i++ + i;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "char c = str.charAt(i++ << 2;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "char c = str.charAt(i++ << 2;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "char c = str.charAt(i++ << 12;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "char c = str.charAt(i++ << 12;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "char c = input.charAt(i++ << i;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "char c = input.charAt(i++ << i;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "char c = str.charAt(i++ - 1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "char c = str.charAt(i++ - 1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "char c = input.charAt(i++ ) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "char c = input.charAt(i++ ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "char c = value.charAt(i++);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "char c = value.charAt(i++);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "char c = str.charAt(i++i++ ) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "char c = str.charAt(i++i++ ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "char c = text.charAt(i++;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "char c = text.charAt(i++;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "char c = str.charAt(i++1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "char c = str.charAt(i++1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "char c = str.charAt(i++inIndex++i++) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "char c = str.charAt(i++inIndex++i++) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "char c = str.charAt(i++ oneString.charAt(i++);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "char c = str.charAt(i++ oneString.charAt(i++);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "char c = str.charAt(i++ - 1) == len;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "char c = str.charAt(i++ - 1) == len;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "char c = str.charAt(i++i++];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "char c = str.charAt(i++i++];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "char c = str.charAt(i++i++);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "char c = str.charAt(i++i++);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "char c = text.charAt(i++);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "char c = text.charAt(i++);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "char c = str.charAt(i++ << 4);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "char c = str.charAt(i++ << 4);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "char c = str.charAt(i++ << 15;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "char c = str.charAt(i++ << 15;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "char c = input.charAt(i++i++) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "char c = input.charAt(i++i++) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "char c = str.charAt(i++ - 1)[i++];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "char c = str.charAt(i++ - 1)[i++];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "char c = input.charAt(i++i++;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "char c = input.charAt(i++i++;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "char c = str.charAt(i++Path;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "char c = str.charAt(i++Path;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "char c = str.charAt(i+++i++) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "char c = str.charAt(i+++i++) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "char c = str.charAt(i++ - 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "char c = str.charAt(i++ - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "char c = str.charAt(i++inIndex + i;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "char c = str.charAt(i++inIndex + i;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "char c = str.charAt(i++)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "char c = str.charAt(i++)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "char c = str.charAt(i++ oneString.charAt(i++) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "char c = str.charAt(i++ oneString.charAt(i++) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "char c = str.charAt(i+++i++;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "char c = str.charAt(i+++i++;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "char c = input.charAt(i++];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "char c = input.charAt(i++];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "char c = str.charAt(i++status >= len;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "char c = str.charAt(i++status >= len;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "char c = str.charAt(i++inIndex++;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "char c = str.charAt(i++inIndex++;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "char c = str.charAt(i++ << len;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "char c = str.charAt(i++ << len;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "char c = str.charAt(i++ << 7) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "char c = str.charAt(i++ << 7) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "char c = str.charAt(i++ >= len;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "char c = str.charAt(i++ >= len;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "char c = str.charAt(i++ - 1);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "char c = str.charAt(i++ - 1);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "char c = value.charAt(i++;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "char c = value.charAt(i++;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "char c = text.charAt(i++ << i;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "char c = text.charAt(i++ << i;",
                "identical": false
            }
        ],
        "buggy_line": "char c = str.charAt(i++);",
        "fixed_line": "char c = str.charAt(i);"
    },
    "Time-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (nextTransition > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (nextTransition > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (offset < 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (offset < 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (nextTransition == 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (nextTransition == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (nextLocal > 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (nextLocal > 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (previousTransition > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (previousTransition > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if ( nextTransition > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if ( nextTransition > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (nextLocal == 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (nextLocal == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (offset > 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (offset > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (instantAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (instantAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if ( nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if ( nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (nextTransition > maxTransition) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (nextTransition > maxTransition) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (nextAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (offset == 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (offset == 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (nextTransition < 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (nextTransition < 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (nextMinstantiationTypes.length > 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (nextMinstantiationTypes.length > 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (nextLocal < 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (nextLocal < 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (nextMinstantAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (nextMinstantAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (offset >= 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (offset >= 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (nextMinstantiation > 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (nextMinstantiation > 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (instantiationTypes.length > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (instantiationTypes.length > 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (instantiation > 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (instantiation > 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (nextnextLocal > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (nextnextLocal > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (offsetLocal == 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (offsetLocal == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (offsetLocal > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (offsetLocal > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (nextUninstantiationTypes.length > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (nextUninstantiationTypes.length > 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (nextLocal instanceof 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (nextLocal instanceof 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (next 6,Adjusted > 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (next 6,Adjusted > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (nextTransition > maxRetryed) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (nextTransition > maxRetryed) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (nextTransition > maxGap) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (nextTransition > maxGap) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (nextPair > 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (nextPair > 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (nextSize < 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (nextSize < 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (nextUninstantiation > 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (nextUninstantiation > 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (nextRetryed > 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (nextRetryed > 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if ( nextAdjusted < 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if ( nextAdjusted < 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (nextLeading > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (nextLeading > 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (nextMinstantiationTypes.length == 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (nextMinstantiationTypes.length == 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (nextAdjusted < 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (nextAdjusted < 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (nextField < 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (nextField < 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (nextPaired > 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (nextPaired > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (offsetLocal < 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (offsetLocal < 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (AppAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (AppAdjusted > 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (nextLocal >= 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (nextLocal >= 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (nextTransition > max gAdjusted) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (nextTransition > max gAdjusted) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (nextMinstantiation < 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (nextMinstantiation < 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (nextIndex > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (nextIndex > 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if ( previousTransition > 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if ( previousTransition > 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (tail == 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (tail == 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (nextTimestamp > 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (nextTimestamp > 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (newTransition > 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (newTransition > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (maxTransition > 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (maxTransition > 0) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (offsetLocal > 0) {",
        "fixed_line": "} else if (offsetLocal >= 0) {"
    },
    "Lang-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return foundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return foundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return foundDigit || !hasExp;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return foundDigit || !hasExp;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return val >= 0 && !hasExp;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return val >= 0 && !hasExp;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or input...",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or input...",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal!",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal!",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of record or input",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of record or input",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of record or input...",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of record or input...",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of input buffer",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of input buffer",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return foundDigitDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return foundDigitDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of input?",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of input?",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of input?",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of input?",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't need to check the end of record or input",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't need to check the end of record or input",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of input",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of input",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we found the end of record or input",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we found the end of record or input",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge (this.chars[i]",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge (this.chars[i]",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we found the end of input?",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we found the end of input?",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return foundDigitWidget || !hasExp;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return foundDigitWidget || !hasExp;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of input",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of input",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we found the end of record;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we found the end of record;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "returnfoundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "returnfoundDigit && !hasExp;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of record or decimal!",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of record or decimal!",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record orssl-chars, !hasExp;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record orssl-chars, !hasExp;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't need to check the end of record or input...",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't need to check the end of record or input...",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we can return found the end of record or input",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we can return found the end of record or input",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we found the end of input",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we found the end of input",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of record;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the end of record;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we can return found the end of record;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we can return found the end of record;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we can return found the end of input",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we can return found the end of input",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 0x0 is disabled.hasExp;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or 0x0 is disabled.hasExp;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return foundDigit && !hasMore;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return foundDigit && !hasMore;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we found the end of record or input...",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we found the end of record or input...",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we can return found the end of input?",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we can return found the end of input?",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln'll also check the end of record or input",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln'll also check the end of record or input",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal, !chars.hasExp;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal, !chars.hasExp;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal edge",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal decimaln't return found the end of record or input",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal decimaln't return found the end of record or input",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't been discovered yet",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't been discovered yet",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal decimaln't return found the end of record or input...",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimal decimaln't return found the end of record or input...",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we added first at the end of record;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we added first at the end of record;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the next uncolored vertex",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln't return found the next uncolored vertex",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln'll also check the end of record or input...",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or decimaln'll also check the end of record or input...",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record orJSON, !chars.hasExp;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record orJSON, !chars.hasExp;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we hit the end of record or input",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return foundDigit && !hasExp;//already internal't a parameter should not be assigned. Also declare the end of record or -1 since we hit the end of record or input",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return foundDigit && !hasExp;//already internal't a type we found the end of record or input...",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return foundDigit && !hasExp;//already internal't a type we found the end of record or input...",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return foundDigit && !hasExp;//already internal't a type we found the end of input?",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return foundDigit && !hasExp;//already internal't a type we found the end of input?",
                "identical": false
            }
        ],
        "buggy_line": "return foundDigit && !hasExp;",
        "fixed_line": "return foundDigit && !hasExp && !hasDecPoint;"
    },
    "Codec-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new String(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new String(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new String(bytes, Charsets.ISO_8859_1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new String(bytes, Charsets.ISO_8859_1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new String(bytes, Charsets.ISO_8859_1});",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new String(bytes, Charsets.ISO_8859_1});",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 > 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 > 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Charsets.class;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Charsets.class;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Charsets.ISO_8859_1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Charsets.ISO_8859_1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + bytes;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + bytes;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + this.bytes;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + this.bytes;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 8;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 8;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 12;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + 12;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 0);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new String(bytes, Charsets.ISO_8859_1];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new String(bytes, Charsets.ISO_8859_1];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 0;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new String(bytes, Charsets.ISO_8859_1) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + this.bytes);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + this.bytes);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + suffix;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + suffix;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= this.bytes.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= this.bytes.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + this.bytes.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + this.bytes.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new String(bytes, Charsets.ISO_8859_1, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new String(bytes, Charsets.ISO_8859_1, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 != Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 != Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 5;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 5;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new String(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new String(bytes, Charsets.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= CAP_8859_1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= CAP_8859_1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + EMPTY_8859_1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 + EMPTY_8859_1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= high.class;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= high.class;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Charsets;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Charsets;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Charsets_2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= Charsets_2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= DEFAULT_8859_1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= DEFAULT_8859_1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >=bytes.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >=bytes.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= CAP_8859_1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= CAP_8859_1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= maximum;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= maximum;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= DEFAULT_8859_1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= DEFAULT_8859_1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new String(bytes, Charsets.ISO_8859_1+1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new String(bytes, Charsets.ISO_8859_1+1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 != Charsets.class;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 != Charsets.class;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= CAP_INF;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= CAP_INF;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= high.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= high.ISO_8859_1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 != Charsets.ISO_8859_1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 != Charsets.ISO_8859_1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 5 ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 5 ) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 1970",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 1970",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 600;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 600;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 11;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 >= 11;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 - 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 - 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 & bytes;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 & bytes;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 && bytes.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new String(bytes, Charsets.ISO_8859_1 && bytes.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new String(bytes, Charsets.ISO_8859_1tree_8859_1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new String(bytes, Charsets.ISO_8859_1tree_8859_1);",
                "identical": false
            }
        ],
        "buggy_line": "return new String(bytes, Charsets.ISO_8859_1);",
        "fixed_line": "return newString(bytes, Charsets.ISO_8859_1);"
    },
    "Mockito-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (m instanceof CapturesArguments){",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (m instanceof CapturesArguments){",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (m instanceof CapturesArguments && k instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (m instanceof CapturesArguments && k instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if ( m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if ( m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (m instanceof CapturesArguments && k) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (m instanceof CapturesArguments && k) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (k instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (k instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (m instanceof CapturesArguments == CapturesArguments) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (m instanceof CapturesArguments == CapturesArguments) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (captures instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (captures instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (m instanceof CapturesArguments && x instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (m instanceof CapturesArguments && x instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (frees instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (frees instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (captureFromk instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (captureFromk instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar != CapturesArguments) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar != CapturesArguments) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (f instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (f instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (m instanceof CapturesArguments && k > CapturesArguments) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (m instanceof CapturesArguments && k > CapturesArguments) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (m instanceof CapturesArguments && k != CapturesArguments) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (m instanceof CapturesArguments && k != CapturesArguments) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (this.m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (this.m instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (m instanceof CapturesArguments && kd == CapturesArguments) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (m instanceof CapturesArguments && kd == CapturesArguments) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( margin instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( margin instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (m instanceof CapturesArguments && k - CapturesArguments) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (m instanceof CapturesArguments && k - CapturesArguments) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (o instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (o instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (Th instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Th instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar == CapturesArguments) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (m instanceof CapturesArguments && kseparatorChar == CapturesArguments) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (m instanceof CapturesArguments && ktArguments) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (m instanceof CapturesArguments && ktArguments) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (duration instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (duration instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (m instanceof CapturesArguments && kcassandraFromk instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (m instanceof CapturesArguments && kcassandraFromk instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if ( k instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( k instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (degk instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (degk instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (m instanceof CapturesArguments > 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (m instanceof CapturesArguments > 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (free instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (free instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (m instanceof CapturesArguments && k;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (m instanceof CapturesArguments && k;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (r instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (r instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (offs instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (offs instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (sort instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (sort instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (n instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (n instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (acc instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (acc instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (m instanceof CapturesArguments[i+1];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (m instanceof CapturesArguments[i+1];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (v instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (v instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Def instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Def instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharStateField) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (m instanceof CapturesArguments && kseparatorCharStateField) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (m instanceof CapturesArguments && kcassandraFromkabsentsArguments) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (m instanceof CapturesArguments && kcassandraFromkabsentsArguments) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parent instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parent instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (m instanceof CapturesArguments[i+1]) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (m instanceof CapturesArguments[i+1]) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (m instanceof CapturesArguments && ktreatTypeArguments) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (m instanceof CapturesArguments && ktreatTypeArguments) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (m instanceof CapturesArguments && kiator) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (m instanceof CapturesArguments && kiator) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (m instanceof CapturesArguments > m) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (m instanceof CapturesArguments > m) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (m instanceof CapturesArguments;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (m instanceof CapturesArguments;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (stack instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (stack instanceof CapturesArguments) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (m instanceof CapturesArguments && k > m) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (m instanceof CapturesArguments && k > m) {",
                "identical": false
            }
        ],
        "buggy_line": "if (m instanceof CapturesArguments) {",
        "fixed_line": "if (m instanceof CapturesArguments && i.getArguments().length > k) {"
    },
    "Math-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (entry.compareTo(this.entry,Precision, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (entry.compareTo(this.entry,Precision, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (entry.compareTo(localDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (entry.compareTo(localDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (entry.compareTo(this.entry,Precision, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (entry.compareTo(this.entry,Precision, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (entry.compareTo(offs, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (entry.compareTo(offs, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (entry.compareTo(toDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (entry.compareTo(toDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (entry.compareTo(loadDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (entry.compareTo(loadDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps > 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps > 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (entry.compareTo(offs, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (entry.compareTo(offs, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (entry.compareTo(localDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (entry.compareTo(localDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (entry.compareTo(this.entry,Precisions, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (entry.compareTo(this.entry,Precisions, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (entry.compareTo(si, entry, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (entry.compareTo(si, entry, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (entry.compareTo(column, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (entry.compareTo(column, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (entry.compareTo(mask, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (entry.compareTo(mask, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (entry.compareTo(publicKey, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (entry.compareTo(publicKey, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (entry.compareTo(this.entry,Precisions, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (entry.compareTo(this.entry,Precisions, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (entry.compareTo(this.entry,Precision, 1d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (entry.compareTo(this.entry,Precision, 1d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (entry.compareTo(A, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (entry.compareTo(A, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (entry.compareTo(source,Precision, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (entry.compareTo(source,Precision, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (entry.compareTo(toDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (entry.compareTo(toDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (entry.compareTo(cascadeOfDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (entry.compareTo(cascadeOfDrop, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (entry.compareTo(synchronVariableName, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (entry.compareTo(synchronVariableName, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (entry.compareTo(loadDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (entry.compareTo(loadDrop, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (entry.compareTo(this.start,Precision, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (entry.compareTo(this.start,Precision, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (entry.compareTo(loadDrop, entry, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (entry.compareTo(mask, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (entry.compareTo(mask, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (entry.compareTo(this.entry, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (entry.compareTo(this.entry, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (entry.compareTo(BASIC, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (entry.compareTo(BASIC, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (entry.compareTo(this.entry,Precision, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (entry.compareTo(this.entry,Precision, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (entry.compareTo(this.entry,Precisions, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (entry.compareTo(this.entry,Precisions, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (entry.compareTo(si, entry, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (entry.compareTo(si, entry, 0d, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (entry.compareTo(content, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (entry.compareTo(content, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (entry.compareTo(this.entry, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (entry.compareTo(this.entry, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (entry.compareTo(si, entry, 0d, maxUlps > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (entry.compareTo(si, entry, 0d, maxUlps > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (entry.compareTo(this.system, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (entry.compareTo(this.system, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (entry.compareTo(synchronVariableName, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (entry.compareTo(synchronVariableName, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (entry.compareTo(BASIC, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (entry.compareTo(BASIC, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (entry.compareTo(this.entry,Precision, max testDeleteps) > 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (entry.compareTo(this.entry,Precision, max testDeleteps) > 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (entry.compareTo(this.start, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (entry.compareTo(this.start, entry, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (entry.compareTo(content, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (entry.compareTo(content, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (entry.compareTo(complete,Precision, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (entry.compareTo(complete,Precision, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (entry.compareTo(A,Precision, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (entry.compareTo(A,Precision, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (entry.compareTo(normal,Precision, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (entry.compareTo(normal,Precision, 0d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (entry.compareTo(this.entry,PrecisionPrecision, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (entry.compareTo(this.entry,PrecisionPrecision, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (entry.compareTo(this.entry,Precision, count > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (entry.compareTo(this.entry,Precision, count > 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (entry.compareTo(offs, entry, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (entry.compareTo(offs, entry, maxUlps) >= 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (entry.compareTo(publicKey, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (entry.compareTo(publicKey, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (entry.compareTo(this.entry,Precision, 1d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (entry.compareTo(this.entry,Precision, 1d, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (entry.compareTo(d, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (entry.compareTo(d, entry, maxUlps) == 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (entry.compareTo(source,Precision, maxUlps) > 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (entry.compareTo(source,Precision, maxUlps) > 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (Precision.compareTo(entry, 0d, maxUlps) > 0) {",
        "fixed_line": "if (Precision.compareTo(entry, 0d, epsilon) > 0) {"
    },
    "JacksonDatabind-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parser);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parser);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _parser);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _parser);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return _bindAndReadValues.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return _bindAndReadValues.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parser;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parser;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return _bindAndReadValues.createParser(src), _parserFactory.createParser(src);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return _bindAndReadValues.createParser(src), _parserFactory.createParser(src);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), _parser);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), _parser);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), _parser);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), _parser);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFactory;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFactory;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFactory.createParser(src);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFactory.createParser(src);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders.createParser(src);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders.createParser(src);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _typeFactory);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _typeFactory);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return _dataFormatReaders.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _dataFormatReaders.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserDReaders);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserDReaders);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return _bindAndReadValues.createParser(src), _parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return _bindAndReadValues.createParser(src), _parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), offset;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), offset;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), offset;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return _bindAndReadValues(_dataFormatReaders.createParser(src), offset;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory.createParser(src);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return _bindAndReadValues(_dataFormatReadersFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return _bindAndReadValues(_dataFormatReadersFactory.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _masterAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return _masterAndReadValues(_parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return _masterAndReadValues(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _masterAndReadValues(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parser[src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parser[src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFeaturesToChange);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFeaturesToChange);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return _pReadValues(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return _pReadValues(_parserFactory.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return _dataFormatReaders.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return _dataFormatReaders.createParser(src), _parserFactory);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory, _parserFactory);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFeatures;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFeatures;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), query);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), query);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _parser;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), _parser;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserFactory.createParser(src), _dataFormatReaders);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserparserFactory);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parserparserFactory);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), JSON_NODE_TYPE);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), JSON_NODE_TYPE);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _dataFormatReaders.createParser(src), offset);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parser[src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return _bindAndReadValues(_parserFactory.createParser(src), _parser[src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _bindAndReadValues.createParser(src), _parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return _bindAndReadValues.createParser(src), _parserFactory.createParser(src), _dataFormatReaders;",
                "identical": false
            }
        ],
        "buggy_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src),",
        "fixed_line": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length),"
    },
    "JacksonCore-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i < 0) { // all ASCII",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (i < 0) { // all ASCII",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (i < 0) { // all; these are last 6 bits",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (i < 0) { // all; these are last 6 bits",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (i < 0) { // all digits",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (i < 0) { // all digits",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c <= _maxSpecialChar) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c <= _maxSpecialChar) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (i < 0) { // all within buffer",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i < 0) { // all within buffer",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c == d) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c == d) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i == len) { // all within buffer",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (i == len) { // all within buffer",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (i == c) { // all within buffer",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (i == c) { // all within buffer",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c == _separatorChar) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c == _separatorChar) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i == c) { // all ASCII",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i == c) { // all ASCII",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i == c - 1) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (i == c - 1) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c == d) { // end of line is end of value, yay!",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c == d) { // end of line is end of value, yay!",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (i == len) { // all ASCII",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (i == len) { // all ASCII",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c == q) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c == q) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c == d) { // end of record or input",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c == d) { // end of record or input",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i == c - 1) { // all within buffer",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i == c - 1) { // all within buffer",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (i == len) { // all good, nope",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i == len) { // all good, nope",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (i == len) { // not match? Just don't deposit",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (i == len) { // not match? Just don't deposit",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (i < c) { // all within buffer",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i < c) { // all within buffer",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i < 0) { // all one later on",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i < 0) { // all one later on",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i == _separatorChar) { // all within buffer",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (i == _separatorChar) { // all within buffer",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c == d) { // end of record or input buffer, but not necessarily chunk",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c == d) { // end of record or input buffer, but not necessarily chunk",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (i < 0) { // all good!",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i < 0) { // all good!",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i < 0) { // all; these we hit the end of input buffer",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (i < 0) { // all; these we hit the end of input buffer",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i < 0) { // all; these are last byte",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i < 0) { // all; these are last byte",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (i < 0) { // all; these we hit the end of record or input",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i < 0) { // all; these we hit the end of record or input",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (i == _separatorChar) { // all ASCII",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (i == _separatorChar) { // all ASCII",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c == d) { // end of line is end of value, but not-of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c == d) { // end of line is end of value, but not-of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i < 0) { // all one minor complication",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i < 0) { // all one minor complication",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i < 0) { // all; these we can this ever occur?",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i < 0) { // all; these we can this ever occur?",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i < 0) { // all one later with",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i < 0) { // all one later with",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (i < 0) { // all one this ever occur?",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i < 0) { // all one this ever occur?",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i < 0) { // all; these are we hit the end of input buffer",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (i < 0) { // all; these are we hit the end of input buffer",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c == esc) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c == esc) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (i == c - 1) { // end of line is end of value, yay!",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i == c - 1) { // end of line is end of value, yay!",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c == _escapeChar) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c == _escapeChar) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (i == c - 1) { // end of line is end of value, but not-of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i == c - 1) { // end of line is end of value, but not-of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c == _separatorChar) { // end of record or input buffer, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c == _separatorChar) { // end of record or input buffer, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c == d) { // end of line is end of value, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c == d) { // end of line is end of value, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c == d) { // end of record or input buffer, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c == d) { // end of record or input buffer, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (i == c - 1) { // end of line is end of value, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (i == c - 1) { // end of line is end of value, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (i == c - 1) { // end of line is end of value,of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (i == c - 1) { // end of line is end of value,of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c == d) { // end of line is end of value,of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c == d) { // end of line is end of value,of-line can't be yet skipped",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i < 0) { // all one later with all; these are last 6 bits",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i < 0) { // all one later with all; these are last 6 bits",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (i == c) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (i == c) { // end of value, yay!",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i == len) { // not match? Just don't do",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (i == len) { // not match? Just don't do",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (i == c) { // not found the end of value, yay!",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (i == c) { // not found the end of value, yay!",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i < 0) { // all; do we have at most 2 triplets...",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (i < 0) { // all; do we have at most 2 triplets...",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (i == len - 1) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (i == len - 1) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i == c) { // all one minor complication",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i == c) { // all one minor complication",
                "identical": false
            }
        ],
        "buggy_line": "if (i <= maxCode) {",
        "fixed_line": "if (i < maxCode) {"
    },
    "Lang-6": {
        "fixes": [
            {
                "k": 1,
                "patch": "pos += Character.charCount;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "pos += Character.charCount;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "pos += Character.charCount(codePointAt, pos, pt);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "pos += Character.charCount(codePointAt, pos, pt);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "pos += Character.charCount(codePointAt, pos);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "pos += Character.charCount(codePointAt, pos);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "pos += Character.charCount(codePoint, pos, pt);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "pos += Character.charCount(codePoint, pos, pt);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "pos += Character.charCount(codePointAt, pos - pt;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "pos += Character.charCount(codePointAt, pos - pt;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "pos += Character.charCount(codePointAt, pos;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "pos += Character.charCount(codePointAt, pos;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "pos += Character.charCount(codePoint, pt);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "pos += Character.charCount(codePoint, pt);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "pos += Character.charCount(codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "pos += Character.charCount(codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "pos += Character.charCount(codePointAt, pt);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "pos += Character.charCount(codePointAt, pt);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "pos += Character.charCount(codePointAt, pos + pt;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "pos += Character.charCount(codePointAt, pos + pt;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "pos += Character.charCountPerCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "pos += Character.charCountPerCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "pos += Character.charCount(codePointAt, pos - 1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "pos += Character.charCount(codePointAt, pos - 1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "pos += Character.charCount(codePointAt, pos) + 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "pos += Character.charCount(codePointAt, pos) + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "pos += Character.charCountPerNode.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "pos += Character.charCountPerNode.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "pos += Character.charCount(codePoint, pt, pos);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "pos += Character.charCount(codePoint, pt, pos);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "pos += Character.charCount(codePointAtStart, pos);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "pos += Character.charCount(codePointAtStart, pos);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "pos += Character.charCount(codePointAt, pos - pt);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "pos += Character.charCount(codePointAt, pos - pt);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "pos += Character.charCountTail.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "pos += Character.charCountTail.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "pos += Character.charCount(codePointAt, pos) + pt;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "pos += Character.charCount(codePointAt, pos) + pt;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "pos += Character.charCount(codePointAt, pos - pt.length;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "pos += Character.charCount(codePointAt, pos - pt.length;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "pos += Character.charCount(codePoint, pt;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "pos += Character.charCount(codePoint, pt;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "pos += Character.charCount(codePointAt, pos pos;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "pos += Character.charCount(codePointAt, pos pos;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "pos += Character.charCountj.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "pos += Character.charCountj.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "pos += Character.charCount(codePoint, pt, options);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "pos += Character.charCount(codePoint, pt, options);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "pos += Character.charCountBeforeCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "pos += Character.charCountBeforeCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "pos += Character.charCount(pos, pt);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "pos += Character.charCount(pos, pt);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "pos += Character.charCount(codePoint, pt,resultPointAt;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "pos += Character.charCount(codePoint, pt,resultPointAt;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "pos += Character.charCountedCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "pos += Character.charCountedCharacter.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "pos += Character.charCount(codePoint, pt.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "pos += Character.charCount(codePoint, pt.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "pos += Character.charCount ret.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "pos += Character.charCount ret.codePointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "pos += Character.charCount(codePointAt, pos - extraStart;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "pos += Character.charCount(codePointAt, pos - extraStart;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "pos += Character.charCount_QUAt(pos, pt);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "pos += Character.charCount_QUAt(pos, pt);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "pos += Character.charCount(codePointAt, pos - extraSize;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "pos += Character.charCount(codePointAt, pos - extraSize;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "pos += Character.charCount(codePoint, pt, one);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "pos += Character.charCount(codePoint, pt, one);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "pos += Character.charCount(codePointAt, pos - extraCols;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "pos += Character.charCount(codePointAt, pos - extraCols;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "pos += Character.charCount(codePoint, pt, context);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "pos += Character.charCount(codePoint, pt, context);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "pos += Character.charCount(codePointAt, pos - extraPointAt;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "pos += Character.charCount(codePointAt, pos - extraPointAt;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "pos += Character.charCount(codePoint, pt, m;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "pos += Character.charCount(codePoint, pt, m;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "pos += Character.charCount(codePoint, pt, skip);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "pos += Character.charCount(codePoint, pt, skip);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "pos += Character.charCount(codePoint, pt, NAME;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "pos += Character.charCount(codePoint, pt, NAME;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "pos += Character.charCount(codePoint, pt, originalSize;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "pos += Character.charCount(codePoint, pt, originalSize;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "pos += Character.charCount(codePointAt, pos + pt);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "pos += Character.charCount(codePointAt, pos + pt);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "pos += Character.charCount(codePointAt, pos));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "pos += Character.charCount(codePointAt, pos));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "pos += Character.charCount(codePoint, pos - pt;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "pos += Character.charCount(codePoint, pos - pt;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "pos += Character.charCount(codePointAt, pos, args);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "pos += Character.charCount(codePointAt, pos, args);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "pos += Character.charCountCharPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "pos += Character.charCountCharPointAt(pos, pt);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "pos += Character.charCount(codePointAt, pt;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "pos += Character.charCount(codePointAt, pt;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "pos += Character.charCount(codePoint, pos + pt;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "pos += Character.charCount(codePoint, pos + pt;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "pos += Character.charCount(codePointAt, pos) + extra;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "pos += Character.charCount(codePointAt, pos) + extra;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "pos += Character.charCount(codePoint, pos);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "pos += Character.charCount(codePoint, pos);",
                "identical": false
            }
        ],
        "buggy_line": "pos += Character.charCount(Character.codePointAt(input, pos));",
        "fixed_line": "pos += Character.charCount(Character.codePointAt(input, pt));"
    },
    "Closure-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (target != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (target != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we are we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we are we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if (target != null if we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if (target != null if we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we are we don't support getting the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we are we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we are we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we are we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we are we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't know if (target != null",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't know if (target != null",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if (target != null",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if (target != null",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we are we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we are we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if (target != null",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if (target != null",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if (target != null if we are we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if (target != null if we are we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we are we don't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we are we don't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't support getting the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't know if there's an array",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't know if there's an array",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if we don't know if (target != null",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if we don't know if (target != null",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if there's an array",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if there's an array",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if we don't know if there's an array",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if we don't know if there's an array",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if we don't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if we don't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we support such coercion?",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't know if we don't know if we don't know if we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw't know if we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if there's an array",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if we don't know if there's an array",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if (target != null",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (target != null) { // if it's not yet; should be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'id't know if we don't know if (target != null",
                "identical": false
            }
        ],
        "buggy_line": "if (target != null) {",
        "fixed_line": "if (target != null && target.getType() == Token.STRING) {"
    },
    "Codec-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "25, 26, 27, 28,RELATION_HEADER, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "25, 26, 27, 28,RELATION_HEADER, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "25, 26, 27, 28, 1). -1, -1, -1);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "25, 26, 27, 28, 1). -1, -1, -1);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "25, 26, 27, 28, 1). -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "25, 26, 27, 28, 1). -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "25, 26, 27, 28,)), -1, -1, -1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "25, 26, 27, 28,)), -1, -1, -1);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "25, 26, 27, 28, 29,.length, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "25, 26, 27, 28, 29,.length, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "25, 26, 27, 28, 1). -1, -1, 0, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "25, 26, 27, 28, 1). -1, -1, 0, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "25, 26, 27, 28, 29,StandardCharsets.length, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "25, 26, 27, 28, 29,StandardCharsets.length, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "25, 26, 27, 28, 29,Split MINUS -1, -1, -1);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "25, 26, 27, 28, 29,Split MINUS -1, -1, -1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + 1 - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + 1 - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, -180478, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, -180478, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "25, 26, 27, 28,Up };",
                "identical": false
            },
            {
                "k": 34,
                "patch": "25, 26, 27, 28,Up };",
                "identical": false
            },
            {
                "k": 35,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "25, 26, 27, 28, 29,strokestroke -1, -1, -1);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "25, 26, 27, 28, 29,strokestroke -1, -1, -1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -180478, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -180478, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "25, 26, 27, 28,RELATION_HEADER, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "25, 26, 27, 28,RELATION_HEADER, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "25, 26, 27, 28,)), -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "25, 26, 27, 28,)), -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, 0x00, 2 -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, 0x00, 2 -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, NO_VALUE : -1, -1, -1);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, NO_VALUE : -1, -1, -1);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "25, 26, 27, 28,RELATION_HEADERS_ -1, -1, -1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "25, 26, 27, 28,RELATION_HEADERS_ -1, -1, -1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, NO_VALUE, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, NO_VALUE, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "25, 26, 27, 28, 29,Split greaterThan -1, -1, -1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "25, 26, 27, 28, 29,Split greaterThan -1, -1, -1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "25, 26, 27, 28,RELATION_CODED_ -1, -1, -1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "25, 26, 27, 28,RELATION_CODED_ -1, -1, -1);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, NO_VALUE - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, NO_VALUE - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1808, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1808, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, NO_VALUEVALUE - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, NO_VALUEVALUE - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "25, 26, 27, 28, 29,Split greaterThan -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "25, 26, 27, 28, 29,Split greaterThan -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1 - 0, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1 - 0, 0, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "25, 26, 27, 28, 29, Direction -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "25, 26, 27, 28, 29, Direction -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "25, 26, 27, 28, 29,Split MINUS -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "25, 26, 27, 28, 29,Split MINUS -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "25, 26, 27, 28, 29,petId };",
                "identical": false
            },
            {
                "k": 74,
                "patch": "25, 26, 27, 28, 29,petId };",
                "identical": false
            },
            {
                "k": 75,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -2, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "25, 26, 27, 28, 29, Direction -1, -1, -1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "25, 26, 27, 28, 29, Direction -1, -1, -1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, 0x00, 2 -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, 0x00, 2 -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + 1 - -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + 1 - -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, 0x00, 2 -1, -1, -1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, 0x00, 2 -1, -1, -1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -18080 - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -18080 - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, 0x00;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, 0x00;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1 - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1 - -1, -1, -1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "25, 26, 27, 28, 29,Split30,30,30,30, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "25, 26, 27, 28, 29,Split30,30,30,30, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1 - 0, 0, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "25, 26, 27, 28, 6, 6, -1, -1, -1, -1 - 0, 0, -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, 0x00, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "25, 26, 27, 28, 6, -1, -1, -1, 0x00, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + -1, -1, -1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "25, 26, 27, 28,RELATION_ON_INDEX + -1, -1, -1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "25, 26, 27, 28, 29, Direction Direction -1, -1, -1, -1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "25, 26, 27, 28, 29, Direction Direction -1, -1, -1, -1);",
                "identical": false
            }
        ],
        "buggy_line": "25, 26, 27, 28, 29, 30, 31, 32,",
        "fixed_line": "25, 26, 27, 28, 29, 30, 31,                                     // 50-57 P-V"
    },
    "JacksonDatabind-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == String.class || kind == Object.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class || kind == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == String.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == String.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == String.class || raw == Object.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == String.class || raw == Object.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class || types == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || types == Object.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class || raw == Object.class.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class || raw == Object.class.class) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class || raw == Object.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || raw == Object.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class || provider == Object.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || provider == Object.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class || raw == Object.classclass) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || raw == Object.classclass) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class)",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class)",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class ||KEY == Object.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class ||KEY == Object.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class || UNKNOWN_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class || UNKNOWN_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, Object.class",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, Object.class",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class || TYPE_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == String.class || TYPE_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class)",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class)",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || !raw == Object.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || !raw == Object.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class)",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class)",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class == Object.class",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class == Object.class",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to be Object.class",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to be Object.class",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to avoid double.class",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to avoid double.class",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class || || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, String.class",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, String.class",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class)",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class)",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class == Object.class",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class == Object.class",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, Object.class",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, Object.class",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || rawValue == Object.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || rawValue == Object.class) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear, String.class",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear, String.class",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class.class",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class.class",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to handle LF later on",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Math-63": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (x.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (x.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yy)) || x == y;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yy)) || x == y;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y) || x == y;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y == 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y == 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) && x == y;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) && x == y;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x < y;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x < y;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (y.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (y.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == right;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == right;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y), x == y;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y), x == y;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == x;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == x;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == '/') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == '/') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y, x == y;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y, x == y;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) == y;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) == y;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (double.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (double.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == y;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == y;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y == x;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y == x;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || x == y;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || x == y;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == 0);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (int.x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (int.x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (int.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (int.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y || x == y;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y || x == y;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) - x == y;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) - x == y;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (x.isNaN(x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (x.isNaN(x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y, x + y;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y, x + y;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y == y;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x, y == y;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (Double.isNaN(x || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (Double.isNaN(x || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y == y;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (Double.isNaN(x) || Double.isNaN(x)) || y == y;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) ? x + y;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) ? x + y;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) { x == y;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) { x == y;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == double.class;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == double.class;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (Long.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (Long.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (Double.isNaN(x) || Double.isNaN(xx)) || y == 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (Double.isNaN(x) || Double.isNaN(xx)) || y == 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (byte.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (byte.isNaN(x) || Double.isNaN(y)) || x == y;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == right;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == right;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (Double.isNaN(x - x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (Double.isNaN(x - x) || Double.isNaN(y)) || y == 0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) { x == y; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) { x == y; }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == x;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == x;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == double.y;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == double.y;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yt || x == y;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yt || x == y;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == LEFT;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == LEFT;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == need.y;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == need.y;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == south;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || y == south;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) - y;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) - y;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yy)) || y == 0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (Double.isNaN(x) || Double.isNaN(yy)) || y == 0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)[ || x == y;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)[ || x == y;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == '/') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == '/') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == 0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (Double.isNaN(x) || Double.isNaN(y)) || x == 0);",
                "identical": false
            }
        ],
        "buggy_line": "return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
        "fixed_line": "return equals(x, y, 1);"
    },
    "JacksonDatabind-97": {
        "fixes": [
            {
                "k": 1,
                "patch": "gen.writeObject(_value);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "gen.writeObject(_value);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't modify",
                "identical": false
            },
            {
                "k": 4,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't modify",
                "identical": false
            },
            {
                "k": 5,
                "patch": "gen.writeObject(_value;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "gen.writeObject(_value;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't modify schema",
                "identical": false
            },
            {
                "k": 8,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't modify schema",
                "identical": false
            },
            {
                "k": 9,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' characters",
                "identical": false
            },
            {
                "k": 10,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' characters",
                "identical": false
            },
            {
                "k": 11,
                "patch": "gen.writeObject(_value); // can't occur but let's not yet bother",
                "identical": false
            },
            {
                "k": 12,
                "patch": "gen.writeObject(_value); // can't occur but let's not yet bother",
                "identical": false
            },
            {
                "k": 13,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' nulls but nodes",
                "identical": false
            },
            {
                "k": 14,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' nulls but nodes",
                "identical": false
            },
            {
                "k": 15,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value[like], to ensure it's not yet skipped",
                "identical": false
            },
            {
                "k": 16,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value[like], to ensure it's not yet skipped",
                "identical": false
            },
            {
                "k": 17,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value'",
                "identical": false
            },
            {
                "k": 18,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value'",
                "identical": false
            },
            {
                "k": 19,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value[like], to ensure it's not yet",
                "identical": false
            },
            {
                "k": 20,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value[like], to ensure it's not yet",
                "identical": false
            },
            {
                "k": 21,
                "patch": "gen.writeObject(_value); // can't be up to ensure we'll also check _value[like], to ensure it's not yet skipped",
                "identical": false
            },
            {
                "k": 22,
                "patch": "gen.writeObject(_value); // can't be up to ensure we'll also check _value[like], to ensure it's not yet skipped",
                "identical": false
            },
            {
                "k": 23,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 24,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 25,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value[like], to ensure it's not yet bother",
                "identical": false
            },
            {
                "k": 26,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value[like], to ensure it's not yet bother",
                "identical": false
            },
            {
                "k": 27,
                "patch": "gen.writeObject(_value); // can't be yet skipped",
                "identical": false
            },
            {
                "k": 28,
                "patch": "gen.writeObject(_value); // can't be yet skipped",
                "identical": false
            },
            {
                "k": 29,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't an array",
                "identical": false
            },
            {
                "k": 30,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't an array",
                "identical": false
            },
            {
                "k": 31,
                "patch": "gen.writeObject(_value); // can't already has to ensure we'll also check _value[like], to ensure it's not yet skipped",
                "identical": false
            },
            {
                "k": 32,
                "patch": "gen.writeObject(_value); // can't already has to ensure we'll also check _value[like], to ensure it's not yet skipped",
                "identical": false
            },
            {
                "k": 33,
                "patch": "gen.writeObject(_value); // can't be up to ensure we'll also check _value[like], to ensure it's not yet",
                "identical": false
            },
            {
                "k": 34,
                "patch": "gen.writeObject(_value); // can't be up to ensure we'll also check _value[like], to ensure it's not yet",
                "identical": false
            },
            {
                "k": 35,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or later on",
                "identical": false
            },
            {
                "k": 36,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or later on",
                "identical": false
            },
            {
                "k": 37,
                "patch": "gen.writeObject(_value); // can't be up to ensure we'll also check _value[like], to ensure it's not yet bother",
                "identical": false
            },
            {
                "k": 38,
                "patch": "gen.writeObject(_value); // can't be up to ensure we'll also check _value[like], to ensure it's not yet bother",
                "identical": false
            },
            {
                "k": 39,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' bytes",
                "identical": false
            },
            {
                "k": 40,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' bytes",
                "identical": false
            },
            {
                "k": 41,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't occur but let's not yet bother",
                "identical": false
            },
            {
                "k": 42,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't occur but let's not yet bother",
                "identical": false
            },
            {
                "k": 43,
                "patch": "gen.writeObject(_value); // can't already has to ensure we'll also check _value[like], to ensure it's not yet bother",
                "identical": false
            },
            {
                "k": 44,
                "patch": "gen.writeObject(_value); // can't already has to ensure we'll also check _value[like], to ensure it's not yet bother",
                "identical": false
            },
            {
                "k": 45,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't modify.",
                "identical": false
            },
            {
                "k": 46,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't modify.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't an int",
                "identical": false
            },
            {
                "k": 48,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't an int",
                "identical": false
            },
            {
                "k": 49,
                "patch": "gen.writeObject(_value); // can't already has to ensure we'll also check _value[like], to ensure it's not yet",
                "identical": false
            },
            {
                "k": 50,
                "patch": "gen.writeObject(_value); // can't already has to ensure we'll also check _value[like], to ensure it's not yet",
                "identical": false
            },
            {
                "k": 51,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or should check",
                "identical": false
            },
            {
                "k": 52,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or should check",
                "identical": false
            },
            {
                "k": 53,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or an array",
                "identical": false
            },
            {
                "k": 54,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or an array",
                "identical": false
            },
            {
                "k": 55,
                "patch": "gen.writeObject(_value); // can't be up to ensure we'll also check _value",
                "identical": false
            },
            {
                "k": 56,
                "patch": "gen.writeObject(_value); // can't be up to ensure we'll also check _value",
                "identical": false
            },
            {
                "k": 57,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or into the end-of-value",
                "identical": false
            },
            {
                "k": 58,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or into the end-of-value",
                "identical": false
            },
            {
                "k": 59,
                "patch": "gen.writeObject(_value); // [databind#116]",
                "identical": false
            },
            {
                "k": 60,
                "patch": "gen.writeObject(_value); // [databind#116]",
                "identical": false
            },
            {
                "k": 61,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' contextual queue",
                "identical": false
            },
            {
                "k": 62,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' contextual queue",
                "identical": false
            },
            {
                "k": 63,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value'll also check",
                "identical": false
            },
            {
                "k": 64,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value'll also check",
                "identical": false
            },
            {
                "k": 65,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or into the end-of-value.",
                "identical": false
            },
            {
                "k": 66,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or into the end-of-value.",
                "identical": false
            },
            {
                "k": 67,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't occur but let's not yet skipped",
                "identical": false
            },
            {
                "k": 68,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't occur but let's not yet skipped",
                "identical": false
            },
            {
                "k": 69,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' contextual information",
                "identical": false
            },
            {
                "k": 70,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' contextual information",
                "identical": false
            },
            {
                "k": 71,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value[like], to ensure it' characters",
                "identical": false
            },
            {
                "k": 72,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value[like], to ensure it' characters",
                "identical": false
            },
            {
                "k": 73,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't modify/o-value",
                "identical": false
            },
            {
                "k": 74,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't modify/o-value",
                "identical": false
            },
            {
                "k": 75,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value",
                "identical": false
            },
            {
                "k": 76,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value",
                "identical": false
            },
            {
                "k": 77,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't occur but just to ensure it's not yet skipped",
                "identical": false
            },
            {
                "k": 78,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't occur but just to ensure it's not yet skipped",
                "identical": false
            },
            {
                "k": 79,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or MINvalue-check;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or MINvalue-check;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't occur but nodes",
                "identical": false
            },
            {
                "k": 82,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't occur but nodes",
                "identical": false
            },
            {
                "k": 83,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' contextual throw _value;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' contextual throw _value;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "gen.writeObject(_value); // can't already has to ensure we'll also check _value",
                "identical": false
            },
            {
                "k": 86,
                "patch": "gen.writeObject(_value); // can't already has to ensure we'll also check _value",
                "identical": false
            },
            {
                "k": 87,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't be yet skipped",
                "identical": false
            },
            {
                "k": 88,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't be yet skipped",
                "identical": false
            },
            {
                "k": 89,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or into the end of record;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' or into the end of record;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "gen.writeObject(_value); // can't occur but let's not yet skipped",
                "identical": false
            },
            {
                "k": 92,
                "patch": "gen.writeObject(_value); // can't occur but let's not yet skipped",
                "identical": false
            },
            {
                "k": 93,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' contextual -= _value;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value' contextual -= _value;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _valueInstantiator",
                "identical": false
            },
            {
                "k": 96,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _valueInstantiator",
                "identical": false
            },
            {
                "k": 97,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't be yet",
                "identical": false
            },
            {
                "k": 98,
                "patch": "gen.writeObject(_value); // can not be assigned. Also declare the methods parameters as 'value't be yet",
                "identical": false
            },
            {
                "k": 99,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value[like], to ensure it's not yet as well",
                "identical": false
            },
            {
                "k": 100,
                "patch": "gen.writeObject(_value); // can't be more to ensure we'll also check _value[like], to ensure it's not yet as well",
                "identical": false
            }
        ],
        "buggy_line": "gen.writeObject(_value);",
        "fixed_line": "ctxt.defaultSerializeValue(_value, gen);"
    },
    "Math-75": {
        "fixes": [
            {
                "k": 1,
                "patch": "return getCumPct((v instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return getCumPct((v instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return getCumPct((v;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return getCumPct((v;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return getCumPct((v) v;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return getCumPct((v) v;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return getCumPct((v instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return getCumPct((v instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return getCumPct((v >>> 1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return getCumPct((v >>> 1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return getCumPct((v, v);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return getCumPct((v, v);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return getCumPct((v) v);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return getCumPct((v) v);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return getCumPct((v >>> 32<?>) v;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return getCumPct((v >>> 32<?>) v;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return getCumPct((v >>> 4);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return getCumPct((v >>> 4);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return getCumPct((v);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return getCumPct((v);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return getCumPct((visComparable<?>) v;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return getCumPct((visComparable<?>) v;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return getCumPct((v >>> 4;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return getCumPct((v >>> 4;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return getCumPct((v >>> succ<?>) v;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return getCumPct((v >>> succ<?>) v;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return getCumPct((vNode<?>) v;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return getCumPct((vNode<?>) v;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return getCumPct((vNode instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return getCumPct((vNode instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return getCumPct((visComparable<?>) v);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return getCumPct((visComparable<?>) v);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return getCumPct((v >>> this.v);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return getCumPct((v >>> this.v);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return getCumPct((v >>> _value;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return getCumPct((v >>> _value;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return getCumPct((v >>> Message<?>) v;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return getCumPct((v >>> Message<?>) v;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return getCumPct((v<Comparable<?>) v;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return getCumPct((v<Comparable<?>) v;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return getCumPct((v3, v;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return getCumPct((v3, v;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return getCumPct((v >>> 0) v;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return getCumPct((v >>> 0) v;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return getCumPct((v >>> T<?>) v;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return getCumPct((v >>> T<?>) v;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return getCumPct((v metadata instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return getCumPct((v metadata instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return getCumPct((v, _value);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return getCumPct((v, _value);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return getCumPct((vNode<Comparable<?>) v;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return getCumPct((vNode<Comparable<?>) v;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return getCumPct((von instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return getCumPct((von instanceofComparable<?>) v);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return getCumPct((v:Comparable<?>) v;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return getCumPct((v:Comparable<?>) v;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return getCumPct((v6<?>) v;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return getCumPct((v6<?>) v;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return getCumPct((v >>> reason<?>) v;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return getCumPct((v >>> reason<?>) v;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return getCumPct((v, v;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return getCumPct((v, v;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return getCumPct((v1.0<?>) v;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return getCumPct((v1.0<?>) v;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return getCumPct((v >>> 32;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return getCumPct((v >>> 32;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return getCumPct((v >>> AtomicInteger<?>) v;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return getCumPct((v >>> AtomicInteger<?>) v;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return getCumPct((v, v) v;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return getCumPct((v, v) v;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return getCumPct((v<?>) v;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return getCumPct((v<?>) v;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return getCumPct((v | v;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return getCumPct((v | v;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return getCumPct((v, v) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return getCumPct((v, v) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return getCumPct((vNode instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return getCumPct((vNode instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return getCumPct((v >>> this.v;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return getCumPct((v >>> this.v;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return getCumPct((v3, v);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return getCumPct((v3, v);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return getCumPct((v:Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return getCumPct((v:Comparable<?>) v);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return getCumPct((v != 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return getCumPct((v != 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return getCumPct((v % this.v;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return getCumPct((v % this.v;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return getCumPct((v >>> 4)];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return getCumPct((v >>> 4)];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return getCumPct((von instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return getCumPct((von instanceofComparable<?>) v;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return getCumPct((v >>> T>) v;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return getCumPct((v >>> T>) v;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return getCumPct((v instanceofComparable<?>) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return getCumPct((v instanceofComparable<?>) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return getCumPct((v >>> this.value;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return getCumPct((v >>> this.value;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return getCumPct((v >>> NReaders<?>) v;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return getCumPct((v >>> NReaders<?>) v;",
                "identical": false
            }
        ],
        "buggy_line": "return getCumPct((Comparable<?>) v);",
        "fixed_line": "return getPct((Comparable<?>) v);"
    },
    "Time-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "instantLocal, chrono, instant, iPivotYear);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "instantLocal, chrono, instant, iPivotYear);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "instantLocal, chrono, instant, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "instantLocal, chrono, instant, iLocale, deltaY);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "instantLocal, chrono, instant, iLocale, parser);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "instantLocal, chrono, instant, iLocale, parser);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "instantLocal, chrono, iLocale, instantYear);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "instantLocal, chrono, iLocale, instantYear);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "instantLocal, chrono, instantLocal, iPivotYear);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "instantLocal, chrono, instantLocal, iPivotYear);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "instantLocal, chrono, instant, date, iPivotYear);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "instantLocal, chrono, instant, date, iPivotYear);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "instantLocal, chrono, enclosing, instantLocal, iDefaultYear);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "instantLocal, chrono, enclosing, instantLocal, iDefaultYear);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "instantLocal, chrono, instantID, iPivotYear);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "instantLocal, chrono, instantID, iPivotYear);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "instantLocal, chrono, instant, date, iDefaultYear);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "instantLocal, chrono, instant, date, iDefaultYear);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "instantLocal, chrono, instant, iLocale,BEPivotYear);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "instantLocal, chrono, instant, iLocale,BEPivotYear);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "instantLocal, chrono, date, instantLocal, iPivotYear);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "instantLocal, chrono, date, instantLocal, iPivotYear);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "instantLocal, chrono, instant, iLocaleYear);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "instantLocal, chrono, instant, iLocaleYear);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "instantLocal, chrono,Run, instantLocal, iPivotYear);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "instantLocal, chrono,Run, instantLocal, iPivotYear);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "instantLocal, chrono, date, instantLocal, iDefaultYear);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "instantLocal, chrono, date, instantLocal, iDefaultYear);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "instantLocal, chrono, instant, iLocale, bindings);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "instantLocal, chrono, instant, iLocale, bindings);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "instantLocal, chrono, instant, iLocale, 1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "instantLocal, chrono, instant, iLocale, 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "instantLocal, chrono, instant, xOffsetLocaleYear);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "instantLocal, chrono, instant, xOffsetLocaleYear);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "instantLocal, chrono, instant, iDefaultYear);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "instantLocal, chrono, instant, iDefaultYear);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "instantLocal, chrono, instant, iLocale, locale);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "instantLocal, chrono, instant, iLocale, locale);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "instantLocal, chrono, instant, jLocaleYear);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "instantLocal, chrono, instant, jLocaleYear);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "instantLocal, chrono, instant, iLocale,CENTER);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "instantLocal, chrono, instant, iLocale,CENTER);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "instantLocal, chrono, instant, iLocale, instantOffset);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "instantLocal, chrono, instant, iLocale, instantOffset);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "instantLocal, chrono, instant, iLocale, this.randomYear);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "instantLocal, chrono, instant, iLocale, this.randomYear);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "instantLocal, chrono, instant, iLocale, patternOffset);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "instantLocal, chrono, instant, iLocale, patternOffset);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "instantLocal, chrono, instant, iLocale,33);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "instantLocal, chrono, instant, iLocale,33);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "instantLocal, chrono,itsPivotYear, instantLocal);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "instantLocal, chrono,itsPivotYear, instantLocal);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "instantLocal, chrono, instant, iLocale, idPivotYear);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "instantLocal, chrono, instant, iLocale, idPivotYear);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "instantLocal, chrono, instant0, iDefaultYear);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "instantLocal, chrono, instant0, iDefaultYear);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "instantLocal, chrono, instantWeight, iLocaleYear);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "instantLocal, chrono, instantWeight, iLocaleYear);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "instantLocal, chrono, instant, vDefaultYear);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "instantLocal, chrono, instant, vDefaultYear);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "instantLocal, chrono, instant, iLocale,LocalDateOffset);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "instantLocal, chrono, instant, iLocale,LocalDateOffset);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "instantLocal, chrono, instant, iLocale, JsonNodeYear);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "instantLocal, chrono, instant, iLocale, JsonNodeYear);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "instantLocal, chrono, instant, iLocale, my);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "instantLocal, chrono, instant, iLocale, my);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "instantLocal, chrono, instant, iLocale, idDefaultYear);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "instantLocal, chrono, instant, iLocale, idDefaultYear);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "instantLocal, chrono, instant, iLocale, jNumber);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "instantLocal, chrono, instant, iLocale, jNumber);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "instantLocal, chrono, instant, StringYear);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "instantLocal, chrono, instant, StringYear);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "instantLocal, chrono, instant, iLocale, jLength);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "instantLocal, chrono, instant, iLocale, jLength);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "instantLocal, chrono, instant, iLocale, payload);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "instantLocal, chrono, instant, iLocale, payload);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "instantLocal, chrono, instant, iLocale, getMaximum);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "instantLocal, chrono, instant, iLocale, getMaximum);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "instantLocal, chrono, instant, iLocale, this.USPos);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "instantLocal, chrono, instant, iLocale, this.USPos);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "instantLocal, chrono, instant, iLocale, template);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "instantLocal, chrono, instant, iLocale, template);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "instantLocal, chrono, instant, iLocale, getCharacterOffset);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "instantLocal, chrono, instant, iLocale, getCharacterOffset);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "instantLocal, chrono, instant, iLocale, pattern);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "instantLocal, chrono, instant, iLocale, pattern);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "instantLocal, chrono,quantity, instantLocal);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "instantLocal, chrono,quantity, instantLocal);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "instantLocal, chrono, instant, iLocale, getMaximumYear);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "instantLocal, chrono, instant, iLocale, getMaximumYear);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "instantLocal, chrono, instant, iLocale, templateName);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "instantLocal, chrono, instant, iLocale, templateName);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "instantLocal, chrono, date, instantLocal, iLocaleYear);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "instantLocal, chrono, date, instantLocal, iLocaleYear);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "instantLocal, chrono, instant, iLocale, myId);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "instantLocal, chrono, instant, iLocale, myId);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "instantLocal, chrono, instant, date, iLocaleYear);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "instantLocal, chrono, instant, date, iLocaleYear);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "instantLocal, chrono, instant, iLocale, instantUserId);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "instantLocal, chrono, instant, iLocale, instantUserId);",
                "identical": false
            }
        ],
        "buggy_line": "instantLocal, chrono, iLocale, iPivotYear, iDefaultYear);",
        "fixed_line": "instantLocal, chrono, iLocale, iPivotYear, chrono.year().get(instantLocal));"
    },
    "Math-69": {
        "fixes": [
            {
                "k": 1,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "out[i][j] = 1 * (1 - tDistributionRTL;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "out[i][j] = 1 * (1 - tDistributionRTL;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "out[i][j] = 1 * (1 - tDistributionComponent;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "out[i][j] = 1 * (1 - tDistributionComponent;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "out[i][j] = 2 * (1 - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "out[i][j] = 2 * (1 - 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "out[i][j] = 1 * (1 - tDistribution] = r;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "out[i][j] = 1 * (1 - tDistribution] = r;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "out[i][j] = 1 * (1 - tDistributionit.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "out[i][j] = 1 * (1 - tDistributionit.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "out[i][j] = t * (1 - tDistributionit.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "out[i][j] = t * (1 - tDistributionit.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "out[i][j] = 2 * (1 - tDistribution] = r;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "out[i][j] = 2 * (1 - tDistribution] = r;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "out[i][j] = 2 * (1 - tDistributionRTL;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "out[i][j] = 2 * (1 - tDistributionRTL;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "out[i][j] = 2 * (1 - tDistributionit.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "out[i][j] = 2 * (1 - tDistributionit.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "out[i][j] = 1 * (1 - tDistributionTypes.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "out[i][j] = 1 * (1 - tDistributionTypes.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "out[i][j] = t * (1 - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "out[i][j] = t * (1 - 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "out[i][j] = 1 * (1 - r.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "out[i][j] = 1 * (1 - r.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "out[i][j] = t * (1 - tDistribution] = r;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "out[i][j] = t * (1 - tDistribution] = r;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "out[i][j] = 1 * (1 - tDistribution.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "out[i][j] = t * (1 - tDistributionRTL;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "out[i][j] = t * (1 - tDistributionRTL;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "out[i][j] = 1 * (1 - tDistributionit.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "out[i][j] = 1 * (1 - tDistributionit.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "out[i][j] = t * (1 - tDistributionTypes.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "out[i][j] = t * (1 - tDistributionTypes.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "out[i][j] = t * (1 - tDistributionComponent;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "out[i][j] = t * (1 - tDistributionComponent;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "out[i][j] = t * (1 - tDistribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "out[i][j] = t * (1 - tDistribution.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "out[i][j] = 2 * (1 - data.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "out[i][j] = 2 * (1 - data.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "out[i][j] = 1 * (1 - tDistributionTypes.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "out[i][j] = 1 * (1 - tDistributionTypes.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "out[i][j] = 2 * (1 - r r.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "out[i][j] = 2 * (1 - r r.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(0)];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(0)];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(tPerNode)];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(tPerNode)];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t, r);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability(t, r);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "out[i][j] = t * (1 - tDistributionit.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "out[i][j] = t * (1 - tDistributionit.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability consumer,t);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbability consumer,t);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "out[i][j] = 2 * (1 - item.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "out[i][j] = 2 * (1 - item.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "out[i][j] = 2 * (1 - tDistributionComponent;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "out[i][j] = 2 * (1 - tDistributionComponent;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "out[i][j] = 2 * (1 - tDistributionit.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "out[i][j] = 2 * (1 - tDistributionit.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbabilityPanel;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "out[i][j] = 2 * (1 -Distribution.cumulativeProbabilityPanel;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "out[i][j] = 2 * (1 - 2) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "out[i][j] = 2 * (1 - 2) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "out[i][j] = 1 * (1 - tDistributionIcon;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "out[i][j] = 1 * (1 - tDistributionIcon;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "out[i][j] = 1 * (1 - r.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "out[i][j] = 1 * (1 - r.cumulativeProbability(t));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "out[i][j] = 2 * (1 - data.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "out[i][j] = 2 * (1 - data.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "out[i][j] = 1 * (1 - tDistribution Symbol.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "out[i][j] = 1 * (1 - tDistribution Symbol.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "out[i][j] = 1 * (1 - tDistributionit.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "out[i][j] = 1 * (1 - tDistributionit.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(tPerNode)];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "out[i][j] = 2 * (1 - r.cumulativeProbability(tPerNode)];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t)];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "out[i][j] = 2 * (1 - flowComponent.cumulativeProbability(t);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "out[i][j] = 2 * (1 - flowComponent.cumulativeProbability(t);",
                "identical": false
            }
        ],
        "buggy_line": "out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));",
        "fixed_line": "out[i][j] = 2 * tDistribution.cumulativeProbability(-t);"
    },
    "Lang-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (str.startsWith(\"0x\") && str.length == 1) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (str.startsWith(\"0x\") && str.length == 1) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (str.startsWith(\"0x\") && str.Kind(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (str.startsWith(\"0x\") && str.Kind(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (str.startsWith(\"0x\") && str. border.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (str.startsWith(\"0x\") && str. border.startsWith(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (str.startsWith(\"0x\") && str.equals(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (str.startsWith(\"0x\") && str.equals(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (str.startsWith(\"0x\") && str.next(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (str.startsWith(\"0x\") && str.next(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (str.startsWith(\"0x\") && str.length == 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (str.startsWith(\"0x\") && str.length == 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (str.startsWith(\"0x\") && str.length == 2) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (str.startsWith(\"0x\") && str.length == 2) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (str.startsWith(\"0x\") && str.simple(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (str.startsWith(\"0x\") && str.simple(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (str.startsWith(\"0x\") && str.length == 5) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (str.startsWith(\"0x\") && str.length == 5) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (str.startsWith(\"0x\") && str.ends(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (str.startsWith(\"0x\") && str.ends(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (str.startsWith(\"0x\") && str.length == 32) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (str.startsWith(\"0x\") && str.length == 32) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"0x\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (str.startsWith(\"0x\") && str.length == 4) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (str.startsWith(\"0x\") && str.length == 4) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (str.startsWith(\"0x\") && str.length == 126) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (str.startsWith(\"0x\") && str.length == 126) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (str.startsWith(\"0x\") && str.toUpperCase(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (str.startsWith(\"0x\") && str.toUpperCase(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (str.startsWith(\"0x\") && str.charAt(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (str.startsWith(\"0x\") && str.charAt(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (str.startsWith(\"0x\") && str.length == 204) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (str.startsWith(\"0x\") && str.length == 204) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (str.startsWith(\"0x\") && str.getValue(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (str.startsWith(\"0x\") && str.getValue(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (str.startsWith(\"0x\") && str. height(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (str.startsWith(\"0x\") && str. height(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (str.startsWith(\"0x\") && str.HEADER(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (str.startsWith(\"0x\") && str.HEADER(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (str.startsWith(\"0x\") && str.ru(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (str.startsWith(\"0x\") && str.ru(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (str.startsWith(\"0x\") && str.Page(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (str.startsWith(\"0x\") && str.Page(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (str.startsWith(\"0x\") && str.indexOf(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (str.startsWith(\"0x\") && str.indexOf(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (str.startsWith(\"0x\") && str.length == 3) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (str.startsWith(\"0x\") && str.length == 3) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (str.startsWith(\"0x\") && str.IN-0x\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (str.startsWith(\"0x\") && str.IN-0x\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (str.startsWith(\"0x\") && str.substring(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (str.startsWith(\"0x\") && str.substring(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (str.startsWith(\"0x\") && str.has(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (str.startsWith(\"0x\") && str.has(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x08\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x08\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"0\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x+1) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x+1) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (str.startsWith(\"0x\") && str. PAGE_-0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (str.startsWith(\"0x\") && str. PAGE_-0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (str.startsWith(\"0x\") && str.resolve(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (str.startsWith(\"0x\") && str.resolve(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (str.startsWith(\"0x\") && str.length == 33) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (str.startsWith(\"0x\") && str.length == 33) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (str.startsWith(\"0x\") && str.-0x\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (str.startsWith(\"0x\") && str.-0x\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (str.startsWith(\"0x\") && str.possibly(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (str.startsWith(\"0x\") && str.possibly(\"-0x\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x.\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x.\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (str.startsWith(\"0x\") && str. new-0x\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (str.startsWith(\"0x\") && str. new-0x\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-1\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-1\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\\\") {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x\\\") {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x value\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x value\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (str.startsWith(\"0x\") && str.2.-0x\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (str.startsWith(\"0x\") && str.2.-0x\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (str.startsWith(\"0x\") && str.length == 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (str.startsWith(\"0x\") && str.length == 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (str.startsWith(\"0x\") && str.1.-0x\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (str.startsWith(\"0x\") && str.1.-0x\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (str.startsWith(\"0x\") && str.length == 63) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (str.startsWith(\"0x\") && str.length == 63) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (str.startsWith(\"0x\") && str.endsWith-0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (str.startsWith(\"0x\") && str.endsWith-0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (str.startsWith(\"0x\") && str. setVersionx\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (str.startsWith(\"0x\") && str. setVersionx\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (str.startsWith(\"0x\") && str.startsWith(\"-0x",
                "identical": false
            }
        ],
        "buggy_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\")) {",
        "fixed_line": "if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {"
    },
    "JacksonDatabind-16": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (previous != null) || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (previous != null) || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (previous != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (previous != null && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (previous != null) || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (previous != null) || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (previous != null && previous.equals(ann;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (previous != null && previous.equals(ann;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (previous == null) || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (previous == null) || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (previous == null) || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (previous == null) || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (previous != null && previous.equals(ann) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (previous != null && previous.equals(ann) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (previous != null && previous.equals(ann) || _value.equals(previous;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (previous != null && previous.equals(ann) || _value.equals(previous;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (previous != null) && previous.equals(ann;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (previous != null) && previous.equals(ann;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (previous != null) && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (previous != null) && previous.equals(ann);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (previous == null || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (previous == null || previous.equals(ann);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (previous != null && previous.equals(ann) || _annotations.equals(previous;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (previous != null && previous.equals(ann) || _annotations.equals(previous;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (previous == null || previous.equals(ann) || _annotations;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (previous == null || previous.equals(ann) || _annotations;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (previous == null || previous.equals(ann) || _value.equals(previous;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (previous == null || previous.equals(ann) || _value.equals(previous;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (previous == null || previous.equals(ann) || previous.ann;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (previous == null || previous.equals(ann) || previous.ann;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (previous != null && previous.equals(ann)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (previous != null && previous.equals(ann)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (previous != null && previous.equals(ann) || _annotations;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (previous != null && previous.equals(ann) || _annotations;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (previous != null && previous.equals(ann) || _annotations.equals(ann;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (previous != null && previous.equals(ann) || _annotations.equals(ann;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (previous != null && previous.equals(ann) || previous.ann;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (previous != null && previous.equals(ann) || previous.ann;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (previous != null && previous.equals(ann) || _next.equals(ann;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (previous != null && previous.equals(ann) || _next.equals(ann;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (previous == null || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (previous == null || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (previous == null || previous.equals(ann) || _annotations.equals(ann;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (previous == null || previous.equals(ann) || _annotations.equals(ann;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (previous != null && previous.equals(previous) || _annotations.equals(ann;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (previous != null && previous.equals(previous) || _annotations.equals(ann;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (previous != null && previous.equals(ann) || _previous.equals(ann;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (previous != null && previous.equals(ann) || _previous.equals(ann;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (previous == null || previous.equals(ann) || _annotations.equals(previous;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (previous == null || previous.equals(ann) || _annotations.equals(previous;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (previous != null && previous.equals(ann) || _value.equals(ann;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (previous != null && previous.equals(ann) || _value.equals(ann;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (previous == null || previous.equals(ann) || _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (previous == null || previous.equals(ann) || _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (previous != null && previous.equals(ann) || _next.equals(previous;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (previous != null && previous.equals(ann) || _next.equals(previous;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (previous != null && previous.equals(ann) || _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (previous != null && previous.equals(ann) || _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (previous != null && previous.equals(previous);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (previous != null && previous.equals(previous);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (previous == null || previous.equals(ann) || _value.equals(ann;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (previous == null || previous.equals(ann) || _value.equals(ann;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (previous != null && previous.equals(previous) || _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (previous != null && previous.equals(previous) || _annotations.equals(ann);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (previous == null || previous.equals(ann) || _next.equals(ann;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (previous == null || previous.equals(ann) || _next.equals(ann;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (previous != null && previous.equals(ann) || _field.equals(previous;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (previous != null && previous.equals(ann) || _field.equals(previous;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (previous != null && previous.equals(previous) || _annotations;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (previous != null && previous.equals(previous) || _annotations;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (previous != null && previous.equals(ann) || _new.ann;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (previous != null && previous.equals(ann) || _new.ann;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (previous != null && previous.equals(ann) || _value.equals(ann);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (previous != null && previous.equals(ann) || _value.equals(ann);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (previous == null || previous.equals(ann) || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (previous == null || previous.equals(ann) || previous.equals(ann;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (previous != null) || previous.equals(ann) || _value.equals(previous;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (previous != null) || previous.equals(ann) || _value.equals(previous;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (previous != null && previous.equals(previous)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (previous != null && previous.equals(previous)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (previous != null && previous.equals(ann) || _property.equals(previous;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (previous != null && previous.equals(ann) || _property.equals(previous;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (previous != null && previous.equals(previous;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (previous != null && previous.equals(previous;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (previous == null || previous.equals(ann) || _value.equals(ann);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (previous == null || previous.equals(ann) || _value.equals(ann);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (previous != null && previous.equals(ann) || _n.equals(previous;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (previous != null && previous.equals(ann) || _n.equals(previous;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (previous != null && previous.equals(_ann);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (previous != null && previous.equals(_ann);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (previous != null && previous.equals(ann) || _composer.equals(previous;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (previous != null && previous.equals(ann) || _composer.equals(previous;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (previous != null && previous.equals(ann) || _working.equals(previous;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (previous != null && previous.equals(ann) || _working.equals(previous;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (previous != null && previous.equals(ann) || _parent.equals(previous;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (previous != null && previous.equals(ann) || _parent.equals(previous;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (previous != null && previous.equals(ann) || _annotations.equals(previous);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (previous != null && previous.equals(ann) || _annotations.equals(previous);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (previous == null || previous.equals(ann) || _valueType.equals(previous;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (previous == null || previous.equals(ann) || _valueType.equals(previous;",
                "identical": false
            }
        ],
        "buggy_line": "return (previous != null) && previous.equals(ann);",
        "fixed_line": "return (previous == null) || !previous.equals(ann);"
    },
    "Jsoup-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "clone.classNames;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "clone.classNames;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "clone.classNames.clone;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "clone.classNames.clone;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "clone.classNames.classNames;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "clone.classNames.classNames;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "clone.classNames != clone.classNames;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "clone.classNames != clone.classNames;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "clone.classNames[0];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "clone.classNames[0];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "clone.classNamesTo(clone);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "clone.classNamesTo(clone);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "clone.classNames != clone.classNames.clone;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "clone.classNames != clone.classNames.clone;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "clone.classNames instanceof clone.classNames;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "clone.classNames instanceof clone.classNames;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "clone.classNames = clone;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "clone.classNames = clone;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "clone.classNames.classNames.clone;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "clone.classNames.classNames.clone;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "clone.classNames.startsWith(classNames;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "clone.classNames.startsWith(classNames;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "clone.classNames.startsWith(this.classNames;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "clone.classNames.startsWith(this.classNames;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "clone.classNamesTo(clone;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "clone.classNamesTo(clone;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "clone.classNames++) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "clone.classNames++) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "clone.classNamesToCANCE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "clone.classNamesToCANCE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "clone.classNames.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "clone.classNames.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "clone.classNamesParam;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "clone.classNamesParam;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "clone.classNamesTo(this.classNames;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "clone.classNamesTo(this.classNames;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "clone.classNames.class == clone;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "clone.classNames.class == clone;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "clone.classNames.classNamesTo(clone);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "clone.classNames.classNamesTo(clone);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "clone.classNamesColumnNames.clone;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "clone.classNamesColumnNames.clone;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "clone.classNames.class == clone.clone;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "clone.classNames.class == clone.clone;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "clone.classNames();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "clone.classNames();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "clone.classNamesSaturated;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "clone.classNamesSaturated;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "clone.classNames.startsWith(classNames);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "clone.classNames.startsWith(classNames);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "clone.classNames.hasKeyNames;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "clone.classNames.hasKeyNames;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "clone.classNames.has(classNames;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "clone.classNames.has(classNames;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "clone.classNames instanceof clone.classNames.clone;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "clone.classNames instanceof clone.classNames.clone;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "clone.classNamesed;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "clone.classNamesed;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "clone.classNames.hasEnumNames;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "clone.classNames.hasEnumNames;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "clone.classNames.clone = clone;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "clone.classNames.clone = clone;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "clone.classNames.class == clone.class;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "clone.classNames.class == clone.class;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "clone.classNames.class;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "clone.classNames.class;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "clone.classNamesTo(this.classNames);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "clone.classNamesTo(this.classNames);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "clone.classNames instanceof clone.clone;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "clone.classNames instanceof clone.clone;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "clone.classNames.classNamesTo(clone;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "clone.classNames.classNamesTo(clone;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "clone.classNamesTo(classNames);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "clone.classNamesTo(classNames);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "clone.classNamesToinitialinitial;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "clone.classNamesToinitialinitial;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "clone.classNamesS;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "clone.classNamesS;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "clone.classNamesTo(classNames;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "clone.classNamesTo(classNames;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "clone.classNames instanceof clone;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "clone.classNames instanceof clone;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "clone.classNames.clone();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "clone.classNames.clone();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "clone.classNames.startsWith(this.classNames);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "clone.classNames.startsWith(this.classNames);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "clone.classNames){",
                "identical": false
            },
            {
                "k": 88,
                "patch": "clone.classNames){",
                "identical": false
            },
            {
                "k": 89,
                "patch": "clone.classNamesExpr;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "clone.classNamesExpr;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "clone.classNames.has(clone);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "clone.classNames.has(clone);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "clone.classNames.resolve(classNames;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "clone.classNames.resolve(classNames;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "clone.classNamesCANCE;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "clone.classNamesCANCE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "clone.classNames<>(clone;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "clone.classNames<>(clone;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "clone.classNames.hasCharsetName;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "clone.classNames.hasCharsetName;",
                "identical": false
            }
        ],
        "buggy_line": "clone.classNames();",
        "fixed_line": "clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames"
    },
    "Math-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "return NO_FEATURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return NO_FEATURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return ZERO;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return ZERO;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return NO_FEATURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return NO_FEATURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return \"-_FEATURE_SKIP_FIRST;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return \"-_FEATURE_SKIP_FIRST;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return max;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return max;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it's not yet bother",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it's not yet bother",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return \"-_FEATURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return \"-_FEATURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return \"-_FEATURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return \"-_FEATURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it's not yet bother",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it's not yet bother",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JOIN",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JOIN",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return NO_FEATURE_SKIP_FIRST;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return NO_FEATURE_SKIP_FIRST;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-()",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-()",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _isNaN;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _isNaN;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not yet bother",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not yet bother",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it's not yetD;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it's not yetD;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the end of record or input",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return NO_COLUMNS; // need to ensure we don't know the end of record or input",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it't how much was already got it's not yet bother",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it't how much was already got it's not yet bother",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-only",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-only",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return composed;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return composed;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it!",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it!",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't need not yet bother",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't need not yet bother",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it's not yet skipped",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it's not yet skipped",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-LE",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-LE",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-of-line means we need not yet bother",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-of-line means we need not yet bother",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yet bother",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yet bother",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yetD;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yetD;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return NO_COLUMNS; // 0.0 0.0 it's not yet [JACKSON-only",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return NO_COLUMNS; // 0.0 0.0 it's not yet [JACKSON-only",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return NO_COLUMNS; // 0.0 0.0 it's not yet [JACKSON-line means we need not yet bother",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return NO_COLUMNS; // 0.0 0.0 it's not yet [JACKSON-line means we need not yet bother",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return NO_FEATURE_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return NO_FEATURE_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON- ? 1 : 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON- ? 1 : 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yet\"",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yet\"",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need to escape.",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need to escape.",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-of-line means end of record;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-of-line means end of record;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how we need not yet bother",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how we need not yet bother",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return \"-_FEATURE_ALLOW_COMMENTS;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return \"-_FEATURE_ALLOW_COMMENTS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it...",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it...",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet bother",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet bother",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not already got it't how we need not yet bother",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not already got it't how we need not yet bother",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already '#'t need not yet bother",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already '#'t need not yet bother",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yet [JACKSON-() {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yet [JACKSON-() {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yet [JOIN",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yet [JOIN",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-() {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-() {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-public, 0.0)",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-public, 0.0)",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yetDONAR",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it's not yetDONAR",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it's",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it's",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it't how much was already got it!",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return NO_COLUMNS; // need to ensure we don't how much was already got it't how much was already got it't how much was already got it!",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return NO_FEATURE_ALLOW_PRINTER;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return NO_FEATURE_ALLOW_PRINTER;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it't how we need not yet bother",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check it't how we need not yet bother",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check the next one",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return NO_COLUMNS; // need to endpoint it's not yet [JACKSON-line means we need not check the next one",
                "identical": false
            }
        ],
        "buggy_line": "return NaN;",
        "fixed_line": "return INF;"
    },
    "Mockito-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "primitiveValues.put(double.class, 0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "primitiveValues.put(double.class, 0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "primitiveValues.put(double.class, 1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "primitiveValues.put(double.class, 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "primitiveValues.put(double.class,primitiveValues);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "primitiveValues.put(double.class,primitiveValues);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "primitiveValues.put(double.class, 0, 0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "primitiveValues.put(double.class, 0, 0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "primitiveValues.put(double.class, shortValues);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "primitiveValues.put(double.class, shortValues);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "primitiveValues.put(double.class, tmpValues);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "primitiveValues.put(double.class, tmpValues);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "primitiveValues.put(double.class, 0, 1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "primitiveValues.put(double.class, 0, 1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "primitiveValues.put(double.class, outputdouble.class);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "primitiveValues.put(double.class, outputdouble.class);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "primitiveValues.put(double.class, short.class);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "primitiveValues.put(double.class, short.class);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "primitiveValues.put(double.class, persistedValues);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "primitiveValues.put(double.class, persistedValues);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "primitiveValues.put(double.class, long.class);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "primitiveValues.put(double.class, long.class);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "primitiveValues.put(double.class, 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "primitiveValues.put(double.class, 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "primitiveValues.put(double.class,tmpValues);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "primitiveValues.put(double.class,tmpValues);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "primitiveValues.put(double.class, double.class);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "primitiveValues.put(double.class, double.class);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "primitiveValues.put(double.class, null);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "primitiveValues.put(double.class, null);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "primitiveValues.put(double.class, float.class);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "primitiveValues.put(double.class, float.class);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "primitiveValues.put(double.class, count);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "primitiveValues.put(double.class, count);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "primitiveValues.put(double.class,double.class);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "primitiveValues.put(double.class,double.class);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "primitiveValues.put(double.class, builder.class);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "primitiveValues.put(double.class, builder.class);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "primitiveValues.put(double.class, assumeValues);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "primitiveValues.put(double.class, assumeValues);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "primitiveValues.put(double.class, deviceValues);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "primitiveValues.put(double.class, deviceValues);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "primitiveValues.put(double.class, NO_class);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "primitiveValues.put(double.class, NO_class);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "primitiveValues.put(double.class,primitiveValues.class);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "primitiveValues.put(double.class,primitiveValues.class);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "primitiveValues.put(double.class, aliasValues);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "primitiveValues.put(double.class, aliasValues);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "primitiveValues.put(double.class, 2);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "primitiveValues.put(double.class, 2);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "primitiveValues.put(double.class, 60000Values);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "primitiveValues.put(double.class, 60000Values);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "primitiveValues.put(double.class, progressValues);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "primitiveValues.put(double.class, progressValues);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "primitiveValues.put(double.class,primitiveValue);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "primitiveValues.put(double.class,primitiveValue);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "primitiveValues.put(double.class, NOSON_DELIMITER);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "primitiveValues.put(double.class, NOSON_DELIMITER);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "primitiveValues.put(double.class,themeValues);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "primitiveValues.put(double.class,themeValues);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "primitiveValues.put(double.class, sectionValues);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "primitiveValues.put(double.class, sectionValues);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "primitiveValues.put(double.class, NOSON_class);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "primitiveValues.put(double.class, NOSON_class);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "primitiveValues.put(double.class, proValues);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "primitiveValues.put(double.class, proValues);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "primitiveValues.put(double.class, IdentValues);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "primitiveValues.put(double.class, IdentValues);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "primitiveValues.put(double.class, pathValue);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "primitiveValues.put(double.class, pathValue);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "primitiveValues.put(double.class,frameworkValues);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "primitiveValues.put(double.class,frameworkValues);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "primitiveValues.put(double.class, widthValue);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "primitiveValues.put(double.class, widthValue);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "primitiveValues.put(double.class, optimize);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "primitiveValues.put(double.class, optimize);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "primitiveValues.put(double.class, vertexValues);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "primitiveValues.put(double.class, vertexValues);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "primitiveValues.put(double.class, getHeightValues);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "primitiveValues.put(double.class, getHeightValues);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "primitiveValues.put(double.class,SeparValues);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "primitiveValues.put(double.class,SeparValues);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "primitiveValues.put(double.class, TextAreaValues);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "primitiveValues.put(double.class, TextAreaValues);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "primitiveValues.put(double.class, builder.primitiveValues);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "primitiveValues.put(double.class, builder.primitiveValues);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "primitiveValues.put(double.class, username);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "primitiveValues.put(double.class, username);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "primitiveValues.put(double.class,CATEGORYValues);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "primitiveValues.put(double.class,CATEGORYValues);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "primitiveValues.put(double.class, shortValues.class);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "primitiveValues.put(double.class, shortValues.class);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "primitiveValues.put(double.class, outputdouble);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "primitiveValues.put(double.class, outputdouble);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "primitiveValues.put(double.class, origin);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "primitiveValues.put(double.class, origin);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "primitiveValues.put(double.class, NIL);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "primitiveValues.put(double.class, NIL);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "primitiveValues.put(double.class, 1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "primitiveValues.put(double.class, 1);",
                "identical": false
            }
        ],
        "buggy_line": "primitiveValues.put(double.class, 0);",
        "fixed_line": "primitiveValues.put(double.class, 0D);"
    },
    "JacksonDatabind-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignored.getIgnored();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignored.getIgnored();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignored.getIgnored;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignored.getIgnored;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = explicitorals.getIgnored;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = explicitorals.getIgnored;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored =capitalorals.getIgnored;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored =capitalorals.getIgnored;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = explicitorals.getIgnored();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = explicitorals.getIgnored();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignoredAny.getIgnored();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignoredAny.getIgnored();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = reasonorals.getIgnored;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = reasonorals.getIgnored;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = ignorals.getIgnored + ignoreAny;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = ignorals.getIgnored + ignoreAny;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignorals.getIgnored++) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignorals.getIgnored++) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = ignorals.getIgnored + 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = ignorals.getIgnored + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = anyAny.getIgnored();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = anyAny.getIgnored();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = reasonorals.getIgnored();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = reasonorals.getIgnored();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getIgnoredUTATED;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = ignorals.getIgnoredUTATED;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getIgnored<>(repairAny;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignorals.getIgnored<>(repairAny;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignorals.getIgnored<>(repairAny);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignorals.getIgnored<>(repairAny);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignorals.getIgnored DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignorals.getIgnored DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = ignorals.getIgnored<>(modelName);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignorals.getIgnored<>(modelName);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignorals.getIgnored - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = ignorals.getIgnored - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored =capitalorals.getIgnored();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored =capitalorals.getIgnored();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored =Zorals.getIgnored;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored =Zorals.getIgnored;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getIgnored<>(repairAny)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignorals.getIgnored<>(repairAny)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignorals.getIgnored BET;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignorals.getIgnored BET;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.getIgnored + 1, ignorals;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = ignorals.getIgnored + 1, ignorals;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored =ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored =ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = georals.getIgnored;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = georals.getIgnored;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = Korals.getIgnored;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = Korals.getIgnored;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignorals.getIgnored<>(hasAny)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignorals.getIgnored<>(hasAny)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = }, ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = }, ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = getDescriptororals.getIgnored;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = getDescriptororals.getIgnored;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = includeorals.getIgnored;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = includeorals.getIgnored;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignorals.getIgnored+1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = ignorals.getIgnored+1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored =DECorals.getIgnored;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored =DECorals.getIgnored;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored =minuteorals.getIgnored;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored =minuteorals.getIgnored;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = parsedToals.getIgnored;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = parsedToals.getIgnored;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignorals.getIgnored ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignorals.getIgnored ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored =DSorals.getIgnored;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored =DSorals.getIgnored;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignoredAny.getIgnored;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ignoredAny.getIgnored;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getIgnored<>(hasAny;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignorals.getIgnored<>(hasAny;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ABorals.getIgnored;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ABorals.getIgnored;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignorals.getIgnored battery;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = ignorals.getIgnored battery;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored =OrUpdateorals.getIgnored;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored =OrUpdateorals.getIgnored;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = }, ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = }, ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignorals.getIgnored<>(dayAny;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignorals.getIgnored<>(dayAny;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Codec-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (lineSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (lineSeparator == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (lineSeparator == 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (inAvro_TABLE_END_OF_STRING == 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (inAvro_TABLE_END_OF_STRING == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (lineNumber == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (lineNumber == 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (lineSeparator.length < 1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (lineSeparator.length < 1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (i < 0) { // or multi-byte",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i < 0) { // or multi-byte",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i < 0) { // EOF at most 2 triplets...",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (i < 0) { // EOF at most 2 triplets...",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (i > 0) { // note: must shuffle both regular properties and filtered",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (i > 0) { // note: must shuffle both regular properties and filtered",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next uncolored",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next uncolored",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next uncolored vertex",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next uncolored vertex",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i < 0) { //% of lineSeparator, should have at most 2 triplets...",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (i < 0) { //% of lineSeparator, should have at most 2 triplets...",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i < 0) { //% of lineSeparator, should have at least 1",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (i < 0) { //% of lineSeparator, should have at least 1",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (inAvro_TABLE_END_OF_STRING == 1) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (inAvro_TABLE_END_OF_STRING == 1) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (i < 0) { // note: must shuffle both regular properties and filtered",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (i < 0) { // note: must shuffle both regular properties and filtered",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (i < 0) { //% of lineSeparator,VED_TABLE_END_OF_STRING",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i < 0) { //% of lineSeparator,VED_TABLE_END_OF_STRING",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i < 0) { //% of lineSeparator,double-lineSeparator; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i < 0) { //% of lineSeparator,double-lineSeparator; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (i < 0) { //% of lineSeparator, but do we have at most 2 triplets...",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i < 0) { //% of lineSeparator, but do we have at most 2 triplets...",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (i < 0) { // last byte",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (i < 0) { // last byte",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (cssLength > 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (cssLength > 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (inAvro_TABLE_END_OF_STRINGS.length > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (inAvro_TABLE_END_OF_STRINGS.length > 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i < 0) { //% of lineSeparator, but do we have at least 1",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (i < 0) { //% of lineSeparator, but do we have at least 1",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, proceed with the next uncolored vertex",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, proceed with the next uncolored vertex",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (i < 0) { // or multi-line can still expand",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i < 0) { // or multi-line can still expand",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next unmatched first",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next unmatched first",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, proceed with the next uncolored",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, proceed with the next uncolored",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (i < 0) { //% of lineSeparator, should have at least one",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i < 0) { //% of lineSeparator, should have at least one",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (pos < 0) { // or multi-byte",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (pos < 0) { // or multi-byte",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (currentSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (currentSeparator.length > 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i < 0) { //% of lineSeparator, should have at least 2",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i < 0) { //% of lineSeparator, should have at least 2",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i < 0) { //% of lineSeparator, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i < 0) { //% of lineSeparator, but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i < 0) { //% of lineSeparator, should have at most 2 triplets",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i < 0) { //% of lineSeparator, should have at most 2 triplets",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (lineNumber > 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (lineNumber > 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next un-line",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next un-line",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next unmatched first, proceed with the next uncolored",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next unmatched first, proceed with the next uncolored",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (lineStart >= 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (lineStart >= 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, remove the next uncolored vertex",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i < 0) { // or multi-case letter means we can getSeparator, remove the next uncolored vertex",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (i < 0) { //% of lineSeparator, should we support such coercion?",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i < 0) { //% of lineSeparator, should we support such coercion?",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (lineLength > 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (lineLength > 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (i > 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (i > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (inAvro_TABLE_END_OF_STRINGS > 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (inAvro_TABLE_END_OF_STRINGS > 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next unarraycopy",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next unarraycopy",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (inAvro_TABLE_END_OF_STRINGS + 1) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (inAvro_TABLE_END_OF_STRINGS + 1) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (lineSeparator.length != 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (lineSeparator.length != 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (currentSize == 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (currentSize == 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (i < 0) { // or IPv4-Compatible or multi-line can still expand",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (i < 0) { // or IPv4-Compatible or multi-line can still expand",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next one",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next one",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (lineSeparator.length == 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (lineSeparator.length == 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next uncolored?",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (i < 0) { //% of lineSeparator, proceed with the next uncolored?",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (lineSeparator.length > 1) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (lineSeparator.length > 1) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i < 0) { // call: must shuffle both regular properties and filtered",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i < 0) { // call: must shuffle both regular properties and filtered",
                "identical": false
            }
        ],
        "buggy_line": "if (lineLength > 0) {",
        "fixed_line": "if (lineLength > 0 && pos > 0) {"
    },
    "Lang-61": {
        "fixes": [
            {
                "k": 1,
                "patch": "int len = thisBuf.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int len = thisBuf.length - thisBuf.length;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int len = thisBuf.length - this.length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int len = thisBuf.length - this.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int len = thisBuf.length - this thisBuf.length;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int len = thisBuf.length - this thisBuf.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int len = thisBuf.length - this._index;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int len = thisBuf.length - this._index;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int len = thisBuf.length - this._outputTail;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int len = thisBuf.length - this._outputTail;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int len = thisBuf.length - this this.length;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int len = thisBuf.length - this this.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int len = thisBuf.length - this._str;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int len = thisBuf.length - this._str;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int len = thisBuf.length - this.source.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int len = thisBuf.length - this.source.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int len = thisBuf.length - start;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int len = thisBuf.length - start;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int len = thisBuf.length - this.begin;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int len = thisBuf.length - this.begin;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int len = thisBuf.length - this._inputPtr;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int len = thisBuf.length - this._inputPtr;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int len = thisBuf.length - this._input.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int len = thisBuf.length - this._input.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int len = thisBuf.length - this._inputStart;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int len = thisBuf.length - this._inputStart;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int len = thisBuf.length - 8;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int len = thisBuf.length - 8;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int len = thisBuf.length - this._textBuffer.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int len = thisBuf.length - this._textBuffer.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int len = thisBuf.length - thisBytes.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int len = thisBuf.length - thisBytes.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int len = thisBuf.length - thisQuotes.length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int len = thisBuf.length - thisQuotes.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int len = thisBuf.length - thisinator.length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int len = thisBuf.length - thisinator.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int len = thisBuf.length - thisLen;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int len = thisBuf.length - thisLen;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int len = thisBuf.length - this._inputLen;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int len = thisBuf.length - this._inputLen;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int len = thisBuf.length - this._len;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int len = thisBuf.length - this._len;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int len = thisBuf.length - this._strLen;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int len = thisBuf.length - this._strLen;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int len = thisBuf.length - this._border.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int len = thisBuf.length - this._border.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int len = thisBuf.length - this.index;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int len = thisBuf.length - this.index;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int len = thisBuf.length - this.sourceLen;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int len = thisBuf.length - this.sourceLen;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int len = thisBuf.length - this._properties.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int len = thisBuf.length - this._properties.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int len = thisBuf.length - thisProperty.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int len = thisBuf.length - thisProperty.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int len = thisBuf.length - this this.source.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int len = thisBuf.length - this this.source.length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int len = thisBuf.length - this._buffer;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int len = thisBuf.length - this._buffer;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int len = thisBuf.length - this identifierLen;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int len = thisBuf.length - this identifierLen;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int len = thisBuf.length - thisparametersLen;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int len = thisBuf.length - thisparametersLen;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int len = thisBuf.length - this Object.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int len = thisBuf.length - this Object.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int len = thisBuf.length - thisConstraintLength;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int len = thisBuf.length - thisConstraintLength;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int len = thisBuf.length - thisCalendarLen;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int len = thisBuf.length - thisCalendarLen;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int len = thisBuf.length - this._packageLen;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int len = thisBuf.length - this._packageLen;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int len = thisBuf.length - this.len;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int len = thisBuf.length - this.len;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int len = thisBuf.length - this._str.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int len = thisBuf.length - this._str.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int len = thisBuf.length - this._Embedded;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int len = thisBuf.length - this._Embedded;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int len = thisBuf.length - this2.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int len = thisBuf.length - this2.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int len = thisBuf.length - this.str;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int len = thisBuf.length - this.str;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int len = thisBuf.length - this methodLen;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int len = thisBuf.length - this methodLen;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int len = thisBuf.length - this._textLen;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int len = thisBuf.length - this._textLen;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int len = thisBuf.length - thisSequenceLen;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int len = thisBuf.length - thisSequenceLen;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int len = thisBuf.length - this._maxLength;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int len = thisBuf.length - this._maxLength;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int len = thisBuf.length - this._target;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int len = thisBuf.length - this._target;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int len = thisBuf.length - this getDefault;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int len = thisBuf.length - this getDefault;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int len = thisBuf.length - this._targetOffset;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int len = thisBuf.length - this._targetOffset;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int len = thisBuf.length - this resources;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int len = thisBuf.length - this resources;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int len = thisBuf.length - this this.begin;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int len = thisBuf.length - this this.begin;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int len = thisBuf.length - this.name;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int len = thisBuf.length - this.name;",
                "identical": false
            }
        ],
        "buggy_line": "int len = thisBuf.length - strLen;",
        "fixed_line": "int len = size - strLen + 1;"
    },
    "Chart-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "PathIterator iterator2 = p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "PathIterator iterator2 = p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1.getPathIterator;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1.getPathIterator;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIterator);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIterator);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "PathIterator iterator2 = p2.getPathIterator.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "PathIterator iterator2 = p2.getPathIterator.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "PathIterator iterator2 = p2.getPathIterator.class;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "PathIterator iterator2 = p2.getPathIterator.class;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2 );",
                "identical": false
            },
            {
                "k": 22,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2 );",
                "identical": false
            },
            {
                "k": 23,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2 = p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2 = p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "PathIterator iterator2 = iterator2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "PathIterator iterator2 = iterator2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pIdx);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pIdx);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p3);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p3);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.paramPathIterator;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.paramPathIterator;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2s);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2s);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIterator.class);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIterator.class);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2s2.getPathIterator;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2s2.getPathIterator;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pit1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pit1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1) - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1) - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pit2);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pit2);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "PathIterator iterator2 = iterator2.getPathIterator(p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "PathIterator iterator2 = iterator2.getPathIterator(p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.paramPathIterator);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.paramPathIterator);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "PathIterator iterator2 = p2.getPathIterator(ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "PathIterator iterator2 = p2.getPathIterator(ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.Basis);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.Basis);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIteratorClass;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIteratorClass;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.nextPathIterator;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.nextPathIterator;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "PathIterator iterator2 = p2.getPathIterator.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "PathIterator iterator2 = p2.getPathIterator.getPathIterator(p2);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIterator.class;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIterator.class;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.nextPathIterator);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.nextPathIterator);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "PathIterator iterator2 = p2.getPathIterator(iterator);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "PathIterator iterator2 = p2.getPathIterator(iterator);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "PathIterator iterator2 = p2.getPathIterator().length;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "PathIterator iterator2 = p2.getPathIterator().length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "PathIterator iterator2 = p2.getPathIteratorClassIterator(p2);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "PathIterator iterator2 = p2.getPathIteratorClassIterator(p2);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1.getPathIterator);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1.getPathIterator);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIterator iterator);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.getPathIterator iterator);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pEscape);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "PathIterator iterator2 = p2.getPathIterator(pEscape);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "PathIterator iterator2 = p2.getPathIterator.getPathIterator;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "PathIterator iterator2 = p2.getPathIterator.getPathIterator;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "PathIterator iterator2 = p2.getPathIteratorClassIterator(p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "PathIterator iterator2 = p2.getPathIteratorClassIterator(p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "PathIterator iterator2 = p2.getPathIterator.getPathIterator(p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "PathIterator iterator2 = p2.getPathIterator.getPathIterator(p2.getPathIterator;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "PathIterator iterator2 = p2.getPathIteratorIterator(p2);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "PathIterator iterator2 = p2.getPathIteratorIterator(p2);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.c2;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2.c2;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "PathIterator iterator2 = p2.getPathIterator(rootPathIterator);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "PathIterator iterator2 = p2.getPathIterator(rootPathIterator);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p1, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "PathIterator iterator2 = p2.getPathIterator(nextPathIterator);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "PathIterator iterator2 = p2.getPathIterator(nextPathIterator);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p0);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2).",
                "identical": false
            },
            {
                "k": 100,
                "patch": "PathIterator iterator2 = p2.getPathIterator(p2).",
                "identical": false
            }
        ],
        "buggy_line": "PathIterator iterator2 = p1.getPathIterator(null);",
        "fixed_line": "PathIterator iterator2 = p2.getPathIterator(null);"
    },
    "Math-85": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (numIterations * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (numIterations * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (numIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (numIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (numIterations * fb != 0.0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (numIterations * fb != 0.0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (element1 * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (element1 * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (numIterations * fb < 0.0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (numIterations * fb < 0.0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (initialValue * 0.0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (initialValue * 0.0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (lowerIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (lowerIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (element1 * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (element1 * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (numIterations *\u03e4 > 0.0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (numIterations *\u03e4 > 0.0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (numIterations *\u4a76 > 0.0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (numIterations *\u4a76 > 0.0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (N * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (N * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (lowerIterations * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (lowerIterations * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (pluralIterations * 0.0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (pluralIterations * 0.0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (blocked * 0.0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (blocked * 0.0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (numIterations * fb == 0.0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (numIterations * fb == 0.0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (gedIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (gedIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (numIterations *!\" > 0.0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (numIterations *!\" > 0.0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (numIterations * fb) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (numIterations * fb) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( projectName * 0.0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( projectName * 0.0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if ( ELSE * 0.0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if ( ELSE * 0.0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (nestedIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (nestedIterations * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (numIterations * 0.0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (numIterations * 0.0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (traces * 0.0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (traces * 0.0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (cache * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (cache * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( ctrl * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( ctrl * fb >= 0.0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if ( ctrl * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if ( ctrl * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if ( Requested * 0.0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if ( Requested * 0.0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (powers * 0.0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (powers * 0.0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (role * 0.0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (role * 0.0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (x * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (x * fb > 0.0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (yaml * 0.0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (yaml * 0.0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if ( labeled * 0.0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if ( labeled * 0.0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (numIterations * fb > 0.01) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (numIterations * fb > 0.01) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Sheet * 0.0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Sheet * 0.0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (attempt * 0.0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (attempt * 0.0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (400 * 0.0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (400 * 0.0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if ( initIterations * 0.0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if ( initIterations * 0.0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (stmt * 0.0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (stmt * 0.0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (canBe * 0.0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (canBe * 0.0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (oTime * 0.0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (oTime * 0.0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (=/ * 0.0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (=/ * 0.0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Tip * 0.0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (Tip * 0.0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( REMOVE * 0.0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( REMOVE * 0.0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( MediaStore * 0.0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( MediaStore * 0.0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if ( phantom * 0.0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if ( phantom * 0.0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if ( attrs * 0.0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if ( attrs * 0.0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (Existing * 0.0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (Existing * 0.0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if ( lookup * 0.0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if ( lookup * 0.0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (numIterations * fb >= 0.01) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (numIterations * fb >= 0.01) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if ( sender * 0.0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if ( sender * 0.0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (fa * fb >= 0.0 ) {",
        "fixed_line": "if (fa * fb > 0.0 ) {"
    },
    "Mockito-29": {
        "fixes": [
            {
                "k": 1,
                "patch": "description.appendText(description);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "description.appendText(description);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "description.appendText;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "description.appendText;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "description.appendText(wanted.toString;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "description.appendText(wanted.toString;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "description.appendText(description.toString;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "description.appendText(description.toString;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "description.appendText(description;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "description.appendText(description;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "description.appendText(wanted.toStringText;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "description.appendText(wanted.toStringText;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "description.appendText = description;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "description.appendText = description;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "description.appendText(wanted.description);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "description.appendText(wanted.description);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "description.appendTextualCapacity;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "description.appendTextualCapacity;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "description.appendTextualDescription;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "description.appendTextualDescription;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "description.appendText(wanted.toStringStringVariableName);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "description.appendText(wanted.toStringStringVariableName);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "description.appendText(wanted.toString);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "description.appendText(wanted.toString);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "description.appendTextualoting.toString;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "description.appendTextualoting.toString;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "description.appendText( offQuoting.toString;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "description.appendText( offQuoting.toString;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "description.appendText(ELEVATION_SERVICE_NAME;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "description.appendText(ELEVATION_SERVICE_NAME;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "description.appendText(description.toString());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "description.appendText(description.toString());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "description.appendTextForQuoting.toString;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "description.appendTextForQuoting.toString;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "description.appendText getSwanted.toString;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "description.appendText getSwanted.toString;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "description.appendTextgetItem.toString;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "description.appendTextgetItem.toString;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "description.appendTextContext.toString;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "description.appendTextContext.toString;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "description.appendTextualCapacity -= description.toString;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "description.appendTextualCapacity -= description.toString;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "description.appendText towanted.toString;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "description.appendText towanted.toString;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "description.appendText(wanted.toStringQuotingText;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "description.appendText(wanted.toStringQuotingText;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "description.appendTextualVariable.toString;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "description.appendTextualVariable.toString;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "description.appendTextualservice.toString;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "description.appendTextualservice.toString;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "description.appendTextLICwanted.toString;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "description.appendTextLICwanted.toString;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "description.appendText(wanted.description;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "description.appendText(wanted.description;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "description.appendTextualVariableName !=wanted.toString;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "description.appendTextualVariableName !=wanted.toString;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "description.appendText(wanted.toStringtraceEnabled;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "description.appendText(wanted.toStringtraceEnabled;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "description.appendText( offQuoting.toString());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "description.appendText( offQuoting.toString());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "description.appendTextualElementVariable.toString;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "description.appendTextualElementVariable.toString;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "description.appendText(description.toStringStringVariableName;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "description.appendText(description.toStringStringVariableName;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "description.appendText(wanted.toStringQuoting;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "description.appendText(wanted.toStringQuoting;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "description.appendText(wanted.toStringicDescription;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "description.appendText(wanted.toStringicDescription;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "description.appendText(wanted.toString=0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "description.appendText(wanted.toString=0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "description.appendTextualDescription.toString;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "description.appendTextualDescription.toString;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "description.appendText(wanted.toStringStringVariableName;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "description.appendText(wanted.toStringStringVariableName;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "description.appendText(description.toStringText;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "description.appendText(description.toStringText;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "description.appendTextContextwanted.toString;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "description.appendTextContextwanted.toString;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "description.appendText side.toString;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "description.appendText side.toString;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "description.appendText mwanted.toString;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "description.appendText mwanted.toString;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "description.appendText(description.toStringStringVariableName);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "description.appendText(description.toStringStringVariableName);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "description.appendText(wanted.toStringLICITINEL_URI;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "description.appendText(wanted.toStringLICITINEL_URI;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "description.appendText(wanted.toStringLICIT_NAME;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "description.appendText(wanted.toStringLICIT_NAME;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "description.appendText(wanted.toString());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "description.appendText(wanted.toString());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "description.appendTextProgram.toString;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "description.appendTextProgram.toString;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "description.appendText r.toStringText;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "description.appendText r.toStringText;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "description.appendText(ELEVATION_URI;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "description.appendText(ELEVATION_URI;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "description.appendText directory.toString;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "description.appendText directory.toString;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "description.appendTextual.toString;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "description.appendTextual.toString;",
                "identical": false
            }
        ],
        "buggy_line": "description.appendText(wanted.toString());",
        "fixed_line": "description.appendText(wanted == null ? \"null\" : wanted.toString());"
    },
    "Lang-33": {
        "fixes": [
            {
                "k": 1,
                "patch": "classes[i] = array[i].getClass;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "classes[i] = array[i].getClass;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "classes[i] = classes[i].getClass;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "classes[i] = classes[i].getClass;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "classes[i] = classes[i].getClass();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "classes[i] = classes[i].getClass();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "classes[i] = array[i].getClass - 1];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "classes[i] = array[i].getClass - 1];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "classes[i] = classes[i].getClass - 1];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "classes[i] = classes[i].getClass - 1];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "classes[i] = array[i].getClass - values[i].getClass;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "classes[i] = array[i].getClass - values[i].getClass;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "classes[i] =array[i].getClass;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "classes[i] =array[i].getClass;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "classes[i] = array[i].getClass() - 1];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "classes[i] = array[i].getClass() - 1];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "classes[i] = classes[i].getClass() - 1];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "classes[i] = classes[i].getClass() - 1];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "classes[i] = type[i].getClass;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "classes[i] = type[i].getClass;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "classes[i] = classes[i].getClass().getClass;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "classes[i] = classes[i].getClass().getClass;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "classes[i] = array[i].getClass().getClass;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "classes[i] = array[i].getClass().getClass;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "classes[i] = new Class[i].getClass;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "classes[i] = new Class[i].getClass;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "classes[i] = array[i].getClass - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "classes[i] = array[i].getClass - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "classes[i] = classes[i].getClass + i;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "classes[i] = classes[i].getClass + i;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "classes[i] = array[i].getClass() - 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "classes[i] = array[i].getClass() - 1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "classes[i] = array[i].getClass().length - 1];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "classes[i] = array[i].getClass().length - 1];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "classes[i] = array[i].getClass + i;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "classes[i] = array[i].getClass + i;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "classes[i] = array[i].getClass()];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "classes[i] = array[i].getClass()];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENTS[i].getClass;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENTS[i].getClass;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "classes[i] = array[i].getClass() - values[i].getClass;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "classes[i] = array[i].getClass() - values[i].getClass;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "classes[i] = classes[i].getClass().length - 1];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "classes[i] = classes[i].getClass().length - 1];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "classes[i] = taskId[i].getClass;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "classes[i] = taskId[i].getClass;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "classes[i] = array[i].getClass != classes.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "classes[i] = array[i].getClass != classes.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "classes[i] = classes[i].getClass()];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "classes[i] = classes[i].getClass()];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "classes[i] = array[i].getClass().length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "classes[i] = array[i].getClass().length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "classes[i] = array[i].getClass - values[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "classes[i] = array[i].getClass - values[i];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "classes[i] = array[i].getClass - no_END_ARRAY_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "classes[i] = array[i].getClass - no_END_ARRAY_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "classes[i] = classes[i].getClass().length;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "classes[i] = classes[i].getClass().length;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "classes[i] = classes[i].getClass().getName;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "classes[i] = classes[i].getClass().getName;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "classes[i] = classes[i].getClass - values[i].getClass;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "classes[i] = classes[i].getClass - values[i].getClass;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "classes[i] = classes[i].getClass().array[i - 1];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "classes[i] = classes[i].getClass().array[i - 1];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "classes[i] = array[i].getClass().getName;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "classes[i] = array[i].getClass().getName;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "classes[i] = array[i].getClass - values[i].getClass();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "classes[i] = array[i].getClass - values[i].getClass();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "classes[i] = array[i].getClass - no_CLASS_START_ARRAY_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "classes[i] = array[i].getClass - no_CLASS_START_ARRAY_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "classes[i] = var[i].getClass;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "classes[i] = var[i].getClass;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "classes[i] = Type[i].getClass;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "classes[i] = Type[i].getClass;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "classes[i] = array[i].getClass - no_CLASS_END_ARRAY_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "classes[i] = array[i].getClass - no_CLASS_END_ARRAY_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "classes[i] = array[(i].getClass;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "classes[i] = array[(i].getClass;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "classes[i] = args[i].getClass;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "classes[i] = args[i].getClass;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "classes[i] = classes[i].getClass != classes.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "classes[i] = classes[i].getClass != classes.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "classes[i] = array[i].getClass - no_ARRAY_CLASS_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "classes[i] = array[i].getClass - no_ARRAY_CLASS_ELEMENT[i].getClass;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "classes[i] = array[i].getClass != classes;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "classes[i] = array[i].getClass != classes;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "classes[i] = array[i].getClass();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENT[i].getClass();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "classes[i] = array[i].getClass - no_CLASS_ARRAY_ELEMENT[i].getClass();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "classes[i] = array[i].getClass().array[i - 1];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "classes[i] = array[i].getClass().array[i - 1];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "classes[i] = classes[i].getClass != classes;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "classes[i] = classes[i].getClass != classes;",
                "identical": false
            }
        ],
        "buggy_line": "classes[i] = array[i].getClass();",
        "fixed_line": "classes[i] = array[i] == null ? null : array[i].getClass();"
    },
    "Chart-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this(time, RegularTime, Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this(time, RegularTime, Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultBefore);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultBefore);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultValue);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultValue);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this(time, RegularTimeTime.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this(time, RegularTimeTime.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultImpl_TIME_ZONE);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultImpl_TIME_ZONE);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultCallback_ZONE);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultCallback_ZONE);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this(time, RegularTimeTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this(time, RegularTimeTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultTypeName);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultTypeName);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this(time,TATimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this(time,TATimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE,Locale.getDefault());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE,Locale.getDefault());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this(time, XmlTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this(time, XmlTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this(time,0, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this(time,0, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultHook argument);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultHook argument);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this(time,mentTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this(time,mentTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this(time,IDENTIFIERTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this(time,IDENTIFIERTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultImpl);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultImpl);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this(time, RegularTimeVector.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this(time, RegularTimeVector.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this(time, clTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this(time, clTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this(time, and RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this(time, and RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(5);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(5);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultization argument);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultization argument);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this(time, RegularTimeInMillis.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this(time, RegularTimeInMillis.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultS_TIME_ZONE);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultS_TIME_ZONE);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault(1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.ENGLISH;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.ENGLISH;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultS_OF_FALSE);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultS_OF_FALSE);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultString);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultString);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultImpl_X_ZONE);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultImpl_X_ZONE);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this(time,resetTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this(time,resetTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this(time, extendedTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this(time, extendedTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultEndTime_ZONE);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultEndTime_ZONE);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this(time, mon.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this(time, mon.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultUrl);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultUrl);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this(time,BinaryTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this(time,BinaryTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault-1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault-1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultEndTime);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefaultEndTime);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this(time,WHTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this(time,WHTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this(time, ComTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this(time, ComTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this(time, RegularTimeOr.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this(time, RegularTimeOr.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this(time, RegularTimeBox.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this(time, RegularTimeBox.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this(time, RegularTimeParameters.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this(time, RegularTimeParameters.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this(time,CountryTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this(time,CountryTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this(time, RegularTimeest.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this(time, RegularTimeest.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this(time, out, Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this(time, out, Locale.DEFAULT_TIME_ZONE, Locale.getDefault());",
                "identical": false
            }
        ],
        "buggy_line": "this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());",
        "fixed_line": "this(time, zone, Locale.getDefault());"
    },
    "Closure-71": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean isOverride = t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean isOverride = t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean isOverride = t.inGlobalScope && t.next;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean isOverride = t.inGlobalScope && t.next;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean isOverride = t.inGlobalScope && t.outGlobalScope;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean isOverride = t.inGlobalScope && t.outGlobalScope;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean isOverride = t.inGlobalScope && propertyName;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean isOverride = t.inGlobalScope && propertyName;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean isOverride = t.inGlobalScope || t.next;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean isOverride = t.inGlobalScope || t.next;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.outGlobalScope;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.outGlobalScope;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean isOverride = t.inGlobalScope && t.PROCESS;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean isOverride = t.inGlobalScope && t.PROCESS;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean isOverride = t.inGlobalScope && t.VIEW;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean isOverride = t.inGlobalScope && t.VIEW;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean isOverride = t.inGlobalScope() && t.next;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean isOverride = t.inGlobalScope() && t.next;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean isOverride = t.inGlobalScope && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean isOverride = t.inGlobalScope && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean isOverride = t.inGlobalScope && t.sink;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean isOverride = t.inGlobalScope && t.sink;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean isOverride = t.inGlobalScope && t.tokenGlobalScope;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean isOverride = t.inGlobalScope && t.tokenGlobalScope;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean isOverride = t.inGlobalScope && t.unsigned;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean isOverride = t.inGlobalScope && t.unsigned;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean isOverride = t.inGlobalScope || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean isOverride = t.inGlobalScope || t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean isOverride = t.inGlobalScope && t.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean isOverride = t.inGlobalScope && t.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean isOverride = t.inGlobalScope && t.url;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean isOverride = t.inGlobalScope && t.url;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean isOverride = t.inGlobalScope && t;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean isOverride = t.inGlobalScope && t;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean isOverride = t.inGlobalScope && t);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean isOverride = t.inGlobalScope && t);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean isOverride = t.inGlobalScope && t.element;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean isOverride = t.inGlobalScope && t.element;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean isOverride = t.inGlobalScope && t.unwrap;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean isOverride = t.inGlobalScope && t.unwrap;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean isOverride = t.inGlobalScope && t.isDefaultScope;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean isOverride = t.inGlobalScope && t.isDefaultScope;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean isOverride = t.inGlobalScope && t.GT;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean isOverride = t.inGlobalScope && t.GT;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean isOverride = t.inGlobalScope() && t.VIEW;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean isOverride = t.inGlobalScope() && t.VIEW;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean isOverride = t.inGlobalScope && t.unescapedScope;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean isOverride = t.inGlobalScope && t.unescapedScope;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean isOverride = t.inGlobalScope() && t.PROCESS;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean isOverride = t.inGlobalScope() && t.PROCESS;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean isOverride = t.inGlobalScope != null && propertyName;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean isOverride = t.inGlobalScope != null && propertyName;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean isOverride = t.inGlobalScope && t.lenMarker;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean isOverride = t.inGlobalScope && t.lenMarker;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean isOverride = t.inGlobalScope && t.reportError;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean isOverride = t.inGlobalScope && t.reportError;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean isOverride = t.inGlobalScope && t.K_ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean isOverride = t.inGlobalScope && t.K_ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.next;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.next;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean isOverride = t.inGlobalScope && t.parent;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean isOverride = t.inGlobalScope && t.parent;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean isOverride = t.inGlobalScope() && propertyName;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean isOverride = t.inGlobalScope() && propertyName;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.inGlobalScope;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGN_ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGN_ASSIGNMENT;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.outGlobalScope) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.outGlobalScope) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean isOverride = t.inGlobalScope && t.class;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean isOverride = t.inGlobalScope && t.class;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean isOverride = t.inGlobalScope && t.unwrapAt;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean isOverride = t.inGlobalScope && t.unwrapAt;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean isOverride = t.inGlobalScope() || t.next;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean isOverride = t.inGlobalScope() || t.next;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean isOverride = t.inGlobalScope && t.outGlobal;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean isOverride = t.inGlobalScope && t.outGlobal;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean isOverride = t.inGlobalScope && t.inputEnd) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean isOverride = t.inGlobalScope && t.inputEnd) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean isOverride = t.inGlobalScope && t.INLINE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean isOverride = t.inGlobalScope && t.INLINE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean isOverride = t.inGlobalScope && t.constructor;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean isOverride = t.inGlobalScope && t.constructor;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGN;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGN;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGN_IN_PROGRESS;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean isOverride = t.inGlobalScope && t.ASSIGN_IN_PROGRESS;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean isOverride = t.inGlobalScope && t.attributeName;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean isOverride = t.inGlobalScope && t.attributeName;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.VIEW;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean isOverride = t.inGlobalScope != null && t.VIEW;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean isOverride = t.inGlobalScope && t.len;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean isOverride = t.inGlobalScope && t.len;",
                "identical": false
            }
        ],
        "buggy_line": "boolean isOverride = t.inGlobalScope() &&",
        "fixed_line": "boolean isOverride = parent.getJSDocInfo() != null &&"
    },
    "Math-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (a < b ? Float.NEGATE : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (a < b ? Float.NEGATE : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (a < b ? Float.NEG : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (a < b ? Float.NEG : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (b < 0 ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (b < 0 ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (a < b ? Float.NEGATE : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (a < b ? Float.NEGATE : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (a < b ? Float.NEGATE : (a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (a < b ? Float.NEGATE : (a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (a < b ? Float.NEG : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (a < b ? Float.NEG : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (a < b ? Float.NEGATE : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (a < b ? Float.NEGATE : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (a < b ? Float.NEGATIVE_a : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (a < b ? Float.NEGATIVE_a : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a + b ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a + b ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (b < 0 ? 0 : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (b < 0 ? 0 : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (a < b ? Float.NEG : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (a < b ? Float.NEG : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (a < b ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (a < b ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (a < b ? Float.NEGATIVE_a : (Float.NaN + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (a < b ? Float.NEGATIVE_a : (Float.NaN + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (a < b ? Float.NEG : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (a < b ? Float.NEG : (b - b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (a < b ? Float.NEGATE : (E) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (a < b ? Float.NEGATE : (E) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (a < b ? Float.MIN_VALUE : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (a < b ? Float.MIN_VALUE : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (a < b ? Float.NEG : (a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (a < b ? Float.NEG : (a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (a < b ? b : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (a < b ? b : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a * b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a * b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (a < b ? b : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (a < b ? b : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (a < b ? Float.NEGATE : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a + b) ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a + b) ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (a < b ? b : (Float.isNaN(a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (a < b ? b : (Float.isNaN(a) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a + b ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a + b ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (a == b ? Float.NEGATE : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (a == b ? Float.NEGATE : (Float.NaN + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (a instanceof b ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (a instanceof b ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (b < 0 ? b : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (b < 0 ? b : (Float.isNaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (a < b ? 0 : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (a < b ? 0 : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (a < b ? Float.NEG : (Float.NaN(a + b ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (a < b ? Float.NEG : (Float.NaN(a + b ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (a < b ? Float.NEG : (Float.NaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (a < b ? Float.NEG : (Float.NaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (a < b ? Float.NEGATE : (a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (a < b ? Float.NEGATE : (a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (a < b ? Float.NEGATIVE_a : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (a < b ? Float.NEGATIVE_a : (b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (b < 0 ? 0 : (Float.NaN(a + b ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (a < b ? Float.NEGATIVE_a : (Float.NaN + b ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (a < b ? Float.NEGATIVE_a : (Float.NaN + b ? Float.NaN : b);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (a < 0 ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (a < 0 ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (b < 0 ? b : (Float.NaN(a * b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (b < 0 ? b : (Float.NaN(a * b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (a <= b ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (a <= b ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (a < b ? Float.NEG : (E) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (a < b ? Float.NEG : (E) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (a instanceof b ? b : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (a instanceof b ? b : (Float.NaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (a instanceof b ? b : (Float.isNaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (a instanceof b ? b : (Float.isNaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (b <= 0 ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (b <= 0 ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (b instanceof b ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (b instanceof b ? b : (Float.NaN(a + b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (a == b ? Float.NEGATE : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (a == b ? Float.NEGATE : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (a < b ? Float.NEGATIVE_a : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (a < b ? Float.NEGATIVE_a : (Float) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (a < b ? b : (Float.isNaN(b) ? Float.NaN : b;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (a < b ? b : (Float.isNaN(b) ? Float.NaN : b;",
                "identical": false
            }
        ],
        "buggy_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);",
        "fixed_line": "return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : a);"
    },
    "Closure-65": {
        "fixes": [
            {
                "k": 1,
                "patch": "case '\\0': sb.append(\"\\\\0\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case '\\0': sb.append(\"\\\\0\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "case '\\0': sb.append(\"\\\\0; break;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case '\\0': sb.append(\"\\\\0; break;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case '\\0': sb.append(\"\\\\0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "case '\\0': sb.append(\"\\\\0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case '\\0':sb.append(\"\\\\0\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "case '\\0':sb.append(\"\\\\0\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "case '\\0': sb.append(\"\\\\0\"); break;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "case '\\0': sb.append(\"\\\\0\", i;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case '\\0': sb.append(\"\\\\0\", i;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case '\\0': sb.append(\"\\\\0\")) break;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "case '\\0': sb.append(\"\\\\0\")) break;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case '\\0': sb.append(\"\\\\0 (i;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case '\\0': sb.append(\"\\\\0 (i;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case '\\0': sb.append(\"\\\\0 must break;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case '\\0': sb.append(\"\\\\0 must break;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "case '\\0': sb.append(\"\\\\0(1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "case '\\0': sb.append(\"\\\\0(1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case '\\0': sb.append(\"\\\\0\").append(c;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case '\\0': sb.append(\"\\\\0\").append(c;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case '\\0': sb.append(\"\\\\0'));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "case '\\0': sb.append(\"\\\\0'));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "case '\\0': sb.append(\"\\\\0) break;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "case '\\0': sb.append(\"\\\\0) break;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "case '\\0': sb.append(\"\\\\0\\n;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case '\\0': sb.append(\"\\\\0\\n;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "case '\\0': sb.append(\"\\\\0\"), i;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "case '\\0': sb.append(\"\\\\0\"), i;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "case '\\0': sb.append(\"\\\\0; break break;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case '\\0': sb.append(\"\\\\0; break break;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case '\\0': sb.append(\"\\\\0);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case '\\0': sb.append(\"\\\\0);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case '\\0': sb.append(\"\\\\0, break;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case '\\0': sb.append(\"\\\\0, break;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case '\\0': sb.append(\"\\\\0(c;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "case '\\0': sb.append(\"\\\\0(c;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case '\\0': sb.append(\"\\\\0\").append(i;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case '\\0': sb.append(\"\\\\0\").append(i;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "case '\\0': sb.append(\"\\\\0'); break;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case '\\0': sb.append(\"\\\\0'); break;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "case '\\0': sb.append(\"\\\\0\"), break;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case '\\0': sb.append(\"\\\\0\"), break;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case '\\0': sb.append(\"\\\\M + i;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case '\\0': sb.append(\"\\\\M + i;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case '\\0': sb.append(\"\\\\0 + i;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case '\\0': sb.append(\"\\\\0 + i;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "case '\\0': sb.append(\"\\\\0 (i + 1) break;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case '\\0': sb.append(\"\\\\0 (i + 1) break;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case '\\0': sb.append(\"\\\\0 \");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case '\\0': sb.append(\"\\\\0 \");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case '\\0': sb.append(\"\\\\0At;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case '\\0': sb.append(\"\\\\0At;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case '\\0': sb.append(\"\\\\0; break't \"\\\").append(c;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case '\\0': sb.append(\"\\\\0; break't \"\\\").append(c;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case '\\0': sb.append(\"\\\\0; break't++) break;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case '\\0': sb.append(\"\\\\0; break't++) break;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "case '\\0': sb.append(\"\\\\0\\n; break;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case '\\0': sb.append(\"\\\\0\\n; break;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case '\\0': sb.append(\"\\\\$; break;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case '\\0': sb.append(\"\\\\$; break;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case '\\0': sb.append(\"\\\\0\\\\ byte break;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case '\\0': sb.append(\"\\\\0\\\\ byte break;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "case '\\0': sb.append(\"\\\\ation;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case '\\0': sb.append(\"\\\\ation;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "case '\\0': sb.append(\"\\\\0; break't++) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case '\\0': sb.append(\"\\\\0; break't++) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case '\\0': sb.append(\"\\\\0 (i; break;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case '\\0': sb.append(\"\\\\0 (i; break;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case '\\0': sb.append(\"\\\\0; break't return i.",
                "identical": false
            },
            {
                "k": 72,
                "patch": "case '\\0': sb.append(\"\\\\0; break't return i.",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case '\\0': sb.append(\"\\\\0 translate;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case '\\0': sb.append(\"\\\\0 translate;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case '\\0': sb.append(\"\\\\0\\n\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case '\\0': sb.append(\"\\\\0\\n\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case '\\0': sb.append(\"\\\\0cl;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case '\\0': sb.append(\"\\\\0cl;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case '\\0': sb.append(\"\\\\0C break;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case '\\0': sb.append(\"\\\\0C break;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case '\\0': sb.append(\"\\\\0InputStream;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case '\\0': sb.append(\"\\\\0InputStream;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case '\\0': sb.append(\"\\\\0; break't origin",
                "identical": false
            },
            {
                "k": 84,
                "patch": "case '\\0': sb.append(\"\\\\0; break't origin",
                "identical": false
            },
            {
                "k": 85,
                "patch": "case '\\0': sb.append(\"\\\\0",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case '\\0': sb.append(\"\\\\0",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case '\\0': sb.append(\"\\\\0');",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case '\\0': sb.append(\"\\\\0');",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case '\\0': sb.append(\"\\\\0 which which break;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "case '\\0': sb.append(\"\\\\0 which which break;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case '\\0': sb.append(\"\\\\00\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case '\\0': sb.append(\"\\\\00\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case '\\0': sb.append(\"\\\\0Cte;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "case '\\0': sb.append(\"\\\\0Cte;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case '\\0': sb.append(\"\\\\0; break't \");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case '\\0': sb.append(\"\\\\0; break't \");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "case '\\0': sb.append(\"\\\\0Listeners;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case '\\0': sb.append(\"\\\\0Listeners;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case '\\0': sb.append(\"\\\\0; break' need to return i.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case '\\0': sb.append(\"\\\\0; break' need to return i.",
                "identical": false
            }
        ],
        "buggy_line": "case '\\0': sb.append(\"\\\\0\"); break;",
        "fixed_line": "case '\\0': sb.append(\"\\\\000\"); break;"
    },
    "Closure-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return allResultsMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return allResultsMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return newResultsMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return newResultsMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return n, recurse);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return n, recurse);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return allResultsMatch(n, otherResultsMatch_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return allResultsMatch(n, otherResultsMatch_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return allResultsMatch(n, top_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return allResultsMatch(n, top_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new MAYMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new MAYMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return allResultsMatch_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return allResultsMatch_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return newResultsMatch(n, otherResultsMatch_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return newResultsMatch(n, otherResultsMatch_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return newColMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return newColMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return newMAYMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return newMAYMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return allResultsMatch(n, otherResultsMatchFirst_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return allResultsMatch(n, otherResultsMatchFirst_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return newResultsMatch(n, otherResultsMatchFirst_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return newResultsMatch(n, otherResultsMatchFirst_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return allResultsMatch(n, otherResultsMatchD_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return allResultsMatch(n, otherResultsMatchD_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return allResultsMatch(n, new_Be_PREDICATE);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return allResultsMatch(n, new_Be_PREDICATE);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return newResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return newResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return newResultsMatch(n, otherToken.allResultsMatch_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return newResultsMatch(n, otherToken.allResultsMatch_BE_STRING_PREDICATE);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return newOneMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return newOneMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return ALL_COLUMNS(n, recurse);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return ALL_COLUMNS(n, recurse);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return allResultsMatch(n, top_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return allResultsMatch(n, top_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return allResultsMatch(n, top_BeString);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return allResultsMatch(n, top_BeString);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return newIdentMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return newIdentMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return allResultsMatch(n, new_Be_FORMAT_PREDICATE);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return allResultsMatch(n, new_Be_FORMAT_PREDICATE);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return n, recurse;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return n, recurse;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return allResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return allResultsMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return allResultsMatch(n, otherResultsMatch_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return allResultsMatch(n, otherResultsMatch_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return newResultsMatch(n, recurse) + 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return newResultsMatch(n, recurse) + 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new_BeString(n, recurse);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new_BeString(n, recurse);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return allResultsMatch(n, otherResultsMatch, recurse);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return allResultsMatch(n, otherResultsMatch, recurse);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return allResultsMatch(n,Values);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return allResultsMatch(n,Values);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return allResultsMatch(n, top_Be_PREDICATE);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return allResultsMatch(n, top_Be_PREDICATE);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return nextNodeMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return nextNodeMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new MAY_PREDICATE_COLUMN_INDEX, recurse) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new MAY_PREDICATE_COLUMN_INDEX, recurse) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return newResultsMatch(n, recurse;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return newResultsMatch(n, recurse;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return allResultsMatch(n, new_BeString);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return allResultsMatch(n, new_BeString);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return allResultsMatch(n, allowed);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return allResultsMatch(n, allowed);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return firstResult(n, recurse);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return firstResult(n, recurse);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return firstResultMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return firstResultMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new MAY_PREDICATE_TIME_FORMAT_PREDICATE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new MAY_PREDICATE_TIME_FORMAT_PREDICATE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return newResultsMatch(n, otherResultsMatch, recurse);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return newResultsMatch(n, otherResultsMatch, recurse);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return allResultsMatch(n, top_Be_SIZE_PREDICATE);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return allResultsMatch(n, top_Be_SIZE_PREDICATE);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return newsimplesimpleMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return newsimplesimpleMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return allResultsMatch(n, recurse;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return allResultsMatch(n, recurse;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return allResultsMatch(n, 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return allResultsMatch(n, 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new MAY_PREDICATE_COLUMN_INDEX, recurse);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new MAY_PREDICATE_COLUMN_INDEX, recurse);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return allResultsMatch(n, otherResultsMatchFirst_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return allResultsMatch(n, otherResultsMatchFirst_BE_STRING_PREDICATE) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return cleanMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return cleanMatch(n, recurse);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new MAYMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new MAYMatch(n, recurse) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return allResultsMatch(n, top_Be_FORMAT_PREDICATE);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return allResultsMatch(n, top_Be_FORMAT_PREDICATE);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return allResultsMatch(n, otherResultsMatch_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return allResultsMatch(n, otherResultsMatch_BE_STRING_PREDICATE;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return allResultsMatch(n, recurse) + 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return allResultsMatch(n, recurse) + 1;",
                "identical": false
            }
        ],
        "buggy_line": "return allResultsMatch(n, MAY_BE_STRING_PREDICATE);",
        "fixed_line": "return anyResultsMatch(n, MAY_BE_STRING_PREDICATE);"
    },
    "Codec-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 12,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 13,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'class",
                "identical": false
            },
            {
                "k": 18,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'class",
                "identical": false
            },
            {
                "k": 19,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\"););",
                "identical": false
            },
            {
                "k": 20,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\"););",
                "identical": false
            },
            {
                "k": 21,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'navigation. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 24,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'navigation. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 25,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'builder. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'builder. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'builder.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'builder.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'ci. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 30,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'ci. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 31,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '?)",
                "identical": false
            },
            {
                "k": 32,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '?)",
                "identical": false
            },
            {
                "k": 33,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!",
                "identical": false
            },
            {
                "k": 34,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '!",
                "identical": false
            },
            {
                "k": 35,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'point",
                "identical": false
            },
            {
                "k": 36,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'point",
                "identical": false
            },
            {
                "k": 37,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'msg'",
                "identical": false
            },
            {
                "k": 38,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'msg'",
                "identical": false
            },
            {
                "k": 39,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '12",
                "identical": false
            },
            {
                "k": 40,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '12",
                "identical": false
            },
            {
                "k": 41,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'replace(\"m2\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'replace(\"m2\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'builder.replaceAll(\"m2\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'builder.replaceAll(\"m2\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 46,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'auto'",
                "identical": false
            },
            {
                "k": 47,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'json",
                "identical": false
            },
            {
                "k": 48,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'json",
                "identical": false
            },
            {
                "k": 49,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Aough. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 50,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Aough. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\";",
                "identical": false
            },
            {
                "k": 52,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\";",
                "identical": false
            },
            {
                "k": 53,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'this. will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'this. will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'msg' characters",
                "identical": false
            },
            {
                "k": 56,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'msg' characters",
                "identical": false
            },
            {
                "k": 57,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'project",
                "identical": false
            },
            {
                "k": 58,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'project",
                "identical": false
            },
            {
                "k": 59,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'queries\", txt;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'queries\", txt;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'DIRECT",
                "identical": false
            },
            {
                "k": 62,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'DIRECT",
                "identical": false
            },
            {
                "k": 63,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include'",
                "identical": false
            },
            {
                "k": 64,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'include'",
                "identical": false
            },
            {
                "k": 65,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; //SMALL not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 66,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; //SMALL not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 67,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' points",
                "identical": false
            },
            {
                "k": 68,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' points",
                "identical": false
            },
            {
                "k": 69,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '=')",
                "identical": false
            },
            {
                "k": 70,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '=')",
                "identical": false
            },
            {
                "k": 71,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'serialization.",
                "identical": false
            },
            {
                "k": 72,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'serialization.",
                "identical": false
            },
            {
                "k": 73,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'navigation.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'navigation.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'ci.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'ci.",
                "identical": false
            },
            {
                "k": 77,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 78,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' ');",
                "identical": false
            },
            {
                "k": 79,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parametersen",
                "identical": false
            },
            {
                "k": 80,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parametersen",
                "identical": false
            },
            {
                "k": 81,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // way",
                "identical": false
            },
            {
                "k": 82,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");; // way",
                "identical": false
            },
            {
                "k": 83,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' \";",
                "identical": false
            },
            {
                "k": 84,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' \";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '('",
                "identical": false
            },
            {
                "k": 86,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '('",
                "identical": false
            },
            {
                "k": 87,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Aough.",
                "identical": false
            },
            {
                "k": 88,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'Aough.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key",
                "identical": false
            },
            {
                "k": 90,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'key",
                "identical": false
            },
            {
                "k": 91,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' eff'",
                "identical": false
            },
            {
                "k": 92,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as ' eff'",
                "identical": false
            },
            {
                "k": 93,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '",
                "identical": false
            },
            {
                "k": 94,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as '",
                "identical": false
            },
            {
                "k": 95,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' write characters",
                "identical": false
            },
            {
                "k": 96,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' write characters",
                "identical": false
            },
            {
                "k": 97,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 98,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned.",
                "identical": false
            },
            {
                "k": 99,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 100,
                "patch": "txt = txt.replaceAll(\"^mb\", \"m2\");\"); // FIXME: a parameter should not be assigned. Also declare the methods parameters",
                "identical": false
            }
        ],
        "buggy_line": "txt = txt.replaceAll(\"^mb\", \"m2\");",
        "fixed_line": "txt = txt.replaceAll(\"mb$\", \"m2\");"
    },
    "Math-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "int sum = 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int sum = 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int sum = 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int sum = 0;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was already added. Also declare the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was already added. Also declare the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was included",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was included",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line can't been discovered yet",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line can't been discovered yet",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was already added. Also declare the end of record or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was already added. Also declare the end of record or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or NOSONAR",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or NOSONAR",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1M is it's not yet read",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1M is it's not yet read",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or ), 6 for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or ), 6 for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is use the last value of 1 for end-of-line can't been discovered yet",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is use the last value of 1 for end-of-line can't been discovered yet",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-line means we can use the end of record or NOSONAR",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-line means we can use the end of record or NOSONAR",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the comma.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the comma.",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the last character that was prefixed with 0x0",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the last character that was prefixed with 0x0",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the end of record or 0x0",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the end of record or 0x0",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line.",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-line means we can use the end of record or 0x0",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-line means we can use the end of record or 0x0",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' be 1 for end-of-body.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' be 1 for end-of-body.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' be 1 for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' be 1 for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or ), 6 for end-of-line means we can use the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or ), 6 for end-of-line means we can use the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of line is NOSONAR",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of line is NOSONAR",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was prefixed with '_' length of 6 or 0x0 is disabled.",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' be 1 for end-of-line means we can use the comma.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' be 1 for end-of-line means we can use the comma.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-line means we can use the last character that was prefixed with 0x0",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-line means we can use the last character that was prefixed with 0x0",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1M is used for end-of-line can't been discovered yet",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1M is used for end-of-line can't been discovered yet",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means means we can use the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means means we can use the end of record or 0x0 is JRE 7+",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means means we can use the last character that was prefixed with 0x0",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means means we can use the last character that was prefixed with 0x0",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the last value of list",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the last value of list",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-line means we can use the comma.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-line means we can use the comma.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was already added. Also declare the end of record or 0x0",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last character that was already added. Also declare the end of record or 0x0",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of parameters as 'final'.",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the last value of parameters as 'final'.",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-body.",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the methods parameters as 'raw' be 1 for end-of-body.",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1M is used for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1M is used for end-of-line means we can use the last character that was included",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or input",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or ), 6 for end-of-line means we can use the last character that was prefixed with 0x0",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or ), 6 for end-of-line means we can use the last character that was prefixed with 0x0",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' be 1 for end-of-line means we can use the end of record or 0x0",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' be 1 for end-of-line means we can use the end of record or 0x0",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is use the last value of 1 for end-of-line.",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 0x0 is use the last value of 1 for end-of-line.",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' be 1 for end-of-line.",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of parameters as 'raw' be 1 for end-of-line.",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the last character that was already added.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int sum = 1; // never really gets a parameter should not be assigned. Also declare the end of record or 1 for end-of-line means we can use the last character that was already added.",
                "identical": false
            }
        ],
        "buggy_line": "int sum = 0;",
        "fixed_line": "double sum = 0;"
    },
    "Codec-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "return StringUtils.newStringUtf8(binaryData, false));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return StringUtils.newStringUtf8(binaryData, false));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return StringUtils.newStringUtf8(binaryData, true));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return StringUtils.newStringUtf8(binaryData, true));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, true);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, true);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return StringUtils.newStringUtf8(binaryData, false, false);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return StringUtils.newStringUtf8(binaryData, false, false);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, false);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, false);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return StringUtils.newStringUtf8(binaryData, true;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return StringUtils.newStringUtf8(binaryData, true;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, binaryData);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, binaryData);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return StringUtils.newStringUtf8(binaryData, false, true);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return StringUtils.newStringUtf8(binaryData, false, true);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return StringUtils.newStringUtf8(binaryData, false, false));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return StringUtils.newStringUtf8(binaryData, false, false));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, true));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, true));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, false));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, false));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return StringUtils.newStringUtf8(binaryData, false false));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return StringUtils.newStringUtf8(binaryData, false false));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return StringUtils.newStringUtf8(binaryData, false;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return StringUtils.newStringUtf8(binaryData, false;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return StringUtils.newStringUtf8( getFileData, false));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return StringUtils.newStringUtf8( getFileData, false));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return StringUtils.newStringUtf8(config, false));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return StringUtils.newStringUtf8(config, false));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return StringUtils.newStringUtf8(binaryData, false % true;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return StringUtils.newStringUtf8(binaryData, false % true;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return StringUtils.newStringUtf8( binaryData, false));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return StringUtils.newStringUtf8( binaryData, false));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return StringUtils.newStringUtf8(propertiesBase64String, false));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return StringUtils.newStringUtf8(propertiesBase64String, false));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return StringUtils.newStringUtf8(binaryData, true) + 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return StringUtils.newStringUtf8(binaryData, true) + 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, true;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, true;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return StringUtils.newStringUtf8(serviceData, false));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return StringUtils.newStringUtf8(serviceData, false));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return StringUtils.newStringUtf8(binaryData, false) + 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return StringUtils.newStringUtf8(binaryData, false) + 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true : false;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true : false;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return StringUtils.newStringUtf8(binaryData, false);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return StringUtils.newStringUtf8(binaryData, false);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return StringUtils.newStringUtf8(binaryData, false ? true : false;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return StringUtils.newStringUtf8(binaryData, false ? true : false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return StringUtils.newStringUtf8(binaryData, false);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return StringUtils.newStringUtf8(binaryData, false);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return StringUtils.newStringUtf8(binaryData, true);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return StringUtils.newStringUtf8(binaryData, true);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true : false));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true : false));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return StringUtils.newStringUtf8(binaryData, false % false));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return StringUtils.newStringUtf8(binaryData, false % false));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return StringUtils.newStringUtf8( getFileData, true));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return StringUtils.newStringUtf8( getFileData, true));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return StringUtils.newStringUtf8(PASSBase64String, false));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return StringUtils.newStringUtf8(PASSBase64String, false));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return StringUtils.newStringUtf8(binaryData, true) / true;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return StringUtils.newStringUtf8(binaryData, true) / true;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return StringUtils.newStringUtf8(binaryData, false, true;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return StringUtils.newStringUtf8(binaryData, false, true;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return StringUtils.newStringUtf8(binaryData, false*",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return StringUtils.newStringUtf8(binaryData, false*",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true : false);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true : false);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, 10);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, 10);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return StringUtils.newStringUtf8(commentsData, false));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return StringUtils.newStringUtf8(commentsData, false));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return StringUtils.newStringUtf8(binaryData, false / true;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return StringUtils.newStringUtf8(binaryData, false / true;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return StringUtils.newStringUtf8( hmacData, false));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return StringUtils.newStringUtf8( hmacData, false));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return StringUtils.newStringUtf8(binaryData, true ? true));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return StringUtils.newStringUtf8(binaryData, false) / true;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return StringUtils.newStringUtf8(binaryData, false) / true;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return StringUtils.newStringUtf8(binaryData, false ? true : false);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return StringUtils.newStringUtf8(binaryData, false ? true : false);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return StringUtils.newStringUtf8(LayerBase64String, false));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return StringUtils.newStringUtf8(LayerBase64String, false));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return StringUtils.newStringUtf8(ImportsBase64String, false));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return StringUtils.newStringUtf8(ImportsBase64String, false));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return StringUtils.newStringUtf8(base64String, false));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return StringUtils.newStringUtf8(base64String, false));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, spec);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, spec);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, fileData);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return StringUtils.newStringUtf8(binaryData, true, fileData);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return StringUtils.newStringUtf8(binaryData, false, false;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return StringUtils.newStringUtf8(binaryData, false, false;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return StringUtils.newStringUtf8(binaryData, true);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return StringUtils.newStringUtf8(binaryData, true);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return StringUtils.newStringUtf8(binaryData, true)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return StringUtils.newStringUtf8(binaryData, true)) {",
                "identical": false
            }
        ],
        "buggy_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, true));",
        "fixed_line": "return StringUtils.newStringUtf8(encodeBase64(binaryData, false));"
    },
    "Closure-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (fnType == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (fnType == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (fnType != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (fnType != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null)",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null)",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null)",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null)",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if if (fnType != null)",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if if (fnType != null)",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (fnType == null && fnType != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (fnType == null && fnType != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null)",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null)",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null){",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null){",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-CIRC (fnType != null)",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-CIRC (fnType != null)",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null && fnType != null)",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null && fnType != null)",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if if (fnType != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if if (fnType != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null && fnType != null",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null && fnType != null",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (t != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (t != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we have array as if (fnType != null)",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we have array as if (fnType != null)",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null || fnType != null)",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null || fnType != null)",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType != null)",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType != null)",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null in case",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null in case",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-public, too",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-public, too",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null in case of type",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null in case of type",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if fnType.",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if fnType.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping (fnType != null)",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping (fnType != null)",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-Function",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-Function",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null -> {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null -> {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null && fnType != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null && fnType != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but we don't know if (fnType != null",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if if (fnType.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if if (fnType.",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null in case",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null in case",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType.BOTTOM)",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType.BOTTOM)",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType.",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType.",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if if (fnType != null)",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if if (fnType != null)",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null?",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null?",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-Function",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-Function",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType.class",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType.class",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-public, if (fnType != null)",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; non-public, if (fnType != null)",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null && fnType != null){",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null && fnType != null){",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null){",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null){",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType.se",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if (fnType.se",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-CIRC (fnType != null)",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; non-CIRC (fnType != null)",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null -> {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null -> {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null || fnType != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null || fnType != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (selected != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (selected != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if if (fnType != null){",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (fnType == null) { // as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null if if (fnType != null){",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null in case of type",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null in case of type",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (fnType == null) { // yes, as per [JACKSON-407] -- allow disabling wrapping; but if (fnType != null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (fnType != null) {",
        "fixed_line": "if (fnType != null && fnType.hasInstanceType()) {"
    },
    "Gson-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (Double.isNaN(value instanceof Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (Double.isNaN(value instanceof Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (Double.isNaN(value instanceof Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (Double.isNaN(value instanceof Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (Double.isNaN(value) && Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (Double.isNaN(value) && Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (Double.isNaN(value instanceof Double.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (Double.isNaN(value instanceof Double.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (Double.isNaN(value) && Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (Double.isNaN(value) && Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (Double.isNaN(value instanceof Double.TYPE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (Double.isNaN(value instanceof Double.TYPE) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (Double.isNaN(value instanceof Double.description) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (Double.isNaN(value instanceof Double.description) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (Double.isNaN(value instanceof Double.descriptiondescription) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (Double.isNaN(value instanceof Double.descriptiondescription) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (Double.isNaN(value instanceof Double.UTFInfinite(value)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (Double.isNaN(value instanceof Double.UTFInfinite(value)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (Double.isNaN(value instanceof Double.MAX_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (Double.isNaN(value instanceof Double.MAX_VALUE || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (Double.isNaN(value instanceof Double.USInfinite(value)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (Double.isNaN(value instanceof Double.USInfinite(value)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (Double.isNaN(value instanceof Double.UTF8) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (Double.isNaN(value instanceof Double.UTF8) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (Double.isNaN(value instanceof Double.UTFInfinite(value) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (Double.isNaN(value instanceof Double.UTFInfinite(value) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (Double.isNaN(value instanceof Double.STRINGS_VALUE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (Double.isNaN(value instanceof Double.STRINGS_VALUE) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value)){",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value)){",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Double.isNaN(value instanceof Double.class || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (Double.isNaN(value instanceof Double.class || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (Double.isNaN(value instanceof Double.ENGINE_NAME) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (Double.isNaN(value instanceof Double.ENGINE_NAME) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (Double.isNaN(value instanceof Double.Infinite(value)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (Double.isNaN(value instanceof Double.Infinite(value)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (Double.isNaN(value instanceof Double.DOT(value) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (Double.isNaN(value instanceof Double.DOT(value) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (Double.isNaN(value instanceof Double.NEInfinite(value)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (Double.isNaN(value instanceof Double.NEInfinite(value)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (Double.isNaN(value instanceof Double.UTFUTF8) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (Double.isNaN(value instanceof Double.UTFUTF8) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (Double.isNaN(value instanceof Double. || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (Double.isNaN(value instanceof Double. || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Double.isNaN(value instanceof Double.SEPARATOR) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (Double.isNaN(value instanceof Double.SEPARATOR) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (Double.isNaN(value instanceof Double.NEInfinite(value) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (Double.isNaN(value instanceof Double.NEInfinite(value) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (Double.isNaN(value instanceof Double.mime(value) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (Double.isNaN(value instanceof Double.mime(value) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value){",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value){",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (Double.isNaN(value instanceof Double.class || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (Double.isNaN(value instanceof Double.class || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value instanceof Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value instanceof Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (Double.isNaN(value instanceof Double. || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (Double.isNaN(value instanceof Double. || Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (Double.isNaN(value instanceof Double.SH(value) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (Double.isNaN(value instanceof Double.SH(value) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value instanceof Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value instanceof Double.isInfinite(value) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (Double.isNaN(value instanceof Double.WAIT) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (Double.isNaN(value instanceof Double.WAIT) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (Double.isNaN(value instanceof Double.USInfinite(value) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (Double.isNaN(value instanceof Double.USInfinite(value) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (Double.isNaN(value instanceof Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (Double.isNaN(value instanceof Double.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (Double.isNaN(value instanceof Double.Infinite(value) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (Double.isNaN(value instanceof Double.Infinite(value) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (Double.isNaN(value instanceof Double.DOT(value)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (Double.isNaN(value instanceof Double.DOT(value)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (Double.isNaN(value instanceof Double.Double(value) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (Double.isNaN(value instanceof Double.Double(value) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value instanceof Double.class) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (Double.isNaN(value) || Double.isInfinite(value instanceof Double.class) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (Double.isNaN(value instanceof Double.EInfinite(value)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (Double.isNaN(value instanceof Double.EInfinite(value)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (Double.isNaN(value instanceof Double.STRING) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (Double.isNaN(value instanceof Double.STRING) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite == value) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (Double.isNaN(value instanceof Double.MIN_VALUE || Double.isInfinite == value) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (Double.isNaN(value instanceof Double.mime(value)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (Double.isNaN(value instanceof Double.mime(value)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (Double.isNaN(value instanceof Double.MAX_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (Double.isNaN(value instanceof Double.MAX_VALUE || Double.isInfinite(value)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (Double.isNaN(value instanceof Double.StandardInfinite(value)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (Double.isNaN(value instanceof Double.StandardInfinite(value)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
        "fixed_line": "if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {"
    },
    "JacksonXml-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "_rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "_rootNameLookup = src._rootNameLookup;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "_rootNameLookup = rootNameLookup;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "_rootNameLookup = rootNameLookup;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "_rootNameLookup = root;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "_rootNameLookup = root;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'rootNameLookup",
                "identical": false
            },
            {
                "k": 8,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'rootNameLookup",
                "identical": false
            },
            {
                "k": 9,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root",
                "identical": false
            },
            {
                "k": 10,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root",
                "identical": false
            },
            {
                "k": 11,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root name",
                "identical": false
            },
            {
                "k": 14,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root name",
                "identical": false
            },
            {
                "k": 15,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'rootNameLookup",
                "identical": false
            },
            {
                "k": 16,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'rootNameLookup",
                "identical": false
            },
            {
                "k": 17,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'rootNameLookup",
                "identical": false
            },
            {
                "k": 18,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'rootNameLookup",
                "identical": false
            },
            {
                "k": 19,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root",
                "identical": false
            },
            {
                "k": 20,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root",
                "identical": false
            },
            {
                "k": 21,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'root",
                "identical": false
            },
            {
                "k": 24,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'root",
                "identical": false
            },
            {
                "k": 25,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root't modify schema",
                "identical": false
            },
            {
                "k": 26,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root't modify schema",
                "identical": false
            },
            {
                "k": 27,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'root name",
                "identical": false
            },
            {
                "k": 28,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'root name",
                "identical": false
            },
            {
                "k": 29,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'raw't modify schema",
                "identical": false
            },
            {
                "k": 30,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'raw't modify schema",
                "identical": false
            },
            {
                "k": 31,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root name",
                "identical": false
            },
            {
                "k": 32,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root name",
                "identical": false
            },
            {
                "k": 33,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'parent't modify schema",
                "identical": false
            },
            {
                "k": 34,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'parent't modify schema",
                "identical": false
            },
            {
                "k": 35,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root't modify schema",
                "identical": false
            },
            {
                "k": 36,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root't modify schema",
                "identical": false
            },
            {
                "k": 37,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'rootName't modify schema",
                "identical": false
            },
            {
                "k": 38,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'rootName't modify schema",
                "identical": false
            },
            {
                "k": 39,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root || _rootNameLookup",
                "identical": false
            },
            {
                "k": 40,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root || _rootNameLookup",
                "identical": false
            },
            {
                "k": 41,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'raw't modify schema",
                "identical": false
            },
            {
                "k": 42,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'raw't modify schema",
                "identical": false
            },
            {
                "k": 43,
                "patch": "_rootNameLookup = src._rootNameLookup; // [databind#116]",
                "identical": false
            },
            {
                "k": 44,
                "patch": "_rootNameLookup = src._rootNameLookup; // [databind#116]",
                "identical": false
            },
            {
                "k": 45,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'root't modify schema",
                "identical": false
            },
            {
                "k": 46,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'root't modify schema",
                "identical": false
            },
            {
                "k": 47,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 48,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'parent't modify schema",
                "identical": false
            },
            {
                "k": 50,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'parent't modify schema",
                "identical": false
            },
            {
                "k": 51,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 52,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 53,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root || _defaultNameLookup",
                "identical": false
            },
            {
                "k": 54,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root || _defaultNameLookup",
                "identical": false
            },
            {
                "k": 55,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 56,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 57,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'root || _rootNameLookup",
                "identical": false
            },
            {
                "k": 58,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'root || _rootNameLookup",
                "identical": false
            },
            {
                "k": 59,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'this._rootNameLookup",
                "identical": false
            },
            {
                "k": 60,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'this._rootNameLookup",
                "identical": false
            },
            {
                "k": 61,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'root || _defaultNameLookup",
                "identical": false
            },
            {
                "k": 62,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'root || _defaultNameLookup",
                "identical": false
            },
            {
                "k": 63,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _rootNameLookup",
                "identical": false
            },
            {
                "k": 64,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _rootNameLookup",
                "identical": false
            },
            {
                "k": 65,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root name as 'rootNameLookup",
                "identical": false
            },
            {
                "k": 66,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root name as 'rootNameLookup",
                "identical": false
            },
            {
                "k": 67,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the root of the src._rootNameLookup",
                "identical": false
            },
            {
                "k": 68,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the root of the src._rootNameLookup",
                "identical": false
            },
            {
                "k": 69,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root to ensure we don't modify schema",
                "identical": false
            },
            {
                "k": 70,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root to ensure we don't modify schema",
                "identical": false
            },
            {
                "k": 71,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'raw' nulls't modify schema",
                "identical": false
            },
            {
                "k": 72,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'raw' nulls't modify schema",
                "identical": false
            },
            {
                "k": 73,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'parent't modify schema",
                "identical": false
            },
            {
                "k": 74,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'parent't modify schema",
                "identical": false
            },
            {
                "k": 75,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _defaultNameLookup",
                "identical": false
            },
            {
                "k": 76,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _defaultNameLookup",
                "identical": false
            },
            {
                "k": 77,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'rootName't modify schema",
                "identical": false
            },
            {
                "k": 78,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'rootName't modify schema",
                "identical": false
            },
            {
                "k": 79,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the root of the src._root",
                "identical": false
            },
            {
                "k": 80,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the root of the src._root",
                "identical": false
            },
            {
                "k": 81,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'raw't modify schema",
                "identical": false
            },
            {
                "k": 82,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'raw't modify schema",
                "identical": false
            },
            {
                "k": 83,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to ensure we't modify schema",
                "identical": false
            },
            {
                "k": 84,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to ensure we't modify schema",
                "identical": false
            },
            {
                "k": 85,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'an't modify schema",
                "identical": false
            },
            {
                "k": 86,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'an't modify schema",
                "identical": false
            },
            {
                "k": 87,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 88,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'this._rootNameLookup",
                "identical": false
            },
            {
                "k": 90,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'this._rootNameLookup",
                "identical": false
            },
            {
                "k": 91,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 92,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'this.",
                "identical": false
            },
            {
                "k": 93,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'rootName't modify schema",
                "identical": false
            },
            {
                "k": 94,
                "patch": "_rootNameLookup = src._rootNameLookup; // just to ensure we'll also check _default to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'rootName't modify schema",
                "identical": false
            },
            {
                "k": 95,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'rootearch't modify schema",
                "identical": false
            },
            {
                "k": 96,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'rootearch't modify schema",
                "identical": false
            },
            {
                "k": 97,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' nulls but nodes",
                "identical": false
            },
            {
                "k": 98,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' nulls but nodes",
                "identical": false
            },
            {
                "k": 99,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'projectNameLookup",
                "identical": false
            },
            {
                "k": 100,
                "patch": "_rootNameLookup = src._rootNameLookup; // nope, root name as an underscore to see lead/trailing spaces is a parameter should not be assigned. Also declare the methods parameters as 'root' be assigned. Also declare the methods parameters as 'projectNameLookup",
                "identical": false
            }
        ],
        "buggy_line": "_rootNameLookup = src._rootNameLookup;",
        "fixed_line": "_rootNameLookup = new XmlRootNameLookup();"
    },
    "Closure-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "Context rhsContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Context rhsContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Context rhsContext = Context.OTHER; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Context rhsContext = Context.OTHER; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Context rhsContext = Context.OTHER_KEY;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Context rhsContext = Context.OTHER_KEY;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but also check the next one",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but also check the next one",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // apply lazy delta groupId, but also check the next one",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // apply lazy delta groupId, but also check the next one",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet bother",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet bother",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Context.OTHERContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Context.OTHERContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw'",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw'",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' characters",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' characters",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw's not yet",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw's not yet",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not yet bother",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not yet bother",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't how much was already added.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't how much was already added.",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet skipped",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet skipped",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yet bother",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yet bother",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' nulls but also check the next one",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' nulls but also check the next one",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yetCANCE with the next one",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yetCANCE with the next one",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's get day by default",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's get day by default",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yet read",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yet read",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not yet skipped",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not yet skipped",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Context.Context = Context.OTHER;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Context.Context = Context.OTHER;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yet bother",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yet bother",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ContextExprContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ContextExprContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet read",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet read",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Context rhsContext = Context.OTHER; // apply lazy how much was already added, but let's not yet bother",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Context rhsContext = Context.OTHER; // apply lazy how much was already added, but let's not yet bother",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Context. lContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Context. lContext = Context.OTHER;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' nulls but this method",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw' nulls but this method",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet, but this method",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet, but this method",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw't know if there's not yet",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but let's not store 'raw't know if there's not yet",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not store 'raw'",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not store 'raw'",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not found",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not found",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's an error here",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not store 'raw'T getExpr",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not store 'raw'T getExpr",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet skipped.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yet skipped.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yet",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's not yet",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yetcc",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not yetcc",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw'",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw'",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yetCANCE with the next one",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yetCANCE with the next one",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Context rhsContext = Context.Range;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Context rhsContext = Context.Range;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's get 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if there's get 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yet method",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not yet method",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's used below",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's used below",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not store 'raw'",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Context rhsContext = Context.OTHER_COLUMNS; // 4 for now, but we don't know if there's not store 'raw'",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw'T getExpr",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Context rhsContext = Context.OTHER; // just to ensure we don't know if not store 'raw'T getExpr",
                "identical": false
            }
        ],
        "buggy_line": "Context rhsContext = Context.OTHER;",
        "fixed_line": "Context rhsContext = getContextForNoInOperator(context);"
    },
    "Closure-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (result == null) { // is allowed to that was already miss the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (result == null) { // is allowed to that was already miss the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is null",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is null",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is any",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is any",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.bpmn20.xml",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.bpmn20.xml",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (result == null) { // taskId taskId as per [JACKSON-407] -- allow disabling wrapping; non-public, if (result != null)",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (result == null) { // taskId taskId as per [JACKSON-407] -- allow disabling wrapping; non-public, if (result != null)",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is allowed",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is allowed",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'raw't support such that.NO_OBJECT)",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'raw't support such that.NO_OBJECT)",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as that.NO_OBJECT)",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as that.NO_OBJECT)",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (result == null) { // NOSONAR (result != null if not called by the result; already miss the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (result == null) { // NOSONAR (result != null if not called by the result; already miss the root of the bar file and the value is example.",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'raw't support such that.NO_TYPE",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'raw't support such that.NO_TYPE",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.is header",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.is header",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'this.NO_OBJECT)",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'this.NO_OBJECT)",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.isDirected",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.isDirected",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.is_TYPE",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.is_TYPE",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.is",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.is",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, if not called by default",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, if not called by default",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is allowed to that.",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is allowed to that.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result)",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result)",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (result == null) { // NOSONAR (result != null if not called by default",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (result == null) { // NOSONAR (result != null if not called by default",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as that.NO_TYPE",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as that.NO_TYPE",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, if we support such coercion?",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, if we support such coercion?",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.is by default",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.is by default",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (result == null) { // NOSONAR (result != null only before/after document",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (result == null) { // NOSONAR (result != null only before/after document",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.isDirected.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.isDirected.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (result == null) { // NOSONAR (result != null if not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (result == null) { // NOSONAR (result != null if not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result == null if not called by default",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, result == null if not called by default",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'raw't support such that.NO_OBJECT, if not called by default",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as 'raw't support such that.NO_OBJECT, if not called by default",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (result == null) { // collection[like], map; should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (result == null) { // taskId taskId as per [JACKSON-407] -- allow disabling wrapping; non-public, if (result != null if not called by default",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (result == null) { // taskId taskId as per [JACKSON-407] -- allow disabling wrapping; non-public, if (result != null if not called by default",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (result == null) { // taskId taskId as per [JACKSON-407] -- allow disabling wrapping; but if (result != null if not called by default",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (result == null) { // taskId taskId as per [JACKSON-407] -- allow disabling wrapping; but if (result != null if not called by default",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, if (result)",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, if (result)",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (result == null) { // taskId taskId as per [JACKSON-741]",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (result == null) { // taskId taskId as per [JACKSON-741]",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is example.NO_OBJECT, that.",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, if not called by default",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as that.NO_OBJECT, if not called by default",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is allowed to that.NO_OBJECT, if not called by default",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is allowed to that.NO_OBJECT, if not called by default",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT)",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (result == null) { // collection[like], map; caller should not be assigned. Also declare the methods parameters as 'this.NO_OBJECT)",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (result == null) { // taskId taskId as per [JACKSON-407] -- allow disabling wrapping; already returned on that.NO_OBJECT, if (result != null)",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (result == null) { // taskId taskId as per [JACKSON-407] -- allow disabling wrapping; already returned on that.NO_OBJECT, if (result != null)",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (result == null) { // could also need to handle bundles, if we support such coercion?",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (result == null) { // could also need to handle bundles, if we support such coercion?",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is not called by default",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (result == null) { // could also need to check the .bpmn20.xml is in the root of the bar file and the value is not called by default",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as that.NO_OBJECT, if (result)",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (result == null) { // NOSONAR (result != null if not be assigned. Also declare the methods parameters as that.NO_OBJECT, if (result)",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (result == null) { // taskId taskId is allowed to that.NO_OBJECT, if not called by default",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (result == null) { // taskId taskId is allowed to that.NO_OBJECT, if not called by default",
                "identical": false
            }
        ],
        "buggy_line": "if (result != null) {",
        "fixed_line": "if (!result.isNoType()) {"
    },
    "Closure-73": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c >= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c > 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c > 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c > 0x1f || c == 0x7f) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c > 0x1f || c == 0x7f) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c <= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c <= 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c > 0x1ff && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c > 0x1ff && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c > 0x1f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c > 0x1f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c > 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c > 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // tiny/short ASCII",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // tiny/short ASCII",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c > 0x0f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c > 0x0f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // tiny",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // tiny",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c > 0x1f || c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c > 0x1f || c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c > 0x1ff || c == 0x7f) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c > 0x1ff || c == 0x7f) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all done with 0x0800 - 0x7f",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all done with 0x0800 - 0x7f",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty instance",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty instance",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty -1",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty -1",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c != 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c != 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop...",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop...",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c < 0x1f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c < 0x1f || c > 0x7f) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty line is nope",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty line is nope",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c == 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c == 0x1f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all...",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all...",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all then we support such coercion?",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all then we support such coercion?",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c >= 0x0f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c >= 0x0f && c <= 0x7f) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c >= 0x1f && c <= 0x7f) { //Clause",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (c >= 0x1f && c <= 0x7f) { //Clause",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure or partial",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure or partial",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all done with nope",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all done with nope",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all ASCII",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all ASCII",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // 13 or partial",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // 13 or partial",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure this is nope",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure this is nope",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop; nope",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can do a tight inner loop; nope",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure this is removed",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure this is removed",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // tiny/short ASCII",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // tiny/short ASCII",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make sure all done with 0x0800 - 0x7f",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make sure all done with 0x0800 - 0x7f",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all done with 0x7f",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all done with 0x7f",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all done with 0x0800\";",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all done with 0x0800\";",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty name is nope",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make empty name is nope",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure is nope",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure is nope",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c >= 0x1f && c <= 0x7f;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c >= 0x1f && c <= 0x7f;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c > 0x1f && c <= 0x7f) { // over max?",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c > 0x1f && c <= 0x7f) { // over max?",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make empty line is nope",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make empty line is nope",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // tiny",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // tiny",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can this ever occur?",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so, can this ever occur?",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make empty instance",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c <= 0x1f && c <= 0x7f) { // If so make empty instance",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all then",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all then",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all types",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c >= 0x1f && c <= 0x7f) { // If so make sure all types",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c > 0x1f && c > 0x7f) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c > 0x1f && c > 0x7f) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c <= 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c <= 0x1f && c != 0x7f) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c > 0x1f && c <= 0x7f) { // tiny/short ASCII",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c > 0x1f && c <= 0x7f) { // tiny/short ASCII",
                "identical": false
            }
        ],
        "buggy_line": "if (c > 0x1f && c <= 0x7f) {",
        "fixed_line": "if (c > 0x1f && c < 0x7f) {"
    },
    "Closure-86": {
        "fixes": [
            {
                "k": 1,
                "patch": "return false;",
                "identical": true
            },
            {
                "k": 2,
                "patch": "return false;",
                "identical": true
            },
            {
                "k": 3,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'parent't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'parent't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'parent't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'parent't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'annotated the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'annotated the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'annotated the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'annotated the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'annotated the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'annotated the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppress be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'suppress be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'annotated the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'annotated the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'an't return false -> will be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'parent' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'this. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'annotated the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return false; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'an't know if there's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'raw't return false -> will be assigned. Also declare the methods parameters as 'annotated the methods parameters as 'final'.",
                "identical": false
            }
        ],
        "buggy_line": "return true;",
        "fixed_line": "return false;"
    },
    "Jsoup-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return accum.toString().trim;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return accum.toString().trim;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return accum.toString().trim();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return accum.toString().trim();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return accum.toString;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return accum.toString;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return accum;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return accum;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return accum.toString().trim()[0];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return accum.toString().trim()[0];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return accum.toString().trim();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return accum.toString().trim();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return return accum.toString().trim;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return return accum.toString().trim;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return callbacks.toString().trim;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return callbacks.toString().trim;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return delegate.toString;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return delegate.toString;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return source.toString;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return source.toString;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "returnConfiguration.toString;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "returnConfiguration.toString;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return form.toString;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return form.toString;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return form.toString().trim;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return form.toString().trim;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "returnOrientation.toString;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "returnOrientation.toString;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return(-1.toString;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return(-1.toString;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return(-1.toString().trim;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return(-1.toString().trim;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return return accum.toString().trim();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return return accum.toString().trim();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return MILLISECONDS.toString().trim;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return MILLISECONDS.toString().trim;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return accum.toString().trimSpaces;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return accum.toString().trimSpaces;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return accum.toString().trim);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return accum.toString().trim);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return html;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return html;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return MILLISECONDS.toString().trim();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return MILLISECONDS.toString().trim();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return node.toString;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return node.toString;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return that.toString;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return that.toString;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return callbacks.toString().trim();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return callbacks.toString().trim();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "returntruncate.toString;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "returntruncate.toString;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return accum.toString().trim_QUOTED_KEY;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return accum.toString().trim_QUOTED_KEY;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return date.toString;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return date.toString;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return scaled.toString().trim;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return scaled.toString().trim;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return MILLISECONDS.toString;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return MILLISECONDS.toString;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return resp.toString().trim();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return resp.toString().trim();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return return accum.toString;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return return accum.toString;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "returnstar.toString().trim();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "returnstar.toString().trim();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return accum.toString().trim VALUE_TYPE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return accum.toString().trim VALUE_TYPE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return accum.toStringUTURE_TRANSFORM_URLENCODED;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return accum.toStringUTURE_TRANSFORM_URLENCODED;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return accum.toString().trimyclable;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return accum.toString().trimyclable;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return scaled.toString;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return scaled.toString;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return accum.toString()[0];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return accum.toString()[0];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "returnstar.toString;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "returnstar.toString;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return resp.toString;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return resp.toString;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return resp.toString().trim;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return resp.toString().trim;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return accum.toString().trimmed;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return accum.toString().trimmed;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return accum.toStringUTURE_TRANSFORMER_URLENCODED;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return accum.toStringUTURE_TRANSFORMER_URLENCODED;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return accum.toStringUTURE_TRANSFORM_IN_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return accum.toStringUTURE_TRANSFORM_IN_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return accum.toString().trim : accum;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return accum.toString().trim : accum;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return accum.toString().trimED_NODE;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return accum.toString().trimED_NODE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "returnOrientation.toString().trim;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "returnOrientation.toString().trim;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return accum.toString().trim_QUOTED;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return accum.toString().trim_QUOTED;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return(-1.toString().trim();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return(-1.toString().trim();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return delegate.toString().trim;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return delegate.toString().trim;",
                "identical": false
            }
        ],
        "buggy_line": "return accum.toString().trim();",
        "fixed_line": "return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString();"
    },
    "Mockito-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return NR_OF_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return NR_OF_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return TokenType.TK_PROP_KEY_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return TokenType.TK_PROP_KEY_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return TokenType.TK_PROP_KEY_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return TokenType.TK_PROP_KEY_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return TokenType.TK_PROP_KEY;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return TokenType.TK_PROP_KEY;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return TokenType.TK_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return TokenType.TK_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return TokenType.TK_PROP_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return TokenType.TK_PROP_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return CCS_BEFORE_START_WITHINHERIT;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return CCS_BEFORE_START_WITHINHERIT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "returnBYTE_BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "returnBYTE_BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return TokenType.TK_PROP_KEY_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return TokenType.TK_PROP_KEY_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return CCS_BEFORE_START_WITHIN_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return CCS_BEFORE_START_WITHIN_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return CCS_BEFORE_START_WITH_PREVIOUS;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return CCS_BEFORE_START_WITH_PREVIOUS;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return CCS_BEFORE_PREFIX;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return CCS_BEFORE_PREFIX;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_TYPES;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_TYPES;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return UNRECOGNIZED;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return UNRECOGNIZED;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return TokenType.TK_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return TokenType.TK_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return TokenType.TK_BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return TokenType.TK_BIG_DECIMAL;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return CCS_BEFORE_START_WITHINSTRUCTIONS;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return CCS_BEFORE_START_WITHINSTRUCTIONS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTER;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTER;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return NR_OF_RESERVED_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return NR_OF_RESERVED_COLUMNS; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTER_ONLY;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTER_ONLY;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return CCS_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return CCS_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return TokenType.TK_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return TokenType.TK_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return CYNC_BOUNDARY_TTY_BIGINT;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return CYNC_BOUNDARY_TTY_BIGINT;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return TokenType.TK_COLUMNS; // since 2.7",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return TokenType.TK_COLUMNS; // since 2.7",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return TokenType.TK_SERVER_ERROR;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return TokenType.TK_SERVER_ERROR;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_TYPE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_TYPE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTER_URLENCODED;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTER_URLENCODED;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_ONLY;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_ONLY;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return TokenType.TK_PREFIXED;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return TokenType.TK_PREFIXED;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return TokenType.TK_PROP_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return TokenType.TK_PROP_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return CCS_BEFORE_START_WITHINK, returnType) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return CCS_BEFORE_START_WITHINK, returnType) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return NR_OF_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return NR_OF_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return CYNC_CASE_ISOLATION;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return CYNC_CASE_ISOLATION;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return invocation;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return invocation;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return NR_OF_RESERVED_WORD ) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return NR_OF_RESERVED_WORD ) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return TokenType.TK_PROP_CLASS;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return TokenType.TK_PROP_CLASS;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTERANCE_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTERANCE_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_DELTA;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_DELTA;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return TokenType.TK_PREFIXMATCHING;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return TokenType.TK_PREFIXMATCHING;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTERANCE_ONLY;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTERANCE_ONLY;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTERODS;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTERODS;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTERANCE_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return CYNC_BOUNDARY_TTY_PRINTERANCE_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_SIZE;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return CYNC_BOUNDARY_TTY_BIGNEEMBEDDED_SIZE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return CCS_BEFORE_START_WITHINLINE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return CCS_BEFORE_START_WITHINLINE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return NR_OF_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return NR_OF_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return TokenType.TK_PROP_KEY_RESERVED_LABELS;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return TokenType.TK_PROP_KEY_RESERVED_LABELS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return CCS_BEFORE_START_WITHIN_TYPES;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return CCS_BEFORE_START_WITHIN_TYPES;",
                "identical": false
            }
        ],
        "buggy_line": "return 1;",
        "fixed_line": "return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;"
    },
    "Jsoup-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static String String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static String String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static StringString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static StringString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static String StringString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static String StringString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static String nullString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static String nullString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static StringBuffers = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static StringBuffers = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static StringPositionString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static StringPositionString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static String filePath = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static String filePath = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static String jsonString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static String jsonString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static StringNumberString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static StringNumberString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static String _String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static String _String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static StringdataString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static StringdataString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static String subString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static String subString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static String parentString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static String parentString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static StringViewString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static StringViewString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static String map = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static String map = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static String String = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static String String = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static StringF = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static StringF = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static String apiString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static String apiString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static String booleanString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static String booleanString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static String NULL = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static String NULL = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static StringSeen = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static StringSeen = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static String asciiString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static String asciiString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static String orphan = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static String orphan = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static StringBuffersString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static StringBuffersString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static String sString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static String sString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static StringIDString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static StringIDString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static StringString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static StringString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static String strString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static String strString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static String applyString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static String applyString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static String matrix = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static String matrix = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static String contentTypeString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static String contentTypeString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static Stringpush = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static Stringpush = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static String instructions = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static String instructions = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static String> = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static String> = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static StringFree = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static StringFree = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static StringNonString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static StringNonString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static String STD = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static String STD = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static String intString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static String intString = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static StringDir = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static StringDir = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static String int = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static String int = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static String edition = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static String edition = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static String TYPE_String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static String TYPE_String = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static String getFactory = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static String getFactory = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static StringReader = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static StringReader = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static String String =String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static String String =String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static Stringopen = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static Stringopen = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static String StringString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static String StringString = String.valueOf(0x0000);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static StringK = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static StringK = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static StringRESPONSE = String.valueOf(0x0000;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static StringRESPONSE = String.valueOf(0x0000;",
                "identical": false
            }
        ],
        "buggy_line": "private static String nullString = String.valueOf(0x0000);",
        "fixed_line": "private static String nullString = String.valueOf('\\u0000');"
    },
    "Math-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "for (int i = 0; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "for (int i = 0; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "for (int i = 0; i < weightsWts.length; i++) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "for (int i = 0; i < weightsWts.length; i++) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "for (int i = 0; i < weights.length; i++) { weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "for (int i = 0; i < weights.length; i++) { weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "for (int i = 0; i < weightsType.length; i++) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "for (int i = 0; i < weightsType.length; i++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "for (int i = 0; i < weightsWWts.length; i++) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "for (int i = 0; i < weightsWWts.length; i++) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "for (int i = 0; i < weightsCount; i++) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "for (int i = 0; i < weightsCount; i++) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "for (int i = 0; i < weights(), sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "for (int i = 0; i < weights(), sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "for (int i = 0; i < startWts.length; i++) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "for (int i = 0; i < startWts.length; i++) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "for (int i = 0; i < optWts.length; i++) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "for (int i = 0; i < optWts.length; i++) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "for (int i = 0; i < origWts.length; i++) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "for (int i = 0; i < origWts.length; i++) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "for (int i = 0; i < attributesWts.length; i++) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "for (int i = 0; i < attributesWts.length; i++) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "for (int i = 0; i < sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "for (int i = 0; i < sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "for (int i = 0; i < accessWts.length; i++) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "for (int i = 0; i < accessWts.length; i++) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (int i = 0; i < stripWts.length; i++) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "for (int i = 0; i < stripWts.length; i++) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue 1.0 / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue 1.0 / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "for (int i = 0; i < paramWts.length; i++) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "for (int i = 0; i < paramWts.length; i++) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "for (int i = 0; i < exceptionWts.length; i++) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "for (int i = 0; i < exceptionWts.length; i++) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "for (int i = 0; i < numWts.length; i++) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "for (int i = 0; i < numWts.length; i++) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "for (int i = 0; i < ':Wts.length; i++) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (int i = 0; i < ':Wts.length; i++) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (int i = 0; i <LinkWts.length; i++) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "for (int i = 0; i <LinkWts.length; i++) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "for (int i = 0; i < weightsc.length; i++) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "for (int i = 0; i < weightsc.length; i++) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (int i = 0; i < lineWts.length; i++) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "for (int i = 0; i < lineWts.length; i++) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "for (int i = 0; i < weights.length; i++) { / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "for (int i = 0; i < weights.length; i++) { / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (int i = 0; i < weights.length; i++) {append(sumWts, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "for (int i = 0; i < weights.length; i++) {append(sumWts, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "for (int i = 0; i < weights.length; i++) {// compressed weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (int i = 0; i < weights.length; i++) {// compressed weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "for (int i = 0; i < weightsBoxes.length; i++) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "for (int i = 0; i < weightsBoxes.length; i++) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (int i = 0; i < weights.length; i++) {B / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (int i = 0; i < weights.length; i++) {B / weights, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (int i = 0; i < weights.length; i++) { weights,Us[i] = sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "for (int i = 0; i < weights.length; i++) { weights,Us[i] = sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (int i = 0; i < choice.length; i++) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "for (int i = 0; i < choice.length; i++) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "for (int i = 0; i < weights.length; i++) {append(sumWts[i] = sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "for (int i = 0; i < weights.length; i++) {append(sumWts[i] = sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "for (int i = 0; i < weightsWffCols; i++) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "for (int i = 0; i < weightsWffCols; i++) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "for (int i = 0; i < weights.length; i++) {sentenceWts[i] = sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "for (int i = 0; i < weights.length; i++) {sentenceWts[i] = sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "for (int i = 0; i <sha.length; i++) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (int i = 0; i <sha.length; i++) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (int i = 1; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (int i = 1; i < weights.length; i++) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "for (int i = 0; i < weights.length; i++) {// compressed, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "for (int i = 0; i < weights.length; i++) {// compressed, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "for (int i = 0; i < BOOLEAN.length; i++) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "for (int i = 0; i < BOOLEAN.length; i++) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue, sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "for (int i = 0; i < branch.length; i++) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "for (int i = 0; i < branch.length; i++) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "for (int i = 0; i < AST.length; i++) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (int i = 0; i < AST.length; i++) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "for (int i = 0; i < weights.length; i++) { weights, sumWts[i] = sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (int i = 0; i < weights.length; i++) { weights, sumWts[i] = sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "for (int i = 0; i < decrement.length; i++) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "for (int i = 0; i < decrement.length; i++) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "for (int i = 0; i < 48.length; i++) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (int i = 0; i < 48.length; i++) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "for (int i = 0; i < weights.length; i++) {append(sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "for (int i = 0; i < weights.length; i++) {append(sumWts.length; i++) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "for (int i = 0; i < weights.length; i++) { weights, orWts.length; i++) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "for (int i = 0; i < weights.length; i++) { weights, orWts.length; i++) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "for (int i = 0; i < weights.length; i++) { weights, maskWts.length; i++) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "for (int i = 0; i < weights.length; i++) { weights, maskWts.length; i++) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "for (int i = 0; i < parameter.length; i++) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (int i = 0; i < parameter.length; i++) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue 1.0 / weights.length; i++) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (int i = 0; i < weights.length; i++) {fieldValue 1.0 / weights.length; i++) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "for (int i = 0; i < namespaces.length; i++) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "for (int i = 0; i < namespaces.length; i++) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "for (int i = 0; i < weights.length; i++) {remoteAddress.length; i++) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "for (int i = 0; i < weights.length; i++) {remoteAddress.length; i++) {",
                "identical": false
            }
        ],
        "buggy_line": "for (int i = 0; i < weights.length; i++) {",
        "fixed_line": "for (int i = begin; i < begin + length; i++) {"
    },
    "Closure-168": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (t.getScopeDepth == 2) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (t.getScopeDepth == 2) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (t.getScopeDepth == 2) { // end of record or input",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (t.getScopeDepth == 2) { // end of record or input",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (t.getScopeDepth == 2) { // end of record or input...",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (t.getScopeDepth == 2) { // end of record or input...",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (t.getScopeDepthDepth == 2) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (t.getScopeDepthDepth == 2) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (t.getScopeDepth instanceof 2) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (t.getScopeDepth instanceof 2) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (t.getScopeDepth == 3) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (t.getScopeDepth == 3) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (t.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (t.getScopeDepth() == 2) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (t.getScopeDepth == 2) { // null only before/after document",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (t.getScopeDepth == 2) { // null only before/after document",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (t.getScopeDepth == 2) { // No namespaces",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (t.getScopeDepth == 2) { // No namespaces",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (t.getScopeDepth == 2) { // end-of-order",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (t.getScopeDepth == 2) { // end-of-order",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (t.getScopeDepth == 2) { // handle headless",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (t.getScopeDepth == 2) { // handle headless",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (t.getScopeDepth == 2) { // handle LF later on",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (t.getScopeDepth == 2) { // handle LF later on",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (t.getScopeDepth == 2) { // end of input",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (t.getScopeDepth == 2) { // end of input",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (t.getScopeDepth == 2) { // end of input?",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (t.getScopeDepth == 2) { // end of input?",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (t.getScopeDepth == 2) { // allows not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (t.getScopeDepth == 2) { // allows not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (t.getScopeDepthV6_PART_COUNT == 2) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (t.getScopeDepthV6_PART_COUNT == 2) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (t.getScopeDepth == 2) { // only one-order",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (t.getScopeDepth == 2) { // only one-order",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (t.getScopeDepth == 2) { // allows not store 'raw't been discovered yet",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (t.getScopeDepth == 2) { // allows not store 'raw't been discovered yet",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (t.getScopeDepth == 2) { // end of input...",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (t.getScopeDepth == 2) { // end of input...",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (t.getScopeDepth == 2) { // nope, looks like-order",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (t.getScopeDepth == 2) { // nope, looks like-order",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (t.getScopeDepth == 2) { // skip to avoid double set false pos",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (t.getScopeDepth == 2) { // skip to avoid double set false pos",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (t.getScopeDepth == 2) { //checkbox't been discovered yet",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (t.getScopeDepth == 2) { //checkbox't been discovered yet",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (t.getScopeDepth == 2) { // nope, we don't been discovered yet",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (t.getScopeDepth == 2) { // nope, we don't been discovered yet",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can't been discovered yet",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can't been discovered yet",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't been discovered yet",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't been discovered yet",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are the end of record or input",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are the end of record or input",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (t.getScopeDepth == 2) { // nope, we don't support such coercion?",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (t.getScopeDepth == 2) { // nope, we don't support such coercion?",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (t.getScopeDepth == 2) { // only one allowed",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (t.getScopeDepth == 2) { // only one allowed",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't matched.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't matched.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (t.getScopeDepth == 2) { // allows not, looks like-order",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (t.getScopeDepth == 2) { // allows not, looks like-order",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (t.getScopeDepth == 2) { // no, looks like-order",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (t.getScopeDepth == 2) { // no, looks like-order",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (t.getScopeDepth) == 2) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (t.getScopeDepth) == 2) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can be only one",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can be only one",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (t.getScopeDepth == 2) { // simple literals, we are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (t.getScopeDepth == 2) { // simple literals, we are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (t.getScopeDepth == 2) { // updatable, looks like-order",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (t.getScopeDepth == 2) { // updatable, looks like-order",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned.",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned.",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are the next unmatched",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (t.getScopeDepth == 2) { // updatable, we are the next unmatched",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can not be assigned.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can not be assigned.",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can this ever occur?",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we can this ever occur?",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (t.getScopeDepth == 2) { // null only before/browse/after document",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (t.getScopeDepth == 2) { // null only before/browse/after document",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we in case there's",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (t.getScopeDepth == 2) { // end-of-line means we in case there's",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't know if there's",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't know if there's",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't matched",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't matched",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't be assigned.",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (t.getScopeDepth == 2) { // allows not yet; should be assigned. Also declare the methods parameters as 'raw't be assigned.",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (t.getScopeDepth == 2) { // only before/after document",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (t.getScopeDepth == 2) { // only before/after document",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (t.getScopeDepth == 2) { // 2000, looks like-order",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (t.getScopeDepth == 2) { // 2000, looks like-order",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (t.getScopeDepth == 2) { // handle environment includes",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (t.getScopeDepth == 2) { // handle environment includes",
                "identical": false
            }
        ],
        "buggy_line": "if (t.getScopeDepth() <= 2) {",
        "fixed_line": "if (t.getScopeDepth() <= 1) {"
    },
    "Chart-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return \" title=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return \" title=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\"\";",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\"\";",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altTipText",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altTipText",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\\\"\";",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\";",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\";",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altC\";",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altC\";",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altExecText",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altExecText",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altUsed\";",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altUsed\";",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt altText",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt altText",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alter;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alter;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" '\" + toolTipText;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" '\" + toolTipText;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altKeys;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altKeys;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alttedTipText",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alttedTipText",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"\" + toolTipText);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altRequiresText",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altRequiresText",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" \"\\\" alt=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alts\";",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alts\";",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt getLastText",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt getLastText",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\"PTipText",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\"PTipText",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt CURRENTText",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt CURRENTText",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt CircleText",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt CircleText",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" // add anTipText",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" // add anTipText",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\";",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt 2",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt 2",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alts;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alts;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altphanText",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altphanText",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt HttpSessionText",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt HttpSessionText",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt maxWidth;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt maxWidth;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt countryText",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt countryText",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altfunctionsTipText",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altfunctionsTipText",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"=\\\"=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"=\\\"=\\\"\" + toolTipText;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altIntegText",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altIntegText",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altclosed;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altclosed;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altressorText",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altressorText",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt maxLengthText",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt maxLengthText",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt ClosedText",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt ClosedText",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altegateText",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altegateText",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altMenuText",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altMenuText",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altOfMonthText",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altOfMonthText",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt libC\";",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt libC\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"=\\\"\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"=\\\"\";",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt updatedText",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt updatedText",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altcalcText",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" altcalcText",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt getLastText;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt getLastText;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"=\\\"\" + toolTipText);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt=\\\"=\\\"\" + toolTipText);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt+)",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return \" title=\\\"\" + toolTipText + \"\\\" alt+)",
                "identical": false
            }
        ],
        "buggy_line": "return \" title=\\\"\" + toolTipText",
        "fixed_line": "return \" title=\\\"\" + ImageMapUtilities.htmlEscape(toolTipText)"
    },
    "Mockito-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "return StringDescription.toString;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return StringDescription.toString;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return StringDescription.toString(arg;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return StringDescription.toString(arg;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return StringDescription.toString(arg);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return StringDescription.toString(arg);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return StringDescription.toString(arg) m;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return StringDescription.toString(arg) m;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return StringDescription;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return StringDescription;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return StringDescription.toString) m;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return StringDescription.toString) m;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return StringDescription.toString) arg;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return StringDescription.toString) arg;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return StringDescription.toString(arg) arg;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return StringDescription.toString(arg) arg;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return StringDescription.toString endpoint;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return StringDescription.toString endpoint;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return StringDescription.toString m).equals(arg;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return StringDescription.toString m).equals(arg;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return StringDescription.toString(16).equals(arg);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return StringDescription.toString(16).equals(arg);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return StringDescription.toString Em).equals(arg;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return StringDescription.toString Em).equals(arg;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return StringDescription.toString m;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return StringDescription.toString m;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return StringDescription.toStringL).equals(arg);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return StringDescription.toStringL).equals(arg);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return StringDescription.toString m).equals(arg);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return StringDescription.toString m).equals(arg);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return StringDescription.toString Em).equals(arg);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return StringDescription.toString Em).equals(arg);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return StringDescription.toString(arg).equals(arg);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return StringDescription.toString(arg).equals(arg);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return StringDescription.toStringS).equals(arg;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return StringDescription.toStringS).equals(arg;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return StringDescription.toString(16).equals(arg)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return StringDescription.toString(16).equals(arg)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return StringDescription.toStringFromarg;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return StringDescription.toStringFromarg;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return StringDescription.toString(arg).equals(arg;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return StringDescription.toString(arg).equals(arg;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return StringDescription.toStringS).equals(arg);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return StringDescription.toStringS).equals(arg);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return StringDescription.toString(16).equals(arg;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return StringDescription.toString(16).equals(arg;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return StringDescription.toString(arg).length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return StringDescription.toString(arg).length;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return StringDescription.toString(arg);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return StringDescription.toString(arg);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return StringDescription.toStringL).equals(arg;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return StringDescription.toStringL).equals(arg;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return StringDescription != arg.toString;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return StringDescription != arg.toString;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return StringDescription.toString(arg, arg;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return StringDescription.toString(arg, arg;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return StringDescription.toString(arg)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return StringDescription.toString(arg)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return StringDescription.toString MINUS_OBJECT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return StringDescription.toString MINUS_OBJECT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return StringDescription.toString MINOR_NAME;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return StringDescription.toString MINOR_NAME;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return StringDescription.toStringS;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return StringDescription.toStringS;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return StringDescription.toStringtoString;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return StringDescription.toStringtoString;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return StringDescription.toString(arg, arg.value;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return StringDescription.toString(arg, arg.value;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return StringDescription.toString(m).toString;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return StringDescription.toString(m).toString;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return StringDescription.toString(arg). m;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return StringDescription.toString(arg). m;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return StringDescription.toString(argS).equals(arg);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return StringDescription.toString(argS).equals(arg);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return StringDescription.toString(16;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return StringDescription.toString(16;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return StringDescription.toString(arg) + 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return StringDescription.toString(arg) + 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return StringDescription.toString(arg)[0];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return StringDescription.toString(arg)[0];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return StringDescription.toString(argS).equals(arg;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return StringDescription.toString(argS).equals(arg;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return StringDescription.toStringTo m).equals(arg);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return StringDescription.toStringTo m).equals(arg);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return StringDescription.toString MINOR_NULL_ELEMENTS;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return StringDescription.toString MINOR_NULL_ELEMENTS;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return StringDescription.toString(arg) object).equals(arg;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return StringDescription.toString(arg) object).equals(arg;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return StringDescription.toString MINUS_KEY;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return StringDescription.toString MINUS_KEY;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return StringDescription.toStringTo m).equals(arg;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return StringDescription.toStringTo m).equals(arg;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return StringDescription.toString(arg).equalsequals(arg);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return StringDescription.toString(arg).equalsequals(arg);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return StringDescription.toString MINUS_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return StringDescription.toString MINUS_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return StringDescription.toString(arg, arg.toString;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return StringDescription.toString(arg, arg.toString;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return StringDescription.toString);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return StringDescription.toString);",
                "identical": false
            }
        ],
        "buggy_line": "return StringDescription.toString(m).equals(arg.toString());",
        "fixed_line": "return StringDescription.toString(m).equals(arg == null? \"null\" : arg.toString());"
    },
    "Closure-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (options.dependencyOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (options.dependencyOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (options.dependencyOptions.needsManagement) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (options.dependencyOptions.needsManagement) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (options.dependencyOptions.needsManagementED && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (options.dependencyOptions.needsManagementED && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (options.dependencyOptions.needsManagement() || options.closurePass) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (options.dependencyOptions.needsManagement() || options.closurePass) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (options.dependencyOptions.needsManagement() && options.closurePass) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (options.dependencyOptions.needsManagement() && options.closurePass) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (options.dependencyOptions.needsManagementED && options.closurePass) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (options.dependencyOptions.needsManagementED && options.closurePass) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (options.dependencyOptions.needsManagementUser && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (options.dependencyOptions.needsManagementUser && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (options.dependencyOptions != options.closurePass) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (options.dependencyOptions != options.closurePass) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (options.dependencyOptions.needsManagementUser && options.closurePass) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (options.dependencyOptions.needsManagementUser && options.closurePass) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (options.dependencyOptions.needsManagement(options.closurePass) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (options.dependencyOptions.needsManagement(options.closurePass) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (options.dependencyOptions.needsManagement && options.closurePass) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (options.dependencyOptions.needsManagement && options.closurePass) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (options.dependencyOptions != 0 && options.closurePass) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (options.dependencyOptions != 0 && options.closurePass) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (options.dependencyOptions.needsManagement() || options.closurePass;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (options.dependencyOptions.needsManagement() || options.closurePass;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (options.dependencyOptions.needsManagement == 0 && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (options.dependencyOptions.needsManagement == 0 && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass){",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass){",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass instanceof options.closurePass) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass instanceof options.closurePass) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (options.dependencyOptions.needsManagement() || inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (options.dependencyOptions.needsManagement() || inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (options.dependencyOptions.needsManagement() ||options.closurePass) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (options.dependencyOptions.needsManagement() ||options.closurePass) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (options.dependencyOptions.needsManagementContent && options.closurePass) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (options.dependencyOptions.needsManagementContent && options.closurePass) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (options.dependencyOptions.needsManagement != 0 && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (options.dependencyOptions.needsManagement != 0 && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (options.dependencyOptions != 0 && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (options.dependencyOptions != 0 && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (options.dependencyOptions || options.closurePass) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (options.dependencyOptions || options.closurePass) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if(options.dependencyOptions.needsManagement() && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if(options.dependencyOptions.needsManagement() && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (options.dependencyOptions.needsManagementPosition && options.closurePass) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (options.dependencyOptions.needsManagementPosition && options.closurePass) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (options.dependencyOptions.needsManagementUrl && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (options.dependencyOptions.needsManagementUrl && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (options.dependencyOptions.needsManagement Arrays && options.closurePass) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (options.dependencyOptions.needsManagement Arrays && options.closurePass) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (options.dependencyOptions.needsManagementAttr && options.closurePass) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (options.dependencyOptions.needsManagementAttr && options.closurePass) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePass {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (options.dependencyOptions.needsManagementOL && options.closurePass) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (options.dependencyOptions.needsManagementOL && options.closurePass) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (options.dependencyOptions.needsManagementDown && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (options.dependencyOptions.needsManagementDown && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (options.dependencyOptions.needsManagementED || options.closurePass) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (options.dependencyOptions.needsManagementED || options.closurePass) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (options.dependencyOptions.needsManagementBaseline || options.closurePass) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (options.dependencyOptions.needsManagementBaseline || options.closurePass) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (options.dependencyOptions.needsManagementBuffers && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (options.dependencyOptions.needsManagementBuffers && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (options.dependencyOptions.needsManagementRoute && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (options.dependencyOptions.needsManagementRoute && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (options.dependencyOptions.needsManagemented && options.closurePass) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (options.dependencyOptions.needsManagemented && options.closurePass) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (options.dependencyOptions.needsManagement * options.closurePass) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (options.dependencyOptions.needsManagement * options.closurePass) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (options.dependencyOptions.needsManagement() && inputsInputs.closurePass) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (options.dependencyOptions.needsManagement() && inputsInputs.closurePass) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (options.dependencyOptions.needsManagement && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (options.dependencyOptions.needsManagement && inputs.closurePass) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (options.dependencyOptions.needsManagement == 0 && options.closurePass) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (options.dependencyOptions.needsManagement == 0 && options.closurePass) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if(options.dependencyOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if(options.dependencyOptions && options.closurePass) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (options.dependencyOptions.needsManagement() && doc.closurePass) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (options.dependencyOptions.needsManagement() && doc.closurePass) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (options.dependencyOptions.needsManagement() && dosingType.closurePass) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (options.dependencyOptions.needsManagement() && dosingType.closurePass) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePassPass) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePassPass) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePassV) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.closurePassV) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.TCPass) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (options.dependencyOptions.needsManagement() && inputs.TCPass) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (options.dependencyOptions.needsManagement Arrays.closurePass) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (options.dependencyOptions.needsManagement Arrays.closurePass) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (options.dependencyOptions.needsManagement() || options.closurePass instanceof options.closurePass) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (options.dependencyOptions.needsManagement() || options.closurePass instanceof options.closurePass) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (options.dependencyOptions != this.closurePass) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (options.dependencyOptions != this.closurePass) {",
                "identical": false
            }
        ],
        "buggy_line": "if (options.dependencyOptions.needsManagement() && options.closurePass) {",
        "fixed_line": "if (options.dependencyOptions.needsManagement()) {"
    },
    "Math-105": {
        "fixes": [
            {
                "k": 1,
                "patch": "return sumXY * sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return sumXY * sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return sumXY * 1 / sumXY;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return sumXY * 1 / sumXY;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return sumXY * 1024 * sumXY;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return sumXY * 1024 * sumXY;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return sumXY * 2 + sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return sumXY * 2 + sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return sumXY * 31 / sumXY;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return sumXY * 31 / sumXY;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return sumXY * sumXY / sum sumXY;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return sumXY * sumXY / sum sumXY;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return sumXY * classXY / sumXY;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return sumXY * classXY / sumXY;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return sumXY * this.sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return sumXY * this.sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return sumXY * 1 + sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return sumXY * 1 + sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return sumXY * this. sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return sumXY * this. sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return sumXY * sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return sumXY * sumXY / sum_;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return sumXY * sumXY / sum_;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return sumXY * 2 / sumXY;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return sumXY * 2 / sumXY;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return sumXY * 10) / sumXY;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return sumXY * 10) / sumXY;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return sumXY * 1 + sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return sumXY * 1 + sumXY / sumXX;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return sumXY * DummyXY / sumXY;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return sumXY * DummyXY / sumXY;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return sumXY * rightXY / sumXY;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return sumXY * rightXY / sumXY;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return sumXY * sumXY / sumXX_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return sumXY * sumXY / sumXX_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return sumXY * KEYXY / sumXX_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return sumXY * KEYXY / sumXX_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return sumXY * 2 + sumXY;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return sumXY * 2 + sumXY;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return sumXY * sumXY / sumXX_FEATURE_USE_HEADER;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return sumXY * sumXY / sumXX_FEATURE_USE_HEADER;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return sumXY * 8 / sumXY;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return sumXY * 8 / sumXY;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return sumXY * sumXY / sumXX_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return sumXY * sumXY / sumXX_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return sumXY * intent / sumXY;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return sumXY * intent / sumXY;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return sumXY * sumXY / sum_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return sumXY * sumXY / sum_OF_A_MINUTE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return sumXY * sumXY / sumXX_;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return sumXY * sumXY / sumXX_;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return sumXY * namedXY / sumXY;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return sumXY * namedXY / sumXY;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return sumXY * result + sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return sumXY * result + sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return sumXY * 1 + sumXY / sum_;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return sumXY * 1 + sumXY / sum_;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return sumXY * sumXY / this. sumXY;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return sumXY * sumXY / this. sumXY;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return sumXY * sumXY / this.sumXY;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return sumXY * sumXY / this.sumXY;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return sumXY * KEYXY / sumXY;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return sumXY * KEYXY / sumXY;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return sumXY * shiftXY / sumXY;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return sumXY * shiftXY / sumXY;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return sumXY * maximumXY / sumXY;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return sumXY * maximumXY / sumXY;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return sumXY * 1 + sumXY / sum sumXY;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return sumXY * 1 + sumXY / sum sumXY;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return sumXY * paddingXY / sumXY;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return sumXY * paddingXY / sumXY;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return sumXY *FIX / sumXY;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return sumXY *FIX / sumXY;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return sumXY * orderByXY / sumXY;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return sumXY * orderByXY / sumXY;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return sumXY * LONGXY / sumXY;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return sumXY * LONGXY / sumXY;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return sumXY * 31 + sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return sumXY * 31 + sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return sumXY * 100) / sumXY;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return sumXY * 100) / sumXY;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return sumXY * boundaryXY / sumXY;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return sumXY * boundaryXY / sumXY;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return sumXY * sumXY / sumXX_POW_2_10;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return sumXY * sumXY / sumXX_POW_2_10;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return sumXY * long sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return sumXY * long sumXY / sumXY;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return sumXY *atesXY / sumXY;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return sumXY *atesXY / sumXY;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return sumXY *ORXY / sumXY;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return sumXY *ORXY / sumXY;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return sumXY * sumXY / sumXX_ON_DELTA;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return sumXY * sumXY / sumXX_ON_DELTA;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return sumXY * sumXY / sumXX_TIMER;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return sumXY * sumXY / sumXX_TIMER;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return sumXY * sumXY / sumXX_RADIUS;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return sumXY * sumXY / sumXX_RADIUS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return sumXY * sumXY / this.sum;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return sumXY * sumXY / this.sum;",
                "identical": false
            }
        ],
        "buggy_line": "return sumYY - sumXY * sumXY / sumXX;",
        "fixed_line": "return Math.max(0d, sumYY - sumXY * sumXY / sumXX);"
    },
    "Lang-57": {
        "fixes": [
            {
                "k": 1,
                "patch": "return locale.contains(locale);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return locale.contains(locale);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return locale;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return locale;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return cAvailableLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return cAvailableLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return language.contains(locale);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return language.contains(locale);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return languageLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return languageLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return language;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return language;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return languageSet.contains(locale);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return languageSet.contains(locale);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return cAvailableLocaleStr.contains(locale);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return cAvailableLocaleStr.contains(locale);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return code.contains(locale);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return code.contains(locale);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return languageSpecificPrSet.contains(locale);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return languageSpecificPrSet.contains(locale);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return languageName.contains(locale);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return languageName.contains(locale);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return languageStack.contains(locale);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return languageStack.contains(locale);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return locale.contains(locale;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return locale.contains(locale;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return languageFormat.contains(locale);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return languageFormat.contains(locale);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return languageSpecificPrimitives.contains(locale);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return languageSpecificPrimitives.contains(locale);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return languageSpecificSet.contains(locale);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return languageSpecificSet.contains(locale);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return localeSet.contains(locale);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return localeSet.contains(locale);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return cseLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return cseLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return locale.contains(locale) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return locale.contains(locale) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return languageGtidSet.contains(locale);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return languageGtidSet.contains(locale);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return cToken.contains(locale);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return cToken.contains(locale);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return languageSpecificStatements.contains(locale);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return languageSpecificStatements.contains(locale);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return countryLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return countryLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return languageSpecificGraph.contains(locale);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return languageSpecificGraph.contains(locale);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return localeLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return localeLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return locale.contains(localeLocaleStr;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return locale.contains(localeLocaleStr;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return c.contains(locale);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return c.contains(locale);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return languageROLLLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return languageROLLLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return cLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return cLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return language != c.contains(locale);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return language != c.contains(locale);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return codeLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return codeLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return localeListLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return localeListLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return languageLookup.contains(locale);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return languageLookup.contains(locale);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return languageListLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return languageListLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return cListLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return cListLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "returnlocale.contains(locale);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "returnlocale.contains(locale);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return codeSet.contains(locale);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return codeSet.contains(locale);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return languageNameConstants.contains(locale);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return languageNameConstants.contains(locale);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return cTokenLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return cTokenLocale.contains(locale);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return languageType.contains(locale);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return languageType.contains(locale);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return language != locale.contains(locale);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return language != locale.contains(locale);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return language == locale.contains(locale);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return language == locale.contains(locale);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return locale.contains(locale)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return locale.contains(locale)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return languageMessages.contains(locale);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return languageMessages.contains(locale);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return cAvailableLocale.contains(locale;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return cAvailableLocale.contains(locale;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return languageInfos.contains(locale);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return languageInfos.contains(locale);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return localeStr.contains(locale);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return localeStr.contains(locale);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return languageParams.contains(locale);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return languageParams.contains(locale);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return languageList.contains(locale);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return languageList.contains(locale);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return languageLeft.contains(locale);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return languageLeft.contains(locale);",
                "identical": false
            }
        ],
        "buggy_line": "return cAvailableLocaleSet.contains(locale);",
        "fixed_line": "return availableLocaleList().contains(locale);"
    },
    "Chart-20": {
        "fixes": [
            {
                "k": 1,
                "patch": "super(value, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "super(value, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "super(value, stroke, paint,Big, alpha);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "super(value, stroke, paint,Big, alpha);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "super(value, stroke, paint, scala, alpha);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "super(value, stroke, paint, scala, alpha);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "super(value, stroke, paint, _paint, alpha);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "super(value, stroke, paint, _paint, alpha);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "super(value, stroke, paint, builderForValue, alpha);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "super(value, stroke, paint, builderForValue, alpha);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "super(REF, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "super(REF, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "super( b, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "super( b, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "super(value, stroke, paint,k, stroke, alpha);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "super(value, stroke, paint,k, stroke, alpha);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "super(value, stroke, paint, Marker, alpha);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "super(value, stroke, paint, Marker, alpha);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "super(value, stroke, paint,coordinate, alpha);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "super(value, stroke, paint,coordinate, alpha);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "super(value, stroke, paint, fork, alpha);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "super(value, stroke, paint, fork, alpha);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "super(off, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "super(off, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "super(value, stroke, paint, outline, alpha);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "super(value, stroke, paint, outline, alpha);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "super(alpha, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "super(alpha, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "super(value, stroke, paint,unt, alpha, alpha);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "super(value, stroke, paint,unt, alpha, alpha);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "super(value, stroke, paint, objectId, alpha);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "super(value, stroke, paint, objectId, alpha);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "super(chunk, paint, stroke, outline, alpha, alpha);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "super(chunk, paint, stroke, outline, alpha, alpha);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "super(value, stroke, paint,Appearance, alpha);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "super(value, stroke, paint,Appearance, alpha);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "super(NATIVE, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "super(NATIVE, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "super(is, stroke, value, stroke, alpha);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "super(is, stroke, value, stroke, alpha);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "super(value, stroke, paint, getE, alpha);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "super(value, stroke, paint, getE, alpha);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "super(value, stroke, paint, g, stroke, alpha);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "super(value, stroke, paint, g, stroke, alpha);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "super(value, stroke, outline, alpha, stroke, alpha);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "super(value, stroke, outline, alpha, stroke, alpha);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "super(name, value, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "super(name, value, stroke, paint, stroke, alpha);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "super(data, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "super(data, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "super(value, stroke, paint,data, stroke, alpha);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "super(value, stroke, paint,data, stroke, alpha);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "super(value, stroke, outline, alpha, alpha);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "super(value, stroke, outline, alpha, alpha);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "super( hex, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "super( hex, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "super(value, stroke, paint,Seen, alpha);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "super(value, stroke, paint,Seen, alpha);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "super(value, stroke, paint,Relationship, alpha, alpha);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "super(value, stroke, paint,Relationship, alpha, alpha);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "super(variable, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "super(variable, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "super(value, stroke, paint, builderForValue, alpha, alpha);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "super(value, stroke, paint, builderForValue, alpha, alpha);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "super(chunk, paint, stroke, outline, alpha);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "super(chunk, paint, stroke, outline, alpha);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "super(range, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "super(range, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "super(value, stroke, paint, off, len);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "super(value, stroke, paint, off, len);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "super(left, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "super(left, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "super(value, stroke, paint, stroke, alpha, alpha);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "super(value, stroke, paint, stroke, alpha, alpha);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "super(value, stroke, paint, Marker, alpha, alpha);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "super(value, stroke, paint, Marker, alpha, alpha);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "super(hmac, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "super(hmac, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "super(value, stroke, paint, off, alpha);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "super(value, stroke, paint, off, alpha);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "super(open, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "super(open, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "super(left, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "super(left, paint, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "super( type, paint, stroke, alpha, alpha);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "super( type, paint, stroke, alpha, alpha);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "super(value, stroke, paint, g, alpha);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "super(value, stroke, paint, g, alpha);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "super( characters, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "super( characters, value, stroke, paint, alpha);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "super(value, stroke, paint, builderForValue, alpha, provider);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "super(value, stroke, paint, builderForValue, alpha, provider);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "super(value, stroke, paint,3, alpha);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "super(value, stroke, paint,3, alpha);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "super(value, stroke, paint,Seen, alpha, alpha);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "super(value, stroke, paint,Seen, alpha, alpha);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "super(value, stroke, paint, builderForValue, alpha, out);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "super(value, stroke, paint, builderForValue, alpha, out);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "super(value, stroke, paint, builderForValue, alpha, y);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "super(value, stroke, paint, builderForValue, alpha, y);",
                "identical": false
            }
        ],
        "buggy_line": "super(paint, stroke, paint, stroke, alpha);",
        "fixed_line": "super(paint, stroke, outlinePaint, outlineStroke, alpha);"
    },
    "Mockito-5": {
        "fixes": [
            {
                "k": 1,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "catch (org.mockito.exceptions.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "catch (org.mockito.exceptions.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "catch (Abstractmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "catch (Abstractmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "catch (Entity.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "catch (Entity.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "catch (Managed.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "catch (Managed.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "catch(org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "catch (Comparable.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "catch (Comparable.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "catch (Submockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "catch (Submockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e1) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e1) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "catch (Enumeration.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "catch (Enumeration.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "catch (Layer.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "catch (Layer.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "catch (Zmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "catch (Zmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "catch (Empty.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "catch (Empty.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "catch (org.mockito.exceptions.mission.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "catch (org.mockito.exceptions.mission.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "catch (Object.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "catch (Object.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "catch (mx.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "catch (mx.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "catch (org.mockito.exceptions.Undefined.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "catch (org.mockito.exceptions.Undefined.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "catch (Param.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "catch (Param.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "catch (Style.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "catch (Style.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "catch (Ref.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "catch (Ref.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "catch (URmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "catch (URmockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "catch (org.mockito.exceptions.\u02c2.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "catch (org.mockito.exceptions.\u02c2.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "catch (org.mockito.exceptions. FETCH.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "catch (org.mockito.exceptions. FETCH.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "catch (Mapping.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "catch (Mapping.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "catch (Cancelito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "catch (Cancelito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "catch (org.mockito.exceptions. left.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "catch (org.mockito.exceptions. left.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "catch (org.mockito.exceptions.PROPERTIES.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "catch (org.mockito.exceptions.PROPERTIES.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "catch (ArrayList.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "catch (ArrayList.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "catch (mappings.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "catch (mappings.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "catch (Pattern.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "catch (Pattern.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "catch (Title.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "catch (Title.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "catch (org.mockito.exceptions. 24.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "catch (org.mockito.exceptions. 24.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "catch (Manager.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "catch (Manager.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "catch (Group.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "catch (Group.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "catch (MATCH.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "catch (MATCH.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferente) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferente) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "catch (org.mockito.exceptions.MouseEvent.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "catch (org.mockito.exceptions.MouseEvent.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "catch ( \\\"mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "catch ( \\\"mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "catch (org.mockito.exceptions.ike.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "catch (org.mockito.exceptions.ike.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "catch (org.mockito.exceptions. describes.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "catch (org.mockito.exceptions. describes.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "catch (.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "catch (.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "catch (Object.mockito.exceptions.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "catch (Object.mockito.exceptions.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "catch (org.mockito.exceptions.utors.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "catch (org.mockito.exceptions.utors.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "catch (Enmock.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "catch (Enmock.exceptions.verification.junit.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "catch (org.mockito.exceptions.DS.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "catch (org.mockito.exceptions.DS.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "catch (org.mockito.exceptions.\u25a2.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "catch (org.mockito.exceptions.\u25a2.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "catch (org.mockito.exceptions.sembler.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "catch (org.mockito.exceptions.sembler.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "catch (org.mockito.exceptions. US.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "catch (org.mockito.exceptions. US.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "catch (org.mockito.exceptions.\u0754.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "catch (org.mockito.exceptions.\u0754.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "catch (org.mockito.exceptions.\ud857\udf86.ArgumentsAreDifferent e) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "catch (org.mockito.exceptions.\ud857\udf86.ArgumentsAreDifferent e) {",
                "identical": false
            }
        ],
        "buggy_line": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
        "fixed_line": "catch (AssertionError e) {"
    },
    "JacksonDatabind-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "return actual;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return actual;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return NO_OBJECTS;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return NO_OBJECTS;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return NO_TYPES;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return NO_TYPES;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return EMPTY_BINDINGS;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return JsonToken.VALUE_STRING;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _defaultValueDeserializer;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _defaultValueDeserializer;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _actualValueDeserializer;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return _actualValueDeserializer;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return EMPTY_TYPES;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return EMPTY_TYPES;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return ROUTEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return ROUTEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return _deser;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return _deser;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return NO_ARRAY_ELEMENT_TYPES;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return NO_ARRAY_ELEMENT_TYPES;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _defaultValueSerializers;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return _defaultValueSerializers;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return NO_ARRAY_ELEMENT_NULL;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return NO_ARRAY_ELEMENT_NULL;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return EMPTY_OBJECTS;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return EMPTY_OBJECTS;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return NO_ARRAY_ELEMENT_END;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return NO_ARRAY_ELEMENT_END;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return NO_ARRAY_ELEMENT_URI;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return NO_ARRAY_ELEMENT_URI;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return NO_ARRAY_ELEMENT_CORRESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return NO_ARRAY_ELEMENT_CORRESERVED_OBJECT;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return JsonToken.VALUE_NUMBER_INTEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return JsonToken.VALUE_NUMBER_INTEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return EMPTY_ARRAY;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return EMPTY_ARRAY;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_OBJECTS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_OBJECTS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return NO_ARRAY_ELEMENT_KEY;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return NO_ARRAY_ELEMENT_KEY;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return NO_ARRAY_ELEMENT_REDIS_SENTINEL;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return NO_ARRAY_ELEMENT_REDIS_SENTINEL;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return EMPTY_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return EMPTY_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return JsonToken.VALUE_EMBEDGE_OBJECT;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return JsonToken.VALUE_EMBEDGE_OBJECT;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_ADDRESS;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return NO_ARRAY_ELEMENT_OBJECT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return NO_ARRAY_ELEMENT_OBJECT;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return NO_ARRAY_ELEMENT_MAPPINGS;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return NO_ARRAY_ELEMENT_MAPPINGS;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return JsonToken.VALUE_NUMBER_ARRAY;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return JsonToken.VALUE_NUMBER_ARRAY;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return NO_ARRAY_START_PACKED;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return NO_ARRAY_START_PACKED;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return NO_ARRAY_ELEMENT_COLLECTION;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return NO_ARRAY_ELEMENT_COLLECTION;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return ROUTEMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return ROUTEMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return NO_ARRAY_ELEMENTS;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return NO_ARRAY_ELEMENTS;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return ROUTEMBEDDED_OBJECT_VALUE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return ROUTEMBEDDED_OBJECT_VALUE;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _actualValueSerializers;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return _actualValueSerializers;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_PACKED;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return NO_ARRAY_ELEMENT_RESERVED_PACKED;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return NO_CHARS;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return NO_CHARS;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return NO_ARRAY_ELEMENT_NAME;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return NO_ARRAY_ELEMENT_NAME;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return NO_ARRAY_START_OBJECTS;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return NO_ARRAY_START_OBJECTS;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return NO_ARRAY_ELEMENT_REDIS_OBJECT;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return NO_ARRAY_ELEMENT_REDIS_OBJECT;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECTS;",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "return NullifyingDeserializer.instance;"
    },
    "Csv-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new LinkedHashMap<String, Integer>(3);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new LinkedHashMap<String, Integer>(3);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new LinkedHashMap<String, Integer>(4);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new LinkedHashMap<String, Integer>(4);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new LinkedHashMap<String, Integer>(40, this.headerMap);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new LinkedHashMap<String, Integer>(40, this.headerMap);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new LinkedHashMap<String, Integer>(50_XML_PREFERENCE, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new LinkedHashMap<String, Integer>(50_XML_PREFERENCE, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new LinkedHashMap<String, Integer>(4, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new LinkedHashMap<String, Integer>(4, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new LinkedHashMap<String, Integer>(50_TYPE, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new LinkedHashMap<String, Integer>(50_TYPE, Integer>(this.headerMap);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 0;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 0;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != that.headerMap);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != that.headerMap);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != long.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_STOP;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_STOP;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != parser.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != parser.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_G_CALENDAR;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_G_CALENDAR;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_IN_PROGRESS;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_IN_PROGRESS;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new LinkedHashMap<String, Integer>(8);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new LinkedHashMap<String, Integer>(8);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_ROOT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_ROOT;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != args.length;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != args.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer>( getHeaderMap);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer>( getHeaderMap);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_G_COMMA);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_G_COMMA);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap <= 16;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap <= 16;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 16;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 16;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new LinkedHashMap<String, Integer>(50_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new LinkedHashMap<String, Integer>(50_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_CLOSED;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_CLOSED;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_SIGNIFICANCE_ON_CLOSED;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_SIGNIFICANCE_ON_CLOSED;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new LinkedHashMap<String, Integer>(10);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new LinkedHashMap<String, Integer>(10);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMapMap);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMapMap);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap <= 8;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap <= 8;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new LinkedHashMap<String, Integer>(40, input.headerMap);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new LinkedHashMap<String, Integer>(40, input.headerMap);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new LinkedHashMap<String, Integer>(50);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new LinkedHashMap<String, Integer>(50);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_COMMA);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_COMMA);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != args.headerMap);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != args.headerMap);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONFIRMATION;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONFIRMATION;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONFIRMATION);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONFIRMATION);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_COMPENSATION;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_COMPENSATION;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != viewMap);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != viewMap);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_COMPLETED;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_COMPLETED;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 500;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != 500;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_COMMASTER_CLOSED;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap != TYPE_CONVERTER_COMMASTER_CLOSED;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new LinkedHashMap<String, Integer>(otMap);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new LinkedHashMap<String, Integer>(otMap);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer>(4);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap, Integer>(4);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap <= 63) + 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new LinkedHashMap<String, Integer>(this.headerMap <= 63) + 1;",
                "identical": false
            }
        ],
        "buggy_line": "return new LinkedHashMap<String, Integer>(this.headerMap);",
        "fixed_line": "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);"
    },
    "Jsoup-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (i >= length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (i >= length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (i < length) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (i < length) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (i >= last - 1) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (i >= last - 1) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (i >= length - 1) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (i >= length - 1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (i < length - 1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (i < length - 1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (i + 1 < length) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (i + 1 < length) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (i >= last + 1) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (i >= last + 1) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (i >= last && i < length) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (i >= last && i < length) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (i >= startChar + 1) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (i >= startChar + 1) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (i >= startChar) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (i >= startChar) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (i >= input.length) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (i >= input.length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (i >= length + 1) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (i >= length + 1) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (i >= position) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (i >= position) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (i >= last - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (i >= last - 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (i >= last;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (i >= last;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (i >= last) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (i >= last) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (i - startChar >= length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (i - startChar >= length) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (i >= last && seq < input.length) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (i >= last && seq < input.length) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (i >= >= length) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (i >= >= length) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (i >= length - 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (i >= length - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (i - start >= length) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (i - start >= length) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (i < length - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (i < length - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (i == last - 1) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (i == last - 1) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (i >= last && seq < length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (i >= last && seq < length) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (i >= isLength - 1) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (i >= isLength - 1) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (i == last - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (i == last - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (i >= values.length) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (i >= values.length) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (i >= s.length) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (i >= s.length) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (i >= concept.length) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (i >= concept.length) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (i >= isLength - 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (i >= isLength - 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (i >= EOF.length) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (i >= EOF.length) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (i >= last && i < input.length) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (i >= last && i < input.length) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (i == length) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (i == length) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (i >= last && seq < input.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (i >= last && seq < input.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (i == length - 1) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (i == length - 1) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (i - start) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (i - start) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (i >= clen) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (i >= clen) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (i >= len - 1) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (i >= len - 1) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (i < last - 1) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (i < last - 1) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (i >= i + 1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (i >= i + 1) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (i >= n - 1) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (i >= n - 1) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (i - startChar >= input.length) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (i - startChar >= input.length) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (j >= length) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (j >= length) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (i == length - 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (i == length - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (i >= position - 1) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (i >= position - 1) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (i == last) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (i == last) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (i == last + 1) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (i == last + 1) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (i >= j) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (i >= j) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (i >= last && seq <= input.length) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (i >= last && seq <= input.length) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (i >= length - last;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (i >= length - last;",
                "identical": false
            }
        ],
        "buggy_line": "if (offset < length) {",
        "fixed_line": "if (offset < length && last <= length) {"
    },
    "Gson-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong && (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong && (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == 0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (last == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (last == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == boolean.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == boolean.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (last == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (last == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == MINUTE) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == MINUTE) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (last == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (last == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (last < NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (last < NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative == 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative == 0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || value == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative ==++) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative ==++) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (last < NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (last < NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == boolean.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == boolean.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (last < NUMBER_OF_CHARACTERS && (last == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (last < NUMBER_OF_CHARACTERS && (last == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (last == NUMBER_OF_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (last == NUMBER_OF_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (last != NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative == float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative == float.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == encrypted) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (last == NUMBER_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == encrypted) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (last == NUMBER_OF_CHAR_DIGIT && fitsInLong || (value == Long.MIN_VALUE || negative == float.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (last == NUMBER_OF_DIGIT && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (last == NUMBER_OF_DIGIT && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || negative) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (last == NUMBER_CHAR_DIGIT || fitsInLong || (value == Long.MIN_VALUE || negative') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || value == 0;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (last == NUMBER_OF_CHARACTERS && (value == Long.MIN_VALUE || negative == Long.MIN_VALUE || value == 0;",
                "identical": false
            }
        ],
        "buggy_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {",
        "fixed_line": "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative) && (value!=0 || false==negative)) {"
    },
    "Math-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "return solve(f, max);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return solve(f, max);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return solve(min, max);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return solve(min, max);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return solve(f, initial);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return solve(f, initial);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return solve(f, initial - min;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return solve(f, initial - min;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return solve(f, min);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return solve(f, min);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return solve(f, max;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return solve(f, max;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return solve(f, min;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return solve(f, min;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return solve(f, max) MaxIterations;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return solve(f, max) MaxIterations;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return solve(f, initial;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return solve(f, initial;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return solve(f, initial - DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return solve(f, initial - DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return solve(f, max, DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return solve(f, max, DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return solve(f, max5, MAX_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return solve(f, max5, MAX_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return solve(f, initial - 1);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return solve(f, initial - 1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return solve(f, max, DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return solve(f, max, DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return solve(f, initial) MaxIterations;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return solve(f, initial) MaxIterations;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return solve(last, max);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return solve(last, max);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return solve(f, max, DEFAULT_MAX_CONNECTION);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return solve(f, max, DEFAULT_MAX_CONNECTION);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return solve(f, min, max);",
                "identical": true
            },
            {
                "k": 42,
                "patch": "return solve(f, min, max);",
                "identical": true
            },
            {
                "k": 43,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_ExceededException;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_ExceededException;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return solve(f, initial - DEFAULT_MAX_BATCH_SIZE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return solve(f, initial - DEFAULT_MAX_BATCH_SIZE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_COUNT);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_COUNT);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return solve(f, initial, DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return solve(f, initial, DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_AND_COUNT;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_AND_COUNT;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ExceededException;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ExceededException;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_AND_ExceededException;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_AND_ExceededException;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return solve(f, initial - DEFAULT_MAX_BATCH_COUNT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return solve(f, initial - DEFAULT_MAX_BATCH_COUNT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_INTERVAL;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_INTERVAL;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return solve(f, max, DEFAULT_MAX_BATCH_SIZE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return solve(f, max, DEFAULT_MAX_BATCH_SIZE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_Exceed);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_Exceed);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return solve(f, initial - DEFAULT_MAX_CONNECTION;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return solve(f, initial - DEFAULT_MAX_CONNECTION;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return solve(f, initial - max;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return solve(f, initial - max;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_INTERVAL;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_INTERVAL;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return solve(f, initial, DEFAULT_MAX_RESERVED_COUNT);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return solve(f, initial, DEFAULT_MAX_RESERVED_COUNT);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_ALLOW_Exceed);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_ALLOW_Exceed);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_Exceed);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_ALLOW_Exceed);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_AND_ExceededException;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_AND_ExceededException;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_ROW;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_ROW;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return solve(f, max5, MAX_MAX_BATCH_SIZE;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return solve(f, max5, MAX_MAX_BATCH_SIZE;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return solve(f, max, DEFAULT_MAX_NO_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return solve(f, max, DEFAULT_MAX_NO_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return solve(f, initial, DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return solve(f, initial, DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return solve(f, max, DEFAULT_MAX_AND_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return solve(f, max, DEFAULT_MAX_AND_RESERVED_COUNT;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return solve(f, initial - DEFAULT_MAX__BATCH_SIZE;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return solve(f, initial - DEFAULT_MAX__BATCH_SIZE;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_BATCH_COUNT;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_BATCH_COUNT;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_AND_Exceed);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return solve(f, max, DEFAULT_MAX_RESERVED_AND_Exceed);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return solve(f, max, DEFAULT_MAX_BATCH_SIZE);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return solve(f, max, DEFAULT_MAX_BATCH_SIZE);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_BATCH_ExceededException;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return solve(f, initial - DEFAULT_MAX_RESERVED_BATCH_ExceededException;",
                "identical": false
            }
        ],
        "buggy_line": "return solve(min, max);",
        "fixed_line": "return solve(f, min, max);"
    },
    "Csv-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "final boolean emptyHeader = header.trim().isEmpty;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final boolean emptyHeader = header.trim().isEmpty;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final boolean emptyHeader = header.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final boolean emptyHeader = header.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final boolean emptyHeader = header.trim().isEmpty) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final boolean emptyHeader = header.trim().isEmpty) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final boolean emptyHeader = header.trim().isEmpty()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final boolean emptyHeader = header.trim().isEmpty()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final boolean emptyHeader = header.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final boolean emptyHeader = header.trim().isEmpty();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final boolean emptyHeader = header.trim().isEmpty 12;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final boolean emptyHeader = header.trim().isEmpty 12;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final boolean emptyHeader = header.trim().isEmptyFor;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final boolean emptyHeader = header.trim().isEmptyFor;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader[0] : containsHeader;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader[0] : containsHeader;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final boolean emptyHeader = header.trim().isEmpty()[0];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final boolean emptyHeader = header.trim().isEmpty()[0];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final boolean emptyHeader = header.trim().isEmpty72Header;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final boolean emptyHeader = header.trim().isEmpty72Header;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LIST_DELIMITER : header;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LIST_DELIMITER : header;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_HEADER_ELEMENTS : containsHeader;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_HEADER_ELEMENTS : containsHeader;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final boolean emptyHeader = header.trim().isEmptyTEXT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final boolean emptyHeader = header.trim().isEmptyTEXT;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final boolean emptyHeader = header.trim().isEmptyObs;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final boolean emptyHeader = header.trim().isEmptyObs;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_VARIABLE_PARTS_OF_ROUTE : header;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_VARIABLE_PARTS_OF_ROUTE : header;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LIST_DELIMITER : containsHeader;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LIST_DELIMITER : containsHeader;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() && header;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() && header;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_HEADER_ELEMENT_SEPARATOR : containsHeader;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_HEADER_ELEMENT_SEPARATOR : containsHeader;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader : containsHeader.length;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader : containsHeader.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.length;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final boolean emptyHeader = header.trim().isEmpty()){",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final boolean emptyHeader = header.trim().isEmpty()){",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.length : containsHeader;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.length : containsHeader;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final boolean emptyHeader = header.trim().isEmptyTreeNode;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final boolean emptyHeader = header.trim().isEmptyTreeNode;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final boolean emptyHeader = header.trim().isEmpty prevHeader;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final boolean emptyHeader = header.trim().isEmpty prevHeader;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.DEFAULT_HEADER_ELEMENTS : containsHeader;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.DEFAULT_HEADER_ELEMENTS : containsHeader;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final boolean emptyHeader = header.trim().isEmpty0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final boolean emptyHeader = header.trim().isEmpty0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? header.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? header.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final boolean emptyHeader = header.trim().isEmpty brackets;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final boolean emptyHeader = header.trim().isEmpty brackets;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? 6 : containsHeader;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? 6 : containsHeader;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? header.INHERIT : containsHeader;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? header.INHERIT : containsHeader;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final boolean emptyHeader = header.trim().isEmptybeanName;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final boolean emptyHeader = header.trim().isEmptybeanName;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.DEFAULT_HEADER_ELEMENT_SEPARATOR : containsHeader;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.DEFAULT_HEADER_ELEMENT_SEPARATOR : containsHeader;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? header.length : containsHeader;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? header.length : containsHeader;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_VARIABLE_PARTS_OF_ROUTE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_VARIABLE_PARTS_OF_ROUTE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.UNION;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.UNION;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? bodyHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? bodyHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.MIDDLE : containsHeader;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader.MIDDLE : containsHeader;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_HEADER_LENGTH : containsHeader;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_HEADER_LENGTH : containsHeader;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final boolean emptyHeader = header.trim().isEmptylockHeader;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final boolean emptyHeader = header.trim().isEmptylockHeader;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_ELEMENT_SEPARATOR : containsHeader;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_ELEMENT_SEPARATOR : containsHeader;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final boolean emptyHeader = header.trim().isEmpty.length;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final boolean emptyHeader = header.trim().isEmpty.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LISTENER_DELIMITER : containsHeader;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? DEFAULT_LISTENER_DELIMITER : containsHeader;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader : containsHeader.NOT_BEFORE_EMPTY;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? containsHeader : containsHeader.NOT_BEFORE_EMPTY;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final boolean emptyHeader = header.trim().isEmptyve;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final boolean emptyHeader = header.trim().isEmptyve;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final boolean emptyHeader = header.trim().isEmptyTheHeader;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final boolean emptyHeader = header.trim().isEmptyTheHeader;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? hasHeader : containsHeader;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final boolean emptyHeader = header.trim().isEmpty() ? hasHeader : containsHeader;",
                "identical": false
            }
        ],
        "buggy_line": "final boolean emptyHeader = header.trim().isEmpty();",
        "fixed_line": "final boolean emptyHeader = header == null || header.trim().isEmpty();"
    },
    "Mockito-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (actualTypeArgument) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (actualTypeArgument) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (isTypeArgument) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (isTypeArgument) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (defaultTypeArgument) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (defaultTypeArgument) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (isCollection) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (isCollection) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (is this.actualTypeArgument) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (is this.actualTypeArgument) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (typeParameter) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (typeParameter) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (isClientArgument) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (isClientArgument) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (variableTypeArgument) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (variableTypeArgument) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (isMainQuery) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (isMainQuery) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (isElementEntityTypeArgument) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (isElementEntityTypeArgument) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (isEntityTypeArgument) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (isEntityTypeArgument) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (is ')TypeArgument) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (is ')TypeArgument) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (isualElement) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (isualElement) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (ismyTypeArgument) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (ismyTypeArgument) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (isPrimitiveTypeArgument) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (isPrimitiveTypeArgument) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (isElement) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (isElement) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (isLocationArgument) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (isLocationArgument) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if(actualTypeArgument) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if(actualTypeArgument) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (isMapTypeArgument) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (isMapTypeArgument) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (isJavaTypeArgument) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (isJavaTypeArgument) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (isOwnerTypeArgument) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (isOwnerTypeArgument) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (hasTypeArgument) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (hasTypeArgument) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (islayoutTypeArgument) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (islayoutTypeArgument) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (isualActual) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (isualActual) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (isLocationTypeArgument) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (isLocationTypeArgument) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (isSerializableTypeArgument) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (isSerializableTypeArgument) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (isWildcard) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (isWildcard) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (requiredTypeArgument) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (requiredTypeArgument) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (shouldTypeArgument) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (shouldTypeArgument) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (nextTypeArgument) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (nextTypeArgument) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (isNotLast) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (isNotLast) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (isFactory) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (isFactory) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (channelTypeArgument) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (channelTypeArgument) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (isNotEmpty) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (isNotEmpty) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (isMainQueryArgument) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (isMainQueryArgument) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (isKey) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (isKey) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (isDataArgument) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (isDataArgument) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (is illegal) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (is illegal) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (isElementualActual) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (isElementualActual) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (isEnum) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (isEnum) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (isHashCode) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (isHashCode) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (isExtension) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (isExtension) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (typeArgument) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (typeArgument) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (isEntityManager) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (isEntityManager) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (isFunction) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (isFunction) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (isInfos) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (isInfos) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (isFlush) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (isFlush) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (isFrom) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (isFrom) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (isHigh) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (isHigh) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (isFile) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (isFile) {",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (typeParameter != actualTypeArgument) {"
    },
    "Codec-18": {
        "fixes": [
            {
                "k": 1,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length, cs2.length);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length, cs2.length);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length, cs2.length);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length, cs2.length);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 0, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 0, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs2.length);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs2.length);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, true, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, true, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length - 1, cs2.length);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length - 1, cs2.length);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs2.length, cs2.length);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs2.length, cs2.length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length, cs2.length);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length, cs2.length);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 0, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 0, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length - cs2.length;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length - cs2.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length};",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length};",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length(), cs2.length;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length, cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length, cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length - cs2.length;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length - cs2.length;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs2.length, cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs2.length, cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1, cs2.length);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1, cs2.length);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1, cs2.length) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 1, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, 1, Math.max(cs1, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 0, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 0, Math.max(cs1, cs2.length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length -cs2.length;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length -cs2.length;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return CharSequenceUtils.regionMatches(cs2, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return CharSequenceUtils.regionMatches(cs2, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length, cs1.length);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs2.length, cs1.length);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length, cs2.length);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length, cs2.length);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1, cs2.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length - cs2.length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length(), cs2.length - cs2.length;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return CharSequenceUtils.regionMatches(cs2, true, 0, cs2, 0, Math.max(cs1.length;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length,cs2.length);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, cs2, 0, Math.max(cs1.length,cs2.length);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 0, Math.max(cs1, cs2.length) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 0, Math.max(cs1, cs2.length) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 0, Math.max(cs1, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return CharSequenceUtils.regionMatches(cs1, true, 0, 0, Math.max(cs1, cs2, 0, Math.max(cs1.length(), cs2.length);",
                "identical": false
            }
        ],
        "buggy_line": "return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length()));",
        "fixed_line": "return cs1.length() == cs2.length() && CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, cs1.length());"
    },
    "Cli-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "nextLineTabStop = width - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "nextLineTabStop = width - 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "nextLineTabStop = loop.length - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "nextLineTabStop = loop.length - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "nextLineTabStop = height - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "nextLineTabStop = height - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "nextLineTabStop = width / 2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "nextLineTabStop = width / 2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "nextLineTabStop = list.length - 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "nextLineTabStop = list.length - 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "nextLineTabStop = - width - 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "nextLineTabStop = - width - 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "nextLineTabStop = NR_BIGNEGStop - 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "nextLineTabStop = NR_BIGNEGStop - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "nextLineTabStop = 4 - width - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "nextLineTabStop = 4 - width - 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "nextLineTabStop = 4 - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "nextLineTabStop = 4 - 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "nextLineTabStop = 6 - 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "nextLineTabStop = 6 - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "nextLineTabStop = width / 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "nextLineTabStop = width / 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "nextLineTabStop = nextLine - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "nextLineTabStop = nextLine - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "nextLineTabStop = 4 - noOfLine - 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "nextLineTabStop = 4 - noOfLine - 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "nextLineTabStop = NR_OF_WEEK - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "nextLineTabStop = NR_OF_WEEK - 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "nextLineTabStop = NR_OF_REASON_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "nextLineTabStop = NR_OF_REASON_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "nextLineTabStop = 4 - noOfLine;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "nextLineTabStop = 4 - noOfLine;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL_PREFERENCE - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL_PREFERENCE - 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "nextLineTabStop =<NewLine - 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "nextLineTabStop =<NewLine - 1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "nextLineTabStop = line.length - 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "nextLineTabStop = line.length - 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "nextLineTabStop =initializedTabStop - 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "nextLineTabStop =initializedTabStop - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "nextLineTabStop = list - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "nextLineTabStop = list - 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_RESERVED_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_RESERVED_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "nextLineTabStop = exception.length - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "nextLineTabStop = exception.length - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_REASON_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_REASON_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "nextLineTabStop = file.length - 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "nextLineTabStop = file.length - 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_RESERVED_WORD - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_RESERVED_WORD - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "nextLineTabStop = nextLine.length - 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "nextLineTabStop = nextLine.length - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "nextLineTabStop = NR_OF_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "nextLineTabStop = NR_OF_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "nextLineTabStop = width - 1; // unset sign bit",
                "identical": false
            },
            {
                "k": 60,
                "patch": "nextLineTabStop = width - 1; // unset sign bit",
                "identical": false
            },
            {
                "k": 61,
                "patch": "nextLineTabStop = NR_OF_REASON_trimmedCssValue - 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "nextLineTabStop = NR_OF_REASON_trimmedCssValue - 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "nextLineTabStop = NR_OF_REASON_INDEX - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "nextLineTabStop = NR_OF_REASON_INDEX - 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "nextLineTabStop = NR_OF_BIGNEGStop - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "nextLineTabStop = NR_OF_BIGNEGStop - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_REASON_trimmedCssValue - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_REASON_trimmedCssValue - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL_trimmedCssValue - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL_trimmedCssValue - 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL_PATTERN - 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL_PATTERN - 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "nextLineTabStop = c - 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "nextLineTabStop = c - 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "nextLineTabStop = NR_BIGNEE_OR_REASON_OF_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "nextLineTabStop = NR_BIGNEE_OR_REASON_OF_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL_REASON_trim_OF_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL_REASON_trim_OF_CHARACTERS - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_REASON_INDEX - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_REASON_INDEX - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "nextLineTabStop = NR_OF_BIGNEGStop_WIDTH - 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "nextLineTabStop = NR_OF_BIGNEGStop_WIDTH - 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "nextLineTabStop = 5 - 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "nextLineTabStop = 5 - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_REPEAT_AND_SIZE - 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_REPEAT_AND_SIZE - 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "nextLineTabStop = NR_OF_REPEAT_AND_TIMEZONE - 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "nextLineTabStop = NR_OF_REPEAT_AND_TIMEZONE - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "nextLineTabStop = NR_BIG_NEGStop - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "nextLineTabStop = NR_BIG_NEGStop - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_RESERVED_NO_trimmedCssValue - 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_RESERVED_NO_trimmedCssValue - 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "nextLineTabStop = uri / 2;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "nextLineTabStop = uri / 2;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL - 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL - 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL_line - 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "nextLineTabStop = NR_BIG_DECIMAL_line - 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_RESERVED_INDEX - 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "nextLineTabStop = NR_BIGNEE_OF_RESERVED_INDEX - 1;",
                "identical": false
            }
        ],
        "buggy_line": "nextLineTabStop = width - 1;",
        "fixed_line": "nextLineTabStop = 1;"
    },
    "Math-58": {
        "fixes": [
            {
                "k": 1,
                "patch": "return fit.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return fit.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return fit(guessedetric.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return fit(guessedetric.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return fit(guessed.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return fit(guessed.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return fit(guessed, guess);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return fit(guessed, guess);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return fit(guessed, guess;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return fit(guessed, guess;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return fit(guessed, guess.Parametric);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return fit(guessed, guess.Parametric);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return fit.Parametric;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return fit.Parametric;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return fit(guessed, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return fit(guessed, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return fit.Parametric(), guess.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return fit.Parametric(), guess.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return fit(guessed, guess.Parametric;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return fit(guessed, guess.Parametric;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return fit(guessedetric.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return fit(guessedetric.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return fit.Parametric(guessed, guess);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return fit.Parametric(guessed, guess);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return fit(guessedView.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return fit(guessedView.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return fit(guessedFactory.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return fit(guessedFactory.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return fit(guessedHash.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return fit(guessedHash.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return fit(guessedetric;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return fit(guessedetric;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return fit(guess, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return fit(guess, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return fit(guessed >= guess.Parametric;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return fit(guessed >= guess.Parametric;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return fit(guessedetric != guess.Parametric;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return fit(guessedetric != guess.Parametric;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return fit(guessedJob.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return fit(guessedJob.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return fit(guessedExtension.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return fit(guessedExtension.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return fit.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return fit.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return fit(guessedate.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return fit(guessedate.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return fit(guessed, guess.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return fit(guessed, guess.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return fit.Parametric(), guess.class;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return fit.Parametric(), guess.class;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return fit(guessed;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return fit(guessed;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return fit(guessed.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return fit(guessed.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return fit.Parametric(guessed);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return fit.Parametric(guessed);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return fit(guess, guess.Parametric);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return fit(guess, guess.Parametric);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return fit(PATTERN, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return fit(PATTERN, guess.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return fit(guessedBoolean.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return fit(guessedBoolean.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return fit(guess, guess.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return fit(guess, guess.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return fit(guessedetric.Parametric;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return fit(guessedetric.Parametric;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return fit(guessedDesc.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return fit(guessedDesc.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return fit(guessedetric.Parametric, guess);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return fit(guessedetric.Parametric, guess);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return fit(guessedOrig.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return fit(guessedOrig.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return fit(guessed == guess.Parametric;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return fit(guessed == guess.Parametric;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return fit(guessed);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return fit(guessed);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return fit(guessed && guess.Parametric;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return fit(guessed && guess.Parametric;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return fit(guessedetric(), guess;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return fit(guessedetric(), guess;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return fit;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return fit;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return fit.Parametric(), guess.length);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return fit.Parametric(), guess.length);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return fit(guessed && guess;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return fit(guessed && guess;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return fit(mail.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return fit(mail.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return fit(8, guess.Parametric);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return fit(8, guess.Parametric);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return fit.Parametric(guess, guess);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return fit.Parametric(guess, guess);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return fit(PATTERN, guess.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return fit(PATTERN, guess.Parametric(), guess);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return fit.Parametric(guessed, guess;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return fit.Parametric(guessed, guess;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return fit(PATTERN, guess.Parametric);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return fit(PATTERN, guess.Parametric);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return fit(forward.Parametric(), guess;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return fit(forward.Parametric(), guess;",
                "identical": false
            }
        ],
        "buggy_line": "return fit(new Gaussian.Parametric(), guess);",
        "fixed_line": "return fit(guess);"
    },
    "Closure-130": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (name.globalSets == 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (name.globalSets == 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && name.length == 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && name.length == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.length == 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.length == 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type != 1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type != 1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type == 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type == 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&name.length == 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&name.length == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && name.length == 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && name.length == 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && position.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && position.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type != 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type != 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (name.globalSets != 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (name.globalSets != 0 && name.localSets > 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && content.length == 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && content.length == 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.aliasingGets) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.aliasingGets) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type == 1) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type == 1) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 &&name.length == 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 &&name.length == 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && content.length == 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && content.length == 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && name.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && name.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&name.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&name.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && key.length == 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && key.length == 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && position.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && position.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && type == 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && type == 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&name.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&name.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && b.length == 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && b.length == 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && position.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && position.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.withSets) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.withSets) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.dataType == 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.dataType == 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && key.length == 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && key.length == 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.initialSets) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.initialSets) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.dataLength == 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.dataLength == 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&3] == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&3] == 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (name.globalSets != 0 && name.localSets > 0 && name.length == 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (name.globalSets != 0 && name.localSets > 0 && name.length == 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && name.alias) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && name.alias) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (name.globalSets == 1 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (name.globalSets == 1 && name.localSets == 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (name.globalSets != 0 && name.localSets != 0 && type != 1) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (name.globalSets != 0 && name.localSets != 0 && type != 1) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && type == 1) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (name.globalSets == 0 && name.localSets > 0 && type == 1) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.alias) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && b.alias) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && type != 1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && type != 1) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&name.aliasingGets) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&name.aliasingGets) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&name.alias) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 &&name.alias) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && vars.length == 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && vars.length == 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && headeringGets > 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && headeringGets > 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && type.aliasingGets == 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && name.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && name.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && object.length == 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (name.globalSets == 0 && name.localSets == 0 && object.length == 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (name.globalSets == 1 && name.localSets == 0 && b.aliasingGets > 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (name.globalSets != 0 && name.localSets != 0 && content.length > 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (name.globalSets != 0 && name.localSets != 0 && content.length > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && type != 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (name.globalSets == 0 && name.localSets != 0 && type != 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (name.globalSets == 1 && name.localSets == 0 &&",
        "fixed_line": "if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&"
    },
    "JacksonDatabind-17": {
        "fixes": [
            {
                "k": 1,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassonTypeClass);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassonTypeClass);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass+1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass+1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassExecutorRawClass);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassExecutorRawClass);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass});",
                "identical": false
            },
            {
                "k": 18,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass});",
                "identical": false
            },
            {
                "k": 19,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass(),t.class);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass(),t.class);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass(), t.class);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass(), t.class);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != t.class);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != t.class);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass+t.class);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass+t.class);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass || t.class;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass || t.class;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass+t.class;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass+t.class;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassname);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassname);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != boolean.class);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != boolean.class);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()+t.class;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()+t.class;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass++) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass++) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassClass);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassClass);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > t.class);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > t.class);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassExecutorRawClass;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassExecutorRawClass;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass cot.class);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass cot.class);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassonTypeClass;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassonTypeClass;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > 0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassSubjectSubject);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassSubjectSubject);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > t.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > t.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass8) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass8) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > boolean.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > boolean.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()+t.class);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass()+t.class);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != Jsont.class);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != Jsont.class);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassonType);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassonType);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass splitt.class);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass splitt.class);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClasswait",
                "identical": false
            },
            {
                "k": 72,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClasswait",
                "identical": false
            },
            {
                "k": 73,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass Rt.class);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass Rt.class);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > t.class;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > t.class;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass || t.class);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass || t.class);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > boolean.class);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass > boolean.class);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass coerClass);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass coerClass);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassANNOTATION_STRING;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassANNOTATION_STRING;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != boolean.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass != boolean.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass())) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassAPPLICATION_FINAL;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassAPPLICATION_FINAL;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass definition_FINAL_EVENT);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass definition_FINAL_EVENT);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass definition_FINAL;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass definition_FINAL;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassStyleClass);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClassStyleClass);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass >t.class);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass >t.class);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass))) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "|| TreeNode.class.isAssignableFrom(t.getRawClass))) {",
                "identical": false
            }
        ],
        "buggy_line": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
        "fixed_line": "&& !TreeNode.class.isAssignableFrom(t.getRawClass()));"
    },
    "Cli-40": {
        "fixes": [
            {
                "k": 1,
                "patch": "return str;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return str;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters as '",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters as '",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters as",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters as",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return createURL",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return createURL",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return JsonToken.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return JsonToken.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return create",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return create",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return JsonToken",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return JsonToken",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return Json",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return Json",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the .",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the .",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't returnstr;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str.",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return JsonToken. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return JsonToken. Also declare the methods parameters",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters as 'buffer",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return str. Also declare the methods parameters as 'buffer",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return JsonToken. Also declare the",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return JsonToken. Also declare the",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return defaultValue",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return JsonToken. Also declare the methods",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return JsonToken. Also declare the methods",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return jpa",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT; // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'spare't return jpa",
                "identical": false
            }
        ],
        "buggy_line": "return null;",
        "fixed_line": "throw new ParseException(\"Unable to handle the class: \" + clazz);"
    },
    "Closure-113": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parent != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parent != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (compiler == null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (compiler == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parent != null) { // empty String disables wrapping; non-empty enables",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parent != null) { // empty String disables wrapping; non-empty enables",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parent != null) { // we get null if there are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parent != null) { // we get null if there are extra elements; maybe otherwise too?",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parent != null) { // let's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parent != null) { // let's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parent != null) { // if there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parent != null) { // if there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parent != null) { // we avoid self-loop?",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parent != null) { // we avoid self-loop?",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parent != null) { // if then we are the parent of record or input...",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parent != null) { // if then we are the parent of record or input...",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parent != null) { // we can this ever occur?",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parent != null) { // we can this ever occur?",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parent != null) { // if we can this ever occur?",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parent != null) { // if we can this ever occur?",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parent != null) { // for mac, then we are the parent of record or input...",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parent != null) { // for mac, then we are the parent of record or input...",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parent != null) { // if there's non-public in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parent != null) { // if there's non-public in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parent != null) { // may be filtered out unconditionally",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parent != null) { // may be filtered out unconditionally",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parent != null) { // ignore non-public in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parent != null) { // ignore non-public in case there's not store 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parent != null) { // if there's value we added.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parent != null) { // if there's value we added.",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parent != null) { // we avoid self-loops in order to support pseudographs",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parent != null) { // we avoid self-loops in order to support pseudographs",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parent != null) { // we get null if there are the parent of record or input...",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parent != null) { // we get null if there are the parent of record or input...",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parent != null) { // happens when annotation processing is disabled.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parent != null) { // happens when annotation processing is disabled.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (compiler == null) { // if there's value we added.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (compiler == null) { // if there's value we added.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not yet parent",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not yet parent",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parent != null) { // empty String disables wrapping; non-most span.",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parent != null) { // empty String disables wrapping; non-most span.",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not yet bother",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not yet bother",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parent != null) { // for mac, then we are the root-most span.",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parent != null) { // for mac, then we are the root-most span.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parent != null) { // if then we can this ever occur?",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parent != null) { // if then we can this ever occur?",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parent != null) { // if we avoid self-loop?",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parent != null) { // if we avoid self-loop?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parent != null) { // if there's non-public, need to check the next one",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parent != null) { // if there's non-public, need to check the next one",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parent != null) { // we avoid self-loops in case of record or input...",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parent != null) { // we avoid self-loops in case of record or input...",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's used below",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's used below",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parent != null) { // we get null if there's not called by the parent of the next one",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parent != null) { // we get null if there's not called by the parent of the next one",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not called by default.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not called by default.",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parent != null) { // if there's not called by the parent of the next one",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parent != null) { // if there's not called by the parent of the next one",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parent != null) { // we get null if there are extra elements; may be only path if there's not called by the parent of the next one",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parent != null) { // we get null if there are extra elements; may be only path if there's not called by the parent of the next one",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not called by the parent of the next one",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not called by the parent of the next one",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parent != null) { // if there's non-public, then",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parent != null) { // if there's non-public, then",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parent != null) { // if there's non-public in case there's not yet bother",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parent != null) { // if there's non-public in case there's not yet bother",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not called by the next one",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not called by the next one",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parent != null) { // if there's not store 'raw' nulls but if there's non-public in case there's not yet bother",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parent != null) { // if there's not store 'raw' nulls but if there's non-public in case there's not yet bother",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parent != null) { // it's non-public, then",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parent != null) { // it's non-public, then",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parent != null) { // may be only path if there's value we added.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parent != null) { // may be only path if there's value we added.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parent != null) { // if there's not store 'raw' nulls but...",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parent != null) { // if there's not store 'raw' nulls but...",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parent != null) { // if there's not store 'raw' nulls but if there's non-public in case there's used below",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parent != null) { // if there's not store 'raw' nulls but if there's non-public in case there's used below",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parent != null) { // if there's non-public, need to check it's value",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parent != null) { // if there's non-public, need to check it's value",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parent != null) { // may be only path if there's non-public in case there's not yet parent",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parent != null) { // may be only path if there's non-public in case there's not yet parent",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parent != null) { // if there's not store 'raw' nulls but filtered in case there's not yet bother",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parent != null) { // if there's not store 'raw' nulls but filtered in case there's not yet bother",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not called by default with the next one",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parent != null) { // we get null if there's non-public in case there's not called by default with the next one",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parent != null) { // we get null if there are extra elements; may be only path if there's value",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parent != null) { // we get null if there are extra elements; may be only path if there's value",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parent != null) { // we get null if there are extra elements; may be only path if there's value we added.",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parent != null) { // we get null if there are extra elements; may be only path if there's value we added.",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parent != null) { // if there's non-public in case there's not yet parent",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parent != null) { // if there's non-public in case there's not yet parent",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parent != null) { // if there's not called by the parent of record or input...",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parent != null) { // if there's not called by the parent of record or input...",
                "identical": false
            }
        ],
        "buggy_line": "if (provided != null) {",
        "fixed_line": "if (provided != null || requiresLevel.isOn()) {"
    },
    "Jsoup-47": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (inAttribute) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (inAttribute) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (inObject) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (inObject) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (intracing) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (intracing) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (inOrStatement) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (inOrStatement) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (inAttribute)().inAttribute) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (inAttribute)().inAttribute) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (inES) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (inES) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (intraces) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (intraces) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (inQUERY_REQUEST) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (inQUERY_REQUEST) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (inA) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (inA) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (inCase) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (inCase) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (inclz) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (inclz) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (inTaskId) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (inTaskId) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (inCaseWhen) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (inCaseWhen) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (inObjectKey) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (inObjectKey) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (inAttribute) throw e;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (inAttribute) throw e;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (inAttribute) object;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (inAttribute) object;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (inAttribute) char.inAttribute) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (inAttribute) char.inAttribute) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (inAttribute) htmlForm.inAttribute) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (inAttribute) htmlForm.inAttribute) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (inclusive) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (inclusive) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (inMon) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (inMon) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (inAttribute) buf;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (inAttribute) buf;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (inAttribute)al_MESSAGE_PROPERTY;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (inAttribute)al_MESSAGE_PROPERTY;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (inAttribute) bytes;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (inAttribute) bytes;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (inAttribute) objectNode;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (inAttribute) objectNode;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (inspans) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (inspans) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (inapiKey) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (inapiKey) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (inObject e) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (inObject e) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (inPostgres) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (inPostgres) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (inArray) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (inArray) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (inAttribute)al_targetType.inAttribute) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (inAttribute)al_targetType.inAttribute) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (inAttribute)al_MATCHING_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (inAttribute)al_MATCHING_THRESHOLD) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (inAttribute)al) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (inAttribute)al) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (in})) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (in})) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (inAttribute)al_&lt;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (inAttribute)al_&lt;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (inAttribute) char;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (inAttribute) char;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (inAttribute) SEMUTATED;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (inAttribute) SEMUTATED;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (inChecks) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (inChecks) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (_inAttribute) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (_inAttribute) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (inAttribute)al_&lt) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (inAttribute)al_&lt) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (inAttribute) start_MESSAGE_PROPERTY;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (inAttribute) start_MESSAGE_PROPERTY;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (inAttribute) objectLeaf) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (inAttribute) objectLeaf) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (inAttribute) objectLeafAllowed) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (inAttribute) objectLeafAllowed) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (inAttribute)googleResolve) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (inAttribute)googleResolve) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (in taskService) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (in taskService) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (inAttribute) start_converted) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (inAttribute) start_converted) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (inOwner) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (inOwner) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (inAttribute)al_PROCESSOR_INFO;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (inAttribute)al_PROCESSOR_INFO;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (inAttribute)al_targetType.inAttribute;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (inAttribute)al_targetType.inAttribute;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (in exp) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (in exp) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (inlocal) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (inlocal) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!inAttribute)",
        "fixed_line": "if (!inAttribute || escapeMode == EscapeMode.xhtml)"
    },
    "JacksonDatabind-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "visitFloatFormat(typeHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "visitFloatFormat(typeHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "visitFloatFormat(typeHint, v2, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "visitFloatFormat(typeHint, v2, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER, JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER, JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "visitFloatFormat(typeHint, NParser.NumberType.BIG_INTEGER, JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "visitFloatFormat(typeHint, NParser.NumberType.BIG_INTEGER, JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "visitFloatFormatVisitorvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "visitFloatFormatVisitorvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "visitFloatFormat(typeHint, NParser.NumberType.BIG_INTEGER, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "visitFloatFormat(typeHint, NParser.NumberType.BIG_INTEGER, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "visitFloatFormat(typeHint, NR_BIG_INTEGER, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "visitFloatFormat(typeHint, NR_BIG_INTEGER, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "visitFloatFormat(typeHint,ONE, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "visitFloatFormat(typeHint,ONE, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "visitFloatFormatseparator, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "visitFloatFormatseparator, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER instanceof JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER instanceof JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "visitFloatFormat \"[visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "visitFloatFormat \"[visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "visitFloatFormatReaders, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "visitFloatFormatReaders, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "visitFloatFormatAs, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "visitFloatFormatAs, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "visitFloatFormatTovisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "visitFloatFormatTovisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "visitFloatFormatCategory(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "visitFloatFormatCategory(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "visitFloatFormatProxy, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "visitFloatFormatProxy, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "visitFloatFormat(typeHint, _NumberType, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "visitFloatFormat(typeHint, _NumberType, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "visitFloatFormat(typeHint, out, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "visitFloatFormat(typeHint, out, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "visitFloatFormat MIN_INTEGER, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "visitFloatFormat MIN_INTEGER, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "visitFloatFormatByvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "visitFloatFormatByvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGERINTEGER);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGERINTEGER);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "visitFloatFormatSer(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "visitFloatFormatSer(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "visitFloatFormat orderBy, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "visitFloatFormat orderBy, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "visitFloatFormatListener(typeHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "visitFloatFormatListener(typeHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "visitFloatFormatPath(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "visitFloatFormatPath(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "visitFloatFormat(h, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "visitFloatFormat(h, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "visitFloatFormat(\"visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "visitFloatFormat(\"visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER >>> JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER >>> JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "visitFloatFormateaders(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "visitFloatFormateaders(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "visitFloatFormat(typeHint, rows, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "visitFloatFormat(typeHint, rows, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "visitFloatFormat(typeHint, NParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "visitFloatFormat(typeHint, NParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "visitFloatFormatsvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "visitFloatFormatsvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "visitFloatFormatListener, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "visitFloatFormatListener, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "visitFloatFormatDefinitionvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "visitFloatFormatDefinitionvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "visitFloatFormatCOL, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "visitFloatFormatCOL, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER : JsonParser.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER : JsonParser.BIG_INTEGER;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "visitFloatFormatrename, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "visitFloatFormatrename, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "visitFloatFormatAsString, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "visitFloatFormatAsString, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "visitFloatFormat>visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "visitFloatFormat>visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "visitFloatFormatHint, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "visitFloatFormatHint, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "visitFloatFormat normalized, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "visitFloatFormat normalized, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "visitFloatFormat createvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "visitFloatFormat createvisitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "visitFloatFormat(_typeHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "visitFloatFormat(_typeHint,visitor, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "visitFloatFormat(_visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "visitFloatFormat(_visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "visitFloatFormatBean, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "visitFloatFormatBean, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "visitFloatFormatAs, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "visitFloatFormatAs, _typeHint, JsonParser.NumberType.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER : JsonParser.BIG_INTEGER);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER : JsonParser.BIG_INTEGER);",
                "identical": false
            }
        ],
        "buggy_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
        "fixed_line": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);"
    },
    "Math-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits -rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits -rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ret = (Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ret = (Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len) <= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len) <= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ret = (Double.doubleToRawLongBits(rhs) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ret = (Double.doubleToRawLongBits(rhs) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ret = (Double.doubleToRawLongBits(rhs) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ret = (Double.doubleToRawLongBits(rhs) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits != Double.doubleToRawLongBits) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits != Double.doubleToRawLongBits) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsNamespace) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsNamespace) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - len) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - len) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1 - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1 - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits : Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits : Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits.\" + Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits.\" + Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ret = (Double.doubleToRawLongBits(rhs) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ret = (Double.doubleToRawLongBits(rhs) == Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) / Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) / Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits(rhs.getImaginary;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits(rhs.getImaginary;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ret = (1Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ret = (1Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits).doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits).doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len) <= Double.doubleToRawLongBits.getImaginary;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits + len) <= Double.doubleToRawLongBits.getImaginary;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ret = (1Double.doubleToRawLongBits(rhs.doubleToRawLongBits -rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ret = (1Double.doubleToRawLongBits(rhs.doubleToRawLongBits -rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1 - URI.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1 - URI.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsplay.doubleToRawLongBits(rhs) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsplay.doubleToRawLongBits(rhs) != Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - len) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - len) >= Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1 + Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1 + Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1, Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 1, Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits << Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits << Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 10, Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits - 10, Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs.doubleToRawLongBits)) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs.doubleToRawLongBits)) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits)) Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits.getImaginary;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits.getImaginary;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsplay.doubleToRawLongBits(rhs) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBitsplay.doubleToRawLongBits(rhs) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits != Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits != Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal())) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.getReal())) - Double.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ret = (1 << Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ret = (1 << Double.doubleToRawLongBits(rhs.doubleToRawLongBits;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) >= Double.doubleToRawLongBits.getImaginary;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits(rhs) >= Double.doubleToRawLongBits.getImaginary;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits != Double.getImaginary;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ret = (Double.doubleToRawLongBits != Double.doubleToRawLongBits && Double.doubleToRawLongBits != Double.getImaginary;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & 0xff.getImaginary;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ret = (Double.doubleToRawLongBits(rhs.doubleToRawLongBits & 0xff.getImaginary;",
                "identical": false
            }
        ],
        "buggy_line": "ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));",
        "fixed_line": "ret = (real == rhs.real) && (imaginary == rhs.imaginary);"
    },
    "Closure-62": {
        "fixes": [
            {
                "k": 1,
                "patch": "&& 0 != charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "&& 0 != charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "&& charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "&& charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "&& i < charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "&& i < charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "&& 0 != charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "&& 0 != charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "&& 0 != charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "&& 0 != charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "&& i < charno && charno == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "&& i < charno && charno == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "&& i < charno && charno > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "&& i < charno && charno > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "&& 0 == charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "&& 0 == charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "&& i < charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "&& i < charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "&& 0 != charno && sourceExcerpt.length > 1) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "&& 0 != charno && sourceExcerpt.length > 1) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "&& 0 != charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "&& 0 != charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "&& i < charno && charno == sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "&& i < charno && charno == sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "&& i < charno && charno >= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "&& i < charno && charno >= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "&& charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "&& charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "&& i < charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "&& i < charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "&& charno != charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "&& charno != charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "&& i < charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "&& i < charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "&& 0 < charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "&& 0 < charno && charno > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "&& charno != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "&& charno != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "&& i < charno && charno >= sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "&& i < charno && charno >= sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "&& i < charno && charno == sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "&& i < charno && charno == sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "&& 0 != charno && sourceExcerpt.length > 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "&& 0 != charno && sourceExcerpt.length > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "&& 0 != charno && sourceExcerpt.length > i) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "&& 0 != charno && sourceExcerpt.length > i) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "&& 0 == charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "&& 0 == charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "&& 0 != charno && charno >= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "&& 0 != charno && charno >= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "&& 0 != charno && sourceExcerpt.length > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "&& 0 != charno && sourceExcerpt.length > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "&& 0 == charno && charno == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "&& 0 == charno && charno == sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "&& 0 != charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "&& 0 != charno && charno != sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "&& 0 != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "&& 0 != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "&& 0 != charno && sourceExcerpt.length == 1) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "&& 0 != charno && sourceExcerpt.length == 1) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "&& 0no != charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "&& 0no != charno && sourceExcerpt.length > 0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "&& i < charno && charno != sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "&& i < charno && charno != sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "&& 0 != charno && charno > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "&& 0 != charno && charno > sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "&& 0 == charno && charno >= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "&& 0 == charno && charno >= sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "&& 0 == charno && charno != charcerpt.length()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "&& 0 == charno && charno != charcerpt.length()) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "&& 0 != charno && sourceExcerpt.length - 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "&& 0 != charno && sourceExcerpt.length - 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "&& i < charno && charno.length == sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "&& i < charno && charno.length == sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "&& 0 != charno && sourceExcerpt.length > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "&& 0 != charno && sourceExcerpt.length > sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "&& charno != charno && sourceExcerpt.length != 1) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "&& charno != charno && sourceExcerpt.length != 1) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "&& i < charno && charno >= sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "&& i < charno && charno >= sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "&& i < charno && charno > sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "&& i < charno && charno > sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "&& charno != charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "&& charno != charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "&& charno && charno != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "&& charno && charno != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "&& i == charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "&& i == charno && charno < sourceExcerpt.length;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "&& 0no != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "&& 0no != charno && sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "&& 0 < charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "&& 0 < charno && charno < sourceExcerpt.length()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "&& 0 != charno && sourceExcerpt.length != 1) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "&& 0 != charno && sourceExcerpt.length != 1) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "&& 0 == charno && charno < sourceExcerpt.length) {",
                "identical": false
            }
        ],
        "buggy_line": "&& 0 <= charno && charno < sourceExcerpt.length()) {",
        "fixed_line": "&& 0 <= charno && charno <= sourceExcerpt.length()) {"
    },
    "Closure-38": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (negativeZero == 0x && prev == '-') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (negativeZero == 0x && prev == '-') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (x < 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (x < 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (negativeZero == 0x0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (negativeZero == 0x0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (negativeZero == 0x0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (negativeZero == 0x0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (negativeZero == 0x || prev == '-') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (negativeZero == 0x || prev == '-') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (negativeZero == 0x020 && prev == '-') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (negativeZero == 0x020 && prev == '-') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (negativeZero == 0x00 && prev == '-') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (negativeZero == 0x00 && prev == '-') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (negativeZero <= 0x && prev == '-') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (negativeZero <= 0x && prev == '-') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (negativeZero >= 0x && prev == '-') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (negativeZero >= 0x && prev == '-') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (negativeZero == 0x01 && prev == '-') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (negativeZero == 0x01 && prev == '-') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (negativeZero == 0xFIRST || prev == '-') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (negativeZero == 0xFIRST || prev == '-') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (negativeZero == 0x80 && prev == '-') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (negativeZero == 0x80 && prev == '-') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (negativeZero == 0x05) && prev == '-') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (negativeZero == 0x05) && prev == '-') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (negativeZero == 0x00 || prev == '-') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (negativeZero == 0x00 || prev == '-') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (negativeZero == 0x0[' && prev == '-') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (negativeZero == 0x0[' && prev == '-') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (negativeZero == 0xRENZero && prev == '-') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (negativeZero == 0xRENZero && prev == '-') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (negativeZero == 0xWorkflow && prev == '-') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (negativeZero == 0xWorkflow && prev == '-') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (negativeZero == 0x78Zero && prev == '-') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (negativeZero == 0x78Zero && prev == '-') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (negativeZero == 0x05) || prev == '-') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (negativeZero == 0x05) || prev == '-') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (negativeZero >= 0x && prev < '-') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (negativeZero >= 0x && prev < '-') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (negativeZero == 0x020 || prev == '-') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (negativeZero == 0x020 || prev == '-') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (negativeZero == 0x02) && prev == '-') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (negativeZero == 0x02) && prev == '-') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (negativeZero <= 0x && prev >= '-') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (negativeZero <= 0x && prev >= '-') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (negativeZero == 0xREN && prev == '-') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (negativeZero == 0xREN && prev == '-') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (negativeZero == 0x0f && prev == '-') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (negativeZero == 0x0f && prev == '-') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (negativeZero == 0x0ows || prev == '-') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (negativeZero == 0x0ows || prev == '-') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (negativeZero == 0x02, prev == '-') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (negativeZero == 0x02, prev == '-') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (negativeZero == 0x0 DISPLAY && prev == '-') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (negativeZero == 0x0 DISPLAY && prev == '-') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (negativeZero == 0x0Asc || prev == '-') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (negativeZero == 0x0Asc || prev == '-') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (x > 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (x > 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (x >= 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (x >= 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (negativeZero == 0x[' && prev == '-') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (negativeZero == 0x[' && prev == '-') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (negativeZero == 0x10000 && prev == '-') {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (negativeZero == 0x10000 && prev == '-') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (negativeZero <= 0x && prev < '-') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (negativeZero <= 0x && prev < '-') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (negativeZero == 0x78Zero && y == '-') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (negativeZero == 0x78Zero && y == '-') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (negativeZero == 0xdrZero && prev == '-') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (negativeZero == 0xdrZero && prev == '-') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (negativeZero == 0xGraph && prev == '-') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (negativeZero == 0xGraph && prev == '-') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (negativeZero == 0x05) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (negativeZero == 0x05) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (negativeZero == 0xURI || prev == '-') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (negativeZero == 0xURI || prev == '-') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (negativeZero < 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (negativeZero < 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (x == 0x || prev == '-') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (x == 0x || prev == '-') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (x == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (x == 0 && prev == '-') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (negativeZero <= 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (negativeZero <= 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (negativeZero == 0x0200) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (negativeZero == 0x0200) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (negativeZero == 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (negativeZero == 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (negativeZero == 0x02, prev >= '-') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (negativeZero == 0x02, prev >= '-') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (x > 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (x > 0 || prev == '-') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (negativeZero == 0xRENZero && y == '-') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (negativeZero == 0xRENZero && y == '-') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (negativeZero == 0x03) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (negativeZero == 0x03) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (x >= 0 && prev < '-') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (x >= 0 && prev < '-') {",
                "identical": false
            }
        ],
        "buggy_line": "if (x < 0 && prev == '-') {",
        "fixed_line": "if ((x < 0 || negativeZero) && prev == '-') {"
    },
    "Jsoup-43": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (element.equals(element)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (element.equals(element)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (element.equals(i)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (element.equals(i)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (element.equals(element)) returnEps;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (element.equals(element)) returnEps;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (element.equalsequals(element)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (element.equalsequals(element)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (element.equals(new)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (element.equals(new)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (element.equals(element)) returnEOLATION;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (element.equals(element)) returnEOLATION;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (element.equals(element)) returnEOL;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (element.equals(element)) returnEOL;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (element.equals(element)) returnEOLVED_ENTRY;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (element.equals(element)) returnEOLVED_ENTRY;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (element.equals(t)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (element.equals(t)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (element.equals(elements)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (element.equals(elements)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (element.equals(\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (element.equals(\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (element.equals(element)) returnEOLVED_VALUE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (element.equals(element)) returnEOLVED_VALUE;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (element.equals(element)) returnEOLVED_WIDTH;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (element.equals(element)) returnEOLVED_WIDTH;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (element.equals(element)) returnE == element;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (element.equals(element)) returnE == element;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (element.equals(element)) returnEOLOR;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (element.equals(element)) returnEOLOR;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (element.equals(element)) returnEOLVED_BEFORE, element);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (element.equals(element)) returnEOLVED_BEFORE, element);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (element.equals(this.element)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (element.equals(this.element)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (element.equals(element)) returnEMBEDDED_NOT_BEFORE, element);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (element.equals(element)) returnEMBEDDED_NOT_BEFORE, element);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (element.equals(element)) return builder.element;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (element.equals(element)) return builder.element;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT, element);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT, element);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (element.equals ALL_COLUMNS) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (element.equals ALL_COLUMNS) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (element.equals(element)) returnEMBEDDED_NOT_BE_NULL;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (element.equals(element)) returnEMBEDDED_NOT_BE_NULL;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (element.equals(element)) returnEMBEDDED_VALUE;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (element.equals(element)) returnEMBEDDED_VALUE;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (element.equals(element)) returnEOLVED_POSITION;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (element.equals(element)) returnEOLVED_POSITION;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (element.equals(current)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (element.equals(current)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (element.equalsNull) returnEps;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (element.equalsNull) returnEps;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (element.equals(element)) return container;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (element.equals(element)) return container;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (element.equals(element)) returnEOLVED_BEFORE, element;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (element.equals(element)) returnEOLVED_BEFORE, element;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (element.equals(element)) returnEMBEDDED;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (element.equals(element)) returnEMBEDDED;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (element.equals(\"0\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (element.equals(\"0\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (element.equals(element)) return[element;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (element.equals(element)) return[element;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (element.equals(element)) returnEMBEDDED_NOT_BEFORE, element;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (element.equals(element)) returnEMBEDDED_NOT_BEFORE, element;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (element.equals(element)) returnEOLER;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (element.equals(element)) returnEOLER;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (element.equals(element)) return VOID;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (element.equals(element)) return VOID;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (element.equals( labels)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (element.equals( labels)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (element.equals(element)) returnEMBEDDED_BEFORE_START;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (element.equals(element)) returnEMBEDDED_BEFORE_START;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (element.equals(newValue)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (element.equals(newValue)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (element.equals(newName)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (element.equals(newName)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (element.equals(search)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (element.equals(search)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (element.equals) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (element.equals) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (element.equals(E == element)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (element.equals(E == element)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (element.equals(element)) returnE prefix;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (element.equals(element)) returnE prefix;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (element.equals(element)) returnEcomma;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (element.equals(element)) returnEcomma;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (element.equals(element)) returnEOLVED_ADAPTER.search)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (element.equals(element)) returnEOLVED_ADAPTER.search)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT, element;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (element.equals(element)) returnEMBEDDED_OBJECT, element;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (element.equals(Repres)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (element.equals(Repres)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (element.equals(element)) returnEPOCHART_NO_ i;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (element.equals(element)) returnEPOCHART_NO_ i;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (element.equals(element)) returnEOLVERTITUDE_VALUE;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (element.equals(element)) returnEOLVERTITUDE_VALUE;",
                "identical": false
            }
        ],
        "buggy_line": "if (element.equals(search))",
        "fixed_line": "if (element == search)"
    },
    "Math-34": {
        "fixes": [
            {
                "k": 1,
                "patch": "return chromosomes.iterator;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return chromosomes.iterator;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return chromosomes.iterator();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return chromosome.iterator;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return chromosome.iterator;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return Idosomes.iterator;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return Idosomes.iterator;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return chromosomes.iteratorUTosomes.iterator();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return chromosomes.iteratorUTosomes.iterator();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS_NAME;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS_NAME;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS_iterator;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS_iterator;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return chromosomes.iteratorUTosomes;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return chromosomes.iteratorUTosomes;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return chromosome.iterator();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return chromosome.iterator();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return chromosomes.iteratorC_CREATOR_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return chromosomes.iteratorC_CREATOR_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return chromosomes;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return chromosomes;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return chromosomes.iteratorUTosomes.iterator;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return chromosomes.iteratorUTosomes.iterator;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return chromARMomes.iterator;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return chromARMomes.iterator;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return Idosomes.iterator();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return Idosomes.iterator();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return chromosomes.iterator().next;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return chromosomes.iterator().next;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return chromosomes.iteratorC_CREATOR_PREVIOUS;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return chromosomes.iteratorC_CREATOR_PREVIOUS;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASASPECT_CLASS_NAME;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASASPECT_CLASS_NAME;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMASTER_ call;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMASTER_ call;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_ROWMAP.iterator();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_ROWMAP.iterator();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_MAPPINGS;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_MAPPINGS;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return chromosomes.iterator.next;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return chromosomes.iterator.next;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_TYPE_EQUAL;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_TYPE_EQUAL;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_NAME;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_NAME;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASASPECT_CLASS_iterator;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASASPECT_CLASS_iterator;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return chromosomes.iteratorED_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return chromosomes.iteratorED_REORDER_COLUMNS;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_NAME;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_NAME;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMASTERED_ call;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMASTERED_ call;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS_PROPERTY;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS_PROPERTY;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_TYPE_EQUAL;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_TYPE_EQUAL;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMASTERED_ call;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMASTERED_ call;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMPEOP_RESERVED_TYPE_EQUAL;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMPEOP_RESERVED_TYPE_EQUAL;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMASTER_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMASTER_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMASTER_ call;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMASTER_ call;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMPENSATION;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_IPV;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_IPV;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_IPV;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_IPV;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS_COLUMNS;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return chromosomes.iteratorCANCE_CONFIGURER_ASPECT_CLASS_COLUMNS;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMPEOP_RESERVED_PATTERN;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMPEOP_RESERVED_PATTERN;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_URL;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_IPVIOUS;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_IPVIOUS;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_PATTERN;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return chromosomes.iteratorCUTURE_FOR_COMMAY_RESERVED_PATTERN;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_PATTERN;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMAY_RESERVED_PATTERN;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMASTER_RESERVED_COLUMNS;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return chromosomes.iteratorUTURE_FOR_COMMASTER_RESERVED_COLUMNS;",
                "identical": false
            }
        ],
        "buggy_line": "return chromosomes.iterator();",
        "fixed_line": "return getChromosomes().iterator();"
    },
    "Time-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "Partial newPartial = new Partial(index, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Partial newPartial = new Partial(index, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Partial newPartial = new Partial(i, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Partial newPartial = new Partial(i, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Partial newPartial = new Partial(index, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Partial newPartial = new Partial(index, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Partial newPartial = new Partial(index, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Partial newPartial = new Partial(index, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Partial newPartial = new Partial(newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Partial newPartial = new Partial, i, newValues);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Partial newPartial = new Partial, i, newValues);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Partial newPartial = new Partial(i, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Partial newPartial = new Partial(i, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Partial newPartial = new Partial(index, newTypes, i, newValues);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Partial newPartial = new Partial(index, newTypes, i, newValues);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Partial newPartial = new Partial(start, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Partial newPartial = new Partial(start, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Partial newPartial = new Partial(this.index, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Partial newPartial = new Partial(this.index, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Partial newPartial = new Partial(this.index, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Partial newPartial = new Partial(this.index, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Partial newPartial = new Partial(this.index, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Partial newPartial = new Partial(this.index, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Partial newPartial = new Partial(location, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Partial newPartial = new Partial(location, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Partial newPartial = new Partial(index, newValues, i);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Partial newPartial = new Partial(index, newValues, i);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Partial newPartial = new Partial(out, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Partial newPartial = new Partial(out, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Partial newPartial = new Partial(alias, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Partial newPartial = new Partial(alias, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Partial newPartial = new Partial(count, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Partial newPartial = new Partial(count, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Partial newPartial = new Partial(i, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Partial newPartial = new Partial(i, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Partial newPartial = new Partial;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Partial newPartial = new Partial;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Partial newPartial = new Partial(can, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Partial newPartial = new Partial(can, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Partial newPartial = new Partial(newValues, this.index, newValues);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Partial newPartial = new Partial(newValues, this.index, newValues);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Partial newPartial = new Partial(len, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Partial newPartial = new Partial(len, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Partial newPartial = new Partial(resultValues, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Partial newPartial = new Partial(resultValues, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Partial newPartial = new Partial(index, newValues, i + 1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Partial newPartial = new Partial(index, newValues, i + 1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Partial newPartial = new Partial(resultValues, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Partial newPartial = new Partial(resultValues, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Partial newPartial = new Partial, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Partial newPartial = new Partial, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Partial newPartial = new Partial(required, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Partial newPartial = new Partial(required, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Partial newPartial = new Partial(newValues, 0, i, newValues);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Partial newPartial = new Partial(newValues, 0, i, newValues);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Partial newPartial = new Partial[i, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Partial newPartial = new Partial[i, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Partial newPartial = new Partial(args, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Partial newPartial = new Partial(args, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Partial newPartial = new Partial(resultValues, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Partial newPartial = new Partial(resultValues, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Partial newPartial = new Partial(array, i, newValues, newValues);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Partial newPartial = new Partial(array, i, newValues, newValues);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Partial newPartial = new Partial(resultValues, 0, i, newValues);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Partial newPartial = new Partial(resultValues, 0, i, newValues);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Partial newPartial = new Partial(index, newTypes, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Partial newPartial = new Partial(index, newTypes, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Partial newPartial = new Partial(name, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Partial newPartial = new Partial(name, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Partial newPartial = new Partial(index, newValues, newValues);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Partial newPartial = new Partial(index, newValues, newValues);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, valueValues);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, valueValues);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Partial newPartial = new Partial(i, newValues, 0, i);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Partial newPartial = new Partial(i, newValues, 0, i);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Partial newPartial = new Partial(post, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Partial newPartial = new Partial(post, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Partial newPartial = new Partial(i, newValues, newValues);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Partial newPartial = new Partial(i, newValues, newValues);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Partial newPartial = new Partial(clientValues, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Partial newPartial = new Partial(clientValues, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Partial newPartial = new Partial(ip, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Partial newPartial = new Partial(ip, newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Partial newPartial = new Partial(newValues, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Partial newPartial = new Partial(newValues, newTypes, 0, i);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Partial newPartial = new Partial[i, newValues, i + 1];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Partial newPartial = new Partial[i, newValues, i + 1];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Partial newPartial = new Partial(array, i, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Partial newPartial = new Partial(array, i, newValues, i + 1, newValues);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Partial newPartial = new PartialValues(newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Partial newPartial = new PartialValues(newValues, i, newValues);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, i);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Partial newPartial = new Partial(newValues, i, newTypes, i);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Partial newPartial = new Partial[i], newValues, i + 1];",
                "identical": false
            }
        ],
        "buggy_line": "Partial newPartial = new Partial(iChronology, newTypes, newValues);",
        "fixed_line": "Partial newPartial = new Partial(newTypes, newValues, iChronology);"
    },
    "Jsoup-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" title\"};",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" title\"};",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", this.title\"};",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", this.title\"};",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final String[] preserveWhitespaceTags = {pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final String[] preserveWhitespaceTags = {pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titletitle\"};",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titletitle\"};",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final String[] preserveWhitespaceTags = Wirepre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final String[] preserveWhitespaceTags = Wirepre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"P\"};",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"P\"};",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final String[] preserveWhitespaceTags =haspre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final String[] preserveWhitespaceTags =haspre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" nickname\"};",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" nickname\"};",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titlePaths;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titlePaths;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" this.title\"};",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" this.title\"};",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleCycle;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleCycle;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final String[] preserveWhitespaceTags = \";pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final String[] preserveWhitespaceTags = \";pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" \"title\"};",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" \"title\"};",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" threshold\"};",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" threshold\"};",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; //x00\";",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; //x00\";",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title.\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title.\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titlexFF;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titlexFF;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" '+\"};",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" '+\"};",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"produ\"};",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"produ\"};",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final String[] preserveWhitespaceTags =primitivepre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final String[] preserveWhitespaceTags =primitivepre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \";",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \";",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", ERROR_MESSAGE);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", ERROR_MESSAGE);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"TITLE\"};",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"TITLE\"};",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final String[] preserveWhitespaceTags = \"[pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final String[] preserveWhitespaceTags = \"[pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // [END_BUGGY] \"title\"};",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // [END_BUGGY] \"title\"};",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" sections\"};",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" sections\"};",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // : \"title\"};",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // : \"title\"};",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleLTA\"};",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleLTA\"};",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleRe\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleRe\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title potentially;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title potentially;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleDirection;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleDirection;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title filename\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title filename\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" 7\"};",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \" 7\"};",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final String[] preserveWhitespaceTags = foundpre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final String[] preserveWhitespaceTags = foundpre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title shorten\"};",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title shorten\"};",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title widget",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title widget",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; //registered \"title\"};",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; //registered \"title\"};",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // [END_BUGGY] \", \"title\"};",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // [END_BUGGY] \", \"title\"};",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleLTA;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"titleLTA;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"refresh\"};",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"refresh\"};",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final String[] preservecontrolTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final String[] preservecontrolTags = {\"pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final String[] preserveWhitespaceTags = 1024pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final String[] preserveWhitespaceTags = 1024pre\", \"plaintext\", \"title\"};",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"Clause\"};",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"Clause\"};",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title)\" {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title)\" {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // NOSONAR",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // NOSONAR",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // [END_BUGGY] : \"title\"};",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"}; // [END_BUGGY] : \"title\"};",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", 1024;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", 1024;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"up\"};",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"up\"};",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"needs\"};",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"needs\"};",
                "identical": false
            }
        ],
        "buggy_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\"};",
        "fixed_line": "private static final String[] preserveWhitespaceTags = {\"pre\", \"plaintext\", \"title\", \"textarea\"};"
    },
    "Math-104": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final double DEFAULT_EPSILON = 10e-9;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final double DEFAULT_EPSILON = 1024-9;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final double DEFAULT_EPSILON = 1024-9;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final double DEFAULT_EPSILON = 10;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final double DEFAULT_EPSILON = 10;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final double DEFAULT_EPSILON = 11-9;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final double DEFAULT_EPSILON = 11-9;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final double DEFAULT_EPSILON = 10);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final double DEFAULT_EPSILON = 10);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final double DEFAULT_EPSILON = 10)e-9;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final double DEFAULT_EPSILON = 10)e-9;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final double DEFAULT_EPSILON = 1024;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final double DEFAULT_EPSILON = 1024;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final double DEFAULT_EPSILON = 102410;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final double DEFAULT_EPSILON = 102410;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final double DEFAULT_EPSILON = 9 9-9;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final double DEFAULT_EPSILON = 9 9-9;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final double DEFAULT_EPSILON = 1024000e-9;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final double DEFAULT_EPSILON = 1024000e-9;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final double DEFAULT_EPSILON = 50e-9;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final double DEFAULT_EPSILON = 50e-9;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final double DEFAULT_EPSILON = 102424-9;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final double DEFAULT_EPSILON = 102424-9;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final double DEFAULT_EPSILON = 1024Transaction-9;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final double DEFAULT_EPSILON = 1024Transaction-9;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final double DEFAULT_EPSILON = 1000;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final double DEFAULT_EPSILON = 1000;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final double DEFAULT_EPSILON = 1024Empty-9;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final double DEFAULT_EPSILON = 1024Empty-9;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final double DEFAULT_EPSILON = 1024 borrow;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final double DEFAULT_EPSILON = 1024 borrow;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final double DEFAULT_EPSILON = 1024 * 1024;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final double DEFAULT_EPSILON = 1024 * 1024;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final double DEFAULT_EPSILON = 1024TEXT-9;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final double DEFAULT_EPSILON = 1024TEXT-9;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final double DEFAULT_EPSILON = 1024 int-9;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final double DEFAULT_EPSILON = 1024 int-9;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final double DEFAULT_EPSILON = 102411;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final double DEFAULT_EPSILON = 102411;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final double DEFAULT_EPSILON = 1024_EPSILON;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final double DEFAULT_EPSILON = 1024_EPSILON;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final double DEFAULT_EPSILON = 1024Interface-9;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final double DEFAULT_EPSILON = 1024Interface-9;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final double DEFAULT_EPSILON = 9-9;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final double DEFAULT_EPSILON = 9-9;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final double DEFAULT_EPSILON = 1024ren-9;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final double DEFAULT_EPSILON = 1024ren-9;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final double DEFAULT_EPSILON = 1024OPTIONS;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final double DEFAULT_EPSILON = 1024OPTIONS;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final double DEFAULT_EPSILON = 1024.0-9;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final double DEFAULT_EPSILON = 1024.0-9;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final double DEFAULT_EPSILON = 1024FULL-9;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final double DEFAULT_EPSILON = 1024FULL-9;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final double DEFAULT_EPSILON = 1024Value-9;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final double DEFAULT_EPSILON = 1024Value-9;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final double DEFAULT_EPSILON = 1024Positions.length-9;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final double DEFAULT_EPSILON = 1024Positions.length-9;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final double DEFAULT_EPSILON = 1000e-9;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final double DEFAULT_EPSILON = 1000e-9;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final double DEFAULT_EPSILON = 1024 display-9;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final double DEFAULT_EPSILON = 1024 display-9;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final double DEFAULT_EPSILON = 9 92;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final double DEFAULT_EPSILON = 9 92;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final double DEFAULT_EPSILON = 1024transform;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final double DEFAULT_EPSILON = 1024transform;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final double DEFAULT_EPSILON = 10249;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final double DEFAULT_EPSILON = 10249;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final double DEFAULT_EPSILON = 1024 removing;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final double DEFAULT_EPSILON = 1024 removing;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final double DEFAULT_EPSILON = 1024file-9;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final double DEFAULT_EPSILON = 1024file-9;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final double DEFAULT_EPSILON = 1024ically;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final double DEFAULT_EPSILON = 1024ically;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final double DEFAULT_EPSILON = 1024Future;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final double DEFAULT_EPSILON = 1024Future;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final double DEFAULT_EPSILON = 10241010;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final double DEFAULT_EPSILON = 10241010;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final double DEFAULT_EPSILON = 10240;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final double DEFAULT_EPSILON = 10240;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final double DEFAULT_EPSILON = 60-9;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final double DEFAULT_EPSILON = 60-9;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final double DEFAULT_EPSILON = 1024$;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final double DEFAULT_EPSILON = 1024$;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final double DEFAULT_EPSILON = 1024Empty;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final double DEFAULT_EPSILON = 1024Empty;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final double DEFAULT_EPSILON = 9 9Parallel;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final double DEFAULT_EPSILON = 9 9Parallel;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final double DEFAULT_EPSILON = 1024HTML;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final double DEFAULT_EPSILON = 1024HTML;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final double DEFAULT_EPSILON = 10242;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final double DEFAULT_EPSILON = 10242;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final double DEFAULT_EPSILON = 1024];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final double DEFAULT_EPSILON = 1024];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final double DEFAULT_EPSILON = 10243;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final double DEFAULT_EPSILON = 10243;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final double DEFAULT_EPSILON = 102425;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final double DEFAULT_EPSILON = 102425;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final double DEFAULT_EPSILON = 10241190;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final double DEFAULT_EPSILON = 10241190;",
                "identical": false
            }
        ],
        "buggy_line": "private static final double DEFAULT_EPSILON = 10e-9;",
        "fixed_line": "private static final double DEFAULT_EPSILON = 10e-15;"
    },
    "Lang-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cal1.get(Calendar.HOUR && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cal1.get(Calendar.HOUR && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_YEAR) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && day1.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && day1.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cal1.get(Calendar.HOURHOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cal1.get(Calendar.HOURHOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cal1.get(Calendar.HOURHOUR && - cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cal1.get(Calendar.HOURHOUR && - cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && current2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && current2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_YEAR) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_YEAR) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && - 1);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && - 1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current1.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current1.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current current2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current current2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cal1.get(Calendar.HOUR && == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cal1.get(Calendar.HOUR && == cal2.get(Calendar.HOUR_OF_DAY) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) && object2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) && object2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY && cal2.get(Calendar.HOUR) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY && cal2.get(Calendar.HOUR) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && query2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && query2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && cal2.get(Calendar.HOUR_OF_YEAR) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && cal2.get(Calendar.HOUR_OF_YEAR) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && day;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && day;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && query2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && query2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current current2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current current2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) && object1.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) && object1.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_YEAR) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_YEAR) && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_YEAR && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_YEAR && cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current2.get(Calendar.HOUR_OF_YEAR) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current2.get(Calendar.HOUR_OF_YEAR) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cal1.get(Calendar.HOURHOUR && - cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cal1.get(Calendar.HOURHOUR && - cal2.get(Calendar.HOUR_OF_DAY) + 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR) + 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR) + 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY && == cal2.get(Calendar.HOUR) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY && == cal2.get(Calendar.HOUR) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) && 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cal1.get(Calendar.HOURHOUR && == cal2.get(Calendar.HOUR_OF_DAY) && 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && day1.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && day1.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && anCalendar.HOUR;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && anCalendar.HOUR;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && day2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && day2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current1.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && current1.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) && object2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) && object2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) == cal1.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cal1.get(Calendar.HOURHOUR && cal2.get(Calendar.HOUR_OF_DAY) == cal1.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && Column2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && Column2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cal1.get(Calendar.HOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR && && cal2.get(Calendar.HOUR);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cal1.get(Calendar.HOURHOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cal1.get(Calendar.HOURHOURHOUR_OF_DAY) == cal2.get(Calendar.HOUR;",
                "identical": false
            }
        ],
        "buggy_line": "cal1.get(Calendar.HOUR) == cal2.get(Calendar.HOUR) &&",
        "fixed_line": "cal1.get(Calendar.HOUR_OF_DAY) == cal2.get(Calendar.HOUR_OF_DAY) &&"
    },
    "Lang-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "Calendar c = new GregorianCalendar;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Calendar c = new GregorianCalendar;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Calendar c = new GregorianCalendar(date);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Calendar c = new GregorianCalendar(date);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Calendar c = new GregorianCalendar[0];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Calendar c = new GregorianCalendar[0];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Calendar c = new GregorianCalendar(date;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Calendar c = new GregorianCalendar(date;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Calendar c = new GregorianCalendar_COLUMN;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Calendar c = new GregorianCalendar_COLUMN;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Calendar c = new GregorianCalendarPattern;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Calendar c = new GregorianCalendarPattern;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Calendar c = new GregorianCalendarC_DATE_AND_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Calendar c = new GregorianCalendarC_DATE_AND_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Calendar c = new GregorianCalendar_PRECISE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Calendar c = new GregorianCalendar_PRECISE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Calendar c = new GregorianCalendar_DATE_AND_TIMEZONE;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Calendar c = new GregorianCalendar_DATE_AND_TIMEZONE;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Calendar c = new GregorianCalendar_DATE_AND_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Calendar c = new GregorianCalendar_DATE_AND_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Calendar c = new GregorianCalendar(0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Calendar c = new GregorianCalendar(0);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Calendar c = new GregorianCalendarContext;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Calendar c = new GregorianCalendarContext;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Calendar c = new GregorianCalendar_DATE_AND;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Calendar c = new GregorianCalendar_DATE_AND;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Calendar c = new GregorianCalendar_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Calendar c = new GregorianCalendar_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Calendar c = new GregorianCalendarC_DATE_AND_TIMEZONE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Calendar c = new GregorianCalendarC_DATE_AND_TIMEZONE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Calendar c = new GregorianCalendar.date;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Calendar c = new GregorianCalendar.date;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Calendar c = new GregorianCalendar_DATE_FORMAT;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Calendar c = new GregorianCalendar_DATE_FORMAT;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Calendar c = new GregorianCalendar_POSITION;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Calendar c = new GregorianCalendar_POSITION;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Calendar c = new GregorianCalendar_DATE_AND_PRECISE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Calendar c = new GregorianCalendar_DATE_AND_PRECISE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Calendar c = new GregorianCalendar_MUST_DATE_AND_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Calendar c = new GregorianCalendar_MUST_DATE_AND_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Calendar c = new GregorianCalendarDecoder(1024, DATE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Calendar c = new GregorianCalendarDecoder(1024, DATE_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Calendar c = new GregorianCalendarC_DATE_FORMAT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Calendar c = new GregorianCalendarC_DATE_FORMAT;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Calendar c = new GregorianCalendarS_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Calendar c = new GregorianCalendarS_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Calendar c = new GregorianCalendarResult;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Calendar c = new GregorianCalendarResult;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Calendar c = new GregorianCalendar_TIMEZONE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Calendar c = new GregorianCalendar_TIMEZONE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Calendar c = new GregorianCalendarC_DATE_AND;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Calendar c = new GregorianCalendarC_DATE_AND;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Calendar c = new GregorianCalendarType;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Calendar c = new GregorianCalendarType;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Calendar c = new GregorianCalendarC_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Calendar c = new GregorianCalendarC_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Calendar c = new GregorianCalendar_MIDDLE_DATE_AND_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Calendar c = new GregorianCalendar_MIDDLE_DATE_AND_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Calendar c = new GregorianCalendar_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Calendar c = new GregorianCalendar_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Calendar c = new GregorianCalendar << 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Calendar c = new GregorianCalendar << 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Calendar c = new GregorianCalendar << 8;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Calendar c = new GregorianCalendar << 8;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Calendar c = new GregorianCalendarVar(date);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Calendar c = new GregorianCalendarVar(date);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Calendar c = new GregorianCalendar<>(date;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Calendar c = new GregorianCalendar<>(date;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Calendar c = new GregorianCalendarS_TIMEZONE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Calendar c = new GregorianCalendarS_TIMEZONE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Calendar c = new GregorianCalendarS_FINISHED_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Calendar c = new GregorianCalendarS_FINISHED_TIME_FORMAT;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Calendar c = new GregorianCalendar[date;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Calendar c = new GregorianCalendar[date;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Calendar c = new GregorianCalendar_northEMBEDDED_DATE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Calendar c = new GregorianCalendar_northEMBEDDED_DATE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Calendar c = new GregorianCalendaredmeters;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Calendar c = new GregorianCalendaredmeters;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Calendar c = new GregorianCalendarS_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Calendar c = new GregorianCalendarS_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Calendar c = new GregorianCalendar(1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Calendar c = new GregorianCalendar(1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Calendar c = new GregorianCalendarDecoder(1024;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Calendar c = new GregorianCalendarDecoder(1024;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Calendar c = new GregorianCalendar_MUST_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Calendar c = new GregorianCalendar_MUST_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Calendar c = new GregorianCalendarDecoder(25;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Calendar c = new GregorianCalendarDecoder(25;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Calendar c = new GregorianCalendar_MIDDLE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Calendar c = new GregorianCalendar_MIDDLE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Calendar c = new GregorianCalendarFrommTimeZone;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Calendar c = new GregorianCalendarFrommTimeZone;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Calendar c = new GregorianCalendar_PREFERENCE;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Calendar c = new GregorianCalendar_PREFERENCE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Calendar c = new GregorianCalendar.degree;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Calendar c = new GregorianCalendar.degree;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Calendar c = new GregorianCalendar_PREVIOUS;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Calendar c = new GregorianCalendar_PREVIOUS;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Calendar c = new GregorianCalendar_northEMBEDDED_DATE_FORMAT;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Calendar c = new GregorianCalendar_northEMBEDDED_DATE_FORMAT;",
                "identical": false
            }
        ],
        "buggy_line": "Calendar c = new GregorianCalendar(mTimeZone);",
        "fixed_line": "Calendar c = new GregorianCalendar(mTimeZone, mLocale);"
    },
    "Closure-92": {
        "fixes": [
            {
                "k": 1,
                "patch": "int indexOfDot = code.indexOf('.');",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int indexOfDot = code.indexOf('.');",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int indexOfDot = code.indexOf('.') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int indexOfDot = code.indexOf('.') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int indexOfDot = code.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int indexOfDot = code.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int indexOfDot = code.indexOf('.') < 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int indexOfDot = code.indexOf('.') < 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int indexOfDot = codeNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int indexOfDot = codeNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int indexOfDot = codeNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int indexOfDot = codeNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int indexOfDot = value.indexOf('.');",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int indexOfDot = value.indexOf('.');",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int indexOfDot = name.indexOf('.');",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int indexOfDot = name.indexOf('.');",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int indexOfDot = codeNode.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int indexOfDot = codeNode.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int indexOfDot = code.indexOf('.') < 0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int indexOfDot = code.indexOf('.') < 0;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int indexOfDot = code.indexOf('.') >= 0;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int indexOfDot = code.indexOf('.') >= 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int indexOfDot = sqlForm.indexOf('.') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int indexOfDot = sqlForm.indexOf('.') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int indexOfDot = codePath.indexOf('.');",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int indexOfDot = codePath.indexOf('.');",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int indexOfDot = codeNode.indexOf('.') < 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int indexOfDot = codeNode.indexOf('.') < 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int indexOfDot = sb.indexOf('.');",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int indexOfDot = sb.indexOf('.');",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int indexOfDot = sqlS.indexOf('.') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int indexOfDot = sqlS.indexOf('.') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int indexOfDot = filename.indexOf('.') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int indexOfDot = filename.indexOf('.') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int indexOfDot = name.indexOf('.') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int indexOfDot = name.indexOf('.') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int indexOfDot = code.indexOf('.') > 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int indexOfDot = code.indexOf('.') > 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int indexOfDot = r.indexOf('.');",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int indexOfDot = r.indexOf('.');",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int indexOfDot = value.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int indexOfDot = value.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int indexOfDot = value.indexOf('.') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int indexOfDot = value.indexOf('.') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int indexOfDot = codePath.indexOf('.') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int indexOfDot = codePath.indexOf('.') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int indexOfDot = filename.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int indexOfDot = filename.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int indexOfDot = code.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int indexOfDot = code.indexOf('.') - 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int indexOfDot = resourcePath.indexOf('.');",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int indexOfDot = resourcePath.indexOf('.');",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int indexOfDot =Right.indexOf('.') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int indexOfDot =Right.indexOf('.') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int indexOfDot = code.indexOf('.') < 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int indexOfDot = code.indexOf('.') < 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int indexOfDot = filename.indexOf('.');",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int indexOfDot = filename.indexOf('.');",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int indexOfDot =Right.indexOf('.');",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int indexOfDot =Right.indexOf('.');",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int indexOfDot = sqlS.indexOf('.');",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int indexOfDot = sqlS.indexOf('.');",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int indexOfDot = realModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int indexOfDot = realModule.indexOf('.');",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int indexOfDot =Chars.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int indexOfDot =Chars.indexOf('.') + 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int indexOfDot = firstNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int indexOfDot = firstNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int indexOfDot = resourcePath.indexOf('.') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int indexOfDot = resourcePath.indexOf('.') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int indexOfDot = sb.indexOf('.') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int indexOfDot = sb.indexOf('.') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int indexOfDot =Chars.indexOf('.');",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int indexOfDot =Chars.indexOf('.');",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int indexOfDot = firstNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int indexOfDot = firstNode.indexOf('.');",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int indexOfDot = messageNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int indexOfDot = messageNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int indexOfDot = realModule.indexOf('.') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int indexOfDot = realModule.indexOf('.') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int indexOfDot =Chars.indexOf('.') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int indexOfDot =Chars.indexOf('.') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int indexOfDot = newNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int indexOfDot = newNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int indexOfDot =firstNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int indexOfDot =firstNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int indexOfDot = sqlNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int indexOfDot = sqlNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int indexOfDot = codeEdge.indexOf('.') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int indexOfDot = codeEdge.indexOf('.') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int indexOfDot = r.indexOf('.') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int indexOfDot = r.indexOf('.') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int indexOfDot =**.indexOf('.') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int indexOfDot =**.indexOf('.') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int indexOfDot = defaultNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int indexOfDot = defaultNode.indexOf('.') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int indexOfDot = s.indexOf('.');",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int indexOfDot = s.indexOf('.');",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int indexOfDot = channel.indexOf('.') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int indexOfDot = channel.indexOf('.') {",
                "identical": false
            }
        ],
        "buggy_line": "int indexOfDot = namespace.indexOf('.');",
        "fixed_line": "int indexOfDot = namespace.lastIndexOf('.');"
    },
    "Codec-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "long len = getEncodeLength(url, len, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "long len = getEncodeLength(url, len, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "long len = getEncodeLength(url,LEMENT_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "long len = getEncodeLength(url,LEMENT_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxIdentifier);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxIdentifier);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "long len = getEncodeLength(url, setUse_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "long len = getEncodeLength(url, setUse_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "long len = getEncodeLength(url, OF_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "long len = getEncodeLength(url, OF_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "long len = getEncodeLength(url,ATCH_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "long len = getEncodeLength(url,ATCH_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "long len = getEncodeLength(url,gre, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "long len = getEncodeLength(url,gre, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "long len = getEncodeLength(url,users_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "long len = getEncodeLength(url,users_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "long len = getEncodeLength(url,EL_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "long len = getEncodeLength(url,EL_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "long len = getEncodeLength(url, req_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "long len = getEncodeLength(url, req_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "long len = getEncodeLength(url, floating_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "long len = getEncodeLength(url, floating_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "long len = getEncodeLength(url, 0, len);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "long len = getEncodeLength(url, 0, len);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxUtil.length);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxUtil.length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "long len = getEncodeLength(url, inet, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "long len = getEncodeLength(url, inet, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxium_SEPARATOR;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxium_SEPARATOR;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "long len = getEncodeLength(url, '-'_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "long len = getEncodeLength(url, '-'_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "long len = getEncodeLength(url, len, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "long len = getEncodeLength(url, len, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "long len = getEncodeLength(url, JMenu_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "long len = getEncodeLength(url, JMenu_CHUNK_SIZE, maxAvailableWidth, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, len);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, len);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "long len = getEncodeLength(url, in, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "long len = getEncodeLength(url, in, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "long len = getEncodeLength(url, inSize, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "long len = getEncodeLength(url, inSize, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "long len = getEncodeLength(url, setUse_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "long len = getEncodeLength(url, setUse_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxIdentifier);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxIdentifier);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth, TOLERANCE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxResult, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxResult, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, DEFAULT_OF_STRING_SIZE);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, DEFAULT_OF_STRING_SIZE);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, DEFAULT_SIZE);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, DEFAULT_SIZE);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "long len = getEncodeLength(url, maxResult, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "long len = getEncodeLength(url, maxResult, MIME_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, DEFAULT_MESSAGE_SIZE);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, DEFAULT_MESSAGE_SIZE);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "long len = getEncodeLength(url,ATCH_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "long len = getEncodeLength(url,ATCH_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, DEFAULT_SIZE);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxAvailableWidth, DEFAULT_SIZE);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxiumLength);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "long len = getEncodeLength(url, MIME_CHUNK_SIZE, maxiumLength);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "long len = getEncodeLength(url, floating_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "long len = getEncodeLength(url, floating_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "long len = getEncodeLength(url,LEMENT_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "long len = getEncodeLength(url,LEMENT_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, max SECONDS_SIZE);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, max SECONDS_SIZE);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, 8);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, 8);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "long len = getEncodeLength(url, in, MIME_CHUNK_SIZE, maxAvailableWidth);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "long len = getEncodeLength(url, in, MIME_CHUNK_SIZE, maxAvailableWidth);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxiumLength);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxiumLength);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "long len = getEncodeLength(url, req_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "long len = getEncodeLength(url, req_CHUNK_SIZE, maxResultSize);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, T0, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "long len = getEncodeLength(url, DEFAULT_CHUNK_SIZE, maxAvailableWidth, T0, DEFAULT_CHUNK_SIZE);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth, DEFAULT_SIZE);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "long len = getEncodeLength(url,FormatException_CHUNK_SIZE, maxAvailableWidth, DEFAULT_SIZE);",
                "identical": false
            }
        ],
        "buggy_line": "long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);",
        "fixed_line": "long len = getEncodeLength(binaryData, isChunked ? MIME_CHUNK_SIZE : 0, CHUNK_SEPARATOR);"
    },
    "Math-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "return (double) * methodName / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (double) * methodName / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (double) * getNumberOfSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (double) * getNumberOfSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (double) * spaceSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (double) * spaceSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (double) * spanCount / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (double) * spanCount / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (double) * index / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (double) * index / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (double)getSampleSize / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (double)getSampleSize / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (double) * spanSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (double) * spanSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (double) * abortSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (double) * abortSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (double) * getNumberOfSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (double) * getNumberOfSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (double) * 2 / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (double) * 2 / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (double) (getSampleSize / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (double) (getSampleSize / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (double) * programmSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (double) * programmSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (double) * SASuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (double) * SASuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (double) *(3 / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (double) *(3 / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (double) / getNumberOfSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (double) / getNumberOfSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (double) * gotSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (double) * gotSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (double) * getNumberOfSuccesses;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (double) * getNumberOfSuccesses;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (double) * programmSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (double) * programmSuccesses()) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (double) *ProgramSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (double) *ProgramSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (double) * getSSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (double) * getSSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (double) / getNumberOfSuccesses()) + (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (double) / getNumberOfSuccesses()) + (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (double) / getNumberOfSuccesses()) - (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (double) / getNumberOfSuccesses()) - (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (double) * ERROR_MESSAGE / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (double) * ERROR_MESSAGE / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (double) *CHARSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (double) *CHARSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (double) * marginSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (double) * marginSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (double) * localSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (double) * localSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (double) * @Successes / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (double) * @Successes / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (double) / getNumberOfSuccesses()) % (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (double) / getNumberOfSuccesses()) % (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (double) / getNumberOfSuccesses()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (double) / getNumberOfSuccesses()) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (double) *Instantiator / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (double) *Instantiator / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (double) *computeSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (double) *computeSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (double) * totalSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (double) * totalSuccesses / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (double) *2) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (double) *2) / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (double) / getNumberOfSuccesses()) * (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (double) / getNumberOfSuccesses()) * (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (double) * name / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (double) * name / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (double) *ALL / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (double) *ALL / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (double) * span / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (double) * span / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (double) * shift / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (double) * shift / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (double) * methodName / (double) - getPopulationSize;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (double) * methodName / (double) - getPopulationSize;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (double) *().double / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (double) *().double / (double) getPopulationSize;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (double) *2) / (double.class;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (double) *2) / (double.class;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (double) / getNumberOfSuccesses()) + (double.class;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (double) / getNumberOfSuccesses()) + (double.class;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (double) / getNumberOfSuccesses;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (double) / getNumberOfSuccesses;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (double) (getSampleSize / getNumberOfSuccesses()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (double) (getSampleSize / getNumberOfSuccesses()) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (double) * getPopulationSize;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (double) * getPopulationSize;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (double) / getNumberOfSuccesses()) - (double.class;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (double) / getNumberOfSuccesses()) - (double.class;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (double) * programmSuccesses()) / (double.class;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (double) * programmSuccesses()) / (double.class;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (double) * abortSuccesses;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (double) * abortSuccesses;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (double) * spanSuccesses;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (double) * spanSuccesses;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (double) * spanCount / (double.class;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (double) * spanCount / (double.class;",
                "identical": false
            }
        ],
        "buggy_line": "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
        "fixed_line": "return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());"
    },
    "Math-32": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (tree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (tree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (tree.getAttribute) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (tree.getAttribute) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (tree.getAttributeChITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (tree.getAttributeChITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (tree.getAttributeMIDDLE) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (tree.getAttributeMIDDLE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (tree.getAttributeBefore) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (tree.getAttributeBefore) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (tree.getAttributeCONTITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (tree.getAttributeCONTITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (tree.getAttribute drawITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (tree.getAttribute drawITIVE_INFINITY) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (tree.getAttribute committed) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (tree.getAttribute committed) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (tree.getAttribute > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (tree.getAttribute > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if ( tree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if ( tree.getAttribute()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (tree.getAttributeThreadPool) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (tree.getAttributeThreadPool) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (tree.getAttribute StringBuilder) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (tree.getAttribute StringBuilder) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (tree.getAttribute(1, v) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (tree.getAttribute(1, v) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (tree.getAttribute;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (tree.getAttribute;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (tree.getAttributeOTED_INFINITY) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (tree.getAttributeOTED_INFINITY) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (tree.getAttribute obj) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (tree.getAttribute obj) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (tree.getAttribute sized) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (tree.getAttribute sized) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (tree.getAttributeating_INFINITY) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (tree.getAttributeating_INFINITY) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (tree.getAttribute != currentBoolean) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (tree.getAttribute != currentBoolean) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (tree.getAttribute instanceof whole) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (tree.getAttribute instanceof whole) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (tree.getAttributeMultipleEdges) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (tree.getAttributeMultipleEdges) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (tree.getAttribute href) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (tree.getAttribute href) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (tree.getAttributeDeserSize) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (tree.getAttributeDeserSize) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (tree.getAttribute append) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (tree.getAttribute append) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (tree.getAttributePADDING) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (tree.getAttributePADDING) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (tree.getAttribute){",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (tree.getAttribute){",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (tree.getAttribute fileSize) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (tree.getAttribute fileSize) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (tree.getAttributePONE_INFINITY) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (tree.getAttributePONE_INFINITY) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (tree.getAttribute != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (tree.getAttribute != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (tree.getAttributeVisible) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (tree.getAttributeVisible) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (tree.getAttributeked) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (tree.getAttributeked) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (tree.getAttributeIMAGE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (tree.getAttributeIMAGE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (tree.getAttributeDisplay) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (tree.getAttributeDisplay) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (tree.getAttribute != current) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (tree.getAttribute != current) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (tree.getAttributeAt(0 == null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (tree.getAttributeAt(0 == null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (dissolve) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (dissolve) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (tree.getAttributegetAttribute) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (tree.getAttributegetAttribute) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (tree.getAttribute(6) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (tree.getAttribute(6) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (tree.getAttributegetAttribute()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (tree.getAttributegetAttribute()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (tree.getAttributeAt(0LTA) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (tree.getAttributeAt(0LTA) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (tree.getAttributePatient) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (tree.getAttributePatient) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (tree.getAttributeAt(0L) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (tree.getAttributeAt(0L) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (tree.getAttributeer) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (tree.getAttributeer) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( tree.getAttribute) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( tree.getAttribute) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (tree.getAttribute(1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (tree.getAttribute(1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (tree.getAttributeThreadPoolThreadPool) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (tree.getAttributeThreadPoolThreadPool) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (tree.getAttributecx) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (tree.getAttributecx) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (content.getAttribute()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (content.getAttribute()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (tree.getAttributeDeserSize2D) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (tree.getAttributeDeserSize2D) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (tree.getAttributeAtStart) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (tree.getAttributeAtStart) {",
                "identical": false
            }
        ],
        "buggy_line": "if ((Boolean) tree.getAttribute()) {",
        "fixed_line": "if (tree.getCut() == null && (Boolean) tree.getAttribute()) {"
    },
    "Closure-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "jsDocParameter.getJSType(), false);",
                "identical": true
            },
            {
                "k": 2,
                "patch": "jsDocParameter.getJSType(), false);",
                "identical": true
            },
            {
                "k": 3,
                "patch": "jsDocParameter.getJSType(), false;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "jsDocParameter.getJSType(), false;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "jsDocParameter.getJSType(), false) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "jsDocParameter.getJSType(), false) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "jsDocParameter.getJSType(), falseUserType;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "jsDocParameter.getJSType(), falseUserType;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "jsDocParameter.getJSType(), false - jsDocParameter) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "jsDocParameter.getJSType(), false - jsDocParameter) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "jsDocParameter.getJSType(), false){",
                "identical": false
            },
            {
                "k": 12,
                "patch": "jsDocParameter.getJSType(), false){",
                "identical": false
            },
            {
                "k": 13,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "jsDocParameter.getJSType(), falseUserType == false;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "jsDocParameter.getJSType(), falseUserType == false;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "jsDocParameter.getJSType(), true;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "jsDocParameter.getJSType(), true;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, jsDocParameter);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, jsDocParameter);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "jsDocParameter.getJSType(), false false);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "jsDocParameter.getJSType(), false false);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "jsDocParameter.getJSType(), false for {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "jsDocParameter.getJSType(), false for {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "jsDocParameter.getJSType(), falseUserType, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "jsDocParameter.getJSType(), falseUserType, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "jsDocParameter.getJSType(), false false;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "jsDocParameter.getJSType(), false false;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "jsDocParameter.getJSType(), false - astParameter) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "jsDocParameter.getJSType(), false - astParameter) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "jsDocParameter.getJSType(), false % jsDocParameter) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "jsDocParameter.getJSType(), false % jsDocParameter) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "jsDocParameter.getJSType(), false % jsDocParameter;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "jsDocParameter.getJSType(), false % jsDocParameter;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "jsDocParameter.getJSType(), falseUserType == true;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "jsDocParameter.getJSType(), falseUserType == true;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "jsDocParameter.getJSType(), false while while (jsDocParameter) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "jsDocParameter.getJSType(), false while while (jsDocParameter) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter : false;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter : false;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "jsDocParameter.getJSType(), false - jsDocParameter;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "jsDocParameter.getJSType(), false - jsDocParameter;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "jsDocParameter.getJSType(), falseUserType, jsDocParameter);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "jsDocParameter.getJSType(), falseUserType, jsDocParameter);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "jsDocParameter.getJSType(), false != false;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "jsDocParameter.getJSType(), false != false;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "jsDocParameter.getJSType(), false for listDocType;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "jsDocParameter.getJSType(), false for listDocType;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "jsDocParameter.getJSType(), false != jsDocType) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "jsDocParameter.getJSType(), false != jsDocType) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "jsDocParameter.getJSType(), falseUserType + jsDocParameter) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "jsDocParameter.getJSType(), falseUserType + jsDocParameter) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "jsDocParameter.getJSType(), falsecommaParameter.getNext;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "jsDocParameter.getJSType(), falsecommaParameter.getNext;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "jsDocParameter.getJSType(), falseBAR_XMLXML_PREFERENCE, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "jsDocParameter.getJSType(), falseBAR_XMLXML_PREFERENCE, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "jsDocParameter.getJSType(), false});",
                "identical": false
            },
            {
                "k": 62,
                "patch": "jsDocParameter.getJSType(), false});",
                "identical": false
            },
            {
                "k": 63,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, astParameter) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, astParameter) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "jsDocParameter.getJSType(), falseUserTypenon jsDocParameter;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "jsDocParameter.getJSType(), falseUserTypenon jsDocParameter;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "jsDocParameter.getJSType(), false + jsDocParameter) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "jsDocParameter.getJSType(), false + jsDocParameter) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "jsDocParameter.getJSType(), falseUserTypeArgumentsMBEDDED {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "jsDocParameter.getJSType(), falseUserTypeArgumentsMBEDDED {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "jsDocParameter.getJSType(), falseBAR_XMLXML_PREFERENCE, jsDocParameter);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "jsDocParameter.getJSType(), falseBAR_XMLXML_PREFERENCE, jsDocParameter);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "jsDocParameter.getJSType(), false query queryParameter == false;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "jsDocParameter.getJSType(), false query queryParameter == false;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "jsDocParameter.getJSType(), falseRe jsDocParameter == false;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "jsDocParameter.getJSType(), falseRe jsDocParameter == false;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter) : false;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter) : false;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "jsDocParameter.getJSType(), falseRe jsDocParameter) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "jsDocParameter.getJSType(), falseRe jsDocParameter) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML_PREFERENCE, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML_PREFERENCE, jsDocParameter) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter.getJSType(), false);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter.getJSType(), false);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "jsDocParameter.getJSType(), falsecommaParameter.getJSType(), false) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "jsDocParameter.getJSType(), falsecommaParameter.getJSType(), false) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "jsDocParameter.getJSType(), falseCode;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "jsDocParameter.getJSType(), falseCode;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "jsDocParameter.getJSType(), false != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "jsDocParameter.getJSType(), false != jsDocParameter) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter.getJSType;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter.getJSType;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter.class : false;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "jsDocParameter.getJSType(), false ? jsDocParameter.class : false;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, astParameter);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML, astParameter);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML_PREFERENCE, jsDocParameter);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML_PREFERENCE, jsDocParameter);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML_PREFERENCE, true;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "jsDocParameter.getJSType(), falseBAR_XML_PREFERENCE, true;",
                "identical": false
            }
        ],
        "buggy_line": "jsDocParameter.getJSType(), true);",
        "fixed_line": "jsDocParameter.getJSType(), false);"
    },
    "JacksonDatabind-96": {
        "fixes": [
            {
                "k": 1,
                "patch": "paramName = _annotationIntrospector.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paramName = _annotationIntrospector.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paramName = _accessor.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paramName = _accessor.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paramName = _candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paramName = _candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paramName = _secondary.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paramName = _secondary.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paramName = properties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paramName = properties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paramName = _pos.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paramName = _pos.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paramName = candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paramName = candidate.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paramName = _beanDesc.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paramName = _beanDesc.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paramName = _paramName.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paramName = _paramName.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paramName = paramDef.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paramName = paramDef.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paramName = _beanType.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paramName = _beanType.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paramName = _findCreatorPropertyHandler.class;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paramName = _findCreatorPropertyHandler.class;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paramName = _findCreatorPropertyHandler.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paramName = _findCreatorPropertyHandler.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paramName = _name.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paramName = _name.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paramName = _factory.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paramName = _factory.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paramName = _sql.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paramName = _sql.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paramName = _annotationIntrospector.findImplicitParamName;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paramName = _annotationIntrospector.findImplicitParamName;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paramName = _managedPropertyHandler.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paramName = _managedPropertyHandler.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paramName = _beanProperties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paramName = _beanProperties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paramName = _collectionFormat.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paramName = _collectionFormat.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paramName = _buildCreator.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paramName = _buildCreator.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paramName = beanDesc.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paramName = beanDesc.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paramName = param.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paramName = param.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paramName = _orderedProperties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paramName = _orderedProperties.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paramName = _annotationIntrospector.findImplicitParamNameSuffix;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paramName = _annotationIntrospector.findImplicitParamNameSuffix;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paramName = _bindings.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paramName = _bindings.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paramName = _accessorPropertyHandler.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paramName = _accessorPropertyHandler.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paramName = _c.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paramName = _c.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paramName = ctor.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paramName = ctor.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paramName = NO_TYPES_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paramName = NO_TYPES_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paramName = _ioContext.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paramName = _ioContext.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paramName = _forSerialization.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paramName = _forSerialization.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paramName = _collectionType.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paramName = _collectionType.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paramName = _factoryConfig.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paramName = _factoryConfig.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paramName = _findCreatorParamName(0);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paramName = _findCreatorParamName(0);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paramName = viewId.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paramName = viewId.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paramName = _findCreatorPropertyHandler.findImplicitParamName;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paramName = _findCreatorPropertyHandler.findImplicitParamName;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paramName = _annotationIntrospector.findImplicitParamName(1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paramName = _annotationIntrospector.findImplicitParamName(1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paramName = _deser.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paramName = _deser.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paramName = _serialization.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paramName = _serialization.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paramName = removed.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paramName = removed.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paramName = filename.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paramName = filename.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paramName = _concat.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paramName = _concat.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paramName = _abstract.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paramName = _abstract.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paramName = setter.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paramName = setter.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paramName = clazz.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paramName = clazz.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paramName = _ret.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paramName = _ret.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paramName = LOGGER.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paramName = LOGGER.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paramName = sep.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paramName = sep.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paramName = layers.findImplicitParamName(0);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paramName = layers.findImplicitParamName(0);",
                "identical": false
            }
        ],
        "buggy_line": "paramName = candidate.findImplicitParamName(0);",
        "fixed_line": "paramName = candidate.paramName(0);"
    },
    "JacksonDatabind-37": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new SimpleType(type, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new SimpleType(type, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, contentType);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, contentType);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, t);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, t);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new SimpleType(type,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new SimpleType(type,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new SimpleType(type, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new SimpleType(type, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, contentType, _asStatic);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, contentType, _asStatic);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, context);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, context);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new SimpleType( contentType, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new SimpleType( contentType, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, builder, _asStatic);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, builder, _asStatic);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new SimpleType(class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new SimpleType(class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new SimpleType(class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new SimpleType(class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, options);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, options);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new SimpleType(s, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new SimpleType(s, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, ctxt);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, ctxt);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new SimpleType(subclass, typeHandler, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new SimpleType(subclass, typeHandler, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, contentType);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, contentType);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new SimpleType(_class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new SimpleType(_class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, tPerPoint);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, tPerPoint);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, ser);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, ser);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new SimpleType(_class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new SimpleType(_class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new SimpleType(raw, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, ctxt, _asStatic);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, ctxt, _asStatic);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new SimpleType(parent, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new SimpleType(parent, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new SimpleType(ctxt,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new SimpleType(ctxt,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new SimpleType(class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new SimpleType(class,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new SimpleType(type, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new SimpleType(type, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new SimpleType(componentType, _bindings, _superClass, _superInterfaces, _typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new SimpleType(type,subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new SimpleType(type,subclass, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new SimpleType(subclass, _class, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new SimpleType(subclass, _class, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new SimpleType(parent, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new SimpleType(parent, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new SimpleType(subclass, _class, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new SimpleType(subclass, _class, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new SimpleType(subclass, _class, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new SimpleType(subclass, _class, _bindings, _superClass, _superInterfaces, _valueHandler, _asStatic);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, variableType, _asStatic);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, variableType, _asStatic);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new SimpleType(config,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new SimpleType(config,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new SimpleType(N,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new SimpleType(N,subclass, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, t);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces, _valueHandler, typeHandler, t);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new SimpleType(s, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new SimpleType(s, _bindings, _superClass, _superInterfaces, _valueHandler);",
                "identical": false
            }
        ],
        "buggy_line": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,",
        "fixed_line": "return new SimpleType(subclass, _bindings, this, _superInterfaces,"
    },
    "Chart-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (dataset == null) {",
                "identical": true
            },
            {
                "k": 2,
                "patch": "if (dataset == null) {",
                "identical": true
            },
            {
                "k": 3,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (result != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (this.dataset == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (this.dataset == null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (dataset != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (dataset != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (forSerialization == null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (forSerialization == null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (switch == null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (switch == null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (rs == null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (rs == null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (pm == null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (pm == null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (We == null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (We == null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (forSerialization != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (forSerialization != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (row != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (row != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if ( ending == null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if ( ending == null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (image != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (image != null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (groupCount == null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (groupCount == null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (url != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (url != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (oct == null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (oct == null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (ize == null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (ize == null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (forAttributes == null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (forAttributes == null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (As == null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (As == null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (ay == null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (ay == null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (valid != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (valid != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (State != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (State != null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (os != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (os != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (cs == null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (cs == null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if ( setProperty == null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if ( setProperty == null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (op != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (op != null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (existing != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (existing != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (data != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (data != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (Re == null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (Re == null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (for != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (for != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (cs != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (cs != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (variables == null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (variables == null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (Csv == null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (Csv == null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (Mon != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (Mon != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (property != null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (property != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (ize != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (ize != null) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (driver == null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (driver == null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (len == null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (len == null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (position != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (position != null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (groupId != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (groupId != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (ART == null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (ART == null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (selection != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (selection != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (commands == null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (commands == null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if ( setSelected == null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if ( setSelected == null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (sig == null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (sig == null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (count != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (count != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (download != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (download != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (children == null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (children == null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (copy == null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (copy == null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (dataset == null){",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (dataset == null){",
                "identical": false
            }
        ],
        "buggy_line": "if (dataset != null) {",
        "fixed_line": "if (dataset == null) {"
    },
    "Math-30": {
        "fixes": [
            {
                "k": 1,
                "patch": "final int n1n2prod = n2 * n2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final int n1n2prod = n2 * n2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final int n1n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final int n1n2prod = n1 * n2;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final int n1n2prod = n2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final int n1n2prod = n2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final int n1 = n2 * n2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final int n1 = n2 * n2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final int n1n2prod = n2 * n2; // NOSONAR",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final int n1n2prod = n2 * n2; // NOSONAR",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final int n1n2prod = n1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final int n1n2prod = n1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final int n1n2prod = n2 * n2; // m/n2",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final int n1n2prod = n2 * n2; // m/n2",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final int n1n2 = n1 * n2;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final int n1n2 = n1 * n2;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final int n1n2prod = n2 * n2; // m copies of the n1n2",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final int n1n2prod = n2 * n2; // m copies of the n1n2",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final int n1n2prod = n2 * n2; // 1M is NOSONAR",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final int n1n2prod = n2 * n2; // 1M is NOSONAR",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final int n1n2prod = n2 * n2; // m/nn2",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final int n1n2prod = n2 * n2; // m/nn2",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final int n1n2prod = n2 * n2; // m copies of message1n2",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final int n1n2prod = n2 * n2; // m copies of message1n2",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final int n1n2prod = n2 * n2; // 1-based n1n2",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final int n1n2prod = n2 * n2; // 1-based n1n2",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final int n1n2 = n2 * n2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final int n1n2 = n2 * n2;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final int n1n2prod = n2 * n2; // Fa the n1nn2",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final int n1n2prod = n2 * n2; // Fa the n1nn2",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final int n1n2prod = n2 * n2; // Fa the n1n2",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final int n1n2prod = n2 * n2; // Fa the n1n2",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final int n1n2prod = n2 * n2; // null in the n1nn2",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final int n1n2prod = n2 * n2; // null in the n1nn2",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final int n1n2prod = n2 * n2; // 2;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final int n1n2prod = n2 * n2; // 2;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final int n1n2prod = n2 * n2; // 1M is short n1nn2",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final int n1n2prod = n2 * n2; // 1M is short n1nn2",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final int n1n2prod = n2 * n2; // addressesnnnn2",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final int n1n2prod = n2 * n2; // addressesnnnn2",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final int n1n2 = n2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final int n1n2 = n2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final int n1n2prod = n2 * n2; //Schedulenn1 as in the n2",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final int n1n2prod = n2 * n2; //Schedulenn1 as in the n2",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final int n1n2prod = n2 * n2; // insertion offset, n1nn2",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final int n1n2prod = n2 * n2; // insertion offset, n1nn2",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final int n1n2prod = n2 * n2; // insertion offset, n1n2",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final int n1n2prod = n2 * n2; // insertion offset, n1n2",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final int n1n2prod = n2 * n2; //Schedulenn2",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final int n1n2prod = n2 * n2; //Schedulenn2",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final int n1n2prod = n2 * n2; // max length of n1nn2",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final int n1n2prod = n2 * n2; // max length of n1nn2",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final int n1n2prod = n2 * n1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final int n1n2prod = n2 * n1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final int n1n2prod = n2 * n2; //Schedulennn2",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final int n1n2prod = n2 * n2; //Schedulennn2",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final int n1n2prod = n2 * n2; // max length of n1nnn2",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final int n1n2prod = n2 * n2; // max length of n1nnn2",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final int n1n2prod = n2 * n2; // 1-based n1nn2",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final int n1n2prod = n2 * n2; // 1-based n1nn2",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final int n1n2prod = n2 * n2; // max length of n1n2",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final int n1n2prod = n2 * n2; // max length of n1n2",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final int n1n2prod = n2 * n2; //-16,n2",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final int n1n2prod = n2 * n2; //-16,n2",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final int n1n2prod = n2 * n2; // addressesnnnnn2",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final int n1n2prod = n2 * n2; // addressesnnnnn2",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final int n1n2prod = n2 * n2; // | short n1n2",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final int n1n2prod = n2 * n2; // | short n1n2",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final int n1n2prod = n2 * n2; // We double n1nn2",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final int n1n2prod = n2 * n2; // We double n1nn2",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final int n1n2prod = n2 * n2; // m/s data.",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final int n1n2prod = n2 * n2; // m/s data.",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final int n1n2prod = n2 * n2; // We double n1nnn2",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final int n1n2prod = n2 * n2; // We double n1nnn2",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final int n1n2prod = n2 * n2; // operator",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final int n1n2prod = n2 * n2; // operator",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final int n1n2prod = n2 * n2; // Fa the n1nnn2",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final int n1n2prod = n2 * n2; // Fa the n1nnn2",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final int n1n2prod = n2 * n2; // addressesnnn2",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final int n1n2prod = n2 * n2; // addressesnnn2",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final int n1n2prod = n2 * n2; // NIL in the n1nn2",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final int n1n2prod = n2 * n2; // NIL in the n1nn2",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final int n1n2prod = n2 * n2; // m copies of n1n2",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final int n1n2prod = n2 * n2; // m copies of n1n2",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final int n1n2prod = n2 * n2; // bottomnn1 as in the n2",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final int n1n2prod = n2 * n2; // bottomnn1 as in the n2",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final int n1n2prod = n2 * n2; // m/s",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final int n1n2prod = n2 * n2; // m/s",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final int n1n2prod = n2 * n2; // Wennn2",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final int n1n2prod = n2 * n2; // Wennn2",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final int n1n2prod = n2 * n2; // Wenn2",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final int n1n2prod = n2 * n2; // Wenn2",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final int n1n2prod = n2 * n2; // addressesnnn1 as in the n2",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final int n1n2prod = n2 * n2; // addressesnnn1 as in the n2",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final int n1n2prod = n2 * n2; // m/nn1 as in the n2",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final int n1n2prod = n2 * n2; // m/nn1 as in the n2",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final int n1n2prod = n2 * n2; // | short n1nn2",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final int n1n2prod = n2 * n2; // | short n1nn2",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final int n1n2prod = n2 * n2; // m copies of message1nn2",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final int n1n2prod = n2 * n2; // m copies of message1nn2",
                "identical": false
            }
        ],
        "buggy_line": "final int n1n2prod = n1 * n2;",
        "fixed_line": "final double n1n2prod = n1 * n2;"
    },
    "Chart-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "int g = (int) this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int g = (int) this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int g = (int) this.lowerBound / (this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int g = (int) this.lowerBound / (this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int g = (int) this.lowerBound / (v.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int g = (int) this.lowerBound / (v.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int g = (1 << this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int g = (1 << this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int g = (int) ((this.upperBound - this.upperBound) / 255.0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int g = (int) ((this.upperBound - this.upperBound) / 255.0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int g = (int) this.lowerBound - v.upperBound;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int g = (int) this.lowerBound - v.upperBound;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int g = (int) this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int g = (int) this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int g = (int) ((v / this.lowerBound) * 255.0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int g = (int) ((v / this.lowerBound) * 255.0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int g = (int) this.lowerBound / (v.upperBound % 255;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int g = (int) this.lowerBound / (v.upperBound % 255;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int g = (int) ((v / this.lowerBound;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int g = (int) ((v / this.lowerBound;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int g = (int) this.lowerBound / (this.upperBound) * 255.0 / 255;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int g = (int) this.lowerBound / (this.upperBound) * 255.0 / 255;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int g = (int) this.lowerBound / (v.upperBound;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int g = (int) this.lowerBound / (v.upperBound;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int g = (int) this.lowerBound - this.upperBound) / (v.upperBound;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int g = (int) this.lowerBound - this.upperBound) / (v.upperBound;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int g = (int) this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int g = (int) this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int g = (int) this.lowerBound / (this.upperBound % 255;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int g = (int) this.lowerBound / (this.upperBound % 255;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / 255.0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / 255.0;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int g = (int) this.lowerBound / (this.upperBound;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int g = (int) this.lowerBound / (this.upperBound;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int g = (int) this.lowerBound % this.upperBound;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int g = (int) this.lowerBound % this.upperBound;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int g = (int) this.lowerBound / (this.upperBound - this.upperBound) / 255;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int g = (int) this.lowerBound / (this.upperBound - this.upperBound) / 255;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / 255;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int g = (int) ((this.upperBound - this.lowerBound) / 255;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int g = (int) this.lowerBound / (this.upperBound - this.upperBound) / 255.0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int g = (int) this.lowerBound / (this.upperBound - this.upperBound) / 255.0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int g = (int) ((this.upperBound - this.upperBound) / (v.upperBound;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int g = (int) ((this.upperBound - this.upperBound) / (v.upperBound;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int g = (int) this.lowerBound / ((v.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int g = (int) this.lowerBound / ((v.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int g = (int) this.lowerBound / (this.upperBound) * 255;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int g = (int) this.lowerBound / (this.upperBound) * 255;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int g = (int) ((this.upperBound - this.upperBound) / 255;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int g = (int) ((this.upperBound - this.upperBound) / 255;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int g = (int) (this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int g = (int) (this.upperBound - this.lowerBound;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int g = (int) this.lowerBound / ((v) * 255.0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int g = (int) this.lowerBound / ((v) * 255.0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int g = (int) this.lowerBound / (this.upperBound) * 255.0 / (this.upperBound;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int g = (int) this.lowerBound / (this.upperBound) * 255.0 / (this.upperBound;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int g = (int) this.lowerBound / (this.upperBound - this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int g = (int) this.lowerBound / (this.upperBound - this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int g = (int) ((v / this.lowerBound) * 255.0 / (this.upperBound;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int g = (int) ((v / this.lowerBound) * 255.0 / (this.upperBound;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int g = (int) this.lowerBound / (this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int g = (int) this.lowerBound / (this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int g = (int) this.lowerBound / (v.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int g = (int) this.lowerBound / (v.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int g = (int) ((v * 255.0 / (this.upperBound) - this.upperBound;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int g = (int) ((v * 255.0 / (this.upperBound) - this.upperBound;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int g = (int) this.lowerBound / (v.upperBound % 255.0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int g = (int) this.lowerBound / (v.upperBound % 255.0;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int g = (1 << this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int g = (1 << this.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int g = (1 << this.lowerBound - this.upperBound) / (v.upperBound;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int g = (1 << this.lowerBound - this.upperBound) / (v.upperBound;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int g = (int) this.lowerBound / ((v.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int g = (int) this.lowerBound / ((v.upperBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int g = (int) ((v - this.lowerBound) / (v.upperBound;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int g = (int) ((v - this.lowerBound) / (v.upperBound;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int g = (int) ((v / this.lowerBound) * 255.0 / 255;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int g = (int) ((v / this.lowerBound) * 255.0 / 255;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int g = (int) this.lowerBound / (this.upperBound % 255.0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int g = (int) this.lowerBound / (this.upperBound % 255.0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int g = (int) ((v / this.lowerBound) * 255;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int g = (int) ((v / this.lowerBound) * 255;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int g = (int)this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int g = (int)this.lowerBound - this.upperBound;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / 255.0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int g = (int) ((this.lowerBound - this.upperBound) / 255.0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int g = (int) this.lowerBound - this.upperBound) / (this.upperBound;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int g = (int) this.lowerBound - this.upperBound) / (this.upperBound;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int g = (int) this.lowerBound / (this.upperBound) - this.upperBound;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int g = (int) this.lowerBound / (this.upperBound) - this.upperBound;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int g = (int) this.lowerBound * 255.0 / (this.upperBound) - this.upperBound;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int g = (int) this.lowerBound * 255.0 / (this.upperBound) - this.upperBound;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int g = (int) this.lowerBound / ((v.upperBound - this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int g = (int) this.lowerBound / ((v.upperBound - this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int g = (int) this.lowerBound && this.upperBound;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int g = (int) this.lowerBound && this.upperBound;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int g = (int) this.lowerBound / ((this.upperBound - this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int g = (int) this.lowerBound / ((this.upperBound - this.upperBound) * 255.0;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int g = (int) ((v - this.lowerBound) / (this.upperBound;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int g = (int) ((v - this.lowerBound) / (this.upperBound;",
                "identical": false
            }
        ],
        "buggy_line": "int g = (int) ((value - this.lowerBound) / (this.upperBound",
        "fixed_line": "int g = (int) ((v - this.lowerBound) / (this.upperBound"
    },
    "Chart-13": {
        "fixes": [
            {
                "k": 1,
                "patch": "new Range(0.0, constraint.getWidth() / w[2];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "new Range(0.0, constraint.getWidth() / w[2];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "new Range(0.0, constraint.getWidth() / w[3];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "new Range(0.0, constraint.getWidth() / w[3];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "new Range(0.0, constraint.getWidth() / w[3]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "new Range(0.0, constraint.getWidth() / w[3]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[1]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[1]);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[3];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[3];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "new Range(0.0, constraint.getWidth() - w[2];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "new Range(0.0, constraint.getWidth() - w[2];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] + h[2];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] + h[2];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w[2];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w[2];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - hConstraint;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - hConstraint;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[2];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[2];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c2;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c2;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[0];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[0];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] + h;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] + h;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w]\";",
                "identical": false
            },
            {
                "k": 36,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w]\";",
                "identical": false
            },
            {
                "k": 37,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[2];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[2];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[2];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[2];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "new Range(0.0, constraint.getWidth() / w[0], h[2];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "new Range(0.0, constraint.getWidth() / w[0], h[2];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[1];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[1];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), 16;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), 16;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] : 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] : 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[3];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[3];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.w[2];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.w[2];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "new Range(0.0, constraint.getWidth() / w[1];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "new Range(0.0, constraint.getWidth() / w[1];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w[1]];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w[1]];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] + h];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] + h];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] + h;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] + h;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "new Range(0.0, constraint.getWidth() / w[1]);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "new Range(0.0, constraint.getWidth() / w[1]);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[3]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[3]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] - h",
                "identical": false
            },
            {
                "k": 68,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] - h",
                "identical": false
            },
            {
                "k": 69,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - hConstraintType.RANGE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - hConstraintType.RANGE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - c2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - c2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "new Range(0.0, constraint.getWidth() / this.w[2]), c4;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "new Range(0.0, constraint.getWidth() / this.w[2]), c4;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[1], w[2];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[1], w[2];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - h[2];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - h[2];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[3];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[3];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[0];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[0];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.w[3];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.w[3];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[0];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), this.right[0];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "new Range(0.0, constraint.getWidth() / w[1]), this.right;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "new Range(0.0, constraint.getWidth() / w[1]), this.right;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - totalPercent;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "new Range(0.0, constraint.getWidth() / w[1] - totalPercent;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] = h;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w] = h;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4Out;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4Out;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w[2]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4[w[2]);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[1];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), h[1];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4NUMBER;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "new Range(0.0, constraint.getWidth() / w[2]), c4NUMBER;",
                "identical": false
            }
        ],
        "buggy_line": "new Range(0.0, constraint.getWidth() - w[2]),",
        "fixed_line": "new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),"
    },
    "Math-80": {
        "fixes": [
            {
                "k": 1,
                "patch": "int j = 4 * n - 2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int j = 4 * n - 2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int j = 4 * n - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int j = 4 * n - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int j = 2 * n - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int j = 2 * n - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int j = 4 * k - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int j = 4 * k - 1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int j = 4 * k - 2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int j = 4 * k - 2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int j = 4 * k / 2;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int j = 4 * k / 2;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int j = pingPong * n - 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int j = pingPong * n - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int j = Perl * n - 2;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int j = Perl * n - 2;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int j = newPositions.length * n - 1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int j = newPositions.length * n - 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int j = 2 * n - 2;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int j = 2 * n - 2;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int j = 4 * step - 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int j = 4 * step - 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int j =bar * n - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int j =bar * n - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int j = pingPong * n - 2;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int j = pingPong * n - 2;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int j = odd.length * n - 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int j = odd.length * n - 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int j = step * n - 2;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int j = step * n - 2;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int j = Perl * n - 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int j = Perl * n - 1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int j = newCol * n - 1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int j = newCol * n - 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int j = step * n - 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int j = step * n - 1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int j = new * n - 2;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int j = new * n - 2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int j = buffer.length * n - 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int j = buffer.length * n - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int j =bar * n - 2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int j =bar * n - 2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int j = newCol * n - 2;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int j = newCol * n - 2;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int j = a.length * n - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int j = a.length * n - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int j = 5 * n - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int j = 5 * n - 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int j = 400.length * n - 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int j = 400.length * n - 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int j = i * n - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int j = i * n - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int j = odd * n - 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int j = odd * n - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int j = new * n - 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int j = new * n - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int j = newPositions.length * n - 2;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int j = newPositions.length * n - 2;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int j = val / 2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int j = val / 2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int j = 1] * n - 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int j = 1] * n - 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int j = 3 * n - 2;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int j = 3 * n - 2;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int j = new 10 * n - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int j = new 10 * n - 1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int j = n * m - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int j = n * m - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int j = 5 * n - 2;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int j = 5 * n - 2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int j =length * n - 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int j =length * n - 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int j = new 10 * n - 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int j = new 10 * n - 2;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int j = comparator * n - 2;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int j = comparator * n - 2;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int j =xc * n - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int j =xc * n - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int j = 10 * n - 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int j = 10 * n - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int j = n * 2;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int j = n * 2;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int j = 6 * n - 2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int j = 6 * n - 2;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int j = 15 * n - 2;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int j = 15 * n - 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int j = expression * n - 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int j = expression * n - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int j = k / 2;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int j = k / 2;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int j = 3 * n - 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int j = 3 * n - 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int j = 4 * index - 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int j = 4 * index - 1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int j = http * n - 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int j = http * n - 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int j = odd * n - 2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int j = odd * n - 2;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int j = Un * n - 2;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int j = Un * n - 2;",
                "identical": false
            }
        ],
        "buggy_line": "int j = 4 * n - 1;",
        "fixed_line": "int j = 4 * (n - 1);"
    },
    "Closure-67": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (n.GETPROP_NAME) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (n.GETPROP_NAME) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (n.GETPROP_KEY) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (n.GETPROP_KEY) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (n.GETPROP_GENERATE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (n.GETPROP_GENERATE) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (n.GETPROP_DESC) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (n.GETPROP_DESC) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (n.GETPROP_INFO) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (n.GETPROP_INFO) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (n.GETPROP_SPACES) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (n.GETPROP_SPACES) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (n.GETPROP_NAMED_CONNECTION) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (n.GETPROP_NAMED_CONNECTION) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (n.GETPROP_TYPE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (n.GETPROP_TYPE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (n.GETPROP_GENERATES) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (n.GETPROP_GENERATES) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (n.GETPROP_VIEW) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (n.GETPROP_VIEW) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (n.GETPROP_NAME_UNKNOWN) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (n.GETPROP_NAME_UNKNOWN) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (n.GETPROP_NAMED_UNKNOWN) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (n.GETPROP_NAMED_UNKNOWN) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (n.GETPROP_nodes) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (n.GETPROP_nodes) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (n.GETPROP_RESERVED) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (n.GETPROP_RESERVED) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (n.GETPROP_MODEL_KEY) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (n.GETPROP_MODEL_KEY) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (n.GETPROP_NAME;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (n.GETPROP_NAME;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (n.GETPROP_PROPERTY) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (n.GETPROP_PROPERTY) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (n.GETPROP_INFOINFO) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (n.GETPROP_INFOINFO) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (n.GETPROP_reset) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (n.GETPROP_reset) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (n.GETPROP_UNKNOWN) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (n.GETPROP_UNKNOWN) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (n.GETPROP_laced) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (n.GETPROP_laced) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (n.GETPROP_WITHINLINE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (n.GETPROP_WITHINLINE) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (n.GETPROP_NAME_GET) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (n.GETPROP_NAME_GET) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (n.GETPROP_NAMED_ADDRESS) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (n.GETPROP_NAMED_ADDRESS) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (n.GETPROP_NAMED_MESSAGE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (n.GETPROP_NAMED_MESSAGE) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (n.GETPROP;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (n.GETPROP;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (n.GETPROP_backgroundColor) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (n.GETPROP_backgroundColor) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (n.GETPROP_NAMED_KEY) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (n.GETPROP_NAMED_KEY) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (n.GETPROP_INFO_MESSAGE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (n.GETPROP_INFO_MESSAGE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (n.GETPROP_NAME_PREFIX) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (n.GETPROP_NAME_PREFIX) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (n.GETPROP_NAMED_VIEW) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (n.GETPROP_NAMED_VIEW) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (n.GETPROP_NAME_KEY) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (n.GETPROP_NAME_KEY) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (n.GETPROP_NAME_MESSAGE) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (n.GETPROP_NAME_MESSAGE) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (n.GETPROP_EXPRESSION) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (n.GETPROP_EXPRESSION) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (n.GETToSimpleAssign) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (n.GETToSimpleAssign) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (n.GETPROP_Icon) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (n.GETPROP_Icon) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (n.GETPROP_PREFIXEDG options) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (n.GETPROP_PREFIXEDG options) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (n.GETPROP_EXECUTION) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (n.GETPROP_EXECUTION) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (n.GETPROP_forSerialization) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (n.GETPROP_forSerialization) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (n.GETPROP_MESSAGE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (n.GETPROP_MESSAGE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (n.isVarOrSimpleAssign) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (n.isVarOrSimpleAssign) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (n.GETPROP_Deser) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (n.GETPROP_Deser) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (n.GETPROP_NAME_VIEW) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (n.GETPROP_NAME_VIEW) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (n.GETPROP_INFO_PROPERTY) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (n.GETPROP_INFO_PROPERTY) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (n.GETPROP_NAMED_VALUE) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (n.GETPROP_NAMED_VALUE) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (n.GETPROP_NAMED_CONNECTIONS) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (n.GETPROP_NAMED_CONNECTIONS) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (n.GETPROP_NAMED_APTERS) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (n.GETPROP_NAMED_APTERS) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (n.GETPROP_URI) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (n.GETPROP_URI) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (n.GETPROP_INLINE) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (n.GETPROP_INLINE) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (n.GETPROP_SPACE) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (n.GETPROP_SPACE) {",
                "identical": false
            }
        ],
        "buggy_line": ") {",
        "fixed_line": "&& assign.getParent().getType() == Token.EXPR_RESULT) {"
    },
    "Chart-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (endIndex >= 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (endIndex >= 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (initialIndex < 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (initialIndex < 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (endIndex < 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (endIndex < 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (startIndex >= 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (startIndex >= 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (startIndex < 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (startIndex < 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (beginIndex < 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (beginIndex < 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (endIndex == 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (endIndex == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (sizeIndex < 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (sizeIndex < 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (attributes < 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (attributes < 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (batchSize == 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (batchSize == 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (beginIndex == 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (beginIndex == 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (ending == 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (ending == 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (initialIndex == 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (initialIndex == 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (sizeIndex == 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (sizeIndex == 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (nextIndex >= 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (nextIndex >= 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (nextIndex < 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (nextIndex < 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (length < 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (length < 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (dataIndex < 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (dataIndex < 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ( type == 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if ( type == 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (itemIndex < 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (itemIndex < 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (delimiter < 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (delimiter < 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (tableIndex < 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (tableIndex < 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (endIndex <= 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (endIndex <= 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (OKUPIndex < 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (OKUPIndex < 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (dataIndex >= 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (dataIndex >= 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (nrIndex < 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (nrIndex < 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (ending < 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (ending < 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (spanIndex < 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (spanIndex < 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (readerIndex < 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (readerIndex < 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (lastIndex < 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (lastIndex < 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (itemsIndex == 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (itemsIndex == 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (isString == 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (isString == 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (size < 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (size < 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (attributes.length == 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (attributes.length == 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if ( stopIndex < 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if ( stopIndex < 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (isUseIndex >= 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (isUseIndex >= 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (OKUPIndex == 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (OKUPIndex == 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (emptyIndex < 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (emptyIndex < 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (offset < 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (offset < 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (attributesLength < 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (attributesLength < 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (headerIndex < 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (headerIndex < 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (itemIndex == 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (itemIndex == 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if ( stopIndex == 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if ( stopIndex == 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (is endIndex == 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (is endIndex == 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (messageIndex < 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (messageIndex < 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (resolveIndex < 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (resolveIndex < 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (initialIndex >= 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (initialIndex >= 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (delimiter == 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (delimiter == 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (code == 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (code == 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (code >= 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (code >= 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (endIndex < 0) {",
        "fixed_line": "if ((endIndex < 0)  || (endIndex < startIndex)) {"
    },
    "Math-82": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (MathUtils.compareTo(entry, rhs, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (MathUtils.compareTo(entry, rhs, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (MathUtils.compareTo(right, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (MathUtils.compareTo(right, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (MathUtils.compareTo(totalRatio, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (MathUtils.compareTo(totalRatio, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (MathUtils.compareTo(zoom, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (MathUtils.compareTo(zoom, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (MathUtils.compareTo(rows, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (MathUtils.compareTo(rows, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (MathUtils.compareTo(right, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (MathUtils.compareTo(right, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (MathUtils.compareTo(template, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (MathUtils.compareTo(template, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (MathUtils.compareTo(entry, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (MathUtils.compareTo(entry, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (MathUtils.compareTo(location, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (MathUtils.compareTo(location, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (MathUtils.compareTo(totalBytes, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (MathUtils.compareTo(totalBytes, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (MathUtils.compareTo(entry, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (MathUtils.compareTo(entry, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (MathUtils.compareTo(keys, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (MathUtils.compareTo(keys, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) > 0) {",
                "identical": true
            },
            {
                "k": 34,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) > 0) {",
                "identical": true
            },
            {
                "k": 35,
                "patch": "if (MathUtils.compareTo(location, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (MathUtils.compareTo(location, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (MathUtils.compareTo(types, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (MathUtils.compareTo(types, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (MathUtils.compareTo(file, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (MathUtils.compareTo(file, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (MathUtils.compareTo(owner, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (MathUtils.compareTo(owner, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (MathUtils.compareTo(erializer, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (MathUtils.compareTo(erializer, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (MathUtils.compareTo( types, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (MathUtils.compareTo( types, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (MathUtils.compareTo( '/, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (MathUtils.compareTo( '/, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (MathUtils.compareTo(lause, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (MathUtils.compareTo(lause, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (MathUtils.compareTo(INT, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (MathUtils.compareTo(INT, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (MathUtils.compareTo(vert, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (MathUtils.compareTo(vert, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (MathUtils.compareTo(keys, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (MathUtils.compareTo(keys, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (MathUtils.compareTo(erializer, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (MathUtils.compareTo(erializer, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (MathUtils.compareTo(entry, 0, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (MathUtils.compareTo(lowest, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (MathUtils.compareTo(lowest, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) <= 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) <= 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (MathUtils.compareTo( lines, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (MathUtils.compareTo( lines, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (MathUtils.compareTo(location, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (MathUtils.compareTo(location, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (MathUtils.compareTo(INT, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (MathUtils.compareTo(INT, 1, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (MathUtils.compareTo(entry, rhs, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (MathUtils.compareTo(entry, rhs, epsilon) == 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (MathUtils.compareTo(shape, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (MathUtils.compareTo(shape, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (MathUtils.compareTo( zf, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (MathUtils.compareTo( zf, 1, rhs) >= 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (MathUtils.compareTo(entry, rhs, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (MathUtils.compareTo(entry, rhs, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (MathUtils.compareTo(Track, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (MathUtils.compareTo(Track, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (MathUtils.compareTo( zf, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (MathUtils.compareTo( zf, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (MathUtils.compareTo( zf, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (MathUtils.compareTo( zf, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (MathUtils.compareTo( 6:, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (MathUtils.compareTo( 6:, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (MathUtils.compareTo(right, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (MathUtils.compareTo(right, 1, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (MathUtils.compareTo(keys, 1, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (MathUtils.compareTo(keys, 1, epsilon) > 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (MathUtils.compareTo(Mail, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (MathUtils.compareTo(Mail, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (MathUtils.compareTo(erializer, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (MathUtils.compareTo(erializer, 0, epsilon) >= 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (MathUtils.compareTo(entry, count > 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (MathUtils.compareTo(entry, count > 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) && epsilon > 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (MathUtils.compareTo(entry, 1, rhs) && epsilon > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (MathUtils.compareTo(entry, count >= 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (MathUtils.compareTo(entry, count >= 0) {",
                "identical": false
            }
        ],
        "buggy_line": "if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
        "fixed_line": "if (MathUtils.compareTo(entry, 0, epsilon) > 0) {"
    },
    "Closure-52": {
        "fixes": [
            {
                "k": 1,
                "patch": "return c == 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return c == 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return c - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return c - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return c > 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return c > 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return c >= 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return c >= 0;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this.index >= 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this.index >= 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return Token.TK_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return Token.TK_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return Token.TK_SHORT_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return Token.TK_SHORT_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return Token.TK_MARKER_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return Token.TK_MARKER_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return Token.TK_MARKER_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return Token.TK_MARKER_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return Token.TK_QUOTED_IDENTIFIER;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return Token.TK_QUOTED_IDENTIFIER;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return Token.TK_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return Token.TK_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return FS_SHORT_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return FS_SHORT_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return Token.TK_SHORT_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return Token.TK_SHORT_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return Token.TK_EMBEDDED_OBJECT_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return Token.TK_EMBEDDED_OBJECT_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return i == 0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return i == 0;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return Token.TK_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return Token.TK_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHAR;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return Token.TK_QUOTED_LOG_RECORDS;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return Token.TK_QUOTED_LOG_RECORDS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return Token.TK_PER_SEGMENT_LEN;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return Token.TK_PER_SEGMENT_LEN;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return Token.TK_MARKER_END_OF_STRING > 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return Token.TK_MARKER_END_OF_STRING > 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return Token.TK_EMBEDDED_OBJECT_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return Token.TK_EMBEDDED_OBJECT_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return Token.TK_SHOW_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return Token.TK_SHOW_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return Token.TK_PER_SEGMENT_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return Token.TK_PER_SEGMENT_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return Token.TK_QUOTED_STRING;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return Token.TK_QUOTED_STRING;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return c._lastIndex;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return c._lastIndex;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return Token.TK_REQUIRED_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return Token.TK_REQUIRED_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return Token.TK_REQUIRED_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return Token.TK_REQUIRED_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return TokenType.FUTURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return TokenType.FUTURE_STRICT_HEADERS;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return Token.TK_PER_SEGMENT_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return Token.TK_PER_SEGMENT_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return c._lastIndex >= 0;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return c._lastIndex >= 0;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHARACT;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHARACT;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return Token.TK_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return Token.TK_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return Token.TK_PERCENTAGE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return Token.TK_PERCENTAGE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return Token.TK_SHORT_END_OF_STRING > 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return Token.TK_SHORT_END_OF_STRING > 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return TokenType.FUTURE_STRICT_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return TokenType.FUTURE_LOG_RECOR_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return TokenType.FUTURE_LOG_RECOR_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return TokenType.FUTURE_LOG_RECORDS;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return TokenType.FUTURE_LOG_RECORDS;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return Token.TK_BUFFER_LENGTH - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return Token.TK_BUFFER_LENGTH - 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this.index == 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return this.index == 0;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return Token.TK_QUOTED_IDENTIFIER > 0;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return Token.TK_QUOTED_IDENTIFIER > 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return Token.TK_EMBEDDED_OBJECT_OF_STRING;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return Token.TK_EMBEDDED_OBJECT_OF_STRING;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return FS_SHORT_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return FS_SHORT_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return Token.TK_PER_SEED_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return Token.TK_PER_SEED_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return c.length > 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return c.length > 0;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return Token.TK_EMBEDDED_OBJECT_END_OF_STRING > 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return Token.TK_EMBEDDED_OBJECT_END_OF_STRING > 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return Token.TK_BUFFER_LENGTH;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return Token.TK_BUFFER_LENGTH;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return Token.TK_PER_SEED_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return Token.TK_PER_SEED_END_OF_STRING == 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return Token.TK_SHOW_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return Token.TK_SHOW_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return Token.TK_EMBEDDED_OBJECT_LOG_RECORDS;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return Token.TK_EMBEDDED_OBJECT_LOG_RECORDS;",
                "identical": false
            }
        ],
        "buggy_line": "return len > 0;",
        "fixed_line": "return len > 0 && s.charAt(0) != '0';"
    },
    "JacksonDatabind-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "sb.append(';');",
                "identical": false
            },
            {
                "k": 2,
                "patch": "sb.append(';');",
                "identical": false
            },
            {
                "k": 3,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.",
                "identical": false
            },
            {
                "k": 4,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.",
                "identical": false
            },
            {
                "k": 5,
                "patch": "sb.append(';'); // just to ensure we don'll also check _referencedType.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "sb.append(';'); // just to ensure we don'll also check _referencedType.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "sb.append(';'); // end-of-referencedType",
                "identical": false
            },
            {
                "k": 8,
                "patch": "sb.append(';'); // end-of-referencedType",
                "identical": false
            },
            {
                "k": 9,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.UNION",
                "identical": false
            },
            {
                "k": 12,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.UNION",
                "identical": false
            },
            {
                "k": 13,
                "patch": "sb.append(';'); as 'class == _referencedType;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "sb.append(';'); as 'class == _referencedType;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should use the _referencedType.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should use the _referencedType.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "sb.append(';'); // can this ever occur?",
                "identical": false
            },
            {
                "k": 18,
                "patch": "sb.append(';'); // can this ever occur?",
                "identical": false
            },
            {
                "k": 19,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should check the _referencedType.",
                "identical": false
            },
            {
                "k": 20,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should check the _referencedType.",
                "identical": false
            },
            {
                "k": 21,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should check _referencedType.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should check _referencedType.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "sb.append(';'); //long.class == _referencedType; and _referencedType;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "sb.append(';'); //long.class == _referencedType; and _referencedType;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "sb.append(';'); // end-of-referencedType.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "sb.append(';'); // end-of-referencedType.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "sb.append(';'); // end marker, _referencedType.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "sb.append(';'); // end marker, _referencedType.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPANOSECONDS;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPANOSECONDS;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; and _referencedType.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; and _referencedType.",
                "identical": false
            },
            {
                "k": 33,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; _referencedType.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; _referencedType.",
                "identical": false
            },
            {
                "k": 35,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; use the _referencedType.",
                "identical": false
            },
            {
                "k": 36,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; use the _referencedType.",
                "identical": false
            },
            {
                "k": 37,
                "patch": "sb.append(';'); // just to ensure we don't need to _referencedType.",
                "identical": false
            },
            {
                "k": 38,
                "patch": "sb.append(';'); // just to ensure we don't need to _referencedType.",
                "identical": false
            },
            {
                "k": 39,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.nullFirst; no changes, _referencedType);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.nullFirst; no changes, _referencedType);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; _class == sb;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; _class == sb;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "sb.append(';'); //long.class == _referencedType; and _referencedType;');",
                "identical": false
            },
            {
                "k": 44,
                "patch": "sb.append(';'); //long.class == _referencedType; and _referencedType;');",
                "identical": false
            },
            {
                "k": 45,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.nullFirst;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.nullFirst;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType;(_class == sb; no changes, _referencedType);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType;(_class == sb; no changes, _referencedType);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; use the _class",
                "identical": false
            },
            {
                "k": 50,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; use the _class",
                "identical": false
            },
            {
                "k": 51,
                "patch": "sb.append(';'); // end-of-object, _referencedType.",
                "identical": false
            },
            {
                "k": 52,
                "patch": "sb.append(';'); // end-of-object, _referencedType.",
                "identical": false
            },
            {
                "k": 53,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should check the _class == sb;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should check the _class == sb;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; no changes, _referencedType);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; no changes, _referencedType);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; _class == sb; no changes++) return _referencedType;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; _class == sb; no changes++) return _referencedType;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPAN_TYPE_STRINGSaturated;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType.SPAN_TYPE_STRINGSaturated;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType;(_class == sb; no changes++) return _referencedType;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType;(_class == sb; no changes++) return _referencedType;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; use the _class == sb;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; use the _class == sb;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; _class == sb; no changes, _referencedType);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; _class == sb; no changes, _referencedType);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "sb.append(';'); // just to ensure we don'll also check _referencedType; use the _referencedType.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "sb.append(';'); // just to ensure we don'll also check _referencedType; use the _referencedType.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "sb.append(';'); //long.class == _referencedType; and _referencedType; most special one, sb",
                "identical": false
            },
            {
                "k": 70,
                "patch": "sb.append(';'); //long.class == _referencedType; and _referencedType; most special one, sb",
                "identical": false
            },
            {
                "k": 71,
                "patch": "sb.append(';'); //long.class == _referencedType; and _referencedType; use negative as well",
                "identical": false
            },
            {
                "k": 72,
                "patch": "sb.append(';'); //long.class == _referencedType; and _referencedType; use negative as well",
                "identical": false
            },
            {
                "k": 73,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should use the _class",
                "identical": false
            },
            {
                "k": 74,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should use the _class",
                "identical": false
            },
            {
                "k": 75,
                "patch": "sb.append(';'); // nulls need to check _referencedType.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "sb.append(';'); // nulls need to check _referencedType.",
                "identical": false
            },
            {
                "k": 77,
                "patch": "sb.append(';'); // just to ensure we don'll also check _referencedType;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "sb.append(';'); // just to ensure we don'll also check _referencedType;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. as well",
                "identical": false
            },
            {
                "k": 80,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType. as well",
                "identical": false
            },
            {
                "k": 81,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should use the _class == sb;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should use the _class == sb;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType",
                "identical": false
            },
            {
                "k": 84,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType",
                "identical": false
            },
            {
                "k": 85,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; and '*' characters",
                "identical": false
            },
            {
                "k": 86,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; and '*' characters",
                "identical": false
            },
            {
                "k": 87,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should check _class == sb;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should check _class == sb;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; use the _class == sb",
                "identical": false
            },
            {
                "k": 90,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; use the _class == sb",
                "identical": false
            },
            {
                "k": 91,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedTypeArguments.",
                "identical": false
            },
            {
                "k": 92,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedTypeArguments.",
                "identical": false
            },
            {
                "k": 93,
                "patch": "sb.append(';'); as 'class != _referencedType;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "sb.append(';'); as 'class != _referencedType;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should check _class == sb; no changes++) return _referencedType;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; should check _class == sb; no changes++) return _referencedType;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "sb.append(';'); // just to ensure we'll also check _class",
                "identical": false
            },
            {
                "k": 98,
                "patch": "sb.append(';'); // just to ensure we'll also check _class",
                "identical": false
            },
            {
                "k": 99,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; _class == sb; no changes its first, _referencedType);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "sb.append(';'); // just to ensure we'll also check _referencedType; _class == sb; no changes its first, _referencedType);",
                "identical": false
            }
        ],
        "buggy_line": "sb.append(';');",
        "fixed_line": "sb.append(\">;\");"
    },
    "Jsoup-46": {
        "fixes": [
            {
                "k": 1,
                "patch": "accum.append(escapeMode);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "accum.append(escapeMode);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "accum.append(escapeMode;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "accum.append(escapeMode;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "accum.append(escapeMode.c);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "accum.append(escapeMode.c);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "accum.append(escapeMode.accum;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "accum.append(escapeMode.accum;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "accum.append(escapeMode.PLACEHOLDER;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "accum.append(escapeMode.PLACEHOLDER;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "accum.append(escapeMode.MODE);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "accum.append(escapeMode.MODE);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "accum.append(escapeMode.MILLISECONDS;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "accum.append(escapeMode.MILLISECONDS;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "accum.append(ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "accum.append(ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "accum.append(escapeMode.PLACEHING;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "accum.append(escapeMode.PLACEHING;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "accum.append(escapeMode.class);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "accum.append(escapeMode.class);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "accum.append(escapeMode.SECTION_NODE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "accum.append(escapeMode.SECTION_NODE;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "accum.append(escapeMode.inputter;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "accum.append(escapeMode.inputter;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "accum.append(escapeMode.SECTION_BREAK_DELIMITER;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "accum.append(escapeMode.SECTION_BREAK_DELIMITER;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "accum.append(escapeMode.MAP;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "accum.append(escapeMode.MAP;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "accum.append(escapeMode.EMPTY;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "accum.append(escapeMode.EMPTY;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "accum.append(c);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "accum.append(c);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "accum.append(escapeMode.v);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "accum.append(escapeMode.v);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "accum.append(escapeMode.SECTION;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "accum.append(escapeMode.SECTION;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "accum.append(escapeMode.COMPLETED;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "accum.append(escapeMode.COMPLETED;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "accum.append(escapeMode.SECTION_BREAK_CLASS;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "accum.append(escapeMode.SECTION_BREAK_CLASS;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "accum.append(escapeMode.boolean.inputter;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "accum.append(escapeMode.boolean.inputter;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "accum.append(escapeMode == EscapeMode.PLACEHOLDER;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "accum.append(escapeMode == EscapeMode.PLACEHOLDER;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "accum.append(processMode);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "accum.append(processMode);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "accum.append(escapeMode.SECTION_BREAK_TYPES);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "accum.append(escapeMode.SECTION_BREAK_TYPES);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "accum.append(cteName);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "accum.append(cteName);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "accum.append(escapeMode.SECTION_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "accum.append(escapeMode.SECTION_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "accum.append(destMode);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "accum.append(destMode);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "accum.append(escapeMode.SECTION_BREAK_DEMAND;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "accum.append(escapeMode.SECTION_BREAK_DEMAND;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "accum.append(escapeMode.SECTION_TIMEZONE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "accum.append(escapeMode.SECTION_TIMEZONE;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "accum.append(escapeMode.DOUBLE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "accum.append(escapeMode.DOUBLE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "accum.append(escapeMode.SECTION_BREAK_TYPES;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "accum.append(escapeMode.SECTION_BREAK_TYPES;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "accum.append(escapeMode.BIN;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "accum.append(escapeMode.BIN;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "accum.append(v);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "accum.append(v);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "accum.append(escapeMode.PROCESS_TIME_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "accum.append(escapeMode.PROCESS_TIME_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "accum.append(escapeMode.SECTION_DIMENSION;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "accum.append(escapeMode.SECTION_DIMENSION;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "accum.append(escapeMode.VIEW_ROOT;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "accum.append(escapeMode.VIEW_ROOT;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "accum.append(escapeMode. far;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "accum.append(escapeMode. far;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "accum.append(escapeMode, accum);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "accum.append(escapeMode, accum);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "accum.append(escapeMode.SECTION_BREAK_DEGATE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "accum.append(escapeMode.SECTION_BREAK_DEGATE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "accum.append(escapeMode.PROCESS_TIMEZONE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "accum.append(escapeMode.PROCESS_TIMEZONE;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "accum.append(escapeMode.SECTION_BREAK_MATCHING;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "accum.append(escapeMode.SECTION_BREAK_MATCHING;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "accum.append(escapeMode.STATUS_DIMENSION;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "accum.append(escapeMode.STATUS_DIMENSION;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "accum.append(escapeMode == EscapeMode.MILLISECONDS;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "accum.append(escapeMode == EscapeMode.MILLISECONDS;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "accum.append(escapeMode. serviceName;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "accum.append(escapeMode. serviceName;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "accum.append(escapeMode == EscapeMode.MODE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "accum.append(escapeMode == EscapeMode.MODE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "accum.append(escapeMode.KEY);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "accum.append(escapeMode.KEY);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "accum.append(escapeMode.SECTION_ON_DEMAND;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "accum.append(escapeMode.SECTION_ON_DEMAND;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "accum.append(escapeMode == EscapeMode.MAP;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "accum.append(escapeMode == EscapeMode.MAP;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "accum.append(escapeMode.SECTION_MATCHING;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "accum.append(escapeMode.SECTION_MATCHING;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "accum.append(SECTION_NODE;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "accum.append(SECTION_NODE;",
                "identical": false
            }
        ],
        "buggy_line": "accum.append(c);",
        "fixed_line": "accum.append(\"&#xa0;\");"
    },
    "Math-11": {
        "fixes": [
            {
                "k": 1,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 60 * 2) * 2;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 60 * 2) * 2;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return FastMath.pow(2 * FastMath, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return FastMath.pow(2 * FastMath, -dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2 * 2;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2 * 2;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) / 2;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) / 2;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2 * 2;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2 * 2;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * branch / 2) * 2;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * branch / 2) * 2;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 4;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 4;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2) * 2;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2) * 2;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 60 * 2) * 2;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 60 * 2) * 2;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1 * 2) * 2;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1 * 2) * 2;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 4];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 4];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * target * 2) * 2;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * target * 2) * 2;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return FastMath.pow(2 * FastMath +dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return FastMath.pow(2 * FastMath +dim / 2) * 2;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return FastMath.pow(2 * 1024, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return FastMath.pow(2 * 1024, -dim * 2) * 2;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 2) / 2;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 2) / 2;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *event * 2) * 2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *event * 2) * 2;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1 * 2 * 2;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1 * 2 * 2;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *event.PI / 2) * 2;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *event.PI / 2) * 2;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * parsed / 2) * 2;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * parsed / 2) * 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1) * 2;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1) * 2;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2) - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2) - 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return FastMath.pow(2 * FastMath / 2) * 2;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return FastMath.pow(2 * FastMath / 2) * 2;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 2 * 2;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return FastMath.pow(2 * FastMath, -dim * 2 * 2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * 4;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * 4;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *ChangeEvent;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *ChangeEvent;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return FastMath.pow(2 * FastMath.PI, -1, -1 * 2) / 2;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return FastMath.pow(2 * FastMath, -dim * branch / 2) * 2;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return FastMath.pow(2 * FastMath, -dim * branch / 2) * 2;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 3 * 2) / 2;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 3 * 2) / 2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * LoggerFactory * 2) * 2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * LoggerFactory * 2) * 2;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * blockSize * 2) / 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * blockSize * 2) / 2;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 60 * 2) * 4;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 60 * 2) * 4;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 10;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 2) * 10;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * 10;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim / 2) * 10;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * target;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * target;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 3 * 2) * 2;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 3 * 2) * 2;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *MIDDLE / 2) * 2;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *MIDDLE / 2) * 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *Peer * 2) * 2;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim *Peer * 2) * 2;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * cos;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * cos;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * parsedBytes * 2) / 2;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * parsedBytes * 2) / 2;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * processInstanceId;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * processInstanceId;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * blockSize * 2) * 2;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * blockSize * 2) * 2;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * unless * 2) * 2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * unless * 2) * 2;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 1.3 / 2) * 2;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return FastMath.pow(2 * FastMath.PI, -dim * 1.3 / 2) * 2;",
                "identical": false
            }
        ],
        "buggy_line": "return FastMath.pow(2 * FastMath.PI, -dim / 2) *",
        "fixed_line": "return FastMath.pow(2 * FastMath.PI, -0.5 * dim) *"
    },
    "Jsoup-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;||X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;||X)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)| to-zA-Z]+",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)| to-zA-Z]+",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?)|[fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?)|[fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?)|[fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?)|[fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-zA-Z]+);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?)|[fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?)|[fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?)|[fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?)|[fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)?)|[fA-zA-Z]+",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;||X)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;||X)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#able-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;||a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;||a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)|)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?($a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?($a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)| to-zA-Z]+",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# to|X)?)|[fA-F]+)| to-zA-Z]+",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#as|X)?)|[fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#as|X)?)|[fA-F]+)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#as|X)?)|[fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#as|X)?)|[fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#as|X)?)|[fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#as|X)?)|[fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#:::|a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#:::|a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)|[fA-F]+)|)|[a-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?As-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?As-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?As-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?As-fA-F]+)|[a-zA-Z]+);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?As-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#Pattern|X)?As-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#ing \" +[0-9a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#ing \" +[0-9a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# \" +[0-9a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(# \" +[0-9a-fA-F]+)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#::|a-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;||X)?)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;||X)?)|[a-zA-Z]+",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)?)?)|[fA-zA-Z]+\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final Pattern unescapePattern = Pattern.compile(\"&(#;|X)? a-fA-F]+)|[a-zA-Z]+;",
                "identical": false
            }
        ],
        "buggy_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?\");",
        "fixed_line": "private static final Pattern unescapePattern = Pattern.compile(\"&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+\\\\d*);?\");"
    },
    "Math-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this.ttValue;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return this.ttValue;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return this.persistentValue;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return this.persistentValue;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return this.pname;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return this.pname;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return this.emptyValue;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return this.emptyValue;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return this.exportedValue;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return this.exportedValue;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return this.lng(100).doubleValue;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return this.lng(100).doubleValue;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return this.p90Value;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return this.p90Value;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return this.heightValue;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return this.heightValue;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return this.ttS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return this.ttS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return multiplyValue;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return multiplyValue;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return this.delegateValue;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return this.delegateValue;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return this.pBeginValue;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return this.pBeginValue;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return this.ttS_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return this.ttS_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return this.pitValue;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this.pitValue;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return this.subscriberValue;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return this.subscriberValue;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return this.ttS_PER_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return this.ttS_PER_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return this.substit(100).doubleValue;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return this.substit(100).doubleValue;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return this.ReplicasValue;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return this.ReplicasValue;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return fractionValue;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return fractionValue;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return this.ttS_NOT_IMPLEMENTEDGE_WEIGHTS;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return this.ttS_NOT_IMPLEMENTEDGE_WEIGHTS;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return this.tt;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return this.tt;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return this. coerceValue;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return this. coerceValue;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return this.get fractionValue;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return this.get fractionValue;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return this.ttS_PER_NOT_IMPLEMENTEDGE_WEIGHTS;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this.ttS_PER_NOT_IMPLEMENTEDGE_WEIGHTS;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return this.leftValue;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return this.leftValue;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return this.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return this.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return this.substitValue;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return this.substitValue;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return this.pUREValue;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return this.pUREValue;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return this.pttValue;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return this.pttValue;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return this.permValue;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return this.permValue;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return this. getLevelValue;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return this. getLevelValue;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return this.pttS_PER_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return this.pttS_PER_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return this.substit(100;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return this.substit(100;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return this.ttS_PER_NOT_IMPLEMENTEDGE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return this.ttS_PER_NOT_IMPLEMENTEDGE;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return this.pttS_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return this.pttS_NOT_IMPLEMENTEDGE_WEIGHT;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return this.multValue;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return this.multValue;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return this.normalizedValue;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return this.normalizedValue;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return this. NUMBERValue;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return this. NUMBERValue;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return this.pmessageValue;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return this.pmessageValue;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return this.pABLEValue;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return this.pABLEValue;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return this.arrayValue;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return this.arrayValue;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return this.RelativeValue;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return this.RelativeValue;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return this.factorValue;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return this.factorValue;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return this. recordingValue;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return this. recordingValue;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return this.ttS_PER_EXCANCE_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.ttS_PER_EXCANCE_ON_DELIMITER;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return this.controller(100;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return this.controller(100;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return this.ttS_PER_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return this.ttS_PER_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return this.ttS_PERCENTAGE;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return this.ttS_PERCENTAGE;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return this.ttS_PER_NOT_IN_USE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return this.ttS_PER_NOT_IN_USE;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return this.ttS_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return this.ttS_NOT_IMPLEMENTED;",
                "identical": false
            }
        ],
        "buggy_line": "return multiply(100).doubleValue();",
        "fixed_line": "return 100 * doubleValue();"
    },
    "Csv-1": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (current == '\\n') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (current == '\\n') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (current != '\\n') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (current != '\\n') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if current == '\\n') {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if current == '\\n') {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if(current == '\\n') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if(current == '\\n') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the root of the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the root of the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of record; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of record; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to look; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to look; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of record; but also need to look; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of record; but also need to look; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to look; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to look; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of record; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of record; but also need to look; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of record; but also need to look; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to look; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to look; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of record; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of record; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to look; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to look; but also need to check the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to look; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to look; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of record; but also need to look; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of record; but also need to look; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of record; but also need to check the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of record; but also need to check the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the root of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of record; but also need to check the root of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the root of the end of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the root of the end of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to check the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (current == '\\n') { // end of line is end of value we are the lastChar; but also need to the root of the bar file and the value of the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (current == '\\n') { // end of line is end of value we are the lastChar; but also need to the root of the bar file and the value of the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the root of the end of the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the lastChar; but also need to check the root of the end of the end of record; but also need to check the root of the end of the root of the end of the lastChar != '\\n') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of record; but also need to check the lastChar",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the end of the root of the end of the end of record; but also need to check the lastChar",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to look; but also need to check the lastChar",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (current == '\\n') { // end of line is end of value we in the root of the bar file and the value of the root of the bar file and the end of record; but also need to check the root of the end of the end of record; but also need to check the root of the end of the end of record; but also need to look; but also need to check the lastChar",
                "identical": false
            }
        ],
        "buggy_line": "if (current == '\\n') {",
        "fixed_line": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) {"
    },
    "JxPath-10": {
        "fixes": [
            {
                "k": 1,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return compute(args[0].computeValue(context), args[0].computeValue;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return compute(args[0].computeValue(context), args[0].computeValue;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == context;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == context;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == args[1].computeValue;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == args[1].computeValue;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(args);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(args);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue[1].computeValue;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue[1].computeValue;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return computeS[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return computeS[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return compute(args[1].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return compute(args[1].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue ==context;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue ==context;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.FALSE : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.FALSE : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(args)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(args)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(argsargs);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(argsargs);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[1].computeValue(args);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[1].computeValue(args);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return compute(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return compute(args[0].computeValue;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return compute_TYPE[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return compute_TYPE[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == long.FALSE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == long.FALSE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return compute(args[0].computeValue[1].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return compute(args[0].computeValue[1].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.FALSE : args;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.FALSE : args;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return compute(args[0].computeValue(context) ? args[1].computeValue(args[0]) : args[1].computeValue(context;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return compute(args[0].computeValue(context) ? args[1].computeValue(args[0]) : args[1].computeValue(context;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return compute(args[0].computeValue == args[1].computeValue[1].computeValue;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return compute(args[0].computeValue == args[1].computeValue[1].computeValue;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == boolean.FALSE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == boolean.FALSE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return compute(args[0].computeValue(context) ? args[1].computeValue(args[0]) : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return compute(args[0].computeValue(context) ? args[1].computeValue(args[0]) : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue \";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue \";",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == args[1].computeValue[1].computeValue;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == args[1].computeValue[1].computeValue;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue){",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue){",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.TRUE : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.TRUE : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue[0].computeValue;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue[0].computeValue;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[1].computeValue(args;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[1].computeValue(args;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return computeEdge[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return computeEdge[0].computeValue(context), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return compute(args[1].computeValue(context), args[0].computeValue;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return compute(args[1].computeValue(context), args[0].computeValue;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue = context;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue = context;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.FALSE : args[1].computeValue(args);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue == null ? context.FALSE : args[1].computeValue(args);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(argsargs)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(argsargs)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue =context;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue =context;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return compute(args[0].computeValue(context) : args[1].computeValue(args);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return compute(args[0].computeValue(context) : args[1].computeValue(args);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueVIOUS;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueVIOUS;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return compute(args[0].computeValue(context), args[0].computeValue(args);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return compute(args[0].computeValue(context), args[0].computeValue(args);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(1);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return compute(args[0].computeValueAsynccontext), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return compute(args[0].computeValueAsynccontext), args[1].computeValue;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(args)) ? context : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(args)) ? context : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(args)) ? context.FALSE : args;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue(args)) ? context.FALSE : args;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return compute(args[0].computeValue(context) ? args[1].computeValue(args : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return compute(args[0].computeValue(context) ? args[1].computeValue(args : args[1].computeValue;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return compute(args[0].computeValue(context) ? args[1].computeValue(argsargs[1].computeValue(context)) : args;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return compute(args[0].computeValue(context) ? args[1].computeValue(argsargs[1].computeValue(context)) : args;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[1].computeValue(argsargs;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return compute(args[0].computeValue(0 ? args[1].computeValue(context) : args[1].computeValue(argsargs;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueElem;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueElem;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueSelected;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValueSelected;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue serializationExpression;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return compute(args[0].computeValue(context), args[1].computeValue serializationExpression;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return compute(args[0].computeValue(context) : args[1].computeValue(args;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return compute(args[0].computeValue(context) : args[1].computeValue(args;",
                "identical": false
            }
        ],
        "buggy_line": "return compute(args[0].computeValue(context), args[1].computeValue(context))",
        "fixed_line": "return compute(args[0].compute(context), args[1].compute(context))"
    },
    "Collections-26": {
        "fixes": [
            {
                "k": 1,
                "patch": "private Object readResolve = this.readResolve;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private Object readResolve = this.readResolve;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private Object readResolve = _hashMask;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private Object readResolve = _hashMask;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private Object readResolve) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private Object readResolve) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_NAME;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_NAME;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private Object readResolve = code;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private Object readResolve = code;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private Object readResolve = DEFAULT_LOCALE;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private Object readResolve = DEFAULT_LOCALE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private Object readResolve;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private Object readResolve;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private Object readResolve = end;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private Object readResolve = end;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private Object readResolve = args;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private Object readResolve = args;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private Object readResolve = this.keys;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private Object readResolve = this.keys;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private Object readResolve = this.readOnly;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private Object readResolve = this.readOnly;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private Object readResolve = _hashArea;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private Object readResolve = _hashArea;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private Object readResolve = _inputStream;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private Object readResolve = _inputStream;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private Object readResolve = int.hashMask;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private Object readResolve = int.hashMask;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private Object readResolve = _readContext;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private Object readResolve = _readContext;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STRICT_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private Object readResolve = this.readGeneric;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private Object readResolve = this.readGeneric;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_KEY;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_KEY;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIME_AND_EMBEDDED_KEY;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIME_AND_EMBEDDED_KEY;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private Object readResolve = this.readBytes;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private Object readResolve = this.readBytes;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private Object readResolve = DEFAULT_TIMEZONE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private Object readResolve = DEFAULT_TIMEZONE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private Object readResolve = DEFAULT_TIMEZONE_AND_EMBEDDED_KEY;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private Object readResolve = DEFAULT_TIMEZONE_AND_EMBEDDED_KEY;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private Object readResolve = args.readResolve;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private Object readResolve = args.readResolve;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private Object readResolve =wcalculated;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private Object readResolve =wcalculated;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private Object readResolve = this.request;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private Object readResolve = this.request;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIMEZONE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIMEZONE;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private Object readResolve = message;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private Object readResolve = message;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_NAME_PATTERN;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_NAME_PATTERN;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private Object readResolve = array;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private Object readResolve = array;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_RESPONSE;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_RESPONSE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIME_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIME_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_TIMEZONE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_TIMEZONE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private Object readResolve = DEFAULT_TIMEZONE_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private Object readResolve = DEFAULT_TIMEZONE_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private Object readResolve = connector;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private Object readResolve = connector;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private Object readResolve = commitHashCode;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private Object readResolve = commitHashCode;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private Object readResolve = DEFAULT_DELIMITER;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private Object readResolve = DEFAULT_DELIMITER;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private Object readResolve = this.readContext;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private Object readResolve = this.readContext;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private Object readResolve = DEFAULT_LOOP_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private Object readResolve = DEFAULT_LOOP_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STRICT_RESERVED_WORD ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STRICT_RESERVED_WORD ) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STYLE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STYLE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private Object readResolve = this.hashMask;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private Object readResolve = this.hashMask;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIME_AND_EMBEDDED_DELIMITER;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIME_AND_EMBEDDED_DELIMITER;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_NUMBER;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_NUMBER;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STRICT_RESERVED_TIMEZONE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private Object readResolve = DEFAULT_LOCALENDAR_STRICT_RESERVED_TIMEZONE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private Object readResolve = template;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private Object readResolve = template;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private Object readResolve = getResult;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private Object readResolve = getResult;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private Object readResolve = args[0];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private Object readResolve = args[0];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIME_AND_EMBEDDED_RESPONSE;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private Object readResolve = DEFAULT_RESOLVER_TIME_AND_EMBEDDED_RESPONSE;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private Object readResolve = readResolve;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private Object readResolve = readResolve;",
                "identical": false
            }
        ],
        "buggy_line": "private Object readResolve() {",
        "fixed_line": "protected Object readResolve() {"
    },
    "Lang-59": {
        "fixes": [
            {
                "k": 1,
                "patch": "str.getChars(0, width, strLen);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "str.getChars(0, width, strLen);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "str.getChars(0, width, bufferLen);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "str.getChars(0, width, bufferLen);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "str.getChars(0, width, strLen, padChar);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "str.getChars(0, width, strLen, padChar);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "str.getChars(0, width, strLen) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "str.getChars(0, width, strLen) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "str.getChars(0, width, len);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "str.getChars(0, width, len);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "str.getChars(0, width, padChar);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "str.getChars(0, width, padChar);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "str.getChars(0, width, strLen;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "str.getChars(0, width, strLen;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "str.getChars(0, width, strLen - padChar;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "str.getChars(0, width, strLen - padChar;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "str.getChars(0, width, strLen, padLen);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "str.getChars(0, width, strLen, padLen);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "str.getChars(0, width, height);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "str.getChars(0, width, height);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "str.getChars(0, width, strLen+1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "str.getChars(0, width, strLen+1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "str.getChars(0, width, buffer, size);",
                "identical": true
            },
            {
                "k": 24,
                "patch": "str.getChars(0, width, buffer, size);",
                "identical": true
            },
            {
                "k": 25,
                "patch": "str.getChars(0, len, strLen, padChar);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "str.getChars(0, len, strLen, padChar);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "str.getChars(0, width, bufferLen;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "str.getChars(0, width, bufferLen;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "str.getChars(0, width, len - strLen;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "str.getChars(0, width, len - strLen;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "str.getChars(0, width, size);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "str.getChars(0, width, size);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "str.getChars(0, width, strLen == padChar;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "str.getChars(0, width, strLen == padChar;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "str.getChars(0, width, strLen - strLen;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "str.getChars(0, width, strLen - strLen;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "str.getChars(0, len, strLen, width);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "str.getChars(0, len, strLen, width);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "str.getChars(0, width, strLen + strLen;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "str.getChars(0, width, strLen + strLen;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "str.getChars(0, width, bufferLen, strLen);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "str.getChars(0, width, bufferLen, strLen);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "str.getChars(0, width, strLen - padLen;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "str.getChars(0, width, strLen - padLen;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "str.getChars(0, width, strLen, width);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "str.getChars(0, width, strLen, width);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "str.getChars(0, width, strLen, len);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "str.getChars(0, width, strLen, len);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "str.getChars(0, width, padChar;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "str.getChars(0, width, padChar;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "str.getChars(0, len, buffer, size);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "str.getChars(0, len, buffer, size);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "str.getChars(0, width, strLen, padChar;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "str.getChars(0, width, strLen, padChar;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "str.getChars(0, width, bufferLen - strLen;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "str.getChars(0, width, bufferLen - strLen;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "str.getChars(0, width, bufferLen, size);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "str.getChars(0, width, bufferLen, size);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "str.getChars(0, width, padChar, strLen);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "str.getChars(0, width, padChar, strLen);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "str.getChars(0, width, strLen};",
                "identical": false
            },
            {
                "k": 62,
                "patch": "str.getChars(0, width, strLen};",
                "identical": false
            },
            {
                "k": 63,
                "patch": "str.getChars(0, width, bufferLen == padChar;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "str.getChars(0, width, bufferLen == padChar;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "str.getChars(0, width, bufferLen + strLen;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "str.getChars(0, width, bufferLen + strLen;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "str.getChars(0, len, strLen);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "str.getChars(0, len, strLen);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "str.getChars(0, width, padChar + strLen;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "str.getChars(0, width, padChar + strLen;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "str.getChars(0, len, buffer, strLen);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "str.getChars(0, len, buffer, strLen);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "str.getChars(0, len, strLen, size);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "str.getChars(0, len, strLen, size);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "str.getChars(0, width, length);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "str.getChars(0, width, length);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "str.getChars(0, width, strLen + width;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "str.getChars(0, width, strLen + width;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "str.getChars(0, width, strLen + size;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "str.getChars(0, width, strLen + size;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "str.getChars(0, width, strLen, size);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "str.getChars(0, width, strLen, size);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "str.getChars(0, width, strLen-1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "str.getChars(0, width, strLen-1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "str.getChars(0, width, bufferLen+1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "str.getChars(0, width, bufferLen+1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "str.getChars(0, width, strLen_, size);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "str.getChars(0, width, strLen_, size);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "str.getChars(0, width, buffer, strLen);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "str.getChars(0, width, buffer, strLen);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "str.getChars(0, width, strLen + len;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "str.getChars(0, width, strLen + len;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "str.getChars(0, width, bufferLen, padChar);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "str.getChars(0, width, bufferLen, padChar);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "str.getChars(0, width, padChar) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "str.getChars(0, width, padChar) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "str.getChars(0, width, tableLen);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "str.getChars(0, width, tableLen);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "str.getChars(0, width, strLen - 1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "str.getChars(0, width, strLen - 1) {",
                "identical": false
            }
        ],
        "buggy_line": "str.getChars(0, strLen, buffer, size);",
        "fixed_line": "str.getChars(0, width, buffer, size);"
    },
    "Closure-114": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (right == newDepScope) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (right == newDepScope) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (right == rhs) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (right == rhs) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (namespaceURI) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (namespaceURI) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (isDirected) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (isDirected) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (isMIDDLE) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (isMIDDLE) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (isFunction) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (isFunction) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (nameNext.length == 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (nameNext.length == 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (namespace == newDepScope) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (namespace == newDepScope) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (nameNode == newDepScope) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (nameNode == newDepScope) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (n == rhs) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (n == rhs) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (IMDepScope) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (IMDepScope) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (isMoving) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (isMoving) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (namespace == null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (namespace == null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (isMainQuery) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (isMainQuery) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (isObs) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (isObs) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (ns instanceof rhs) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (ns instanceof rhs) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (noOfPlayers == 2) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (noOfPlayers == 2) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (replaced) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (replaced) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (right == length) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (right == length) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (nameNext.length == 1) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (nameNext.length == 1) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (isVisible) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (isVisible) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (isActive) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (isActive) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (implicits) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (implicits) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (_forSerialization) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (_forSerialization) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (isOfChild) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (isOfChild) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (collect) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (collect) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (modifiers) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (modifiers) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (namespace == rhs) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (namespace == rhs) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (isLocal) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (isLocal) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (negated) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (negated) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (evt) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (evt) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (ns.length == MAX_BUF) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (ns.length == MAX_BUF) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (newState == length) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (newState == length) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (isRequired) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (isRequired) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (nameNode == h) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (nameNode == h) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (isOfChildCount) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (isOfChildCount) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (isOfChildCount == 2) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (isOfChildCount == 2) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (isWrapper) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (isWrapper) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (implicit) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (implicit) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (ns.length == MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (ns.length == MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (skip) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (skip) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (skipNulls) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (skipNulls) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (isHigh) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (isHigh) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (ns.length == 1) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (ns.length == 1) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (cyannotatedNode == h) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (cyannotatedNode == h) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (newState == rhs) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (newState == rhs) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (noOfPlayers == 3) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (noOfPlayers == 3) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (nameNode.length == 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (nameNode.length == 0) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (ns.length == 2) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (ns.length == 2) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (nameNode.length) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (nameNode.length) {",
                "identical": false
            }
        ],
        "buggy_line": "} else {",
        "fixed_line": "} else if (!(parent.isCall() && parent.getFirstChild() == n)) {"
    },
    "Codec-3": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (Factory.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (Factory.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (contains(value, index + 1, 3, \"IER\")) {",
                "identical": true
            },
            {
                "k": 8,
                "patch": "} else if (contains(value, index + 1, 3, \"IER\")) {",
                "identical": true
            },
            {
                "k": 9,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (index > 0 && value, 0, \"IER\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (index > 0 && value, 0, \"IER\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (result.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (result.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (found.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (found.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (allowingSelfLoops && value, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (allowingSelfLoops && value, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (ctx.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (ctx.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (map.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (map.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (trimmedCssValue, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (trimmedCssValue, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (containsKey(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (containsKey(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (flushStyle.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (flushStyle.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (finalSql.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (finalSql.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (depth == 1 && value, index, \"IER\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (depth == 1 && value, index, \"IER\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (trimmedCssValue, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (trimmedCssValue, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (contains(value, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (contains(value, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (Factory.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (Factory.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (Event.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (Event.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (color.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (color.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (finalSql.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (finalSql.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (contains(value, index + 1, 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (contains(value, index + 1, 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (path.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (path.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (Factory.contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (Factory.contains(value, index + 1, 2, \"IER\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (sss.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (sss.contains(value, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (Event.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (Event.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (trimmedCssValue, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (trimmedCssValue, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (result.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (result.contains(value, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (type, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (type, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (insideNode, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (insideNode, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (containsKey, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (containsKey, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (f, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (f, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (languageSpecificPrimitives.contains(value, index + 1, 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (insideNode, index + 1, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (insideNode, index + 1, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (value, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (value, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (PREDEFINED_CONSTANTS.contains(index, index + 1, 3, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (depth == 1 && value, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (depth == 1 && value, index + 1, \"IER\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (contains(value, index + 1, 4, \"IER\" + 1) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (flushAttribute, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (flushAttribute, index + 1, 4, \"IER\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (index > 0 && value, 0, \"IER\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (index > 0 && value, 0, \"IER\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (depth == 1 && value, 0, \"IER\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (depth == 1 && value, 0, \"IER\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (url, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (url, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (type, index + 1, 3, \"IER\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (type, index + 1, 3, \"IER\")) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (contains(value, index + 1, 4, \"IER\")) {",
        "fixed_line": "} else if (contains(value, index + 1, 3, \"IER\")) {"
    },
    "Csv-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (c < '0' || c > '9') && c > '9' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (c < '0' || c > '9') && c > '9' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (c < '0' || c > '9') && c > '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (c < '0' || c > '9') && c > '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (c < '0' || c > '9') && c > '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (c < '0' || c > '9') && c > '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (c < '0' || c > '9' || c > '9') && c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (c < '0' || c > '9' || c > '9') && c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c > 'z')) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (c < '0' || c > '9') && (c < 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (c < '0' || c > '9') && (c < 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (c < '0' || c > '9') && (c < 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (c < '0' || c > '9') && (c < 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (c < '0' || c > '9') && (c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (c < '0' || c > '9') && (c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c > 'z') {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (c < '0' || c > '9') && (c < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (c < '0' || c > '9') && (c < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (c < '0' || c > '9 || c > '9') && c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (c < '0' || c > '9 || c > '9') && c < 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (c >= '0' && c <= '9' || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (c < '0' || c > '9') && c > '9' || c == 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (c < '0' || c > '9') && c > '9' || c == 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (c < '0' || c > '9') && (c < 'A' || c > 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (c < '0' || c > '9') && (c < 'A' || c > 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (c < '0' || c > '9') && c <= '9' || c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (c < '0' || c > '9') && c > '9' || c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (c < '0' || c > '9') && c > '9' || c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (c < '0' || c > '9') && c > '9' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (c < '0' || c > '9') && c > '9' || c == 'A' || c == 'Z') {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (c < '0' || c > '9') && c > '9' || c == 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (c < '0' || c > '9') && c > '9' || c == 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (c < '0' || c > '9 || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (c < '0' || c > '9 || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (c < '0' || c > '9' || c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z' || c == 'a' || c == 'z' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z' || c == 'a' || c == 'z' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (c < '0' || c > '9' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (c < '0' || c > '9' || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (c < '0' || (c >= '0' && c <= '9') || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (c < '0' || (c >= '0' && c <= '9') || c > 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z' || c == 'z') {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (c < '0' || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z' || c == 'z') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (c < '0' || c > '9' || c > 'A' || c > 'Z' || c > 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (c < '0' || c > '9 || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (c < '0' || c > '9 || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (c < '0' || c > '9') && c > '9') || c == 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (c < '0' || c > '9') && c > '9') || c == 'A' || c == 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (c < '0' || c > '9 || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (c < '0' || c > '9 || c > '9') && c < 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (c < '0' || c > '9 || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (c < '0' || c > '9 || c > '9') && c < 'A' || c > 'Z' || c > 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (c < '0' || c > '9') && c > 'A' || c > 'Z') {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (c < '0' || c > '9') && c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (c < '0' || c > '9') && c > '9' || c > 'A' || c > 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (c < '0' || c > '9') && c > '9') || c == 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (c < '0' || c > '9') && c > '9') || c == 'A' || c == 'Z' || c == 'a' || c == 'z') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (c < '0' || c > '9') && i < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (c < '0' || c > '9') && i < 'A' || c > 'Z' || c == 'a' || c == 'z')) {",
                "identical": false
            }
        ],
        "buggy_line": "if (newRecord && (c < '0' || c > '9' && c < 'A' || c > 'Z' && c < 'a' || c > 'z')) {",
        "fixed_line": "if (newRecord && (c < 0x20 || c > 0x21 && c < 0x23 || c > 0x2B && c < 0x2D || c > 0x7E)) {"
    },
    "JacksonCore-8": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (_hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (_hasSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (_hasSegments;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (_hasSegments;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (_hasSegments) return _segment;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (_hasSegments) return _segment;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (_hasSegments) return JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (_hasSegments) return JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (_hasSegments) return JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (_hasSegments) return JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (_hasSegmentsExplicitlySet) return _currentSegment;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (_hasSegmentsExplicitlySet) return _currentSegment;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (_hasSegmentsToWrite) return _currentSegment;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (_hasSegmentsToWrite) return _currentSegment;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (_closed) return _currentSegment;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (_closed) return _currentSegment;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (_hasSegments) return NO_hasSegments;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (_hasSegments) return NO_hasSegments;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (_hasSegments) return JsonToken.START_ARRAY;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (_hasSegments) return JsonToken.START_ARRAY;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (_hasSegments) return JsonToken.VALUE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (_hasSegments == null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (_hasSegments == null) return _currentSegment;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (_hasSegments) return _segmentId;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (_hasSegments) return _segmentId;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (_hasSegments) return JsonToken.NOT_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (_hasSegments) return JsonToken.NOT_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (_hasSegmentsWithArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (_hasSegmentsWithArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (_hasSegmentsFlush) return _currentSegment;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (_hasSegmentsFlush) return _currentSegment;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (_hasSegments) return STATE_hasSegments;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_hasSegments) return STATE_hasSegments;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (_hasSegmentsContentString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (_hasSegmentsContentString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (_hasSegmentsCreator) return _currentSegment;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (_hasSegmentsCreator) return _currentSegment;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (_hasSegments) return _segmentBytes;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (_hasSegments) return _segmentBytes;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (_hasSegmentsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (_hasSegmentsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (_closed) return _segment;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (_closed) return _segment;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (_hasSegmentsString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (_hasSegmentsString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (_hasSegmentsToChange) return _currentSegment;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (_hasSegmentsToChange) return _currentSegment;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (_hasSegments.length) return _currentSegment;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (_hasSegments.length) return _currentSegment;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (_hasSegments) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (_hasSegments) return _currentSegment.length;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (_hasSegmentsForString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (_hasSegmentsForString) return _currentSegment;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (_tokenIncomplete) return _currentSegment;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (_tokenIncomplete) return _currentSegment;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (_hasSegments) return JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (_hasSegments) return JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (_hasSegments+1) return _currentSegment;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (_hasSegments+1) return _currentSegment;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (_hasSegments) return _segmentCount;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (_hasSegments) return _segmentCount;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (_forSerialization) return _currentSegment;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (_forSerialization) return _currentSegment;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (_hasSegments) return _segmentString;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (_hasSegments) return _segmentString;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (_hasSegments) return JsonToken.NOT_AVAILABLE;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (_hasSegments) return JsonToken.NOT_AVAILABLE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (_completedAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (_completedAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (_hasSegments. return _currentSegment;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (_hasSegments. return _currentSegment;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (_hasSegmentsSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (_hasSegmentsSegments) return _currentSegment;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (_hasAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (_hasAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (_hasSegments '/') return _currentSegment;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (_hasSegments '/') return _currentSegment;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (_hasSegments) return NO_CHARS;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (_hasSegments) return NO_CHARS;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (_hasSegments) return JsonToken.NOT_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (_hasSegments) return JsonToken.NOT_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (_hasSegmentsField) return _currentSegment;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (_hasSegmentsField) return _currentSegment;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (_hasSegments) return _currentSegment.DEFAULT_hasSegments;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (_hasSegments) return _currentSegment.DEFAULT_hasSegments;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (_hasSegments) return JsonToken.VALUE_hasSegments;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (_hasSegments) return JsonToken.VALUE_hasSegments;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (_hasSegments) return JsonToken.NOT_FEATURE_USE_HEADER;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (_hasSegments) return JsonToken.NOT_FEATURE_USE_HEADER;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (_hasSegments) return _currentSize;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (_hasSegments) return _currentSize;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (_hasSegments) return _segmentPtr;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (_hasSegments) return _segmentPtr;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (_wrapAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (_wrapAsArray) return _currentSegment;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (_hasSegmentsExplicit) return _currentSegment;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (_hasSegmentsExplicit) return _currentSegment;",
                "identical": false
            }
        ],
        "buggy_line": "if (!_hasSegments)  return _currentSegment;",
        "fixed_line": "if (!_hasSegments && _currentSegment != null)  return _currentSegment;"
    },
    "Chart-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dataset = dataset;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dataset = dataset;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dataset =Dataset;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dataset =Dataset;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dataset =dataset;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dataset =dataset;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dataset = coordinator;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dataset = coordinator;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dataset = 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dataset = 0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dataset = X_;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dataset = X_;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dataset = newPie;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dataset = newPie;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dataset = X_QUOTED_COLUMN;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dataset = X_QUOTED_COLUMN;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dataset = X_IN_COLUMN;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dataset = X_IN_COLUMN;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dataset = trimmed;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dataset = trimmed;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dataset = X_ELEVATION_COLUMN;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dataset = X_ELEVATION_COLUMN;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dataset = X_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dataset = X_TIME_COLUMN;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dataset = 0.0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dataset = 0.0;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dataset = client;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dataset = client;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dataset = previous;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dataset = previous;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dataset = cluster;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dataset = cluster;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dataset = X_FEATURE_USE_HEADER;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dataset = X_FEATURE_USE_HEADER;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dataset = failure;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dataset = failure;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dataset = X_COLUMN;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dataset = X_COLUMN;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dataset = viewType;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dataset = viewType;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dataset = X_OTED_COLUMN;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dataset = X_OTED_COLUMN;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dataset = columnNames;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dataset = columnNames;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dataset = X_, dataset;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dataset = X_, dataset;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dataset = X_SPLIT_COLUMN;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dataset = X_SPLIT_COLUMN;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dataset = X_OCIATION_COLUMN;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dataset = X_OCIATION_COLUMN;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dataset = string;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dataset = string;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dataset = X_GEOCODING_COLUMN;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dataset = X_GEOCODING_COLUMN;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dataset = Client;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dataset = Client;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dataset = X;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dataset = X;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dataset = dataset; // NOSONAR",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dataset = dataset; // NOSONAR",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dataset = advanced;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dataset = advanced;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dataset = urls;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dataset = urls;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dataset = selection;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dataset = selection;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dataset = X_IN_SPAN_COLUMN;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dataset = X_IN_SPAN_COLUMN;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dataset = X_IGOTED_COLUMN;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dataset = X_IGOTED_COLUMN;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dataset = X_BOUNDARY_COLUMN;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dataset = X_BOUNDARY_COLUMN;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dataset = Move;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dataset = Move;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dataset = decode;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dataset = decode;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dataset = X_INLINE_COLUMN;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dataset = X_INLINE_COLUMN;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dataset =Word;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dataset =Word;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dataset = X_NOT_IN_COLUMN;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dataset = X_NOT_IN_COLUMN;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dataset = restriction;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dataset = restriction;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dataset = rect;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dataset = rect;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dataset = X_CATCH_COLUMN;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dataset = X_CATCH_COLUMN;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dataset = X_OOM_COLUMN;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dataset = X_OOM_COLUMN;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dataset = ring;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dataset = ring;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dataset =info;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dataset =info;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dataset = X_CLAVE_COLUMN;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dataset = X_CLAVE_COLUMN;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dataset = X_SPAN_COLUMN;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dataset = X_SPAN_COLUMN;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dataset = orig;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dataset = orig;",
                "identical": false
            }
        ],
        "buggy_line": "this.dataset = dataset;",
        "fixed_line": "setDataset(dataset);"
    },
    "Jsoup-45": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastFlow) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastFlow) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !last;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastFormat) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastFormat) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastFlow) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastFlow) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndex;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndex;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastat",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastat",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastFormat {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastFormat {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastLine) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastLine) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastJob) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastJob) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastock\".equals(name) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastock\".equals(name) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndexOf;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndexOf;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (\"td\".equals(nodeName) && \"td\".equals(name) && !last)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (\"td\".equals(nodeName) && \"td\".equals(name) && !last)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastelevation) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastelevation) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndex) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndex) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last ==;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last ==;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last == o;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last == o;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastNode) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastNode) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(collectionFormat)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(collectionFormat)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(collectionFormat);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(collectionFormat);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIND\".equals(name) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIND\".equals(name) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastlast)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastlast)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastCollections {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastCollections {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last \"&last)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last \"&last)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndex;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndex;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last == null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last == null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastBOTTOM) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastBOTTOM) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastBounds;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastBounds;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastelev) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastelev) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastFormat {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastFormat {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastSpace) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastSpace) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastat",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastat",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastelevation;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastelevation;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last ==minute) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !last ==minute) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastFormat) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastFormat) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndex) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndex) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndex){",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndex){",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndexOf;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastIndexOf;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndexOf('/');",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastIndexOf('/');",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(operand)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(operand)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastcc;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(name) && !lastcc;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastCollections {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (\"td\".equals(name) && \"td\".equals(nodeName) && !lastCollections {",
                "identical": false
            }
        ],
        "buggy_line": "} else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {",
        "fixed_line": "} else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) {"
    },
    "Closure-14": {
        "fixes": [
            {
                "k": 1,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "cfa.createEdge(leNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "cfa.createEdge(leNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "cfa.createEdge( usedNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "cfa.createEdge( usedNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "cfa.createEdge(names, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "cfa.createEdge(names, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "cfa.createEdge(NULL, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "cfa.createEdge(NULL, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "cfa.createEdge(node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "cfa.createEdge(node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "cfa.createEdge(resourceNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "cfa.createEdge(resourceNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "cfa.createEdge(itemsNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "cfa.createEdge(itemsNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "cfa.createEdge(NULLNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "cfa.createEdge(NULLNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "cfa.createEdge( node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "cfa.createEdge( node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "cfa.createEdge(staticNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "cfa.createEdge(staticNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "cfa.createEdge(SOCKETNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "cfa.createEdge(SOCKETNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cfa.createEdge(fromNode, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "cfa.createEdge(fromNode, finallyNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "cfa.createEdge(leakNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "cfa.createEdge(leakNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "cfa.createEdge(response, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cfa.createEdge(response, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "cfa.createEdge(DataStoreNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "cfa.createEdge(DataStoreNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "cfa.createEdge(invertNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "cfa.createEdge(invertNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "cfa.createEdge(items, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cfa.createEdge(items, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "cfa.createEdge(currentNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "cfa.createEdge(currentNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "cfa.createEdge(SerNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "cfa.createEdge(SerNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "cfa.createEdge(runNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "cfa.createEdge(runNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "cfa.createEdge(MethodNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "cfa.createEdge(MethodNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "cfa.createEdge(RestrictionsNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "cfa.createEdge(RestrictionsNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "cfa.createEdge(Accumulator, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "cfa.createEdge(Accumulator, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "cfa.createEdge( refNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "cfa.createEdge( refNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "cfa.createEdge( replaceNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "cfa.createEdge( replaceNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "cfa.createEdge(s, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cfa.createEdge(s, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "cfa.createEdge(leNode, b.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "cfa.createEdge(leNode, b.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "cfa.createEdge( doubleNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "cfa.createEdge( doubleNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "cfa.createEdge(containerNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "cfa.createEdge(containerNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "cfa.createEdge(elementNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "cfa.createEdge(elementNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "cfa.createEdge(serveNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cfa.createEdge(serveNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "cfa.createEdge(abstractNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "cfa.createEdge(abstractNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "cfa.createEdge(subclass, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "cfa.createEdge(subclass, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "cfa.createEdge(leNode, b, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "cfa.createEdge(leNode, b, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "cfa.createEdge(addedNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "cfa.createEdge(addedNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "cfa.createEdge(xorNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "cfa.createEdge(xorNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "cfa.createEdge(OMNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "cfa.createEdge(OMNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cfa.createEdge(ConceptNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "cfa.createEdge(ConceptNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "cfa.createEdge(moduleNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "cfa.createEdge(moduleNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "cfa.createEdge((\"{Node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "cfa.createEdge((\"{Node, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cfa.createEdge(izedNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "cfa.createEdge(izedNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "cfa.createEdge( getFontNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "cfa.createEdge( getFontNode, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "cfa.createEdge(leName, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "cfa.createEdge(leName, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "cfa.createEdge( \"), Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "cfa.createEdge( \"), Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "cfa.createEdge(Drawa, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "cfa.createEdge(Drawa, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "cfa.createEdge(edge, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "cfa.createEdge(edge, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "cfa.createEdge(Method, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "cfa.createEdge(Method, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "cfa.createEdge(ch, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "cfa.createEdge(ch, Branch.UNCOND, finallyNode);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode instanceof finallyNode);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode instanceof finallyNode);",
                "identical": false
            }
        ],
        "buggy_line": "cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);",
        "fixed_line": "cfa.createEdge(fromNode, Branch.ON_EX, finallyNode);"
    },
    "Jsoup-41": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this == element;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return this == element;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return this == o.element;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return this == o.element;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return element == o;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return element == o;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return this == o;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return this == o;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return element == o.this.element;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return element == o.this.element;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return element == o.element;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return element == o.element;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return element == o.this;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return element == o.this;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return element == o.value;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return element == o.value;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return element == o.super;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return element == o.super;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this == o.value;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return this == o.value;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return element == o.PARENT;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return element == o.PARENT;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return this == o. element;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return this == o. element;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return element == o.type;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return element == o.type;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return this == o.this.element;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return this == o.this.element;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return element == o.key;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return element == o.key;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return other.element == o;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return other.element == o;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return element == o.this. element;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return element == o.this. element;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return element == o.this.type;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return element == o.this.type;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return element == o.ToValue;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return element == o.ToValue;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return element == o.this.value;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return element == o.this.value;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return element == o.this.o;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return element == o.this.o;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return element == o.export;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return element == o.export;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return element == o.ToStart;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return element == o.ToStart;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return this == o.type;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return this == o.type;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return element == o.enced;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return element == o.enced;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return element == o.this.key;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return element == o.this.key;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return element == o.Offset;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return element == o.Offset;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return element == o.session;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return element == o.session;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return this == other.element;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return this == other.element;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return element == o.child;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return element == o.child;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return element == o.is;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return element == o.is;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return this == o.super;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return this == o.super;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return this == o.mode;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return this == o.mode;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return element == o.ToWrite;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return element == o.ToWrite;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return element == o.this);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return element == o.this);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return element == o.parent;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return element == o.parent;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return element == o.ignoreCase;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return element == o.ignoreCase;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return element == o.class;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return element == o.class;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return element == o.event;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return element == o.event;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return element == o.base;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return element == o.base;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return this == o.key;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return this == o.key;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return element == o.this.hashCode;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return element == o.this.hashCode;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return element == o.channel;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return element == o.channel;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return this == o.parent;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return this == o.parent;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return other.this == o;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return other.this == o;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return element == o.this.super;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return element == o.this.super;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return element == o.column;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return element == o.column;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return element == o.end;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return element == o.end;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return element == o.text;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return element == o.text;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return this == o.PARENT;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return this == o.PARENT;",
                "identical": false
            }
        ],
        "buggy_line": "return this == o;",
        "fixed_line": "return tag.equals(element.tag);"
    },
    "Jsoup-15": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"noframes\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"noframes\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"noframes\", \"title\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"noframes\", \"title\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"category\", \"title\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"category\", \"title\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + delegate\", \"title\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + delegate\", \"title\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + properties;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + properties;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"bgs\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"bgs\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \" '\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \" '\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"category\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"category\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"ms\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"ms\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"select\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"select\", \"link\", \" parent\", \"title\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"select\", \"link\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"select\", \"link\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"n\", \"title\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"n\", \"title\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"or\", \"title\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"or\", \"title\")) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" parent\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" parent\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \" map\", \"title\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" parent\", \" map\", \"title\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + delegate\", \"title\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + delegate\", \"title\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + username) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + username) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" longitude\", \"title\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" longitude\", \"title\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \"category\", \"title\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \"category\", \"title\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + tb;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + tb;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" map\", \"title\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" map\", \"title\")) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\")) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + MUST_NOT_CONTAIN_NULL_ELEMENT\", \"title\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \"noframes\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \"noframes\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"select\", \"link\", \" parent\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"select\", \"link\", \" parent\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \" parent\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \" parent\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"bgs\", \"link\", \"noframes\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"bgs\", \"link\", \"noframes\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"ELEMENT\", \"title\")) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"ELEMENT\", \"title\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs\", \"bgsound\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs\", \"bgsound\", \"link\", \" + html;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"bgs\", \"link\", \" parent\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"bgs\", \"link\", \" parent\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"Magic\", \"title\")) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"Magic\", \"title\")) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \"n\", \"title\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgs84\", \"bgsound\", \"link\", \"n\", \"title\")) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + server + \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" + server + \"noframes\", \"title\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"bgs\", \"link\", \"n\", \"title\")) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"bgs\", \"link\", \"n\", \"title\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"Magic\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \"Magic\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" longitude\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"command\", \"link\", \" longitude\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + properties;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"link\", \"link\", \" + properties;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"bgs\", \"link\", \"n\", \"title\", \"title\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (StringUtil.in(name, \"base\", \"bgsound\", \"bgs\", \"link\", \"n\", \"title\", \"title\")) {",
                "identical": false
            }
        ],
        "buggy_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"style\", \"title\")) {",
        "fixed_line": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
    },
    "JacksonDatabind-27": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, creatorProp);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, creatorProp);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer, creatorProp);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer, creatorProp);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean, propName);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean, propName);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_OBJECT, creatorProp);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_OBJECT, creatorProp);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, propName);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, propName);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, buffer);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, buffer);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, _objectIdReader);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, _objectIdReader);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _objectIdReader);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _objectIdReader);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, ctxt, creatorProp);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, ctxt, creatorProp);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer, _objectIdReader);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer, _objectIdReader);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_OBJECT, propName);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_OBJECT, propName);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, bean, propName);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, bean, propName);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,creatorProp);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,creatorProp);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, updatable, creatorProp);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, updatable, creatorProp);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, buffer, creatorProp);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, buffer, creatorProp);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,_.length == 3);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,_.length == 3);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, dataLength);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, dataLength);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,'', creatorProp);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,'', creatorProp);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, creatorProp, creatorProp);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, creatorProp, creatorProp);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, bean);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_ARRAY, creatorProp);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, JsonToken.END_ARRAY, creatorProp);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer, propName);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, buffer, propName);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, sides);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, sides);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, ctxt, _objectIdReader);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, ctxt, _objectIdReader);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _propName, creatorProp);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, _propName, creatorProp);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, null)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, null)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp == propName, creatorProp);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp == propName, creatorProp);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, bean)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, bean)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, creatorProp, propName);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (_ext.handlePropertyValue(p, ctxt, propName, creatorProp, propName);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, session, propName);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, session, propName);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp == propName, _objectIdReader);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp == propName, _objectIdReader);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, ctxt);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, ctxt);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, dataLength - _objectIdReader);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, dataLength - _objectIdReader);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, maxLength, creatorProp);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, maxLength, creatorProp);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,_.length == 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,_.length == 1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, editorProp);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, editorProp);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, property, propName);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, property, propName);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean - 1, propName);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, bean - 1, propName);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (_annotationIntrospector.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (_annotationIntrospector.handlePropertyValue(p, ctxt, propName, creatorProp);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, _objectCodec);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, _objectCodec);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp,arg);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp,arg);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, status, creatorProp);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, status, creatorProp);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,sentence);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName,sentence);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, _accessorpowers);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (buffer.handlePropertyValue(p, ctxt, propName, creatorProp, _accessorpowers);",
                "identical": false
            }
        ],
        "buggy_line": "if (ext.handlePropertyValue(p, ctxt, propName, buffer)) {",
        "fixed_line": "if (ext.handlePropertyValue(p, ctxt, propName, null)) {"
    },
    "Csv-12": {
        "fixes": [
            {
                "k": 1,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RECEL;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RECEL;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALE.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALE.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_LIBRARY);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_LIBRARY);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_persistent.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_persistent.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "public static final CSVFormat EXCEL = doc.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "public static final CSVFormat EXCEL = doc.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_INSTANT_NAME_PREFIX.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_INSTANT_NAME_PREFIX.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RE removeListener;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_RE removeListener;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_IN_PROGRESS_KEY.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_IN_PROGRESS_KEY.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_syntax.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_syntax.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_IN_LIST.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_IN_LIST.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALENDAR_NAME_PREFIX;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALENDAR_NAME_PREFIX;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_FEATURE_SKIP_FIRST_DATA_ROW;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_FEATURE_SKIP_FIRST_DATA_ROW;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALENDAR_NAME_PREFIX.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_LOCALENDAR_NAME_PREFIX.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_LOCALE);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_LOCALE);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ removeListener.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ removeListener.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_ARRAY);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_ARRAY);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_NODE_TYPE_FUNCTION.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_NODE_TYPE_FUNCTION.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_CANCEL_IN_PROGRESS_KEY.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_CANCEL_IN_PROGRESS_KEY.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_MUST_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_MUST_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_INSTANT_NAME_PREFIX.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_INSTANT_NAME_PREFIX.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_COLUMN_INDEX);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_COLUMN_INDEX);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE[withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE[withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_VALUE_IN_PROGRESS_KEY.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_VALUE_IN_PROGRESS_KEY.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_unsigned);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_unsigned);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_FEATURE_SKIP_FIRST_DATA_ROW);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_FEATURE_SKIP_FIRST_DATA_ROW);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_LOCALE);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_LOCALE);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_COLUMN_INDEX);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_COLUMN_INDEX);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_CANCEL_IN_PROGRESS_KEY.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_CANCEL_IN_PROGRESS_KEY.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_IN_LOCATION.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_IN_LOCATION.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmpty(DEFAULT);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKIP_EXTRA_COLUMNS.withIgnoreEmpty(DEFAULT);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ALLOW_LOCALE.withIgnoreEmptyLines(persistent);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_IN_LIST.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_ARRAY_IN_LIST.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_VALUE_IN_PROGRESS_KEY.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_VALUE_IN_PROGRESS_KEY.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public static final CSVFormat EXCEL = order.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public static final CSVFormat EXCEL = order.withIgnoreEmptyLines;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_MSSQL.withIgnoreEmptyLines(DEFAULT_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_MUST_NOT_BE_EMPTY);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_MUST_NOT_BE_EMPTY);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_MULATION_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "public static final CSVFormat EXCEL = format.withIgnoreEmptyLines(DEFAULT_MULATION_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKCEL;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_SKCEL;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_IN_PROGRESS_KEY.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "public static final CSVFormat EXCEL = DEFAULT_IN_PROGRESS_KEY.withIgnoreEmptyLines(DEFAULT);",
                "identical": false
            }
        ],
        "buggy_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);",
        "fixed_line": "public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames(true);"
    },
    "JacksonDatabind-70": {
        "fixes": [
            {
                "k": 1,
                "patch": "found = key.equals(prop)];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "found = key.equals(prop)];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "found = key.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "found = key.equals(prop.getName());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "found = key;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "found = key;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "found = key.equals(prop);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "found = key.equals(prop);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "found = key.equals(prop.getName;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "found = key.equals(prop.getName;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'Success not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 16,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'Success not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 17,
                "patch": "found = key.equals(propName;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "found = key.equals(propName;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "found = prop.equals(prop)];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "found = prop.equals(prop)];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "found = key.equals(prop)]; // nope, not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 22,
                "patch": "found = key.equals(prop)]; // nope, not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'Success not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 24,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'Success not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 25,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare's not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare's not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 27,
                "patch": "found = key.equals(propValue.getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "found = key.equals(propValue.getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "found = key.equals(prop)]*_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "found = key.equals(prop)]*_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'any-of-Success not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'any-of-Success not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 33,
                "patch": "found = key.equals(propType.getName());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "found = key.equals(propType.getName());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "found = indent.equals(prop)];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "found = indent.equals(prop)];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "found = key.equals(propName);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "found = key.equals(propName);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'any-of-Success not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'any-of-Success not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "found = key.equals(prop)]; // nope, must be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 42,
                "patch": "found = key.equals(prop)]; // nope, must be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 43,
                "patch": "found = key.equals(prop._key;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "found = key.equals(prop._key;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "found = key.equals(prop.getName);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "found = key.equals(prop.getName);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 48,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 49,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 50,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare's not be assigned. Also declare the methods parameters as 'raw' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "found = key.equals(prop.getNamegetName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "found = key.equals(prop.getNamegetName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare' bytes",
                "identical": false
            },
            {
                "k": 54,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare' bytes",
                "identical": false
            },
            {
                "k": 55,
                "patch": "found = key.equals(prop)]*_REDIS_SENTINEL;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "found = key.equals(prop)]*_REDIS_SENTINEL;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 58,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the parameters as 'final'.",
                "identical": false
            },
            {
                "k": 59,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but also check the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 60,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but also check the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 61,
                "patch": "found = prop.equals(key.getName());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "found = prop.equals(key.getName());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'final')",
                "identical": false
            },
            {
                "k": 64,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'final')",
                "identical": false
            },
            {
                "k": 65,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 66,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but nodes",
                "identical": false
            },
            {
                "k": 67,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' nulls but also check the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' nulls but also check the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'final')",
                "identical": false
            },
            {
                "k": 70,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'final')",
                "identical": false
            },
            {
                "k": 71,
                "patch": "found = key.equals(prop)] {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "found = key.equals(prop)] {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' bytes",
                "identical": false
            },
            {
                "k": 74,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'spare' bytes",
                "identical": false
            },
            {
                "k": 75,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'ASCII't quit",
                "identical": false
            },
            {
                "k": 76,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'ASCII't quit",
                "identical": false
            },
            {
                "k": 77,
                "patch": "found = key.equals(propSet.getName());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "found = key.equals(propSet.getName());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but also check the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'raw' nulls but also check the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare' characters",
                "identical": false
            },
            {
                "k": 82,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare' characters",
                "identical": false
            },
            {
                "k": 83,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare' nulls but nodes",
                "identical": false
            },
            {
                "k": 84,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'spare' nulls but nodes",
                "identical": false
            },
            {
                "k": 85,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'et",
                "identical": false
            },
            {
                "k": 86,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'et",
                "identical": false
            },
            {
                "k": 87,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'ASCII't quit",
                "identical": false
            },
            {
                "k": 88,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned.getName IME: a parameter should not be assigned. Also declare the methods parameters as 'ASCII't quit",
                "identical": false
            },
            {
                "k": 89,
                "patch": "found = key.equals(propprop.getName());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "found = key.equals(propprop.getName());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "found = key.equals(prop)] = key;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "found = key.equals(prop)] = key;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'sentence't quit",
                "identical": false
            },
            {
                "k": 94,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'sentence't quit",
                "identical": false
            },
            {
                "k": 95,
                "patch": "found = key.equals(prop)]*_RESERVED_findFromOrdered;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "found = key.equals(prop)]*_RESERVED_findFromOrdered;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the end of record or input...",
                "identical": false
            },
            {
                "k": 98,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the end of record or input...",
                "identical": false
            },
            {
                "k": 99,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'parent't quit",
                "identical": false
            },
            {
                "k": 100,
                "patch": "found = key.equals(prop)]; // nope, must be a parameter should not be assigned. Also declare the methods parameters as 'parent't quit",
                "identical": false
            }
        ],
        "buggy_line": "found = key.equals(prop.getName());",
        "fixed_line": "found = key.equals(_hashArea[i-1]);"
    }
}