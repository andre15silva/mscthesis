{
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignored.getIgnored();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignored.getIgnored();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignored.getIgnored;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignored.getIgnored;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = explicitorals.getIgnored;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = explicitorals.getIgnored;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored =capitalorals.getIgnored;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored =capitalorals.getIgnored;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = explicitorals.getIgnored();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = explicitorals.getIgnored();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignoredAny.getIgnored();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignoredAny.getIgnored();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = reasonorals.getIgnored;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = reasonorals.getIgnored;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = ignorals.getIgnored + ignoreAny;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = ignorals.getIgnored + ignoreAny;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignorals.getIgnored++) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignorals.getIgnored++) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = ignorals.getIgnored + 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = ignorals.getIgnored + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = anyAny.getIgnored();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = anyAny.getIgnored();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = reasonorals.getIgnored();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = reasonorals.getIgnored();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getIgnoredUTATED;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = ignorals.getIgnoredUTATED;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getIgnored<>(repairAny;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignorals.getIgnored<>(repairAny;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignorals.getIgnored<>(repairAny);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignorals.getIgnored<>(repairAny);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignorals.getIgnored DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignorals.getIgnored DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = ignorals.getIgnored<>(modelName);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignorals.getIgnored<>(modelName);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignorals.getIgnored - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = ignorals.getIgnored - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored =capitalorals.getIgnored();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored =capitalorals.getIgnored();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored =Zorals.getIgnored;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored =Zorals.getIgnored;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getIgnored<>(repairAny)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignorals.getIgnored<>(repairAny)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignorals.getIgnored BET;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignorals.getIgnored BET;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.getIgnored + 1, ignorals;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = ignorals.getIgnored + 1, ignorals;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored =ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored =ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = georals.getIgnored;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = georals.getIgnored;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = Korals.getIgnored;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = Korals.getIgnored;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignorals.getIgnored<>(hasAny)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignorals.getIgnored<>(hasAny)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = }, ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = }, ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = getDescriptororals.getIgnored;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = getDescriptororals.getIgnored;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = includeorals.getIgnored;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = includeorals.getIgnored;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignorals.getIgnored+1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = ignorals.getIgnored+1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored =DECorals.getIgnored;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored =DECorals.getIgnored;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored =minuteorals.getIgnored;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored =minuteorals.getIgnored;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = parsedToals.getIgnored;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = parsedToals.getIgnored;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignorals.getIgnored ;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignorals.getIgnored ;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored =DSorals.getIgnored;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored =DSorals.getIgnored;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignoredAny.getIgnored;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ignoredAny.getIgnored;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getIgnored<>(hasAny;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignorals.getIgnored<>(hasAny;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ABorals.getIgnored;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ABorals.getIgnored;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignorals.getIgnored battery;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = ignorals.getIgnored battery;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored =OrUpdateorals.getIgnored;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored =OrUpdateorals.getIgnored;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = }, ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = }, ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignorals.getIgnored<>(dayAny;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignorals.getIgnored<>(dayAny;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NOSONAR",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NOSONAR",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state);",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd vertex",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd vertex",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + icc;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + icc;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateidcc;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateidcc;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + icc;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + icc;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or strategy",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or strategy",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // bcc;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // bcc;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15d{1,2};",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15d{1,2};",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + imei;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + imei;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // sanity check",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // sanity check",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // Namedid",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // Namedid",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // activeid",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // activeid",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; icc, stateid",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; icc, stateid",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 3;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 3;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // description;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // description;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 5;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 5;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 0xcc;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 0xcc;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //path;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //path;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") > 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") > 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 15;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 15;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateidcc);",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateidcc);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or 0x00;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or 0x00;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // ordering",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // ordering",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iter;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iter;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + iccid;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + iccid;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // tags",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // tags",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15;\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15;\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd file;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd file;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // piid",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // piid",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //FAIL",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //FAIL",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\"))) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\"))) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\")))",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\")))",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; // NOSONAR",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; // NOSONAR",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + indexcc;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + indexcc;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; icc, state);",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; icc, state);",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd\");",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\")      // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\")     // iccid"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == String.class || kind == Object.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class || kind == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == String.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == String.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == String.class || raw == Object.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == String.class || raw == Object.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class || types == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || types == Object.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class || raw == Object.class.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class || raw == Object.class.class) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class || raw == Object.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || raw == Object.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class || provider == Object.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || provider == Object.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class || raw == Object.classclass) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || raw == Object.classclass) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class)",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class)",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class ||KEY == Object.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class ||KEY == Object.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class || UNKNOWN_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class || UNKNOWN_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, Object.class",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, Object.class",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class || TYPE_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == String.class || TYPE_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class)",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class)",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || !raw == Object.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || !raw == Object.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class)",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class)",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class == Object.class",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class == Object.class",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to be Object.class",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to be Object.class",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to avoid double.class",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to avoid double.class",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class || || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, String.class",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, String.class",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class)",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class)",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class == Object.class",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class == Object.class",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, Object.class",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, Object.class",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || rawValue == Object.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || rawValue == Object.class) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear, String.class",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear, String.class",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class.class",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class.class",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to handle LF later on",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray, ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray, ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray.contains(field.getName());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray.contains(field.getName());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray0' || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray0' || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.getType().isPrimitive() && field.getType().equals(field.getName());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.getType().isPrimitive() && field.getType().equals(field.getName());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.getName;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.getName;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray.\" + ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray.\" + ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray ioNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray ioNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() object object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() object object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.getName;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.getName;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.getType().isPrimitiveValue && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.getType().isPrimitiveValue && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray false || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray false || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == boolean.class;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == boolean.class;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return field.getType().isPrimitiveing || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.getType().isPrimitiveing || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.getName;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.getName;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && message.contains(field.getName());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && message.contains(field.getName());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayIds || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayIds || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.getType().isPrimitiveType && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return field.getType().isPrimitiveType && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return field.getType().isPrimitive() && field.getType(). original.contains(field.getName());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field.getType().isPrimitive() && field.getType(). original.contains(field.getName());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray = field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray = field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field);",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parser.hasNext(4 * 1000) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parser.hasNext(4 * 1000) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.hasNext(4 * 1000;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.hasNext(4 * 1000;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parser.hasNext(4 * 45) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parser.hasNext(4 * 45) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parser.hasNext(4 << 24) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parser.hasNext(4 << 24) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parser.hasNext(4104) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parser.hasNext(4104) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parser.hasNext(410) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parser.hasNext(410) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parser.hasNext(4(4)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parser.hasNext(4(4)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parser.hasNext(4 == 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parser.hasNext(4 == 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parser.hasNext(400, 57) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parser.hasNext(400, 57) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parser.hasNext(410 << 24) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parser.hasNext(410 << 24) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parser.hasNext(410;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parser.hasNext(410;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parser.hasNext(4 * 3;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.hasNext(4 * 3;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parser.hasNext(4 * 1024) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parser.hasNext(4 * 1024) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parser.hasNext(4 == parser) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parser.hasNext(4 == parser) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.hasNext(4 == 1) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.hasNext(4 == 1) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parser.hasNext(4 == parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parser.hasNext(4 == parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.hasNext(400, 59) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parser.hasNext(400, 59) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.hasNext(400, \"0\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parser.hasNext(400, \"0\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.hasNext(4 * 45 {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parser.hasNext(4 * 45 {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parser.hasNext(400, 12) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parser.hasNext(400, 12) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parser.hasNext(41010) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parser.hasNext(41010) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parser.hasNext(400, 1) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parser.hasNext(400, 1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parser.hasNext(4 * 5)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parser.hasNext(4 * 5)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parser.hasNext(400, 5607) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parser.hasNext(400, 5607) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.hasNext(4 * 1024;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.hasNext(4 * 1024;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parser.hasNext(400, \"0\") {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.hasNext(400, \"0\") {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parser.hasNext(4 == parser.hasNext(5)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parser.hasNext(4 == parser.hasNext(5)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.hasNext(4 * 5), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.hasNext(4 * 5), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parser.hasNext(4 + 12) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parser.hasNext(4 + 12) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.hasNext(4 * 45;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parser.hasNext(4 * 45;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parser.hasNext(400, 13) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parser.hasNext(400, 13) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.hasNext(4 * 11) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parser.hasNext(4 * 11) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parser.hasNext(400, 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parser.hasNext(400, 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parser.hasNext(4 * 180) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.hasNext(4 * 180) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.hasNext(4 * 5), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parser.hasNext(4 * 5), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parser.hasNext(4203) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.hasNext(4203) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parser.hasNext(422) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parser.hasNext(422) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parser.hasNext(4 == parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.hasNext(4 == parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.hasNext(410), parser)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.hasNext(410), parser)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.hasNext(4, parser) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.hasNext(4, parser) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parser.hasNext(4Second) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parser.hasNext(4Second) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parser.hasNext(4 != 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parser.hasNext(4 != 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parser.hasNext(4 * 1) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.hasNext(4 * 1) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parser.hasNext(4 == parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parser.hasNext(4 == parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.hasNext(4 + 1) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.hasNext(4 + 1) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parser.hasNext(4 * 5), parser;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parser.hasNext(4 * 5), parser;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parser.hasNext(410), parser) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parser.hasNext(410), parser) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parser.hasNext(410), parser;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parser.hasNext(410), parser;",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return BlobId.of(uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return BlobId.of(uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return BlobId.of(this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return BlobId.of(this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return BlobId.of(this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return BlobId.of(this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return BlobId.of(uri.getHost(), uri.this.uri);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return BlobId.of(uri.getHost(), uri.this.uri);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostAmount;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostAmount;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return BlobId.of(uri.getHost \"this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return BlobId.of(uri.getHost \"this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return BlobId.of(uri.getHost(), this.uri);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return BlobId.of(uri.getHost(), this.uri);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostHost;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostHost;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return BlobId.of(uri.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return BlobId.of(uri.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return BlobId.of(uri.getHost(), uri) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return BlobId.of(uri.getHost(), uri) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return BlobId.of(uri.getHost;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return BlobId.of(uri.getHost;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost2;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHost);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHost);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostExecutor;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostExecutor;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return BlobId.of(uri.getHost != uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return BlobId.of(uri.getHost != uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostBackFromPath);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostBackFromPath);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostplet",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostplet",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return BlobId.of(uri.getHost \"uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return BlobId.of(uri.getHost \"uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostSpeedInPath;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostSpeedInPath;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostInPath;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostInPath;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost << 1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost << 1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostServerId;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostServerId;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return BlobId.of(uri.getHost = uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return BlobId.of(uri.getHost = uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostValue;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostValue;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost) + 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost) + 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return BlobId.of(uri.getHostHost(), uri);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return BlobId.of(uri.getHostHost(), uri);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return BlobId.of(uri.getHost \"this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return BlobId.of(uri.getHost \"this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostSpeedInPath);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostSpeedInPath);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return BlobId.of(uri.getHost , uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return BlobId.of(uri.getHost , uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostRequest;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostRequest;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return BlobId.of(uri.getHost(), uri = BlobId;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return BlobId.of(uri.getHost(), uri = BlobId;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return BlobId.of(uri.getHostbuttonPath, uri);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return BlobId.of(uri.getHostbuttonPath, uri);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostInPath);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostInPath);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost executor",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost executor",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostfm;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostfm;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return BlobId.of(uri.getHost = uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return BlobId.of(uri.getHost = uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return BlobId.of(uri.getHost(), uri.EXPRESSION;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return BlobId.of(uri.getHost(), uri.EXPRESSION;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostBackFromPath;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostBackFromPath;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostName);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostName);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostServerId);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostServerId);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost long uri);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost long uri);",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "paintComponent(speedAngle;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paintComponent(speedAngle;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paintComponent(speedAngle);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paintComponent(speedAngle);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paintComponent.getGraphics());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paintComponent.getGraphics());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paintComponentContext.getGraphics());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paintComponentContext.getGraphics());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paintComponentContext.getGraphics;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paintComponentContext.getGraphics;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paintComponent swaggerType.PedalPosition;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paintComponent swaggerType.PedalPosition;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paintComponent =speedAngle;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paintComponent =speedAngle;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paintComponentContext.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paintComponentContext.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paintComponent.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paintComponent.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paintComponentContext.getGraphicsrangePedalPosition;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paintComponentContext.getGraphicsrangePedalPosition;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paintComponentContext.getGraphicsctorInPedalPosition;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paintComponentContext.getGraphicsctorInPedalPosition;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paintComponentContext.getGraphics {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paintComponentContext.getGraphics {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paintComponentContext =speedAngle;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paintComponentContext =speedAngle;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paintComponent.getGraphics;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paintComponent.getGraphics;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paintComponent(speedAngle, fileAngle);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paintComponent(speedAngle, fileAngle);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paintComponentContext.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paintComponentContext.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paintComponentPed.getGraphics;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paintComponentPed.getGraphics;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paintComponentContext.getGraphicsctorPedalPosition;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paintComponentContext.getGraphicsctorPedalPosition;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paintComponentContext.getGraphics() {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paintComponentContext.getGraphics() {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paintComponent upper upper.getGraphics());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paintComponent upper upper.getGraphics());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paintComponentPed)speedAngle;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paintComponentPed)speedAngle;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paintComponentSetgetGraphics;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paintComponentSetgetGraphics;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paintComponent.getGraphics {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paintComponent.getGraphics {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paintComponentRoutegetGraphics;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paintComponentRoutegetGraphics;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paintComponent(speedAngle, fileAngle;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paintComponent(speedAngle, fileAngle;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paintComponentPedalPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paintComponentPedalPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paintComponentPedalPosition.getGraphics;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paintComponentPedalPosition.getGraphics;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paintComponentContext.getGraphicsctor =speedAngle;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paintComponentContext.getGraphicsctor =speedAngle;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paintComponentManager.getGraphics());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paintComponentManager.getGraphics());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paintComponent upper upper =speedAngle;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paintComponent upper upper =speedAngle;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paintComponent(speedAngle.getGraphics;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paintComponent(speedAngle.getGraphics;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paintComponent swaggerType.PedalPositions;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paintComponent swaggerType.PedalPositions;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paintComponent swaggerType.PedalPosition(2);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paintComponent swaggerType.PedalPosition(2);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paintComponent upper upper.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paintComponent upper upper.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paintComponent(speedAngle.getGraphics());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paintComponent(speedAngle.getGraphics());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paintComponentEntity.getGraphics());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paintComponentEntity.getGraphics());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paintComponent upper upper.getGraphics;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paintComponent upper upper.getGraphics;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paintComponent swaggerType.Pedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paintComponent swaggerType.Pedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paintComponent swaggerType.PedalPosition(1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paintComponent swaggerType.PedalPosition(1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paintComponentContext.getGraphics[0];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paintComponentContext.getGraphics[0];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paintComponentContext.getGraphics cc;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paintComponentContext.getGraphics cc;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paintComponent swaggerType.Pedal)speedAngle;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paintComponent swaggerType.Pedal)speedAngle;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paintComponent(speedAngle) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paintComponent(speedAngle) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paintComponent (speedAngle;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paintComponent (speedAngle;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paintComponentPed.getGraphics());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paintComponentPed.getGraphics());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paintComponent executor =speedAngle;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paintComponent executor =speedAngle;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paintComponent swaggerType.PedalPositionTAG_pm;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paintComponent swaggerType.PedalPositionTAG_pm;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paintComponent.getGraphics() {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paintComponent.getGraphics() {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paintComponentContext.getGraphicsrangePedalPositions;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paintComponentContext.getGraphicsrangePedalPositions;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paintComponentManagergetGraphics());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paintComponentManagergetGraphics());",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-200": {
        "fixes": [
            {
                "k": 1,
                "patch": "return convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return convert(throwable, throwable;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return convert(throwable, throwable;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return convert(v, throwable);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return convert(v, throwable);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return convert(throwable, throwable_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return convert(throwable, throwable_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return convert(throwable, throwable_QUERY_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return convert(throwable, throwable_QUERY_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return convert(this.throwable, throwable);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return convert(this.throwable, throwable);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return convert(throwable, throwable_QUERY_STRING_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return convert(throwable, throwable_QUERY_STRING_RESERVED_CHARACTERS);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_CHAR);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_CHAR);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return convert( throwable, throwable);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return convert( throwable, throwable);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_OF_CHARACTERS);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_OF_CHARACTERS);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DELIM);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DELIM);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DELICELLS);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DELICELLS);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDGE_WEIGHT);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDGE_WEIGHT);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return convert(thVertex, throwable);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return convert(thVertex, throwable);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_OF_AN_DELIMITER);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_OF_AN_DELIMITER);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_CHARACTERS);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_CHARACTERS);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return convert(Valid, throwable);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return convert(Valid, throwable);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_DELIMITER);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_DELIMITER);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_ON_CHARACTERS);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_ON_CHARACTERS);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_CHAR);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_CHAR);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return convert(criteriaBuilder, throwable);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return convert(criteriaBuilder, throwable);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DEL);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DEL);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_CLOSED);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_CLOSED);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_DELIM);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_DELIM);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_DELIMITER);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_DELIMITER);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_CHAR);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_CHAR);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_ON_OF_CHARACTERS);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_ON_OF_CHARACTERS);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return convert(throwable, throwable) return convert(throwable);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return convert(throwable, throwable) return convert(throwable);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_ON_DELIMITER);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return convert(throwable, throwable, throwable);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return convert(throwable, throwable, throwable);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_CHARACTIVon;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_CHARACTIVon;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_CHARACTIVon;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_CHARACTIVon;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_DELICELLS);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_DELICELLS);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ show;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ show;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DELICELLS;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DELICELLS;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ONAR_DELIMITER);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ONAR_DELIMITER);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_WORD);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_WORD);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_OF_AN_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return convert(thousands, throwable);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return convert(thousands, throwable);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_OBJECT);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_OBJECT);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_OF_STRING);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_OF_STRING);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_NOT_DELIMITER);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_NOT_DELIMITER);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_CLOSED;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_CLOSED;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DELICELL);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return convert(throwable, throwable, DEFAULT_RESERVED_TIME_AND_EMBEDDED_ON_DELICELL);",
                "identical": false
            }
        ],
        "buggy_line": "return convert(null, throwable);",
        "fixed_line": "return convert(\"\", throwable);"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private synchronized void addArrivedRecordsInput (ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private synchronized void addArrivedRecordsInput (ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private synchronized void addArrivedRecordsInput (DbRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private synchronized void addArrivedRecordsInput (DbRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private synchronized void addArrivedRecordsInput (ServerRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private synchronized void addArrivedRecordsInput (ServerRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private synchronized void addArrivedRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private synchronized void addArrivedRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private synchronized void addArrivedRecordsInputEntity.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private synchronized void addArrivedRecordsInputEntity.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private synchronized void addArrivedRecordsInputingProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private synchronized void addArrivedRecordsInputingProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private synchronized void addArrivedRecordsInput (configRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private synchronized void addArrivedRecordsInput (configRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private synchronized void addArrivedRecordsInputaddProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private synchronized void addArrivedRecordsInputaddProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private synchronized void addArrivedRecordsInputByKey(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private synchronized void addArrivedRecordsInputByKey(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private synchronized void addArrivedRecordsInput (ArrayRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private synchronized void addArrivedRecordsInput (ArrayRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private synchronized void addArrivedRecordsInput(\"ProcessRecordsInput to throws InterruptedException {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private synchronized void addArrivedRecordsInput(\"ProcessRecordsInput to throws InterruptedException {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private synchronized void addArrivedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private synchronized void addArrivedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private synchronized void addArrivedRecordsInputDoubleQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private synchronized void addArrivedRecordsInputDoubleQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput execute InterruptedException {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput execute InterruptedException {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private synchronized void addArrivedRecordsInputORQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private synchronized void addArrivedRecordsInputORQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private synchronized void addArrivedRecordsInput = throwsRecordsInput;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private synchronized void addArrivedRecordsInput = throwsRecordsInput;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private synchronized void addArrivedRecordsInput 7;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private synchronized void addArrivedRecordsInput 7;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput propName propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput propName propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput_IN InterruptedException {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput_IN InterruptedException {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private synchronized void addArrivedRecordsInput args.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private synchronized void addArrivedRecordsInput args.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private synchronized void addArrivedRecordsInputDoubleQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private synchronized void addArrivedRecordsInputDoubleQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private synchronized void addArrivedRecordsInput_IN_PROGRESS_Input;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private synchronized void addArrivedRecordsInput_IN_PROGRESS_Input;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throws InterruptedException) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throws InterruptedException) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput){",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput){",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput() {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput() {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput){",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput){",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > 23) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > 23) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput;",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"x+),\") + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"x+),\") + 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"x+2, prop);",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"x+2, prop);",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"x+),\") - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"x+),\") - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"x+2, include;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"x+2, include;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"x+2]\", NR_BIGINT;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"x+2]\", NR_BIGINT;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"x+),\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"x+),\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"x+2,\") + 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"x+2,\") + 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"x+2]\", NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"x+2]\", NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"x+2, 2 value value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"x+2, 2 value value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"x+2, 2;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"x+2, 2;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"x+2, 2 value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"x+2, 2 value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"x+2, 212);",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"x+2, 212);",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"x+2, NR_BIGINT;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"x+2, NR_BIGINT;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"x+2, 2Authenticated",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"x+2, 2Authenticated",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"x+2, 2});",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"x+2, 2});",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"x+2]",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"x+2]",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"x+2, 2FLOW;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"x+2, 2FLOW;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"x+2, include = R;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"x+2, include = R;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"x+2, 2Authenticated;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"x+2, 2Authenticated;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"x+2, include + 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"x+2, include + 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"x+2]\", NR_FLOAT;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"x+2]\", NR_FLOAT;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"x+2, 2TEXT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"x+2, 2TEXT;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"x+2, len;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"x+2, len;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"x+2, _numberLong;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"x+2, _numberLong;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"x+2, 290;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"x+2, 290;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"x+ '-'\") + 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"x+ '-'\") + 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"x+\"]\") + 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"x+\"]\") + 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"x+relationship\") - 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"x+relationship\") - 1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"x+2, 23) + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"x+2, 23) + 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"x+2, 2 value value & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"x+2, 2 value value & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"x+2, 2 value value;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"x+2, 2 value value;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"x+2, NR_OF_WEEK;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"x+2, NR_OF_WEEK;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"x+2, 2UTE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"x+2, 2UTE;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"x+2, NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"x+2, NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"x+2, selection;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"x+2, selection;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"x+2, 2 -> 6;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"x+2, 2 -> 6;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"x+2, 2 value & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"x+2, 2 value & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"x+2, 2 value value & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"x+2, 2 value value & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"x+2, 6;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"x+2, 6;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"x+2]\", NR_BIGNEG);",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"x+2]\", NR_BIGNEG);",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"x+2, 212;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"x+2, 212;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"x+2, 2Authenticated byte 0x NR_BIGINT;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"x+2, 2Authenticated byte 0x NR_BIGINT;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"x+2, 2 value & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"x+2, 2 value & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"x+block;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"x+block;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"x+2, 2 value value value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"x+2, 2 value value value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"x+2, NR_BIGDECIMAL().group(1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"x+2, NR_BIGDECIMAL().group(1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"x+2]\", NR_BIGINT);",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"x+2]\", NR_BIGINT);",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"x+2, 2 all;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"x+2, 2 all;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"x+2, 2 - 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"x+2, 2 - 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"x+2, NR_UNKNOWN);",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"x+2, NR_UNKNOWN);",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\")                     // power",
        "fixed_line": ".number(\"(x+)?,\")                    // power"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (data[3].length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (data[3].length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (data[0].length) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (data[0].length) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (data.length) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (data.length) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (completed) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (completed) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (data[3) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (data[3) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (data[1].length) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (data[1].length) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (started) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (started) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (dataFormat) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (dataFormat) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (data[2].[2].End) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (data[2].[2].End) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (data[3]));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (data[3]));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (running) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (running) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (data[2].length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (data[2].length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (data[4) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (data[4) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (data.length > started) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (data.length > started) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (data[2]) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (data[2]) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (data[3];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (data[3];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (data[2]. < data.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (data[2]. < data.length) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (data[3[3].length) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (data[3[3].length) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (data.length > 24) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (data.length > 24) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (data[2].[2].) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (data[2].[2].) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (files.length) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (files.length) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Block[1].length) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (Block[1].length) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (position.length) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (position.length) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parameters[3].length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parameters[3].length) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (data[0].length > started) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (data[0].length > started) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parameters.length) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parameters.length) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (data.length > 5) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (data.length > 5) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (mapping.length) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (mapping.length) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (data[3xff) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (data[3xff) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (neg) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (neg) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (position != 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (position != 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (dataLength) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (dataLength) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (data.length > 4) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (data.length > 4) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (data[1] > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (data[1] > 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (data.length > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (data.length > 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (data[0].length > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (data[0].length > 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (data[3[3) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (data[3[3) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (data[2].End) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (data[2].End) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (data[2]. < 0) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (data[2]. < 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (data[3Paths) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (data[3Paths) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (dataLength > 10) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (dataLength > 10) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (dataLength > 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (dataLength > 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (data[0].length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (data[0].length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (dataFormatMin) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (dataFormatMin) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (data.length > 255) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (data.length > 255) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (data[3]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (data[3]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (data[3PAGE) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (data[3PAGE) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (data[3US_BYTES) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (data[3US_BYTES) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (data[3US_ASCII) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (data[3US_ASCII) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = (l << 8) | a[i]; // sign bit",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = (l << 8) | a[i]; // sign bit",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign bit",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign bit",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign bit",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign bit",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+mask",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+mask",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = (l << 8) | a[i]; // size",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = (l << 8) | a[i]; // size",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = (l << 8) | a[i]; // sign removal, result[i];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = (l << 8) | a[i]; // sign removal, result[i];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = (l << 8) | a[i]; // sign will shift+mask",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = (l << 8) | a[i]; // sign will shift+mask",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, size",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, size",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a[i];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a[i];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = (l << 8) | a[i]; // sign removal, can's",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = (l << 8) | a[i]; // sign removal, can's",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = (l << 8) | a[i]; // sign removal, size",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = (l << 8) | a[i]; // sign removal, size",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for the i.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for the i.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for now",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for now",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to first 7+",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to first 7+",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for now",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for now",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l of size",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l of size",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for the i.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for the i.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, result[i];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, result[i];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3rd byte",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3rd byte",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the l for now",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the l for now",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = (l << 8) | a[i]; // sign will include the i.",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = (l << 8) | a[i]; // sign will include the i.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for now",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for now",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the i.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the i.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = (l << 8) | a[i]; // sign removal, length for l-style.length - 1];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = (l << 8) | a[i]; // sign removal, length for l-style.length - 1];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = (l << 8) | a[i]; // sign will need to handle LF later on",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = (l << 8) | a[i]; // sign will need to handle LF later on",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = (l << 8) | a[i]; // l for now",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = (l << 8) | a[i]; // l for now",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = (l << 8) | a[i]; // sign removal, result for now",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = (l << 8) | a[i]; // sign removal, result for now",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 4 for now",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 4 for now",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l for the i.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l for the i.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = (l << 8) | a[i]; // sign will need to shift+mask",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = (l << 8) | a[i]; // sign will need to shift+mask",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = (l << 8) | a[i]; // sign will also clear, l for the i.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = (l << 8) | a[i]; // sign will also clear, l for the i.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, can's",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, can's",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = (l << 8) | a[i]; // sign will also clear, l for now",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = (l << 8) | a[i]; // sign will also clear, l for now",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the l for the i.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the l for the i.",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign can's",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign can's",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l of size",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l of size",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the l for now",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the l for now",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = (l << 8) | a[i]; // sign will shift+2] for now",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = (l << 8) | a[i]; // sign will shift+2] for now",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = (l << 8) | a[i]; // odd vertex",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = (l << 8) | a[i]; // odd vertex",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have 16 for now",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have 16 for now",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = (l << 8) | a[i]; // sign will include possible comma",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = (l << 8) | a[i]; // sign will include possible comma",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the i.",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the i.",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign will need to sign bit",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign will need to sign bit",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 16;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 16;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625.0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625.0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625};",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625};",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625[i - 1];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625[i - 1];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525 * 0.0625;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525 * 0.0625;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 16;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 16;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525 * 0.0625;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525 * 0.0625;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625 * 0.0625;",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return position_ms;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return position_ms;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return position_ms.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return position_ms.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return position_ms[position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return position_ms[position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return position_msOneed.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return position_msOneed.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return position_ms_.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return position_ms_.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return position_ms(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return position_ms(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return position_ms(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return position_ms(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return position_ms_ that that.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return position_ms_ that that.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ context_ms;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ context_ms;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return position_ms_ that.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return position_ms_ that.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return position_msHash.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return position_msHash.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return position_ms_ms;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return position_ms_ms;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return position_msicms.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return position_msicms.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return position_ms(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return position_ms(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ fieldType;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ fieldType;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return position_ms.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return position_ms.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return position_msView.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return position_msView.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return position_ms.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return position_ms.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ context_ms);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ context_ms);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return position_msOneed.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return position_msOneed.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", distance_ms);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", distance_ms);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ms);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ms);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return position_msConfig.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return position_msConfig.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return position_ms == setQueryParameter.position_ms;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return position_ms == setQueryParameter.position_ms;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return position_ms_ that that.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return position_ms_ that that.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return position_ms\", count);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return position_ms\", count);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms */_ms;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms */_ms;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_END_ms;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_END_ms;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ that;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ that;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return position_msConfig.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return position_msConfig.position_ms\", setQueryParameter_ms;",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 8;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 8;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 2);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 2);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes.length) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes.length) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_KEY);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_KEY);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > batchSize) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > batchSize) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attributes.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attributes.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthOR_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthOR_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributeName;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributeName;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthCode;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthCode;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.attributes;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.attributes;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % a.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % a.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attribute.length;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attribute.length;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 1) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attributes);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attributes);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributes.length;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributes.length;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 2) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 2) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 0;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 0;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerNode);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerNode);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new ConcurrentHashMap[0];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new ConcurrentHashMap[0];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length JPanel;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length JPanel;",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"x+)?,\") + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"x+)?,\") + 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"x+)?,\") adc 2",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"x+)?,\") adc 2",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"x+)?,\") adc 2 bytes;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"x+)?,\") adc 2 bytes;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"x+)?,\") adc 2});",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"x+)?,\") adc 2});",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"x+)?,\") adc 2=",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"x+)?,\") adc 2=",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"x+)?,\") adc 2Present);",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"x+)?,\") adc 2Present);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"x+)?,\") adc 2 + 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"x+)?,\") adc 2 + 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"x+)?,\") adc 2 R;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"x+)?,\") adc 2 R;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"x+)?,\")*(*(",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"x+)?,\")*(*(",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"x+)?,\") adc 214;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"x+)?,\") adc 214;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"x+)?,\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"x+)?,\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"x+)?,\") adc 2 | 3);",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"x+)?,\") adc 2 | 3);",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"x+)?,\") adc 2Authenticated",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"x+)?,\") adc 2Authenticated",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"x+)?,\") adc 2 links);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"x+)?,\") adc 2 links);",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"x+)?,\") adc 2[1]);",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"x+)?,\") adc 2[1]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"x+)?,\") adc 2 ...",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"x+)?,\") adc 2 ...",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"x+)?,\") adc 212);",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"x+)?,\") adc 212);",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"x+)?,\") adc 2ENCODING;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"x+)?,\") adc 2ENCODING;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"x+)?,\") adc 2mk);",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"x+)?,\") adc 2mk);",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"x+)?,\") adc 2 translate",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"x+)?,\") adc 2 translate",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"x+)?,\") adc 2Character;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"x+)?,\") adc 2Character;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"x+)?,\") adc 2(\"\\",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"x+)?,\") adc 2(\"\\",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"x+)?,\") adc 2 >>> 4;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"x+)?,\") adc 2 >>> 4;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"x+)?,\") adc 2 1}",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"x+)?,\") adc 2 1}",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"x+)?,\") adc 2 brackets);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"x+)?,\") adc 2 brackets);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"x+)?,\") adc 2 Eclipse",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"x+)?,\") adc 2 Eclipse",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"x+)?,\") adc 2 1000003;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"x+)?,\") adc 2 1000003;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"x+)?,\") adc 2 latitude;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"x+)?,\") adc 2 latitude;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"x+)?,\") adc 2Present;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"x+)?,\") adc 2Present;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"x+)?,\")*(*( // adc 2",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"x+)?,\")*(*( // adc 2",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"x+)?,\") adc 2=);",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"x+)?,\") adc 2=);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"x+)?,\") adc 2 guaranteed;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"x+)?,\") adc 2 guaranteed;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"x+)?,\") adc 2 shift);",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"x+)?,\") adc 2 shift);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"x+)?,\") adc 2 END_VALUE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"x+)?,\") adc 2 END_VALUE;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"x+)?,\") adc 2 anti;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"x+)?,\") adc 2 anti;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"x+)?,\") ? 2 : 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"x+)?,\") ? 2 : 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"x+)?,\") adc 2URI;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"x+)?,\") adc 2URI;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"x+)?,\") adc 2 anti);",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"x+)?,\") adc 2 anti);",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"x+)?,\") adc 2QUERY",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"x+)?,\") adc 2QUERY",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"x+)?,\")*(*(;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"x+)?,\")*(*(;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"x+)?,\") adc 227;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"x+)?,\") adc 227;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"x+)?,\") adc 2Present = 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"x+)?,\") adc 2Present = 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"x+)?,\") adc 227",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"x+)?,\") adc 227",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"x+)?,\") adc 2 v;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"x+)?,\") adc 2 v;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"x+)?,\") % 10;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"x+)?,\") % 10;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"x+)?,\") * adc 2",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"x+)?,\") * adc 2",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"x+)?,\") adc 2CURRENT);",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"x+)?,\") adc 2CURRENT);",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\")                    // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional()         // adc 2"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (channel.getPipeline().get(HttpRequest.class) != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (channel.getPipeline().get(HttpRequest.class) != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (channel.getPipeline().get(Calendar.class) != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (channel.getPipeline().get(Calendar.class) != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (channel.getPipeline().get(Basic.class) != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (channel.getPipeline().get(Basic.class) != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (channel.getPipeline().get(Database.class) != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (channel.getPipeline().get(Database.class) != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (channel.getPipeline().get(Activity.class) != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (channel.getPipeline().get(Activity.class) != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (channel.getPipeline().get(formHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (channel.getPipeline().get(formHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (channel.getPipeline().get(ErrorHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (channel.getPipeline().get(ErrorHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (channel.getPipeline().get(RestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (channel.getPipeline().get(RestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (channel.getPipeline().get(Ele.class) != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (channel.getPipeline().get(Ele.class) != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (channel.getPipeline().get(placeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (channel.getPipeline().get(placeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (channel.getPipeline().get(Group.class) != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (channel.getPipeline().get(Group.class) != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (channel.getPipeline().get( ChangeHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (channel.getPipeline().get( ChangeHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (channel.getPipeline().get(remoteHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (channel.getPipeline().get(remoteHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (channel.getPipeline().get(EOFHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (channel.getPipeline().get(EOFHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (channel.getPipeline().get(MONTHHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (channel.getPipeline().get(MONTHHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) == null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) == null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (channel.getPipeline().get( ==HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (channel.getPipeline().get( ==HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (channel.getPipeline().get(Generator.class) != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (channel.getPipeline().get(Generator.class) != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (channel.getPipeline().get(27.class) != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (channel.getPipeline().get(27.class) != null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (channel.getPipeline().get(KE.class) != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (channel.getPipeline().get(KE.class) != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (channel.getPipeline().get(Generated.class) != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (channel.getPipeline().get(Generated.class) != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (channel.getPipeline().get(remoteAddress.class) != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (channel.getPipeline().get(remoteAddress.class) != null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // should never occur...",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // should never occur...",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (channel.getPipeline().get(Process.class) != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (channel.getPipeline().get(Process.class) != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (channel.getPipeline().get(DS.class) != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (channel.getPipeline().get(DS.class) != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (channel.getPipeline().get(string.class) != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (channel.getPipeline().get(string.class) != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (channel.getPipeline().get(channel.class) != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (channel.getPipeline().get(channel.class) != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (channel.getPipeline().get(DatabaseDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (channel.getPipeline().get(DatabaseDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if(channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if(channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (channel.getPipeline().get( \\\"HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (channel.getPipeline().get( \\\"HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (channel.getPipeline().get(password.class) != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (channel.getPipeline().get(password.class) != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (channel.getPipeline().get( ==HttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (channel.getPipeline().get( ==HttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // only one allowed",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // only one allowed",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (channel.getPipeline().get([,.class) != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (channel.getPipeline().get([,.class) != null) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (channel.getPipeline().get(Error == null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (channel.getPipeline().get(Error == null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (channel.getPipeline().get(buf.class) != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (channel.getPipeline().get(buf.class) != null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (channel.getPipeline().get(DOWN.class) != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (channel.getPipeline().get(DOWN.class) != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (channel.getPipeline().get(0HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (channel.getPipeline().get(0HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (channel.getPipeline().get(Only.class) != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (channel.getPipeline().get(Only.class) != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (channel.getPipeline().get(Formatter.class) != null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (channel.getPipeline().get(Formatter.class) != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (channel.getPipeline().get(Field.class) != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (channel.getPipeline().get(Field.class) != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (channel.getPipeline().get(Val.class) != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (channel.getPipeline().get(Val.class) != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (channel.getPipeline().get(8) == null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (channel.getPipeline().get(8) == null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (channel.getPipeline().get(HttpRequest.class) != null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (channel.getPipeline().get(HttpRequest.class) != null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (channel.getPipeline().get($.class) != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (channel.getPipeline().get($.class) != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (channel.getPipeline().get( Change.class) != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (channel.getPipeline().get( Change.class) != null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (channel.getPipeline().get(Query.class) != null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (channel.getPipeline().get(Query.class) != null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encryptedDataKeys = request.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encryptedDataKeys = request.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encryptedDataKeys = request.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encryptedDataKeys = request.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encryptedDataKeys = request.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encryptedDataKeys = request.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encryptedDataKeys = this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encryptedDataKeys = this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 2;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encryptedDataKeys = this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encryptedDataKeys = this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encryptedDataKeys = request.eventDataKeys;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedDataKeys = request.eventDataKeys;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encryptedDataKeys = request.context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encryptedDataKeys = request.context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encryptedDataKeys = ret.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encryptedDataKeys = ret.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encryptedDataKeys = request.implEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedDataKeys = request.implEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encryptedDataKeys = request.mDataKeys;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encryptedDataKeys = request.mDataKeys;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys > 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys > 0;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.event.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.event.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encryptedDataKeys = request.nextEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encryptedDataKeys = request.nextEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encryptedDataKeys = request.request;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encryptedDataKeys = request.request;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - 1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTosRequest;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTosRequest;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encryptedDataKeys = request.getEncryptedCursor;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encryptedDataKeys = request.getEncryptedCursor;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys0.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys0.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_POLL_INTERVAL_MS;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_POLL_INTERVAL_MS;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_REDataKeys;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_REDataKeys;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.request;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.request;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.eventDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.eventDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos2.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos2.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeyssRequest;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeyssRequest;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.request;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.request;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.eventDataKeys;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.eventDataKeys;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encryptedBox = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encryptedBox = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 8;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 8;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys + 1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys + 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encryptedDataKeys = request.getAttributeEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encryptedDataKeys = request.getAttributeEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // this.encryptedDataKeys",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\n\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\n\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData != null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData != null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData started",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData started",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData'));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData'));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData51List\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData51List\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataELEMENT\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataELEMENT\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData \");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData \");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(5;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(5;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add(\"ro.pippo.SessionData\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(\"ro.pippo.SessionData\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData}\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData}\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSessionFactory\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSessionFactory\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData links\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData links\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add(\"ro.pippo.sessionData\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(\"ro.pippo.sessionData\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFactor;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFactor;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataES);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataES);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSetter\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSetter\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData4;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData4;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\\")\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\\")\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataByteBuffer\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataByteBuffer\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData 12",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData 12",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData config\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData config\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData+\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData+\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataThread WhiteList\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataThread WhiteList\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataATTRIBUTE",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataATTRIBUTE",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\"));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\"));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData augment\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData augment\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData document",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData document",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.session.SessionData\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.session.SessionData\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData repair repair",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData repair repair",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr.class;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr.class;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData could\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData could\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData + 1, this.query.SessionData\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData + 1, this.query.SessionData\");",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // message length",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // message length",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(2 + 2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(2 + 2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8; // length",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8; // length",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(2 + 2 + 7 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(2 + 2 + 7 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // length",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // length",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(2 + 1 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(2 + 1 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(2 + 2 + result + 2 + content.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(2 + 2 + result + 2 + content.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(2 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(2 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(2 + 2 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(2 + 2 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 5 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 5 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + 2 + 2); // message length",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    }
}