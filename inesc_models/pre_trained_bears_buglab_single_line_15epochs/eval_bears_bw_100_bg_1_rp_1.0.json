{
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.hasNext(4 * 1000) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parser.hasNext(4 * 1000;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.hasNext(4 << 24) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.hasNext(4 * 45) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.hasNext(4104) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parser.hasNext(410 << 24) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parser.hasNext(410) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parser.hasNext(410;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parser.hasNext(4 * 1024) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parser.hasNext(4(4)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parser.hasNext(4 == 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parser.hasNext(4 * 1024;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parser.hasNext(4 == 1) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parser.hasNext(400, 57) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parser.hasNext(4 * 3;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parser.hasNext(4 == parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parser.hasNext(400, 0x04) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parser.hasNext(410), parser)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parser.hasNext(41010) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parser.hasNext(400, 12) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parser.hasNext(410), parser;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parser.hasNext(4 * 5)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parser.hasNext(4 && parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parser.hasNext(4 * 12), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parser.hasNext(400, 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.hasNext(4 * 5), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parser.hasNext(400, 1) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parser.hasNext(4 * 180) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parser.hasNext(4 + 12) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parser.hasNext(4).setNetwork(5), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.hasNext(400, \"0\") {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.hasNext(4), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parser.hasNext(400, 59) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parser.hasNext(400,40, parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.hasNext(4 == 11) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parser.hasNext(4 * 45 {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.hasNext(400, 5607) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parser.hasNext(410), parser) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.hasNext(4).setNetwork(5), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parser.hasNext(400, \"0\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parser.hasNext(4 * 11) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parser.hasNext(410), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parser.hasNext(4 *::newnewHnextInt(16), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parser.hasNext(4 * 1000)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parser.hasNext(4 * 45), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parser.hasNext(4 * 45), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parser.hasNext(4 * 45;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parser.hasNext(410), 11) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parser.hasNext(400, 0x0020) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parser.hasNext(400, 5), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.hasNext(400, 5), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.hasNext(422) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parser.hasNext(4203) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.hasNext(4 * 5), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parser.hasNext(4 == parser.hasNext(5)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parser.hasNext(400, 5)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.hasNext(400, 13) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.hasNext(400, 11) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parser.hasNext(410)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parser.hasNext(4 * 1000; // tiny & 0xFE structure",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.hasNext(400, 5), parser.next(4)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parser.hasNext(4 * 12) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parser.hasNext(4, parser) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parser.hasNext(400, 300) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.hasNext(4 == parser) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parser.hasNext(4), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parser.hasNext(4).setNetwork(5), parser.nextInt(16)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parser.hasNext(4), parser;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parser.hasNext(4 * 5), parser.next(4)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.hasNext(410, parser)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.hasNext(4).setNetwork(5), parser.next(4)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parser.hasNext(4 * 1) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parser.hasNext(4 *king) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.hasNext(410104) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parser.hasNext(4 + 1) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parser.hasNext(43) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parser.hasNext(4 == parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.hasNext(4 * 12), parser.hasNext(4;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.hasNext(410), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.hasNext(4 && parser != 11) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.hasNext(4 != 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.hasNext(4 *203) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parser.hasNext(410 != 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parser.hasNext(4Second) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parser.hasNext(4), parser.next(4)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parser.hasNext(4 *\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parser.hasNext(410 == 1) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.hasNext(4 * 12), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parser.hasNext(4 * 45), parser.hasNext(4;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parser.hasNext(400,ix)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.hasNext(4 * 1003) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.hasNext(4 GridConstraints) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parser.hasNext(4 * 12), parser;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parser.hasNext(4 == parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parser.hasNext(4 *::parser;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parser.hasNext(4 * 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parser.hasNext(420203) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parser.hasNext(5 == 11) {",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private synchronized void addArrivedRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private synchronized void addArrivedRecordsInputingProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private synchronized void addArrivedRecordsInput (DbRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput execute InterruptedException {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private synchronized void addArrivedRecordsInput (ServerRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private synchronized void addArrivedRecordsInput orProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private synchronized void addArrivedRecordsInputJob (\"ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private synchronized void addArrivedRecordsInput (configRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private synchronized void addArrivedRecordsInputOrigin(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private synchronized void addArrivedRecordsInput execute InterruptedExceptionRecordsInput;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private synchronized void addArrivedRecordsInput (ArrayRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException. InterruptedException) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput orProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throws InterruptedException) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private synchronized void addArrivedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throws InterruptedException.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException_2Input) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException_2Input;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private synchronized void addArrivedRecordsInputallyrowIsProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private synchronized void addArrivedRecordsInputEntity.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throwsRecordsInput. InterruptedException {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private synchronized void addArrivedRecordsInput execute InterruptedExceptionRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput* InterruptedExceptionRecordsInput;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput propName propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throwsRecordsInput. InterruptedException {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private synchronized void addArrivedRecordsInputTsProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private synchronized void addArrivedRecordsInput {}ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private synchronized void addArrivedRecordsInput 76, processRecordsInput) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private synchronized void addArrivedRecordsInput_TYPE_ZERO) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private synchronized void addArrivedRecordsInputLocationLocation.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput content throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private synchronized void addArrivedRecordsInputURLProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > 255) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throws InterruptedException. InterruptedException) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private synchronized void addArrivedRecordsInputJob.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private synchronized void addArrivedRecordsInput GridConstraintsProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput_IN InterruptedException {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throwsearRecordsInput) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private synchronized void addArrivedRecordsInput long throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private synchronized void addArrivedRecordsInputScaleProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput){",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException_MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throwsRecordsInput. InterruptedException) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.SIZE) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private synchronized void addArrivedRecordsInputLocationLocation.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInputLocationLocation.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException_2Input);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private synchronized void addArrivedRecordsInput {}ProcessRecordsInput;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private synchronized void addArrivedRecordsInput propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput orProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput includeRecordsInput;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput){",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput() {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput 74, processRecordsInput;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private synchronized void addArrivedRecordsInput {}ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throws InterruptedException_2Input) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput long throws InterruptedException {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private synchronized void addArrivedRecordsInputORQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput* InterruptedExceptionRecordsInput) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.NONE) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private synchronized void addArrivedRecordsInput long throwsRecordsInput() {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private synchronized void addArrivedRecordsInputFactory throws throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput = requestedRecordsInput;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.SIZERecordsInput) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throwsRecordsInput. InterruptedException) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput long throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private synchronized void addArrivedRecordsInputURLProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > 0;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private synchronized void addArrivedRecordsInputEntity.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedExceptionRecordsInput) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput){",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private synchronized void addArrivedRecordsInputingProcessRecordsInput;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.ATE_ InterruptedException_Input;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private synchronized void addArrivedRecordsInput execute InterruptedExceptionRecordsInput) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput this. throws throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private synchronized void addArrivedRecordsInput_TYPE throws throwsRecordsInput;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput.ProcessRecordsInput;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-184": {
        "fixes": [
            {
                "k": 1,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".filter(it -> attributeType.getJavaType().equals(it -> attributeType);",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name), attributeType);",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name -> attributeType);",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name)){",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".filter(it -> attributeType.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".filter(it -> attributeType.getJavaType().equals(namename);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".filter(it -> attribute.getJavaType().equals(name);",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name -> {",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity'",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".filter(it -> it.getJavaType().equals(attributeType);",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name, attributeType);",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity'",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity'",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".filter(it -> attributeType.getJavaType().equals(attributeType)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'class",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'class",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it's GT GT a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".filter(it -> it.getJavaType().equals(name);",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't matched",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".filter(it -> attributeType.getJavaType().equals(this.entity)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it's GT a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it's GT a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't matched",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned.class",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but nodes",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it's GT GT a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it's GT GT a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' used as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity'",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".filter(it -> attributeType.getJavaType().equals(it -> attributeType;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it's GT a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a 'final'.",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'class",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it is the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a 'final'.",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' characters",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' used as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".filter(it -> it.getJavaType().equals(name)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' used as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but also check the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but nodes",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' used as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' used as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it's GT a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't also check the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it's GT GT a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' nulls but it't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should never be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity' be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' used as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'final'.",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity' characters",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".filter(it -> attributeType.getJavaType().equals(name); // FIXME: a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't a parameter should not be assigned. Also declare the methods parameters as 'entity't lowercase",
                "identical": false
            }
        ],
        "buggy_line": ".filter(it -> it.getJavaType().equals(entity)) //",
        "fixed_line": ".filter(it -> entity.equals(it.getJavaType())) //"
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625.0;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 16;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 16;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625%625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525 * 0.0625;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.06252;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.set(Position.PREFIX_TEMP + index, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] = 16;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625%625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.set(index + 1, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 % 16;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525 * 0.0625;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.set(Position.PREFIX_TEMP + index, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.set(index + 1, Short.parseShort(data[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.set(Position.PREFIX_TEMP + index, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525%625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525%625;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625.0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 6 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.set(index + 1, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625};",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625%625;",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-183": {
        "fixes": [
            {
                "k": 1,
                "patch": "return queryAll(entityClass, pageable, null);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return queryAll(entityClass, pageable, null, null);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return queryAll(entityClass, pageable, null;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return queryAll(entityClass, pageable, null, pageable);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return queryAll(entityClass, pageable, nullserClass, null);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return queryAll(entityClass, pageable, nullDClass, null);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return queryAll(entityClass, pageable, null != null);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return queryAll(entityClass, pageable, nullDClass, pageable);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return queryAll(entityClass, pageable, null != null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return queryAll(entityClass, pageable, nullserClass, pageable);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_LIST, null);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return queryAll(entityClass, pageable, nullTreatClass, pageable);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY_LIST, null);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_LIST, pageable);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY_LIST, pageable);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_NULLS, null);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY_EMPTY_LIST, null);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return queryAll(entityClass, pageable, null || pageable);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return queryAll(entityClass, pageable, nullD;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return queryAll(entityClass, pageable, null ? null : pageable);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return queryAll(entityClass, pageable, nullCode, null);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_EMPTY_LIST, pageable);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_EMPTY_LIST, null);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY_NULL, null);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_NULLS, pageable);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE, pageable);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return queryAll(entityClass, pageable, null, null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_TYPE, null);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return queryAll(entityClass, pageable, nullRequest, null);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return queryAll(entityClass, pageable, nullAbs, null);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE, null);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_START_PREFIX, null);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_NULL;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_NULL, null);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_NULL;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BEFORE_EMPTY_LIST, null);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return queryAll(entityClass, pageable, nullRequested, null);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_NULL);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BEFORE_EMPTY_NULLS, null);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY_NULLS, null);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return queryAll(entityClass, pageable, nullTreatClass, null);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return queryAll(entityClass, pageable, nullByte);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BEFORE_EMPTY_LIST, pageable);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUTURE_URI, null);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return queryAll(entityClass, pageable, nullTotalTotal, null);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BEFORE_EMPTY_EMPTY_LIST, null);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY_NULL);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_PREFIX, null);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY_NULL;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_IMPLEMENTED);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BEFORE_EMPTY_EMPTY_LIST, pageable);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BE_EMPTY_EMPTY_LIST, null);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return queryAll(entityClass, pageable, nullAll, null);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BE_EMPTY_LIST, null);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return queryAll(entityClass, pageable, null && pageable);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY_EMPTY_LIST, pageable);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return queryAll(entityClass, pageable, null % pageable);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_NULL);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return queryAll(entityClass, pageable, null ? null : pageable;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_TYPE, pageable);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return queryAll(entityClass, pageable, nullset, null);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_START_WITH_PREFIX, null);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_TOLVED, pageable);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_START_TOLVED, pageable);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_URI, null);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return queryAll(entityClass, pageable, nullformform, null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY, pageable);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_NULL, null);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_NULLS, pageable);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_START_WITH_PREFERENCE, null);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BE_EMPTY_LIST, pageable);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_NULL, null);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BEFORE_EMPTY_NULLS, pageable);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BEFORE_EMPTY_NULL);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY_NULL) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_NULL) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_LIST);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BEFORE_EMPTY_NULL, null);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_MODE, null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BEFORE_EMPTY_TYPE, null);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY, pageable);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUTURE_URI_PARTS, pageable);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return queryAll(entityClass, pageable, nullbitField0_, null);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_EMPTY_TYPE, null);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_EMPTY_NULLS, pageable);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return queryAll(entityClass, pageable, nullTotal, null);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MULATION_NOT_BEFORE_EMPTY_LIST, null);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_IN_LIST, pageable);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return queryAll(entityClass, pageable, null routeClass, null);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_NULLS, null);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return queryAll(entityClass, pageable, null.0);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BE_EMPTY_LIST);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_FACTOR, null);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEHAVIOR, pageable);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.Mutation_NOT_BEFORE_EMPTY_START_PREFIX, null);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return queryAll(entityClass, pageable, nullCode);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_NULLABLE, pageable);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_EMPTY, pageable);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return queryAll(entityClass, pageable, null DirtyKind.MUST_NOT_BEFORE_EMPTY_LIST;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return queryAll(entityClass, pageable, null > pageable);",
                "identical": false
            }
        ],
        "buggy_line": "return queryAll(entityClass, pageable, null);",
        "fixed_line": "return queryAll(entityClass, pageable, new SpannerQueryOptions() .setOffset(pageable.getOffset()).setLimit(pageable.getPageSize()));"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return position_ms;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return position_ms(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return position_ms_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return position_ms[position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return position_ms_ that that.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return position_ms.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return position_msOneed.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return position_msView.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return position_mssideParameter(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return position_msType.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return position_ms_.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return position_msHash.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return position_ms = setQueryParameter(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameter_ms);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return position_ms_ms;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return position_msGraph.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return position_msConfig.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return position_ms_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return position_msms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return position_ms_ other.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return position_msms(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return position_msView(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return position_ms(\"position_ms\", setQueryParameter_ms);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return position_ms other other.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return position_ms_ that that.position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return position_msside.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return position_msatest.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return position_ms other.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return position_ms_ that.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameterCount_ms;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return position_msDER.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return position_ms_ that that that.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return position_ms[position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return position_mssideParameter(\"position_ms\", setQueryParameter_ms);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return position_ms_associationTypes.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameterCount;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameter_ms) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return position_ms_ context.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameter);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return position_ms_ that that.position_ms\", setQueryParameterCount;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return position_ms_ context.position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return position_msicms.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return position_ms_ms\", setQueryParameterCount;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return position_ms.position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQuery);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return position_ms(\"position_ms\", setQueryParameter_ms) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return position_msreplaceAllreplaceAll(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return position_ms = setQueryParameter(\"position_ms\", setQueryParameter_ms);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return position_ms_.position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return position_msms(\"position_ms\", setQueryParameter_ms);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return position_ms(\"position_ms\", setQueryParameterCount_ms;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return position_ms_ that that.position_ms\", setQueryParameter_ms);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return position_msOneed.position_ms\", setQueryParameter_ms);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameterTypes_ms;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return position_ms(\"position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return position_msView.position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return position_ms_ that that that.position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return position_ms + setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", schema_ms;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return position_msView(\"position_ms\", setQueryParameter_ms);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return position_ms[position_ms\", setQueryParameterCount;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return position_ms_ that.position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return position_msHash.position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", schema_ms);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return position_mssideParameter(\"position_ms\", setQueryParameter_ms) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return position_ms\", setQueryParameterCount_ms;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return position_ms\", setQueryParameterCount;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return position_ms_ that that.position_ms\", setQueryParameter);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return position_ms_ that that.position_ms\", setQueryParameter_ms) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return position_mst_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return position_ms.position_ms\", setQueryParameterCount;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return position_msType.position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return position_ms_.position_ms\", setQueryParameterCount;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return position_msOneed.position_ms\", setQueryParameter;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameterCount_ms);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return position_ms = setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return position_ms_ that that that.position_ms\", setQueryParameterCount;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return position_ms != setQueryParameterTypes.position_ms;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return position_ms_(\"\\\\position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", distance_ms);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameterName_ms;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return position_ms_ that that.position_ms\", setQueryParameter);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return position_ms = setQueryParameter(\"position_ms\", setQueryParameterCount_ms;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return position_msto_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameter) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return position_ms\", setQueryParameter(\"position_ms;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return position_msView.position_ms\", setQueryParameterCount;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return position_msms;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return position_ms_ other.position_ms\", setQueryParameter;",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-249": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dep = new Clock<>(commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dep = new Clock<>(commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dep = new Clock<>(commitDepBox.dep !=commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dep = new Clock<>(commitDepBox.dep,commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dep = new Clock<>(this.dep != commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dep = new Clock<>(this.dep, commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dep = new Clock<>(this.dep;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, this.dep);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dep = new Clock<>(commitDepBox.dep,commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dep = new Clock<>(commitDepBox.dep !=commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dep = new Clock<>(this.dep !=commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dep = new Clock<>(this.dep,commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= this.dep;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dep = new Clock<>(commitDepBox.dep instanceof Clock<>(commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >=commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dep = new Clock<>(this.dep instanceof Clock<>(commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dep = new Clock<>(commitDepBox.dep != 0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, this.dep;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dep = new Clock<>(commitDepBox.dep ?commitDepBox.dep :commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dep = new Clock<>(commitDepBox.dep != this.dep;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dep = new Clock<>(commitDepBox.dep <=commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dep = new Clock<>(commitDepBox.dep) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dep = new Clock<>(commitDepBox.dep ?commitDepBox.dep : this.dep;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dep = new Clock<>(commitDepBox.dep), this.dep;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dep = new Clock<>(this.dep != commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dep = new Clock<>(commitDepBox.dep :commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dep = new Clock<>(commitDepBox.dep >= commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dep = new Clock<>(commitDepBox.depED_commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dep = new Clock<>(this.dep);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, numberDepBox.dep);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dep = new Clock<>(commitDepBox.depFuture, commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dep = new Clock<>(commitDepBox.dep instanceof Clock(800, commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dep = new Clock<>(this.dep != directoryDepBox.dep;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dep = new Clock<>(commitDepBox.dep -commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dep = new Clock<>(commitDepBox.dep != readDepBox.dep;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dep = new Clock<>(commitDepBox.dep instanceof Clock<>(this.dep);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dep = new Clock<>(commitDepBox.dep > this.dep;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dep = new Clock<>(commitDepBox.dep ?commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dep = new Clock<>(commitDepBox.dep ?commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dep = new Clock<>(this.dep, commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dep = new Clock<>(commitDepBox.depX,commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dep = new Clock<>(commitDepBox.dep != context.dep;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dep = new Clock<>(commitDepBox.dep != directoryDepBox.dep;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dep = new Clock<>(commitDepBox.dep instanceof Clock<>(commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dep = new Clock<>(this.dep instanceof Clock(800, commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dep = new Clock<>(this.dep instanceof Clock<>(commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dep = new Clock<>(commitDepBox.dep).dep;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dep = new Clock<>(commitDepBox.dep > 0;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dep = new Clock<>(commitDepBox.depFuture, this.dep);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dep = new Clock<>(commitDepBox.dep <commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dep = new Clock<>(commitDepBox.depED, commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dep = new Clock<>(commitDepBox.dep instanceof Clock(800, commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dep = new Clock<>(this.dep !=commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dep = new Clock<>(commitDepBox.dep /commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dep = new Clock<>(commitDepBox.dep <=commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dep = new Clock<>(commitDepBox.dep !=commitDepBox.dep) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dep = new Clock<>(commitDepBox.dep\", commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dep = new Clock<>(commitDepBox.depBox.dep;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dep = new Clock<>(commitDepBox.depED,commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dep = new Clock<>(this.dep instanceof Clock(800, commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dep = new Clock<>(commitDepBox.dep(-commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dep = new Clock<>(commitDepBox.dep : this.dep;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dep = new Clock<>(commitDepBox.depX, commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dep = new Clock<>(commitDepBox.depPARAMBox.dep;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dep = new Clock<>(this.dep,commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dep = new Clock<>(commitDepBox.dep < this.dep;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dep = new Clock<>(this.dep > commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, numberDepBox.dep;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dep = new Clock<>(commitDepBox.dep ?commitDepBox.dep : DirtyBox.dep;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dep = new Clock<>(commitDepBox.dep ?commitDepBox.dep : numberDepBox.dep;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dep = new Clock<>(commitDepBox.dep != additionalProperties.dep;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dep = new Clock<>(commitDepBox.dep(-commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dep = new Clock<>(commitDepBox.depCode;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dep = new Clock<>(commitDepBox.depPathBox.dep;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dep = new Clock<>(commitDepBox.dep){",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dep = new Clock<>(commitDepBox.depED_commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dep = new Clock<>(commitDepBox.depPARAMBox.dep);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dep = new Clock<>(this.dep), commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dep = new Clock<>(commitDepBox.depPredicateBox.dep);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dep = new Clock<>(commitDepBox.dep != current.dep;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dep = new Clock<>(commitDepBox.dep != 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dep = new Clock<>(this.dep >= commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dep = new Clock<>(commitDepBox.depBox.dep);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dep = new Clock<>(commitDepBox.dep, commitTimeBox.dep);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dep = new Clock<>(this.dep != directoryDepBox.dep);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dep = new Clock<>(commitDepBox.dep <= this.dep;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dep = new Clock<>(commitDepBox.depFuture, commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dep = new Clock<>(commitDepBox.depBORDER_commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dep = new Clock<>(this.dep /commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dep = new Clock<>(commitDepBox.depFuture,commitDepBox.dep);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dep = new Clock<>(commitDepBox.dep && this.dep;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dep = new Clock<>(commitDepBox.depLINE_commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dep = new Clock<>(this.dep / commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dep = new Clock<>(commitDepBox.dep ?commitDepBox.dep : directoryDepBox.dep;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dep = new Clock<>(commitDepBox.depFuture);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dep = new Clock<>(commitDepBox.dep ?commitDepBox.dep : commitDepBox.dep;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dep = new Clock<>(commitDepBox.dep / this.dep;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dep = new Clock<>(commitDepBox.depPredicateBox.dep;",
                "identical": false
            }
        ],
        "buggy_line": "this.dep = new Clock<>(commitDepBox.dep);",
        "fixed_line": "if (commitDepBox.dep != null) { this.dep = new Clock<>(commitDepBox.dep); } else { this.dep = null; }"
    },
    "Bears-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return _referencedType != match;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return true;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) o;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (_referencedType != null;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return match.equals(o, _referencedType.referencedType);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType.referencedType);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return match match.equals(o, _referencedType.referencedType);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return match.equals(_referencedType, _referencedType.referencedType);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _referencedType.equals(o.referencedType) o;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return _referencedType == match;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return _referencedType != io.referencedType;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return match match.equals(_referencedType, _referencedType.referencedType);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return _referencedType != match) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return match.equals(o, _referencedType.referencedType) o;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return _referencedType != null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return match.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType.equals(o);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return _referencedType.equals(o, _referencedType.isSelfReferencedType);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) o).getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : falseSelfReferencedType.getSelfReferencedType.equals(o);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType.isSelfReferencedType);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType.equals(o);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType.getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (_referencedType != match) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return match.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType.type);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return match match.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType.equals(o);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return other.referencedType != _referencedType.getClass;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return _referencedType != match.getClass;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return _referencedType.equals(o)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return other.referencedType == _referencedType.getClass;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return _referencedType.equals(o), _referencedType.referencedType);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return _referencedType != o;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return match match.equals(o, _referencedType.referencedType) o;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType()));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return match match.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : falseSelfReferencedType.getSelfReferencedType.equals(referencedType);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _referencedType.equals(o.referencedType) ? o : _referencedType.getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return _referencedType.equals(o.referencedType) ? o : _referencedType.getSelfReferencedType.equals(referencedType);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType.referencedType) o;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return _referencedType.equals(o.referencedType);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _referencedType.equals(o.referencedType) ? o : _referencedType.getSelfReferencedType.equals(o);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return _referencedType.equals(o._referencedType);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType.-referencedType);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return _referencedType != matchObject.getClass;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) o);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _referencedType != match match;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : : _referencedType.getSelfReferencedType.equals(o);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return match.equals(_referencedType, _referencedType.referencedType) o;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return _referencedType.equals(o._referencedType) o;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return _referencedType.equals(oImplementType.referencedType, _referencedType.referencedType);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return match.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType.equals(referencedType);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return _referencedType.equals(o.referencedType)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return _referencedType.equals(o) o;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return _referencedType.equals(o.referencedType) ? o : _referencedType.getSelfReferencedType.equals(this.referencedType);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return match.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType.equals(this.referencedType);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : falseSelfReferencedType.getSelfReferencedType.equals(this.referencedType);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return _referencedType != io.referencedType.equals(o)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return _referencedType != match) { _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return match.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return _referencedType.equals(o2, _referencedType.referencedType);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return _referencedType.equals(o, _referencedType.type);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : falseSelfReferencedType.getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType.property);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : falseSelfReferencedType.getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _referencedType.equals(o, _referencedType.typeSelfReferencedType);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return _referencedType.equals(o, _referencedType..referencedType);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return match match.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType.equals(this.referencedType);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType) o;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return match match.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType.equals(referencedType);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return _referencedType != match; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return match match.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType.parentSelfReferencedType);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return other.referencedType != _referencedType.getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType))) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) oSelfReferencedType.getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType.equals(this.referencedType);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : : _referencedType.getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : _referencedType.getSelfReferencedType.equals(referencedType);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return match.equals(o, _referencedType.referencedType) o).getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return other.referencedType == _referencedType.getSelfReferencedType;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return match.equals(_referencedType, _referencedType.isSelfReferencedType);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return this.referencedType != match;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : falseSelfReferencedType.getSelfReferencedType.equals(_referencedType);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) o).getSelfReferencedType.equals(referencedType);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return _referencedType != match starts withType.equals(o.referencedType) o;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o.referencedType.getSelfReferencedType);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return _referencedType != match) o;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o.referencedType : _referencedType.getSelfReferencedType.equals(o);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return o instanceof match matchType.ITED_referencedType.equals(_referencedType, _referencedType.referencedType);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return _referencedType.equals(o, _referencedType.referencedType) ? o : match match.getSelfReferencedType.equals(o);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _referencedType.equals(o, _referencedType.-referencedType);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return _referencedType.equals(o.referencedType, _referencedType.type) o;",
                "identical": false
            }
        ],
        "buggy_line": "// Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));",
        "fixed_line": "if (o.getClass() == getClass()) { // 16-Jun-2017, tatu: as per [databind#1658], can not do recursive call since // there is likely to be a cycle... // but... true or false? return false; /* // Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType())); */ } return false;"
    },
    "Bears-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (_enumsByIndex.length == 2) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (_enumsByIndex > 0 ) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (_enumsByIndex.length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (_enumsByIndex.length == 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (c == indexes.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (name.length > 16 ) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (_enumsByIndex.length == 16) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == 5) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (_enumsByIndex.length > 0 ) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == 0) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length == 5) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length == 0;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == 1) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (c == indexes.VALUE_ON_FOR_NUMBER && _enumsByIndex.length == 5) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (_enumsByIndex == JsonToken.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (_enumsByIndex.length == 4) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if ( ctxt == indexes.TYPE_ON_FOR_NUMBER && _enumsByIndex.length == 5) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (c == indexes.TYPE_ON_FOR_NUMBER && _enumsByIndex.length == 5) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (_enumsByIndex.length > 16 ) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (_enumsByIndex.length == 16 && _beanProperties.length == 5) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (name == indexes.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (_enumsByIndex > name.length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (c == indexes.INT_ON_FOR_NUMBER && _enumsByIndex.length == 5) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (_enumsByIndex >= 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (_enumsByIndex.length > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (_enumsByIndex >= _beanProperties.length) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (_enumsByIndex > 0 && _beanProperties.length == 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (_enumsByIndex.length > 16 && _beanProperties.length == 5) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (_enumsByIndex.length == 1) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (c == indexes.VALUE_NUMBER && value >= _enumsByIndex.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (value.length > 16 ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length == 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (_enumsByIndex.length == 16 && _beanProperties. allowAbsolute_ON_FOR_NUMBER ) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if ( ctxt == indexes.TYPE_ON_FOR_NUMBER && _enumsByIndex.length == 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (_enumsByIndex > 0 && _beanProperties.length == 1) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == 4) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (_enumsByIndex.length > 0 && _beanProperties.length == 1) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (value >= 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length == 1) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && value.length == 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (_enumsByIndex.length == 16 && _objectIdReader. allowAbsolute_ON_FOR_NUMBER ) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (c == indexes.VALUE_ON_FOR_NUMBER && _enumsByIndex.length == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (c == indexes.VALUE_FOR_NUMBER && _enumsByIndex.length == 5) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (_enumsByIndex.length == 16 ) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (c == indexes.TYPE_ON_FOR_NUMBER && _enumsByIndex.length == 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (c == indexes.TYPE_ON_FOR_NUMBER ) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (name.length > 16) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (_enumsByIndex;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (c == indexes.VALUE_ON_FOR_NUMBER && _enumsByIndex.length == 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (c == indexes.INT_ON_FOR_NUMBER && _enumsByIndex.length == 0) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (c == indexes.TYPE_ON_FOR_NUMBER && _enumsByIndex.length == 0;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if ( ctxt == indexes.VALUE_NUMBER && _enumsByIndex.length == 5) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (_enumsByIndex.length > 0 && _beanProperties.length == 5) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length == 2;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length == JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (c == indexes.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (_enumsByIndex.length > 0 && _beanProperties.length == 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length == JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if ( ctxt.length > 16 ) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (c == indexes.INT_ON_FOR_NUMBER && _enumsByIndex.length == 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (c == indexes.INT_ON_FOR_NUMBER ) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (_enumsByIndex.length == 16 && _objectIdReader. allowAbsolute_ON_FOR_NUMBER;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if ( ctxt == indexes.TYPE_ON_FOR_NUMBER && _enumsByIndex.length == 0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && flags == _enumsByIndex.length;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (_enumsByIndex.length == 16 && _beanProperties. allowAbsolute_ON_FOR_NUMBER;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == 2) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length == JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == 9;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (c == indexes.length) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (_enumsByIndex.length) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if ( ctxt == indexes.TYPE_ON_FOR_NUMBER ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (_enumsByIndex.length == 16 && _beanProperties. allowsByIndex );",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (c == indexes.CLOSE_FOR_NUMBER && _enumsByIndex.length == 5) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (c == indexes.TYPE_FOR_NUMBER && _enumsByIndex.length == 5) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length == 16;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (c == indexes.VALUE_ON_FOR_NUMBER && _enumsByIndex.length == 1) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (c == indexes.VALUE_NUMBER_BREAK) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (c == indexes.VALUE_NUMBER_VALUE_FOR_NUMBER && _enumsByIndex.length == JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (name.length >= _enumsByIndex.length) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (_enumsByIndex.length > 3 ) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (_enumsByIndex.length > 0 && _beanProperties.length == JsonToken.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (c == indexes.TYPE_ON_FOR_NUMBER && _enumsByIndex.length == JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (valueType == indexes.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (c == indexes.INT_ON_FOR_NUMBER && _enumsByIndex.length == JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (_enumsByIndex.length > 0 && _beanProperties.length == JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (_enumsByIndex > 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == 4;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (c == indexes.VALUE_NUMBER && value.length == 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (c == indexes.VALUE_FOR_NUMBER && _enumsByIndex.length == 0;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (_enumsByIndex.length == 3) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if ( ctxt == indexes.VALUE_NUMBER && _enumsByIndex.length == 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (c == indexes.VALUE_NUMBER && _enumsByIndex.length == JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            }
        ],
        "buggy_line": "} else { // [databind#149]: Allow use of 'String' indexes as well char c = name.charAt(0); if (c >= '0' && c <= '9') { try { int index = Integer.parseInt(name); if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { return ctxt.handleWeirdNumberValue(_enumClass(), index, \"not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\" ); }",
        "fixed_line": "} else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)"
    },
    "Bears-224": {
        "fixes": [
            {
                "k": 1,
                "patch": "Object target = target;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Object source = target;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "Object target = p.source;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "Object target = p.target;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "Object target = this.target;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "Object target = _source.target;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.source != target) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "Object target = this.source;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Object target = _source;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "Object target = EMPTY_BINDINGS_PER_NOTHING;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "Object source = p.source;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Object target = EMPTY_BINDINGS_PER_NOT_IMPLEMENTED; }",
                "identical": false
            },
            {
                "k": 14,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_REORDER_COLUMNS) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "Object target = _p.source;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST.emptyCANCEEDGEOTED_OBJECT) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "Object target = EMPTY_BINDINGS_TRAILING_RESERVED_source; }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Object target = p.empty;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_WORD ) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_URL) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_RESERVED_LIST.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "Object target = EMPTY_BINDINGS_NOTHING;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Object target = source.source;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAVE_PROP_RESERVED_LIST.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAVE_PROP_RESERVED_ADDRESS.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCANCEEDGEOTED_OBJECT) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyC_NOT_IMPLEMENTEDGEOTED_WEIGHT) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCE_AUTHENTICE_source) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target) : Value.emptyMUTURE_RESERVED_WORD ) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCE_source) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOSECONDS.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCEEDGEOTED_source) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_source.emptyCANCE_RESERVED_OBJECT) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST.emptyCLAEDGEOTED_OBJECT) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCLAEDGEOTED_OBJECT) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAVE_source) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAVE_PROP_RESERVED_ADDRESS.emptyCANCE_source) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyCANCE_ROUTEILING_RESERVED_source) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "Object target = _hashArea.source;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCIL_RESERVED_LIST.emptyCANCEEDGEOTED_OBJECT) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_RESERVED_LIST.emptyCANCEEDGEOTED_OBJECT) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyC_NOT_IMPLEMENTEDGEOTED_BEFORE_EMPTY_LIST.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAVE_source.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_PROP_LIST.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCE_AUTHTask.emptyCLAEDGEOTED_source) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCE_DATA) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST.emptyCLAIMULATION) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCE_AUTHTask.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_source.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCANCE_ENGINE_DATA) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAVE_DATA) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCANCE_AUTHTask.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOSECONDS.emptyCANCE_source) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOSECONDS ) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_RESERVED_OBJECT) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_RESERVED_LIST.emptyCANCE_OBJECT) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyC_NOT_IMPLEMENTEDGE_WEIGHT) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_RESERVED_LIST) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCE_AUTHTask.emptyCANCE_source) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOSECONDS.emptyCLAIMMEDIATE_source) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCEEDGEOSECONDS.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST.emptyCANCEEDGEOSECONDS.emptyCANCE_OBJECT) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST.emptyCANCEEDGEOSECONDS.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_RESERVED_LIST.emptyCLAIMMEDIATE_source) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCANCEEDGEOSECONDS ) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCIL_RESERVED_LIST.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LABELS) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST.emptyCLAEDGEOSECONDS.emptyCANCE_OBJECT) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCLAEDGEOSECONDS ) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCLAIMMEDIATE_source) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_RESERVED_LIST.emptyCLAIMULATION) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCE_AUTHTask.emptyCLAEDGEOTED_OBJECT) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_PROP_LIST.emptyCANCEEDGEOTED_OBJECT) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCANCE_AUTHTask.emptyCANCE_source) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_OBJECT) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_RESERVED_LIST.emptyCANCEEDGEOSECONDS.emptyCANCE_OBJECT) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyCANCE_ROOTED_ source != target) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyCANCE_source != target) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOSECONDS.emptyCANCE_DATA) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCE_AUTHTask.emptyCLAEDGEOSECONDS.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAVE_source.emptyCANCEEDGEOTED_OBJECT) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCANCEEDGEOTED_LIST.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCLAEDGEOTED_LIST.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyC_NOT_IMPLEMENTEDGEOTED_BEFORE_EMPTY_LIST.emptyCANCELED) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAVE_PROP_RESERVED_ADDRESS.emptyCANCEEDGEOTED_source) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCANCE_RESERVED_LIST.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOSECONDS.emptyCLAIMMEDIATE_DATA) : target;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST.emptyCANCE104) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_DATA) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAMATCHEDGEOTED_source.emptyCANCE_RESERVED_LIST) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST.emptyCLAEDGEOSECONDS.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCEEDGEOSECONDS ) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_LIST.emptyCANCEEDGEOSECONDS ) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCLAEDGEOTED_source.emptyCLAEDGEOSECONDS.emptyCASCADE) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Object target = EMPTY_BINDINGS; } else if (p.value.emptyC chr ? target : Value.emptyCLAIMMEDIATE_RESERVED_ADDRESS.emptyCANCEEDGEOTED_source.emptyCASCADE) {",
                "identical": false
            }
        ],
        "buggy_line": "Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty();",
        "fixed_line": "try { Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty(); } catch (Exception ex) { return Value.empty();"
    },
    "Bears-151": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (value instanceof String) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if(value instanceof String.valueOf(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if(value instanceof String.valueOf(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value)){",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if(value instanceof String.valueOf(subName, String.valueOf(value)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value), subName) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(subName) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (value instanceof String.put(subName, String.valueOf(subName) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (value instanceof String.valueOf(subProperties, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (subName instanceof String.valueOf(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (value instanceof String.valueOfvalueOf(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value instanceof String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value)){",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (subName instanceof String.valueOf(value, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value), subName)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(subName));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value), subName));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (value instanceof String && subName.put(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (subName instanceof String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value), subName) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (value instanceof String.put(subName, String.valueOf(subName));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (value instanceof String.ParamName, String.valueOf(subName) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value instanceof String.valueOf(value));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if(value instanceof String.valueOf(subName, String.valueOf(value);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value), subName);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value instanceof String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if(subName instanceof String.valueOf(value, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value instanceof String.valueOf(value)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (subName instanceof String.valueOf(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (value instanceof String.additionalProperties.put(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (value instanceof String.SubName, String.valueOf(subName) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (value instanceof String.valueOf(subProperties, String.valueOf(value)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (value instanceof String.additionalProperties.valueOf(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (subName instanceof String.valueOf(subName, String.valueOf(value)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (value instanceof String || subName.put(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if(subName instanceof String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (value instanceof String.PER.valueOf(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(subName)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (value instanceof String.valueOf(subProperties, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value)).",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value){",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (value instanceof StringLiteralName.put(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (value instanceof String.valueOfvalueOf(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value), subName));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if(subName instanceof String.valueOf(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (value instanceof String.(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value), subName)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value instanceof String.valueOf(value));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (value instanceof String && subName.put(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (value instanceof String.put(subName, String.valueOfvalueOf(value) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (value instanceof String.subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (value instanceof String.resolvedName.put(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (value instanceof String.valueOf(subName) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if(value instanceof String.valueOf(subName, String.valueOf(subName) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (value instanceof String.valueOf(subProperties.length, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value); }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (value instanceof String.valueOf(subProperties.value, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (value instanceof String.put(subName, String.valueOf(subName)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value) ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value), subName);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (value instanceof String.iator.valueOf(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (value instanceof String.BackFrom(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOfvalueOf(value) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (value instanceof String. typeProperties.valueOf(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (subName instanceof String.valueOf(value, String.valueOf(value)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (value instanceof String.with(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (value instanceof String.modelName, String.valueOf(subName) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value), subName;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value])) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (value instanceof String.subName, String.valueOf(subName) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value) ) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (value instanceof String.Operator.put(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (value instanceof String.valueOfvalueOf(subName, String.valueOf(value)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (subName instanceof String.valueOf(value, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (value instanceof String.put(subName, String.valueOf(value instanceof String.valueOf(value)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value instanceof String.valueOf(value);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (value instanceof String.ParamName, String.valueOf(subName));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if(subName instanceof String.valueOf(value, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (value instanceof String.ParamName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (value instanceof String.valueOf(subtypes.value, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (value instanceof String.additionalProperties.put(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if(value instanceof String.valueOf(subName, String.valueOf(subName));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (value instanceof String.additionalProperties.valueOf(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (value instanceof String.additionalProperties.valueOf(subName, String.valueOf(value)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if(subName instanceof String.valueOf(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (value instanceof String || subName.put(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (value instanceof String.format(subName, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (value instanceof String.valueOf(subKey, String.valueOf(value) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (value instanceof String.valueOf(subName, String.valueOf(value;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if(value instanceof String.valueOf(subName, String.valueOf(value)){",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (value instanceof String.PER.valueOf(subName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if(subName instanceof String.valueOf(value, String.valueOf(value)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (value instanceof String) { subProperties.put(subName, String.valueOf(value)); }",
        "fixed_line": "subProperties.put(subName, String.valueOf(value));"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "paintComponent(speedAngle;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paintComponent(speedAngle);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paintComponent( speedAngle;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paintComponent( speedAngle);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paintComponent.getGraphics());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paintComponent = speedAngle;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paintComponent swaggerType.PedalPosition;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paintComponentContext.getGraphics;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paintComponentContext.getGraphics());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paintComponentContext.getGraphicsonInPedalPosition;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paintComponent.getGraphics;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paintComponentContext.getGraphics2PedalPosition;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paintComponentContext.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paintComponentContext.getGraphics {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paintComponentContext.getGraphics = speedAngle;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paintComponentPed.getGraphics;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paintComponent(speedAngle = speedAngle;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paintComponent(speedAngle.getGraphics;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paintComponent(speedAngle.getGraphics());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paintComponent.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paintComponentContext.getGraphicsrangePedalPosition;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paintComponentContext.getGraphics0.0.PedalPosition;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paintComponentSetgetGraphics;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paintComponent.getGraphics = speedAngle;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paintComponentContext.getGraphics() {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paintComponent upper upper.getGraphics());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paintComponentContext.getGraphicsicPedalPosition;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paintComponentContext.getGraphicsedPedalPosition;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paintComponent(speedAngle) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paintComponent.getGraphics {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paintComponent(speedAngle, fileAngle);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paintComponent swaggerType.PedalPositions;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paintComponent(speedAngle, ccAngle);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paintComponent(speedAngle, cc cc;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paintComponent(speedAngle.leftGraphics;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paintComponent(0edPedalPosition;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paintComponent(0Saturated;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paintComponent(speedAngle, cc cc);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paintComponent(speedAngle, fileAngle;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paintComponent swaggerType.PedalRoute;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paintComponent executor = speedAngle;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paintComponent swaggerType.PedalPosition(2);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paintComponent(0SedalPosition.11PedalPosition;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paintComponent swaggerData.getGraphics;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paintComponent(speedAngle, ccAngle;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paintComponent upper upper.getGraphics;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paintComponent upper upper = speedAngle;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paintComponentPed.getGraphics = speedAngle;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paintComponentContext.getGraphics cc;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paintComponentContext.getGraphics[0];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paintComponent swaggerType.Pedal;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paintComponentRoutegetGraphics;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paintComponent swaggerType = speedAngle;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paintComponent swaggerType.PedalRoute = speedAngle;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paintComponent upper.getGraphics());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paintComponent swaggerType.Pedal \", speedAngle;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paintComponent.getGraphicsedal = speedAngle;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paintComponentContext.getGraphics2PedalPositions;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paintComponent classPacket = speedAngle;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paintComponentContext.getGraphicsHERIT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paintComponent.getGraphics() {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paintComponent(speedAngle, yesAngle;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paintComponent(speedAngle, cc ccAngle;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paintComponent(0SedalPosition;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paintComponentContext.getGraphics2Pedal \", speedAngle;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paintComponent swaggerType.PedalPosition(speedAngle);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paintComponent contentGraphics = speedAngle;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paintComponent(0edPedalPosition.getGraphics;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paintComponent swaggerType.PedalPosition -= speedAngle;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paintComponent(0edalPosition;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paintComponent swaggerType.PedalPosition = speedAngle;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paintComponentPed.getGraphics());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paintComponentContext = speedAngle;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paintComponentContext.getGraphics2PedalRoute = speedAngle;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paintComponent.getGraphics cc;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paintComponent swaggerType.PedalRoute(speedAngle;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paintComponent(0 -= speedAngle;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paintComponentContext.getGraphics2PedalRoute;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paintComponent upper = speedAngle;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paintComponentPed.getGraphics {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paintComponentPed.getGraphics() {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paintComponentManager.getGraphics());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paintComponent swaggerType.PedalRoute matching(speedAngle;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paintComponentPARENT = speedAngle;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paintComponent1\" = speedAngle;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paintComponentContext.getGraphics2Pedal = speedAngle;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paintComponentEntity.getGraphics());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paintComponent(speedAngle, cc ccAngle);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paintComponent.getGraphicsedal;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paintComponent swaggerType.PedalPosition(1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paintComponent swaggerType.PedalPosition[1], speedAngle;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paintComponent swaggerType.PedalPositionMedalPosition;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paintComponent this.getGraphics;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paintComponent swaggerType.PedalPosition(speedAngle;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paintComponentContext.getGraphicsonInPedalPositions;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paintComponent upper.getGraphics;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paintComponentFlow(speedAngle;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paintComponent swaggerType.PedalRepair;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paintComponent(1). > speedAngle;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paintComponent upper upper.getGraphicsedalPosition;",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (format != JsonFormat.FALSE) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (format != _setFormat) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (format != _format) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (format != JsonFormat.FALSE) format;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (format != JsonToken.VALUE_NUMBER_ARRAY) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (format != JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (format != _suppressable) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (format != JsonToken.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (format != _setFormatReaders) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (format != JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (format != JsonToken.VALUE_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (format != JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (format != JsonToken.VALUE_STRING) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (format != _suppressable) format;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (format != JsonToken.FALSE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (format != _suppressableValue) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (format != JsonToken.START_ARRAY) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (format != _format) format;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (format != JsonFormat.TYPE_ARRAY) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (format != _setFormat) format;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (format != JsonFormat.TRUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (format != JsonToken.VALUE_FALSE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (format != _serializationShape) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (format != _suppressableFormat) format;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (format != _defaultValue) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (format != _suppressableFormat) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (format != JsonFormat.VALUE_FALSE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (format != _setFormatR) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (format != _serializationInclusion) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (format != JsonToken.VALUE_NUMBER_BREAK) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (format != JsonToken.VALUE_EMBEDDED_OBJECT ) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (df != JsonFormat.FALSE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (format != JsonFormat.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (format != JsonFormat.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (format != JsonToken.VALUE_NUMBER_INT) format;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (format != JsonToken.VALUE_NUMBER_VIEMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (format != _defaultFormat) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (format != JsonFormat.TYPE_OBJECT) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (format != _suppressableParser) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (format != _setFormat;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (format != DEFAULT_UNKNOWN_FORMAT) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (format != JsonFormat.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (format != JsonToken.VALUE_TRUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (format != JsonFormat.VALUE_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (format != JsonToken.VALUE_NUMBER_ARRAY) format;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (format != JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (format != JsonFormat.VALUE_NUMBER) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (format != _valueClass) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (format != JsonToken.TRUE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (format != _serializationInProject) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (format != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (format != _defaultFormat) format;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (format != _suppressableTypes) format;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (format != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (format != JsonFormat.TYPE_LOCALE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (format != JsonFormat.GENERATOR_FEATURE_STRICT_HEADERS) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (format != JsonToken.TYPE_ARRAY) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (format != _suppressableValue) format;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (format != JsonToken.VALUE_FALSE) format;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (format != JsonFormat. stringBuilder) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (format != _suppressableField) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (format != _suppressable proof) format;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (format != _suppressableSerializers) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (format != _suppressableParser.FALSE) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (format != _filteredProps) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (format != JsonFormat.FALSE) format = DEFAULT_TIME_FORMAT_STR_ISO8601;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (format != _suppressableMember) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (format != JsonFormat.VALUE_FALSE) format;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (format != _numberLong) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (format != JsonToken.VALUE_EMBEDDED_OBJECT) format;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (format != JsonFormat.GENERATOR_FEATURE_USE_HEADER) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (format != JsonFormat.GENERATOR_FEATURE_STRICT_HEADERS) format;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (format != JsonToken.VALUE_NUMBER_BIG_ARRAY) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (format != JsonFormat.GENERATOR_FEATURE_USE_DEFAULT) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (format != JsonToken.VALUE_NUMBER_BIGINT) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (format != JsonFormat.VALUE_EMBEDDED) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (format != _enums) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (format != JsonFormat.FALSE) format = DEFAULT_FORMAT_STR_ISO8601;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (format != _suppressableField) format;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (format != JsonFormat.VALUE_STRING) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (format != _setFormat.FALSE) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (format != _suppressableParameter) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (format != JsonToken.VALUE_NUMBER_FLOAT) format;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (format != _suppressableText) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (format != JsonToken.VALUE_NUMBER_VIEMBEDDED_OBJECT ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (format != JsonFormat.GENERATOR_FEATURE_ALLOW_COMMENTS) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (format != _setFormatR1_LAST) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (format != JsonToken.VALUE_NUMBER_BREAK) format;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (format != JsonToken.VALUE_ARRAY) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (format != JsonToken.VALUE_NUMBER_FLOAT) return JsonToken.FALSE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (format != JsonFormat.GENERATOR_FEATURE_SKIP_FIRST_DATA) format;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (format != JsonFormat.DOUBLE) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (format != JsonFormat.VALUE_TRUE) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (format != JsonToken.VALUE_NUMBER_COLUMNS) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (format != _suppressableSerializer) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (format != JsonFormat.VALUE_NUMBER_INT) format;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (format != JsonToken.VALUE_NUMBER_BIG) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (format != _suppressableSE) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (format != _len) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (format != _suppressableSer) {",
                "identical": false
            }
        ],
        "buggy_line": "if (property != null) { JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format != null) { // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) { TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this;",
        "fixed_line": "if (property == null) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky.. // First: custom pattern will override things if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } // Otherwise, need one of these changes: final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !hasTZ && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); // Jackson's own `StdDateFormat` is quite easy to deal with... if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } // 08-Jun-2017, tatu: Unfortunately there's no generally usable // mechanism for changing `DateFormat` instances (or even clone()ing) // So: require it be `SimpleDateFormat`; can't config other types if (!(df0 instanceof SimpleDateFormat)) { // serializers.reportBadDefinition(handledType(), String.format( serializers.reportMappingProblem( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { // Ugh. No way to change `Locale`, create copy; must re-crete completely: df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df);"
    },
    "Bears-110": {
        "fixes": [
            {
                "k": 1,
                "patch": ".any;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".any().or;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".any[0];",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".any != NR_UNKNOWN;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_NBR;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".any=\").or;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".any = DEFAULT_MUST_NOT_NBR;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTEDGBR;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".any != NR_BIGINT;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".any instanceof NR_BIGINT).or;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_BE;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".any instanceof().or;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_INSTRUBR;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".anyConverters != NR_UNKNOWN;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".any){",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".any = DEFAULT_MUST_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".any % a;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTEDGATE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IN_KEY;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".any != DEFAULT_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".any instanceof NR_BIGINT;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_NBR).or;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".any = DEFAULT_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".any = DEFAULT_MUST_NOT_BE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IN_NBR;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".any = DEFAULT_MUST_NOT_IMPLEMENTEDGBR;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".anyConverters != NR_BIGINT;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".any != DEFAULT_VALUE;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTEDGE_VALUE;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_INDIMENSIONS;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".any = DEFAULT_INSTANCE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".any = DEFAULT_BRBR;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".any(6).or;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_NEGBR;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".any = DEFAULT_MUST_NOT_INSTRUBR;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".any = PATTERN_END_OF_STRING;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".any instanceof NR_UNKNOWN;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".anyEdgeWeights = DEFAULT_LOGGED_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".any != NR_BIGINT).or;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".any(0).groupEnd;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTED).or;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_INSTRUBRS;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".any instanceof NR_BIGDECIMAL).or;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".any = DEFAULT_LOGGED_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTEDGBRS;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".any(0).or;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".anySetter().or;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".any = DEFAULT_NBR;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".any = DEFAULT_MUST_NOT_IN_KEY;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTEDGED;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_QUBR;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".any = DEFAULT_MUST_NOT_IMPLEMENTEDGATE;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_GBR;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTED_QUBR;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTED);",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".any(\"\\\\d+)_IMPLEMENTED).or;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".anyEdgeWeights = DEFAULT_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IN_KEY).or;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_LAST_VALUE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".any instanceof NR_OF_RESERVED_VIEMBEDDED;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".any != NR_OF_WEEK).or;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".any}\", NR_OF_RESERVED_VIEMBEDDED).or;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".any}\", NR_OF_RESERVED_VIEMBEDDED;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_QUBR).or;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".anyPage != NR_BIGINT;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".any(\"\\\\d+)_END).or;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".any = DEFAULT_MUST_NOT_INDIMENSIONS;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_BEFORE).or;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".any = DEFAULT_MUST_NOT_IMPLEMENTED).or;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".anyEdgeWeights = DEFAULT_SHAKE_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTED_KEY;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_BEFORE_START;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".anyMISSING_INSTRUBRS_FIELD_NUMBER;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".anyEdgeWeights = DEFAULT_BRS;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".any instanceof NR_OF_RESERVED_VIEMBEDDED).or;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IN_NEGBR;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_BE_NULL;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".any instanceof NR_OF_WEEK).or;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".any = DEFAULT_MUST_NOT_IN_NBR;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_INGBR;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".anyPage != NR_UNKNOWN;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IN_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_GBR).or;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".any}\", NR_OF_RESERVED_VIEMBEDGATE;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".any instanceof NR_OF_RESERVED_CHARACTERS;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".anyEdgeWeights = DEFAULT_KEY_NBR;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IMPLEMENTED_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IN_COLUMN;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".any = DEFAULT_MUST_NOT_GBR;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_BEFORE_END;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".any = DEFAULT_IOUS_COLUMN_INDEX;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".any = DEFAULT_MUST_NOT_BEFORE).or;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".any = DEFAULT_MUST_NOT_IMPLEMENTEDGE_VALUE;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".any}\", NR_OF_RESERVED_VIEVAL().or;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_INDIMENSION;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".anyEdgeWeights = DEFAULT_MUST_NOT_IN_BIG_KEY).or;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".anyEdgeWeights = DEFAULT_MUSTERS_NBR;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".any = DEFAULT_VALUE;",
                "identical": false
            }
        ],
        "buggy_line": ".any()",
        "fixed_line": ".expression(\",.*\") .or() .text(\"#\")"
    },
    "Bears-235": {
        "fixes": [
            {
                "k": 1,
                "patch": "Account account = wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "accountRepository.orElseThrow(accountAccount;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "accountRepository.orElseThrow(accountAccount);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "accountRepository.orElseThrow(accountId;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "accountRepository.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow(());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "Account account account = wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "accountRepository.orElseThrow(accountAccount.length;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow_8);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "accountRepository.orElseThrow(accountAccount)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "Account account = wrappedAccount.orElseThrow(();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "accountRepository.orElseThrow(() _accountId;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.class);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow(()::new);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "accountRepository.orElseThrow(4, wrappedAccount.orElseThrow(());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow < 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "accountRepository.hostElseThrow(accountId;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "accountRepository.orElseThrow(accountAccount.orElseThrow(()::new);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow < 30;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Account account = wrappedAccount.orElseThrow(accountId;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "accountRepository. Account(accountId;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow consumer);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "accountRepository.orElseThrow(() should this.accountRepository;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "accountRepository.orElseThrow(4, wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "Account account = wrappedAccount.orElseThrow(()::new);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "accountRepository.orElseThrow(accountAccount.orElseThrow(());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "accountRepository.orElseThrow(accountId, wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "accountRepository.orElseThrow(account);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow(();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrownumTypes);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "accountRepository.orElseThrow(account / wrappedAccount.orElseThrow(());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.length);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "Account account = accountRepository.orElseThrow;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "route account account = wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "route accountRepository.orElseThrow(accountAccount);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "route accountRepository.orElseThrow(accountAccount;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow_8;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "accountRepository.orElseThrow(accountId, wrappedAccount.orElseThrow(());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow)\", wrappedAccount);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "Account account = wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "accountRepository.orElseThrow(accountAccount) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow chunk::new);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow_NAME);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "accountRepository.orElseThrow(accountAccount.class);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow(()_account);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow)\", wrappedAccount.orElseThrow(());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrowRequest::new);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow(4, wrappedAccount);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.endElseThrow;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrowPeriod);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow elapsed);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if accountRepository.orElseThrow(accountAccount;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if accountRepository.orElseThrow < 30Account.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow_account);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "Account account = wrappedAccount.orElseThrow(()::new;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "accountRepository.orElseThrow(account / wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow < 10;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount::new);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrowArguments);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow < error;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.length;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow chunk);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "accountRepository.orElseThrow(account, wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "routeroute account account = wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "accountRepository.orElseThrow(account, wrappedAccount);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow w);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow(accountId);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "accountRepository.orElseThrow(account / wrappedAccount.orElseThrow(()::new);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "accountRepository.orElseThrow(accountAccount.orElseThrow < 30;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow(()\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "accountRepository.orElseThrow(accountAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if accountRepository.orElseThrow < 30Account.orElseThrow(()::new);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow chunk;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow <null;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrowFrom);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow < this.accountId;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow_account_NAME);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "accountRepository.orElseThrow(accountId, wrappedAccount.orElseThrow(()::new);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "accountRepository.orElseThrow(accountAccount.orElseThrow, wrappedAccount);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow < nulls;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "accountRepository.orElseThrow(accountAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "accountRepository.hostElseThrow(accountAccount;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "accountRepository.orElseThrow(() JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "route accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow < success;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow_accountId);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrowname);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow LOGGER::new);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow < size;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "Account account = wrappedAccount.orElseThrow(account);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrowJob);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "accountRepository.orElseThrow(accountId, wrappedAccount.orElseThrow_8);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow < 32;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "modulus = wrappedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "accountRepository.orElseThrow(() _account);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "accountRepository.orElseThrow(accountAccount, wrappedAccount.orElseThrow_NAME;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (hasAnyChildrenAccountEnabled(account)){ throw new IllegalStateException(\"Children accounts enabled\"); } account.setDisabled(true); accountRepository.save(account); } private boolean hasAnyChildrenAccountEnabled(Account account){ return account.getChildren().stream() .filter(a -> !a.isDisabled()) .findAny() .isPresent(); }"
    },
    "Bears-234": {
        "fixes": [
            {
                "k": 1,
                "patch": "creditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "creditedAccounticAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "creditedAccountBalanceDefault creditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "creditedAccountTasksAccountWrapper.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "creditedAccountBalance = creditedAccountId;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "creditedAccountId is creditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "creditedAccountBalanceHandler creditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "creditedAccount Build creditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "creditedAccountiden creditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "creditedAccountIdImpl creditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrow(();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "creditedAccountBalance.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrow(();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "creditedAccountId.orElseThrowAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrow, amount);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "creditedAccountPS creditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrowAccountBalance;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "creditedAccountBalance.orElseThrowAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "creditedAccount inneritedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "creditedAccountBalance = creditedAccountWrapper.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "creditedAccountTasksAccountWrapper.orElseThrow, amount);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "creditedAccount undebitedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "creditedAccountediAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrow, amount);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "creditedAccountBalance = creditedAccountBalance.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "creditedAccountVCitedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "creditedAccountBalanceNotAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "creditedAccountBalance depthAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "creditedAccountuting creditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "creditedAccountTasksAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "creditedAccount debitedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "creditedAccountBalance = creditedAccountprefix.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "creditedAccount creditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "creditedAccount Build templateAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "creditedAccount.orElseThrowAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "creditedAccountBalance = creditedAccountArgs.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "creditedAccountBalance.orElseThrowitedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "creditedAccountBalance.orElseThrow, amount);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "creditedAccountArgs.orElseThrowAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "creditedAccountBalance = creditedAccountView.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "creditedAccountTasksAccountWrapper.orElseThrowAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "creditedAccountBalance.orElseThrowicAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrowicAccountBalance;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrow;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "creditedAccountTask.orElseThrowAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "creditedAccount TASKAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrow;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "creditedAccount BuilditedAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "creditedAccount EARAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "creditedAccountBalance = creditedAccountTasksAccountWrapper.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrow(());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "creditedAccountBalance = creditedAccountSchema.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrowBalance;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "creditedAccountTasksAccountWrapper.orElseThrow(() creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrowBalance;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "creditedAccountBalance = creditedAccountService.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "creditedAccountBalance = creditedAccounticAccountBalance;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "creditedAccountAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "creditedAccountBalance = creditedAccountBalance.orElseThrow(();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrowicAccountBalance;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "creditedAccount guessAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "creditedAccountBalance = creditedAccountView.orElseThrow, amount);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrow(());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrowitedAccountBalance;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrowworkflowAccountBalance;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "creditedAccountOneAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrowAccountBalance;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "creditedAccountBalance.orElseThrow(() creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "creditedAccountBalance = creditedAccountWrapper.orElseThrow(();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "creditedAccountTasks = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "creditedAccountId = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "creditedAccount ceAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "creditedAccountBalance.orElseThrow(() -> creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "creditedAccountBalance = creditedAccountWrapper.orElseThrow, amount);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "creditedAccountIdPositionsAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "creditedAccountBalance = creditedAccountWrapper.orElseThrowAccountBalance;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "creditedAccountBalance.orElseThrowWrapper.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "creditedAccountTasksAccountWrapper.orElseThrowitedAccountBalance;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "creditedAccountArgs.orElseThrow < amount;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "creditedAccountBalance = creditedAccountService.orElseThrowAccountBalance;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrowitedAccountBalance;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "creditedAccountBalance.orElseThrowAccountBalance;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "creditedAccountBalance = creditedAccountBalance.orElseThrow, amount);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "creditedAccountBalance = creditedAccountBalance.orElseThrowAccountBalance;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "creditedAccountBalanceReducerReducer = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrow 0);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "creditedAccountBalance = creditedAccountService.orElseThrow, amount);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "creditedAccountBalance = creditedAccountService.orElseThrow(();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrowWrapper;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "creditedAccountBalance = creditedAccountService.orElseThrow;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "creditedAccount<AccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "creditedAccount fdAccountBalance = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "creditedAccountBalancepayloadpayload = creditedAccountBalance;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "creditedAccountTasksAccountWrapper.orElseThrowAccountBalance;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "creditedAccountBalance = creditedAccount.orElseThrowworkflowAccountBalance;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "creditedAccountBalance = creditedAccount;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "creditedAccountBalance = creditedAccountediAccountBalance;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "creditedAccountBalance = creditedAccountTasks.orElseThrow 0);",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (debitedAccount.isDisabled() || creditedAccount.isDisabled()){ throw new IllegalStateException(\"Account disabled\"); }"
    },
    "Bears-102": {
        "fixes": [
            {
                "k": 1,
                "patch": "case position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case position.set(Position.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case case position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case position.set(Position.KEY_RSSI, buf) * 0.1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "case position.set(Position.KEY_RSSI, buf;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case position.set(Position.KEY_RSSI, buf buf;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case position.set(Position.KEY_RSSI, buf) * 0.1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "case position.set(Position.KEY_RSSI, buf.readInt;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "case case position.set(Position.KEY_RSSI, buf buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case case position.set(Position.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readInt;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "case NULL.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case NULL.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case case position.set(Position.KEY_RSSI, buf) * 0.1);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case position.set(Position.KEY_RSSI, gsm) * 0.1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case case position.set(Position.KEY_RSSI, buf buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "case case position.set(Position.KEY_RSSI, buf buf;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "case case position.set(Position.KEY_RSSI, buf.readInt;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.read(5;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case text.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case case position.set(Position.KEY_RSSI, buf) * 0.1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "case case position.set(Position.KEY_RSSI, buf;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "case position.set(Position.KEY_RSSI, buf buf) * 0.1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "case case position.set(Position.KEY_RSSI, buf buf.readInt;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "case position.set(Position.KEY_RSSI, gsm) * 0.1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case support.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "case position.set(Position.KEY_RSSI, buf buf) * 0.1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "case REPORT position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "casegb position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case text.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case position.set(Position.KEY_RSSI, buf.read(5;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case traverse position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case support.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case position.set(Position.KEY_RSSI, buf buf buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "case case position.set(Position.KEY_RSSI, gsm) * 0.1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case fixed position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "case position.set(Position.KEY_RSSI, buf.readInt) * 0.1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case matcher.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "caseugment position.set(Position.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case case position.set(Position.KEY_RSSI, buf buf) * 0.1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.read(5 * 0.1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readUnsigned 0.1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case position.set(Position.KEY_RSSI, gsm);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case case position.set(Position.KEY_RSSI, buf buf.read(5;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "casePosition.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "caseugment position.set(Position.KEY_RSSI, buf buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case case position.set(Position.KEY_RSSI, gsm) * 0.1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "casegb position.set(Position.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case case position.set(Position.KEY_RSSI, buf buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readByte() * 0.1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case traverse position.set(Position.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case case position.set(Position.KEY_RSSI, buf buf) * 0.1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case REPORT position.set(Position.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case NULL.KEY_RSSI, buf.readInt;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "case position.set(Position.KEY_RSSI, buf.readInt) * 0.1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case NULL.KEY_RSSI, buf buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case case position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case case text.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case fixed position.set(Position.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case case position.set(Position.KEY_RSSI, buf buf buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "caseOrder.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case traverse position.set(Position.KEY_RSSI, buf buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "casegb position.set(Position.KEY_RSSI, buf buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case position.set(Position.KEY_RSSI, buf buf buf;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case position.set(Position.KEY_RSSI, buf.readUnsigned 0.1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case REPORT position.set(Position.KEY_RSSI, buf buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case matcher.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "caseIOUS.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case position.set(Position.KEY_RSSI, 8;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case position.set(Position.KEY_RSSI, buf.read(5 * 0.1);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case position.set(Position.KEY_RSSI, buf.readByte() * 0.1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.read(3 * 0.1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case case position.set(Position.KEY_RSSI, buf.readInt) * 0.1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case fixed position.set(Position.KEY_RSSI, buf buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case position.set(Position.KEY_RSSI, buf buf buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readBytes(7 * 0.1);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readInt) * 0.1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case case position.set(Position.KEY_RSSI, buf.read(5;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case position.set(Position.KEY_RSSI, buf * 0.1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "case position.set(Position.KEY_RSSI, buf.readLong() * 0.1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "casePosition.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "caseRelationship.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case AST.KEY_RSSI, buf.readInt() * 0.1);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readUnsignedByte() * 0.1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case NULL.KEY_RSSI, buf buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "caseOrder.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case position.set(Position.KEY_RSSI, buf buf buf.readInt;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readed;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readUnsigned(12;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "caseugment position.set(Position.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case position.set(Position.KEY_RSSI, buf.readUnsignedByte() * 0.1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case case.set(position, buf buf buf) * 0.1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "case case text.KEY_RSSI, buf.readInt() * 0.1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case NULL.KEY_RSSI, buf.readUnsignedByte() * 0.1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case position.set(Position.KEY_RSSI, buf buf.readed) * 0.1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case position.set(Position.KEY_RSSI, 2 * 0.1);",
                "identical": false
            }
        ],
        "buggy_line": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break; case 22: position.set(\"profile\", buf.readUnsignedByte()); break; case 66: position.set(Position.KEY_POWER, buf.readUnsignedShort() + \"mV\"); break; case 67: position.set(Position.KEY_BATTERY, buf.readUnsignedShort() + \"mV\"); break; case 70: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
        "fixed_line": "position.set(\"pcbTemp\", (length == 4 ? buf.readInt() : buf.readShort()) * 0.1);"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + content.readableBytes;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + content.readableBytes; // length",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // one for length",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 8 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + content.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + result.readableBytes;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + content.readableBytes; // length",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 3 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 5 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2; // message length",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 3 + 1 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2; // length",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + content.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8; // length",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 15;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 2); // length",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + content.readableBytes;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 4;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(2 + 1 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + length + 2); // message length",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // one for length",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 3 + 8 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 +8, buf.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes; // message length",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 3 + 1 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 3 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 3 + 1 + 2 + content.readableBytes; // length",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(2 + 2 + result.readableBytes + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 4 + 8;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 +8, buf.readableBytes() - 5 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 3 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 5 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 7;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 +8, buf.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 3 + 1 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 3 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 3 + 1 + 2); // message length",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 3 + 1 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 +8, buf.readableBytes() - 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 8 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + content.readableBytes;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(2 + 2 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 8 + 1 + 2 + result.readableBytes;",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    },
    "Bears-109": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.set(Position.KEY_VERSION_FW, buf[index++]);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.set(Position.KEY_VERSION_FW, ptr, values[index++]);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.set(Position.KEY_VERSION_FW, family[index++]);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.set(Position.KEY_VERSION_FW, index++]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.set(Position.KEY_VERSION_FW, configuration[index++]);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.set(Position.KEY_VERSION_FW, family, values[index++]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.set(Position.KEY_VERSION_FW, ptr[index++]);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.set(Position.KEY_VERSION_FW, count, values[index++]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.set(Position.KEY_VERSION_FW, position[index++]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // odd vertex",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.set(Position.KEY_VERSION_FW,timeout[index++]);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.set(VERSION_KEY_VERSION_FW, values[index++]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.set(Position.KEY_VERSION_FW, k[index++]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.set(Position.KEY_VERSION_FW, 0, values[index++]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // : values[index++]);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.set(Position.KEY_VERSION_FW, k, values[index++]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // 2, values[index++]);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //[1], index++]",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // dateFormat",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //[1], index++]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // reserved",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.set(Position.KEY_VERSION_FW, eventPosition[index++]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // even vertex",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //NAMES, values[index++]);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // may be null",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //PARAM, values[index++]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.set(Position.KEY_VERSION_FW,X[index++]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.set(Position.KEY_VERSION_FW, index[index++]);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.set(Position.KEY_VERSION_FW, parser[index++]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.set(Position.KEY_VERSION_FW,Token[index++]);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.set(Position.KEY_VERSION_FW, 2, values[index++]);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //[1], index++position.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.set(Position.KEY_VERSION_FW, this[index++]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //[1], index++",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.set(Position.KEY_VERSION_FW, expression[index++]);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // + values[index++]);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.set(Position.KEY_VERSION_PATTERN, values[index++]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.set(Position.KEY_VERSION_FW, implementationPosition[index++]);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // el index++",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //but first at 0",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.set(Position.KEY_VERSION_FW, _index++]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // event to first at 0",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.set(Position.KEY_VERSION_FW,Y[index++]);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.set(Position.KEY_VERSION_FW,Swagger[index++]);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // num as well",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //ERATURE, values[index++]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // num index++]",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //X, values[index++]);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // el index++]",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.set(Position.KEY_VERSION_FW, index, values[index++]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //[0], values[index++]);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.set(Position.KEY_VERSION_FW, dateFormat[index++]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.set(Position.KEY_VERSION_FW, endIndex, values[index++]);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.set(Position.KEY_VERSION_FW, sentence[index++]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.set(Position.KEY_VERSION_FW, a[index++]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // index++]",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.set(Position.KEY_VERSION_FW, 15[index++]);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.set(Position.KEY_VERSION_FW, minutes, values[index++]);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // event type",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.set(Position.KEY_VERSION_FW, coordinates[index++]);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.set(Position.KEY_VERSION_FW, payload[index++]);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // num by default",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.set(Position.KEY_VERSION_FW, ptr[1], values[index++]);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.set(Position.KEY_VERSION_FW, 2[index++]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // num as otherwise size",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //[1], index++];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.set(Position.KEY_VERSION_FW, data[index++]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.set(Position.KEY_VERSION_FW, name[index++]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.set(Position.KEY_VERSION_FW,12., values[index++]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // num index++",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // 2, values[index++]",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // event to default.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //NAMES, values[index++]",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // num index++]);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // + values[index++]",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.set(Position.KEY_VERSION_FW, entry[index++]);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //(1), index++",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //both first at 0",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //(1), index++]",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.set(Position.KEY_VERSION_FW, view[index++]);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.set(Position.KEY_VERSION_FW, entityId[index++]);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.set(Position.KEY_VERSION_FW, possibleSession[index++]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //(1), index++]);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //PARAM, values[index++]",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // marker for single argument",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.set(Position.KEY_VERSION_FW,Unsigned[index++]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // index++position.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // null",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); //[0], index++]",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.set(Position.KEY_VERSION_FW, value[index++]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.set(Position.KEY_VERSION_FW1, values[index++]);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.set(Position.KEY_VERSION_FW, Value[index++]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.set(Position.KEY_VERSION_FW,Provider[index++]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // null at 0",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.set(Position.KEY_VERSION_FW,values[index++]);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.set(Position.KEY_VERSION_FW, v[index++]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // null at some use the next one",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.set(Position.KEY_VERSION_FW,Name[index++]);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.set(Position.KEY_VERSION_FW, values[index++]); // + 1;",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.KEY_VERSION_FW, values[index++]);",
        "fixed_line": "if (!type.equals(\"Alert\") || protocolType == 0) { position.set(Position.KEY_VERSION_FW, values[index++]); }"
    },
    "Bears-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "lac = Integer.parseInt(s[i]);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "lac = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "lac = Integer.parseInt(p[i]);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "lac = Integer.parseInt(data[i]); break;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "lac = Integer.parseInt(s[i]); break;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "lac = Integer.parseInt(p[i]); break;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "lac = Integer.parseInt((1[i]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "lac = Integer.parseInt(position[i]);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "lac = Integer.parseInt(LACID#\": cid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "lac = Integer.parseInt(KEY[i]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "lac = Integer.parseInt(datatype[i]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.parseInt(p[i]);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "lac = Integer.parseInt(currentPosition[i]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "lac = Integer.parseInt(LACID#\": and Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "lac = Integer.parseInt(from[i]);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "lac = Integer.parseInt(position[i]); break;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "lac = Integer.parseInt((1000, break;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "lac = Integer.parseInt(q[i]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "lac = Integer.parseInt(expression[i]);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "lac = Integer.parseInt( Class[i]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "lac = Integer.parseInt(s[i])) break;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "lac = Integer.parseInt(s[i+1])) = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.parseInt(expression[i]);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "lac = Integer.parseInt(ID[i]);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "lac = Integer.parseInt(LACID#\": cid = Integer.parseInt(expression[i]);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "lac = Integer.parseInt(tail[i]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "lac = Integer.parseInt(render[i]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.parseInt(pids[i]);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "lac = Integer.parseInt((1[i]); break;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "lac = Integer.parseInt(pids[i]);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "lac = Integer.parseInt(LACID#\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "lac = Integer.parseInt((\"data[i]); break; case \"#CID#\": as\": cid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "lac = Integer.parseInt(LACID#\": cid = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "lac = Integer.parseInt((\"data[i]); break; case \"#CID#\": cid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "lac = Integer.parseInt(attribute[i]);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "lac = Integer.parseInt(heading[i]);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "lac = Integer.parseInt(LACID#\": cid = Integer.parseInt(p[i]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "lac = Integer.parseInt(LACID#\":[]\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "lac = Integer.parseInt(symbol[i]);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "lac = Integer.parseInt((1000, break; case#\": cid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "lac = Integer.parseInt((\"#CID#\": and Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "lac = Integer.parseInt((\"#CID#\": and Integer.parseInt(p[i]);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.parseInt(s[i]);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "lac = Integer.parseInt(LACID#\": cid = Integer.parseInt(s[i]);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "lac = Integer.parseInt(KEY_LOCATION[i]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "lac = Integer.parseInt(LACID#\": andInteger.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "lac = Integer.parseInt(s[i], break;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "lac = Integer.parseInt(vertices[i]);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "lac = Integer.parseInt(LACID#\":[] filename = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.parseInt(pifID_DELIM) break;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "lac = Integer.parseInt(temp[i]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "lac = Integer.parseInt((\"#CID#\":s[i]);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.parseInt(pifID[i]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.parseInt(pifID_KEY[i]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.parseInt(categories[i]);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "lac = Integer.parseInt( (\"data[i]);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "lac = Integer.parseInt((\"#CID#\":Binding = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "lac = Integer.parseInt((\"#CID#\":Binding = Integer.parseInt(p[i]);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "lac = Integer.parseInt(s[i]) break;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "lac = Integer.parseInt((\"#CID#\": andInteger.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "lac = Integer.parseInt(Multiple[i]);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "lac = Integer.parseInt(attribute[i]); break;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "lac = Integer.parseInt(caseInsensitive[i]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "lac = Integer.parseInt(pad[i]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "lac = Integer.parseInt((\"#CID#\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "lac = Integer.parseInt((\"data[i]); break; case \"#CID#\": as\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "lac = Integer.parseInt((\"#CID#\":[]\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "lac = Integer.parseInt(s[i+1]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "lac = Integer.parseInt(getAttribute[i]);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "lac = Integer.parseInt(LACID#\":[] label = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "lac = Integer.parseInt(expression[i]); break;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "lac = Integer.parseInt(field[i]);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "lac = Integer.parseInt(LACID#\":[] className = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "lac = Integer.parseInt(LACID#\":[] len = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "lac = Integer.parseInt((\"data[i]); break; case \"#CID#\": cid = Integer.parseInt(p[i]);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "lac = Integer.parseInt(data[i], break;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "lac = Integer.parseInt(encoded[i]);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "lac = Integer.parseInt(LACID#\": and Integer.MAX_VALUE) break;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "lac = Integer.parseInt(gID[i]);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "lac = Integer.parseInt((\"#CID#\":Binding = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "lac = Integer.parseInt((\"#CID#\": = Integer.parseInt(p[i]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "lac = Integer.parseInt(LACID#\": and Integer.parseInt(p[i]);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "lac = Integer.parseInt(LACID#\":[]\": = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "lac = Integer.parseInt(q[i]); break;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "lac = Integer.parseInt(LACID#\": = Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "lac = Integer.parseInt((\"data[i]); break; case \"#CID#\": as\": >= Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "lac = Integer.parseInt( please[i]);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "lac = Integer.parseInt( position[i]); break;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "lac = Integer.parseInt(LACID#\":s = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "lac = Integer.parseInt(frame[i]);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "lac = Integer.parseInt( boundary[i]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "lac = Integer.parseInt((\"#CID#\": cid = Integer.parseInt(bytes[i]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "lac = Integer.parseInt(expected[i]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "lac = Integer.parseInt((\"data[i]); break; case \"#CID#\": as\": cid = Integer.parseInt(p[i]);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "lac = Integer.parseInt(LACID#\":[] content = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "lac = Integer.parseInt(LACID#\": and fallback = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "lac = Integer.parseInt((\"data[i]);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "lac = Integer.parseInt(data[i]); break; case \"#CID#\": as\": >= Integer.parseInt(data[i]);",
                "identical": false
            }
        ],
        "buggy_line": "lac = Integer.parseInt(data[i]); break; case \"#CID#\": cid = Integer.parseInt(data[i]);",
        "fixed_line": "if (!data[i].isEmpty()) { lac = Integer.parseInt(data[i]); } break; case \"#CID#\": if (!data[i].isEmpty()) { cid = Integer.parseInt(data[i]); }"
    },
    "Bears-250": {
        "fixes": [
            {
                "k": 1,
                "patch": "int[] indices = new int[cardinality];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int cardinality = new int[cardinality];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int cardinality = new int[] { 0, values = new double[cardinality];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int cardinality = new int[] { 0, 1, map.length = new double[cardinality];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int[] indices = new int[] { 0, 1, map.length = new double[cardinality];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; 0; i : 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; 0; i++) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; i : 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, Number",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = 0; i < map.length; i++) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int cardinality = new int[] { 0, this.cardinalityMap.length = new double[cardinality];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityType.length]; i<Integer, Number",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length - 1];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int index = new int[cardinality];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; i++) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int[] indices = new int[] { 0, this.cardinalityMap.length = new double[cardinality];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number == 0; i--) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; ) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality _map.length];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; 0; i : EMPTY_PER_SEGMENT; i++) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; i--) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int index = new int[] { 0, values = new double[cardinality];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityType.length - 1];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality in.length];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = 0; for (map.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new int[cardinality",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, Number == 0; i--) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number == 0; ) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = 0; for (map.length]; i<Integer, Number>) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityMap.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, NumberMESSAGE ? extends Number> entry : 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, Number == 0; ) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0 ? null : map.entrySet; i++) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = 0; i<cardinality",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityType.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number == 0; i--) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int[] indices = new int[] { 0, index = new double[cardinality];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityType.length];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i != length ? extends Number> entry : 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality vals.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality in.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i=0; i<cardinality",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int cardinality = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0 ? 0 : 1; i++) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalitypairpair.length];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = 0; for (map.length]; i<Integer, Number == 0; i--) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityType.length]; i<Integer, Number _map.entrySet == 0 ? null : map.entrySet == 0;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = 0; i < map.length - 1 ? extends Number> : 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new int[cardinality.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality instanceof Number[]) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalitySet.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, Number _map.entrySet == 0 ? null : map.entrySet == 0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; 0; i : list.entrySet; i++) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number _map.entrySet == 0 ? extends Number> entry : 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int[] indices = new int[] { 0, values = new double[cardinality];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int index = new int[] { 0, 1, map.length = new double[cardinality];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, Number _map.entrySet == 0 ? extends Number> entry : 0;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality vals.length]; i<Integer, Number",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length-1]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityITS.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number _map.entrySet == 0 ? null : map.entrySet == MAX_VALUE; i++) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number>) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, Number _cardinality",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0 ? 0 : 1; i.entrySet == 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number << 7) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityType.length]; i<Integer, Number _map.entrySet == 0 ? extends Number> entry : 0;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, Number << 7) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; 0; i : new NumberMetrics.length; i++) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == Number.entrySet; i++) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int cardinality = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number << 32) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; 0; i : 11; i++) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number long.length-1];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new int[cardinality.length]; i<Integer, Number",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityType.length]; i<Integer, Number _map.entrySet == 0 ? 0 : 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number _cardinality",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; 0; i : 11 11; i++) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number _map.entrySet()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number long.length - 1];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityMap.length]; i<Integer, Number == 0; i--) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; 0; i : it.entrySet; i++) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality in.length]; i<Integer, Number",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality seconds.length]; i<Integer, Number",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityType.length]; i<Integer, Number _map.entrySet == 0 ? null : map.entrySet; i++) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityMandatory.length - 1];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityType.length]; i<Integer, Number _map.entrySet == 0 ? null : map.entrySet == MAX_cardinality",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality room for (int i<Integer, Number>) map.entrySet == 0; 0; i : EMPTY_PERSIST; i++) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Number _map.entrySet == 0 ? null : map.entrySet == MAX_cardinality",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinalityMandatory.length]; i<Integer, Number == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality.length]; i<Integer, Number.entrySet == 0; 0; i--) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality]; i<Integer, Numbercolumns.length - 1];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i = new double[cardinality vals.length]; i<Integer, Number == 0; i--) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int[] indices = new int[cardinality]; // this index for (int i=0; i<Set.length];",
                "identical": false
            }
        ],
        "buggy_line": "int cardinality = map.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
        "fixed_line": "TreeMap<Integer, ? extends Number> sortedMap = new TreeMap<>(map); int cardinality = sortedMap.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : sortedMap.entrySet()) {"
    },
    "Bears-124": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text(\"+\")\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitude+\")\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitude);",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(description);",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(dateStr+\")\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text\";",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").textx+\")\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(fieldName);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").replace(\"+\")\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").numberScale;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text this+\")\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(new+\")\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(dateFormat);",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number this+\")\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(dateStr+\")\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text\\\" i+\")\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(+\")\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(longitude);",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(datePattern);",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitudelatitude);",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").textIx+\")\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(latitude+\")\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitude+\"));",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(path);",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(description);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(fieldName);",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").textx+\") {",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitude+\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(descriptiondescription);",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(date);",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(expType+\")\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(longitude);",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(latitude+\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").textx+\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitude+\")+\")\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text1+\")\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text != null;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(name);",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitudeFieldsFields);",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(v+\")\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").numberOfT+)\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(latitude+\")+\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(descriptiondescriptiondescription",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(descriptiondescription",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitudeFields);",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text\\\" i+\") {",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").textMENT;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(descriptiondescriptiondescription+\")\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").textA+) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(descriptiondescription);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(pathpath);",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(descriptiondescriptiondescriptiondescription",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text != 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(descriptiondescription+\")\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").textA+)\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(date",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitudelatitude+\")\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(gs2+\")\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(datePattern);",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text != q;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").numberx+\")\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(dateFormat);",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").numberIx+\")\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(dateAnd+\")\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(kindkind+\")\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(dateLibrary);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(elevation);",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").textTypes+\")\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").textMENT; // NOSON+)",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text !=+\") {",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(dateStr+\"));",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(latitude+\")+\")\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text.\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitude+\") {",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(date odd);",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(kindkindkind+\")\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(descriptiondescriptiondescriptiondescription+\")\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").numberLong+\")\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(name);",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(+\")\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(5+\")\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").numberInt+\")\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(expType+\")\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").numberequals(dateStr+\")\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text\\\" i+\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitude+\")+\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(latitudeFieldsFields+\")\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").Recursive(latitude+\")\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").build();",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").numberOfPlayersd+)\").text",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(descriptiondescriptiondescriptiondescriptiondescription",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").number(dateStr+\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").equals(dateTime);",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").build(description);",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").textIx+\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text-Names+\")\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text}",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"d+.d+)\").number(\"d+.d+)\").text-v+\")\");",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(d+.d+)\").text(\"+\") // latitude .number(\"(d+.d+)\").text(\"+\") // longitude",
        "fixed_line": ".number(\"(-?d+.d+)\").text(\"+\") // latitude .number(\"(-?d+.d+)\").text(\"+\") // longitude"
    },
    "Bears-163": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if(tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume((UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume caA_UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeBasisUNIQUE\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumetUNIQUE\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") && tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume CUNIQUE\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume transactionQUE\")) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume context.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume...",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume!UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumePositions.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume\\\\UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume@QUE\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeDescQUE\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeisUNIQUE\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume ca\")) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume w/UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeTypes.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeSinkQUE\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeEdge.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumespQUE\")) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\":UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeEND_UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume argument.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeVERQUE\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeListUNIQUE\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume }, {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeouUNIQUE\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeComponent {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume\\\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeA_UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeAUNIQUE\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeAt\")) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume 0UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume mustUNIQUE\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeCustom\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume error/UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume additional",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume caAUNIQUE\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume<UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeStateExceptionQUE\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume monthsQUE\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeCallbackQUE\")) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", Key.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeANCEQUE\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume});",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeInline\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeOQUE\")) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume let'UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume>(tokens.canConsume\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeBasis.UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume realmQUE\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume };",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumetree.UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumewidthQUE\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume || tokens.canConsume\")) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeMembersQUE\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume>(tokens.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume digest.canConsume(\"UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume conversions\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeOfUNIQUE\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeInline) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume ca) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume getValid {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeVED) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume {@\")) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume caTransformQUE\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume || tokens.canConsume) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume+1) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume isValid) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume)){",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume Annotation) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeGenerator {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume caAadQUE\")) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume digest.UNIQUE\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume readOnly {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume24 {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume ...",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume5) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeProject) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeInline {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume wffBM\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume ca ca\")) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"UNIQUEType {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume exception) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume>(tokens.canConsume) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeEdge.canConsume\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(2);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeConnections {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeMAND\")) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume let'\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeCustomCustom\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsumeclipOfUNIQUE\")) {",
                "identical": false
            }
        ],
        "buggy_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {",
        "fixed_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"CONSTRAINT\", \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {"
    },
    "Bears-135": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (endIndex >= 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (beginIndex > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (beginIndex != 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (endIndex > 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (beginIndex > l.indexOf(beginIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (beginIndex > l.indexOf(beginIndex, buf.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (beginIndex > frame.readerIndex + 1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (beginIndex >Integer.readerIndex + 1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (beginIndex > buf.readerIndex + 1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (beginIndex > frame.indexOf(endIndex, buf.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (beginIndex > frame.indexOf(endIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (beginIndex > box.indexOf(beginIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (beginIndex < 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (beginIndex > frame.indexOf(beginIndex, buf.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (beginIndex > ident.indexOf(beginIndex, buf.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (beginIndex > l.indexOf('*', beginIndex + 1) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (beginIndex > box.indexOf(beginIndex, buf.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (beginIndex > l.indexOf(endIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (beginIndex != -1) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (beginIndex > buf.indexOf(beginIndex, end) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (beginIndex > frame.indexOf(endIndex, buf.writerIndex(), '\\n');",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (endIndex >= 0) { buf.writerIndex, 1, buf.writerIndex - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (endIndex >= 0) { buf.writerIndex, (endIndex - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (beginIndex > new int.writerIndex, buf.indexOf('\\n') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (beginIndex > buf.indexOf(beginIndex, buf.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (beginIndex > buf.indexOf(beginIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (beginIndex > frame.indexOf(beginIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (beginIndex != buf.indexOf(beginIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (endIndex >= 0) { buf.writerIndex,.writerIndex - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (beginIndex > ident.indexOf(beginIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (endIndex >= 0) { buf.writerIndex, frame.writerIndex(), '\\n'') {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (beginIndex > l.indexOf(beginIndex, end) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (beginIndex > l.indexOf('*') {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (beginIndex > l.indexOf('*', beginIndex - 1) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (beginIndex > frame.indexOf(endIndex, buf.writerIndex - beginIndex) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (beginIndex > frame.indexOf(endIndex, buf.writerIndex(), '\\n') {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (beginIndex != buf.indexOf(beginIndex, buf.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (beginIndex > l.indexOf('*', beginIndex) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (beginIndex > new int.writerIndex, buf.writerIndex(), '\\n');",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (endIndex != 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (endIndex >= 0) { buf.writerIndex, endIndex - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (beginIndex > l l = buf.indexOf(beginIndex, end) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (endIndex >= 0) { buf.writerIndex,.writerIndex(), '\\n'') {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (endIndex >= 0) { buf.writerIndex, 1, buf.writerIndex - beginIndex == '\\n') {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (beginIndex > buf.indexOf(endIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (beginIndex > l.indexOf(endIndex, buf.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (beginIndex > l.writerIndex) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (endIndex >= 0) { buf.writerIndex, endIndex - 1) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (beginIndex > l.indexOf(beginIndex, buf.writerIndex(), '\\n');",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (endIndex >= 0) { buf.writerIndex, beginIndex - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (beginIndex != buf.indexOf(beginIndex, end) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (beginIndex > new int.writerIndex, buf.writerIndex(), '\\n') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (beginIndex > 'Order.writerIndex(), buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (beginIndex > this.writerIndex) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (beginIndex >Integer.readerIndex) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (beginIndex > frame.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (endIndex >= 0) { buf.writerIndex, beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (beginIndex > '${' buf.indexOf(beginIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (beginIndex > l.indexOf(endIndex, buf.writerIndex - beginIndex) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (endIndex >= 0) { buf.writerIndex non-endIndex, beginIndex - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (beginIndex > l.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (beginIndex > frame.writerIndex) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (beginIndex > '${' buf.indexOf(beginIndex, end) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (endIndex >= 0) { buf.writerIndex = frame.writerIndex - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (beginIndex > l.indexOf(endIndex, buf.writerIndex(), '\\n');",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (beginIndex > 0) buf.indexOf('*', beginIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (beginIndex > frame.indexOf(endIndex, buf.writerIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (endIndex >= 0) { buf.writerIndex, 1, buf.writerIndex - beginIndex == '\\n'') {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (endIndex >= 0) { buf.writerIndex, frame.writerIndex(), '\\n');",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (endIndex >= 0) { buf.readerIndex non-endIndex, beginIndex - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (endIndex >= 0) { buf.readerIndex non-endIndex, beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (beginIndex > '${' buf.indexOf(beginIndex, '\\n');",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (beginIndex == 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (beginIndex > l.indexOf(beginIndex, buf.length - 1) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (beginIndex > 0) buf.indexOf('*', beginIndex - 1) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (beginIndex > new int.writerIndex - beginIndex) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (endIndex >= 0) { buf.writerIndex, length - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (endIndex >= 0) { buf.writerIndex non-endIndex, beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (beginIndex > frame.indexOf(endIndex, buf.writerIndex - 1, '\\n');",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (endIndex >= 0) { buf.writerIndex, 1, buf.writerIndex - beginIndex;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (beginIndex > '${' buf.indexOf(beginIndex, '\\n') {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (beginIndex > 'Order.writerIndex(), buf.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (beginIndex > l l = buf.indexOf(beginIndex, buf.writerIndex - 1) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (beginIndex > l.indexOf(beginIndex, buf.writerIndex - beginIndex) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (beginIndex >Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (endIndex >= 0) { buf.readerIndex non-endIndex(), beginIndex - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (beginIndex > endIndex) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (beginIndex > buf.indexOf(endIndex, buf.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (beginIndex > l.indexOf(beginIndex, buf.writerIndex(), '\\n') {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (beginIndex > l l = buf.indexOf('\\n') >= 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (beginIndex > this.writerIndex + 1) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (beginIndex > l.indexOf(endIndex, buf.writerIndex(), '\\n') {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (beginIndex > 0) buf.indexOf(beginIndex, end) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (endIndex >= 0) { buf.readerIndex(), groupId - beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (beginIndex > 'Order.writerIndex(), buf.writerIndex - beginIndex) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (endIndex >= 0) { buf.writerIndex = frame.writerIndex - beginIndex >= '\\n'') {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (beginIndex > frame.endIndex - beginIndex) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (endIndex >= 0) { buf.writerIndex, groupId.writerIndex(), '\\n'') {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (endIndex >= 0) { buf.writerIndex,equals(beginIndex - 1, '\\n');",
                "identical": false
            }
        ],
        "buggy_line": "if (beginIndex > 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex > 0) {",
        "fixed_line": "if (beginIndex >= 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex >= 0) {"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class || kind == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class || raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == String.class || types == Object.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || provider == Object.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || raw == Object.class.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == String.class ||KEY == Object.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == String.class || raw == Object.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == String.class || UNKNOWN_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, Object.class",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || TYPE_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || raw == Object.classclass) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == String.class || raw == Object.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class || !raw == Object.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || raw == Object.class) { kind, Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class)",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, Object.class",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, String.class",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class || rawValue == Object.class) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || raw == Object.class) { // TYPE_INT, Object.class",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw ==String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == String.class || var == Object.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if(raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class)",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || raw == Object.class) { // TYPE_UUID.class == Object.class",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class ||client == Object.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class || raw == Object.class) { kind, Object.class == Object.class",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class ||cl == Object.class) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, String.class",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || kind == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class || raw == Object.class) { kind, Object.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, Object.class",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class || raw == Object.class) { // special-class",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || kind == Object.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class == Object.class",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class == Object.class",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class == Object.class",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || raw == Object.class) { // special case",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to String.class",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || raw == boolean.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || raw == Object.class) { // TYPE_INT, Object.class == Object.class",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class)",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, Object.class == Object.class",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class || raw == Object.class) { // common special case",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, String.class",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || ser == Object.class) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || TYPE == Object.class) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || content == Object.class) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || id == Object.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Object.class) { //INT, Object.class",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || raw == Object.class) { // common special one, Object.class",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class ||(1) == Object.class) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class.class",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class.class",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == String.class || raw == Object.class) { // special this.class == Object.class",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || kind == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, Object.class.class",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class; but also.class == Object.class) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class)",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to be Object.class",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, String.class == Object.class",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class || parameters == Object.class) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || wireType == Object.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class == Object.class",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || raw == Object.class) { // TYPE_UUID.class",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to avoid double.class",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || constructor == Object.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear, String.class",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || raw ==Object.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || result == Object.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny-class",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || kind == Object.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class || raw == Object.class) { // special name, Object.class",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || kind == Object.class)",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class || raw == Object.class) { //BigDecimal.class == Object.class",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || em == Object.class) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "map. did weMapResult result = map;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "map. did weMapResult result) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "map. did weMapResult result == _objectIdReader;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "map map.findAndAddKeySerializer(type, provider);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "map map.findAndAddKeySerializer(type, provider;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "map. did weMapResult result;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "map map.findAndAddKeySerializer(type, provider) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (result == provider) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "map. did weMapResult result == _unwrapAndAddKeySerializer;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "map.findAndAddKeySerializer(type, provider);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "map.findAndAddKeySerializer(type, provider;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "provider provider = _valueTypeSerializerMapResultKeySerializer;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "for (AndAddKeySerializer = _provider; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "map.findAndAddKeySerializer(type, provider) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (typedSerializerMapResult result == _objectIdReader) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "map. did weMapResult result == _valueTypeSerializer;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "provider provider = _objectIdReaderMapResultSerializer;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "map. did weMapResult result == _unwrapAndMapResult;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (map != provider) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "for (AndAddKeySerializer = _serializer; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "map[ did weMapResult result) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "mapSerializerMapResult result = map;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "map. wrapAndAddKeySerializer(type, provider;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "for (AndAddKeySerializer(type, provider; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (result.value == _objectIdReader) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (result.valueSet) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializer it't ser ser) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "for (AndAddKeySerializerProvider provider; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (result.valueSet == _objectIdReader) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (_mapKeySerializerMapResult != provider) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializerMapResult) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "map. did weMapResult result == _dynamicSerializers;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "map. did weMapResult result == _unwrapAndMapResult) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "map[ did weMapResult result == _objectIdReader;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "provider provider = _valueInstantiatorMapResultKeySerializer;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "map. did weMapResult result == _provider.NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "map. did weMapResult result == _objectIdWriter;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (result == provider.NOT_IMPLEMENTED) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "provider provider = _valueInstantiatorMapResultSerializer;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "SerializerSerializerMapResult result = map;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (AndAddKeySerializer = _serializer; _unwrapAndAddKeySerializer; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializer it't keep both) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "provider = _objectIdReaderMapResultSerializer;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (result.valueSet == _provider) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializerFields) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (result == null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "PropertySerializerMapResult result = map;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "for (AndAddKeyset = provider; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializer it'tDSDS; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "for (AndAddKeyset = _provider; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "assumeSerializerMapResult result = map;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializer++) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "provider = _valueTypeSerializerMapResultKeySerializer;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "provider provider = _valueTypeSerializerMapResult;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (AndAddKeySerializer = _objectIdReader; j < provider; ) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializer it't ser) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (AndAddKeySerializer(type, provider; _objectIdReaderMapResultResult) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "map. did weMapResult result = _valueTypeSerializer;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "provider provider = _objectIdReaderMapResultKeySerializer;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "map. did weMapResult result == _unwrapAndMapResultSerializer;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "map[ did weMapResult result = map;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (map != result.value) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "map. did weMapResult result == _objectIdReader) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "for (AndAddKeySerializer(type, provider; _objectIdReaderMapResult) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "map. did weMapResult result = _objectIdReaderMapResult;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "map. did weMapResult result == _provider;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "for (AndAddKeySerializer = _serializer; j < provider; ) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (AndAddKeySerializer = _serializer; _objectIdReader--) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "map. did weMapResult result = _objectIdReader;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (AndAddKeySerializer = _objectIdReader; _provider) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "map. didSerializerSerializerSerializerResult result = map;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "for (AndAddKeySerializer; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "for (AndAddKeySerializer = _serializer; _objectIdReader; j < provider; ) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "provider provider = _valueSerializerMapResultKeySerializer;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "map. did weMapResult result == _dynamicValueSerializers;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "provider provider = _valueInstantiatorMapResult;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "for (AndAddKeySerializer = _serializer; result.parent != provider; ) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "for (AndAddKeySerializer = _serializer; query < provider; ) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "map. wrapAndAddKeySerializer(type, provider);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializer it't ser ser ser) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "for (AndAddKeySerializer = _serializer; _unwrapAndAddKeySerializer(type, provider) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (AndAddKeySerializer = _provider; _mapTypeSerializerMapResult != provider; ) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "map. did weMapResult result = _objectIdReaderMapResultSerializer;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "(_valueTypeSerializerSerializerMapResult result) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "for (AndAddKeySerializer = _serializer; _unwrapAndMapResult != provider; ) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (AndAddKeyset = _serializer; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "map. did weMapResult result == _mapTypeSerializer;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "map. did weMapResult result == _provider.NOT_IMPLEMENTED);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "map. wrapAndAddKeySerializer(type, provider) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "provider provider = _keySerializerMapResultKeySerializer;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializerMapResult pp pp pp pp pp pp pp pp pp pp pp",
                "identical": false
            },
            {
                "k": 92,
                "patch": "for (AndAddKeySerializer = _objectIdReader;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (result == provider.NOT_IMPLEMENTEDDED) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializerMapResult pp pp pp pp pp pp pp pp pp pp pp pp",
                "identical": false
            },
            {
                "k": 95,
                "patch": "for (AndAddKeySerializer(type, provider; _mapTypeSerializerMapResult pp pp pp pp pp pp pp pp pp pp",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (AndAddKeySerializer = _serializer; _objectIdReader; ser ser ser ser ser) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "for (AndAddKeySerializer = _serializer; _unwrapAndMapResult != provider; _objectIdReader) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "SerializerSerializerMapResult result == _objectIdReader;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "map. did weMapResult result == _dynamicValueSerializerMapResult;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "for (AndAddKeySerializer = _objectIdReader; _keyTypeSerializerMapResult != provider; ) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "// 27-Jun-2017, tatu: [databind#1679] Need to avoid StackOverflowError... if (type == Object.class) { // basically just need to call `toString()`, easiest way: JsonSerializer<Object> ser = new Default(Default.TYPE_TO_STRING, type); _dynamicSerializers = map.newWith(type, ser); return ser; }"
    },
    "Bears-137": {
        "fixes": [
            {
                "k": 1,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1, new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1 - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2, 2, 0 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder - beginIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1 - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 1, new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2, 2, 4, 0 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex + 2, 2, 0 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 2, 2, 0 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2, 2, -1 - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 4, new StringFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1, new StringFinder != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2, 4, 0 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int flagIndex = buf.indexOf(beginIndex + Maybe != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder == -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 3, index - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1, new StringFinderFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder(\"\\0Index - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int flagIndex = buf.indexOf(beginIndex + buf.writerIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1, new StringFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2, buf.length - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2, buf.writerIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder - length - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinderStart + endIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int flagIndex = buf.indexOf(readerIndex(), new StringFinder != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 1, new StringFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2, 2, - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2 + length - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder + 1 - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder - end - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 1 - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 12 + 1 - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 12 + 1 - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int flagIndex = buf.indexOf(beginIndex != -1 && new StringFinder.beginIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 3 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 2, 2, -1 - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1, buf.writerIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder - startIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder(\"\\0Index == -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1, new StringFinder(\"\\0Index - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinderFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), length - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex + 1, new StringFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2, 2, StandardCharsets.US_ASCII - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1)) != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 1)) != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex + 2, 2, -1 - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int flagIndex = buf.indexOf(beginIndex - buf.writerIndex + 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex + 3 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int flagIndex = buf.indexOf(beginIndex != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex + 2, 2, - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder -WithDefaultIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 4, new StringFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder - portIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2, buf.US_ASCII - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int flagIndex = buf.indexOf(beginIndex - != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder == -1 && flagIndex == 6) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder + 12 + 1 - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder -PREFIX + 2, 2, - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinderStart + length - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 3, resultIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 2, 2, StandardCharsets.US_ASCII - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder + 2, 2, - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 2 + length - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder == -1 &&flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 1, new StringFinderFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int flagIndex = buf.indexOf(new StringFinder != -1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder -:::::: if (flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder -::::US_ASCII - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder -:::: if (flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 1, buf.writerIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int flagIndex = buf.indexOf(beginIndex - buf.writerIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinderRoutingIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1 + length - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1 && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder + 12 - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder -0Index - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 2, buf.writerIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder - startIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int flagIndex = buf.indexOf(readerIndex(), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int flagIndex = buf.indexOf(readerIndex + buf.writerIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 1 - lIndex - 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 4, new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder != -1 &&flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder + _flagIndex - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder -::outputIndex - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int flagIndex = buf.indexOf(beginIndex + 2, buf.length - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder + 1 +flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex + 4, new StringFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinderStart + len - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinder -::::::US_ASCII - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int flagIndex = buf.indexOf(buf.readerIndex(), new StringFinderStart + 3, index - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int flagIndex = buf.indexOf(buf.writerIndex(), new StringFinder(\"AA\"));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int flagIndex = buf.indexOf(readerIndex +=' && flagIndex - beginIndex == 6) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 4, new StringFinderFinder - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int flagIndex = buf.indexOf(readerIndex + 1 && flagIndex - beginIndex == 6) {",
                "identical": false
            }
        ],
        "buggy_line": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder(\"AA\")); if (flagIndex != -1 && flagIndex - beginIndex == 6) {",
        "fixed_line": "int separatorIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '|'); if (separatorIndex > 0 && separatorIndex - beginIndex > 19) {"
    },
    "Bears-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new InnerClassProperty;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new InnerClassProperty(deser, deser);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new InnerClassProperty(deser;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new InnerClassPropertyHandler(deser, deser);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new InnerClassPropertyNamesToValueDeserializer(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new InnerClassProperty(deser) { return deser; }",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new InnerClassPropertyHandler(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new InnerClassPropertyNamesToValueDeserializer(deser, deser);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyClass; }",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new InnerClassPropertyProperty(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new InnerClassProperty(deser, deser); }",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyHandler; }",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new InnerClassPropertyClassName(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new InnerClassPropertyToValueDeserializer(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new InnerClassProperty>(deser;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new InnerClassPropertyNames(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new InnerClassPropertyContext(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new InnerClassProperty withValueDeserializer;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty withValueDeserializer; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new InnerClassProperty>(deser, deser);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new InnerClassPropertyDefinition(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new InnerClassProperty(deser, deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new InnerClassPropertyAt(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new InnerClassProperty>(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new InnerClassPropertyDeclaration(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new InnerClassPropertyNamesToValueDeserializer(deser) { return deser; }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty>(deser; }",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyDevice; }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyClassProperty; }",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new InnerClassPropertyToValueDeserializer(deser, deser);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new InnerClassPropertyEvent(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new InnerClassProperty(deser, deser;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyClassName; }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new InnerClassPropertyDefinition(deser, deser);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new InnerClassProperty(deser) { return new Inner; }",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new InnerClassPropertyNamesToValueDeserializer(deser, deser); }",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty); }",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new InnerClassPropertyProperty(deser, deser);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new InnerClassPropertyObjectId(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new InnerClassProperty>(deser, deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new InnerClassProperty withValueDeserializer(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyNames; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty == deser; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new InnerClassPropertyWriter(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new InnerClassPropertyVisitor(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new InnerClassPropertySet(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new InnerClassPropertyHandler(deser, deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new InnerClassPropertyFormatter(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyClass, deser); }",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new InnerClassPropertyForValueDeserializer(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new InnerClassPropertyableValueDeserializer(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new InnerClassPropertyNamesToValueDeserializer(deser) { return new Inner; }",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new InnerClassPropertyHandlerToValueDeserializer(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new InnerClassProperty(deser); }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new InnerClassPropertyNames(deser, deser);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new InnerClassPropertyHandler(deser) { return deser; }",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new InnerClassPropertyClassName(deser, deser);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new InnerClassPropertyClass(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new InnerClassPropertyDeserializer(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyVisitor; }",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new InnerClassPropertyProperty(deser) { return new InnerClassPropertyClass; }",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new InnerClassPropertyDeclaration(deser, deser);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new InnerClassPropertyHandler;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new InnerClassPropertyContext(deser, deser);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new InnerClassPropertyHandler.class, deser;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty(deser; }",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyEvent; }",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyProperty; }",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new InnerClassPropertyNamesToValueDeserializer<?> deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new InnerClassPropertyIfValueDeserializer(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new InnerClassProperty2(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new InnerClassPropertyHandlerClassProperty(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new InnerClassPropertyForValueDeserializer(deser, deser);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertySet; }",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new InnerClassPropertyNamesToDeserializer<?> deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyClassClassProperty; }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyClassClass; }",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty.class; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new InnerClassPropertyHandler(deser) { return new InnerClassPropertyClass; }",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new InnerClassPropertyNamesToValueDeserializer(deser;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new InnerClassProperty( deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyContext; }",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new InnerClassPropertyJobsDeserializer(deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new InnerClassPropertyNamesToValueDeserializer(deser) { return new InnerClassPropertyHandler; }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new InnerClassPropertyHandler == deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyClass, deser; }",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty._baseTypeProperty; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new InnerClassProperty withValueDeserializer(deser, deser);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new InnerClassProperty 0: { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty;; }",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new InnerClassPropertyHandler(deser) { return new InnerClassPropertyHandler; }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty[] deser; }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new InnerClassPropertyHandler.class, deser) { return new InnerClassProperty; }",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyToValueDeserializer; }",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty(deser); }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassPropertyWidget; }",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new InnerClassPropertyHandler(deser, deser); }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new InnerClassProperty(deser) { return new InnerClassProperty. == deser; }",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public void assignIndex(int index) { _delegate.assignIndex(index); } @Override public int getPropertyIndex() { return _delegate.getPropertyIndex(); } @Override public int getCreatorIndex() { return _delegate.getCreatorIndex(); }"
    },
    "Bears-181": {
        "fixes": [
            {
                "k": 1,
                "patch": "ResultSet resultSet = persistentEntity.ofUse;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", persistentEntity.tableName);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", resultSet.tableName);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", persistentEntity.tableName;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", this.resultSet.nextName);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ResultSet resultSet = this.resultClient.of(this.resultSet. from %s\", persistentEntity.tableName);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet * from %s\", resultSet.nextName);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ResultSet resultSet = this.resultClient.of(this.resultSet. from %s\", resultSet.tableName);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ResultSet resultSet = this.resultClient.of(persistentEntity.class) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", this.resultSet.tableName);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*; from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", resultSet.nextName);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet) from %s\", resultSet.nextName);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*; from %s\", persistentEntity.tableName);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ResultSet resultSet = this.resultClient.executeQuery(persistentEntity.class) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ResultSet resultSet = persistentEntity.ofUse) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.nameUse;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ResultSet resultSet = persistentEntity.ofUseFile.format(\"select count count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ResultSet resultSet = this.resultClient.executeQuery(operator) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*) from %s\", this.resultSet.getLong(1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count(*; from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ResultSet resultSet = this.resultClient.of(this.resultSet. from %s\", persistentEntity.tableName;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet * from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ResultSet resultSet = this.resultClient.of(this.resultSet.from %s\", persistentEntity.tableName);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ResultSet resultSet = persistentEntity.ofUseD.format(\"select count count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ResultSet resultSet = persistentEntity.ofUseUse;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet * from %s\", persistentEntity.tableName);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.look count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet, persistentEntity.class %s\", resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count(*; from %s\", persistentEntity.tableName);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*; from %s\", this.resultSet.getLong(1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet) from %s\", resultSet.nextName;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ResultSet resultSet = persistentEntity.ofUseClass.format(\"select count count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count count(*;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", this.resultSet.tableName;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count(*; from %s\", persistentEntity.tableName);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet * from %s\", this.resultSet.nextName);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*) from %s\", persistentEntity.tableName;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ResultSet resultSet = this.resultClient.of(this.resultSet. from %s\", this.resultSet.nextName);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ResultSet resultSet = persistentEntity.ofUse + from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ResultSet resultSet = this.resultClient.of(this.resultSet. from %s\", resultSet.nextName);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ResultSet resultSet = this.resultClient.of(this.resultSet count(*;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ResultSet resultSet = persistentEntity.ofUseFile.format(\"select count count(*; from %s\", persistentEntity.tableName);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ResultSet resultSet = persistentEntity.ofUsek.format(\"select count count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count count(*) from %s\", this.resultSet.getLong(1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet) from %s\", this.resultSet.nextName;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ResultSet resultSet = this.resultClient.of(this.look count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet * from %s\", persistentEntity.tableName;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count(*; from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", persistentEntity.nextName);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ResultSet resultSet = this.resultClient.of(this.resultSet * from %s\", resultSet.nextName);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ResultSet resultSet = persistentEntity.ofUseFile.format(\"select count count(*; from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ResultSet resultSet = this.resultClient.of(this.resultSet. from %s\", this.resultSet.tableName);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ResultSet resultSet = this.resultClient.of(this.nameUse;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", persistentEntity.class;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ResultSet resultSet = persistentEntity.ofUseTreeData.format(\"select count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet * from %s\", resultSet.tableName);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet * from %s\", persistentEntity.nextName);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet) from %s\", this.resultSet.getLong(1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count(*; from %s\", this.resultSet.getLong(1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*) from %s\", this.resultSet.nextName;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*; from %s\", this.resultSet.tableName);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count count(*) from %s\", persistentEntity.tableName;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ResultSet resultSet = this.resultClient.of(this.resultSet. from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ResultSet resultSet = persistentEntity.ofUseFile.format(\"select count count(*) from %s\", this.resultSet.getLong(1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ResultSet resultSet = this.resultClient.of(persistentEntity.class) from %s\", this.resultSet.getLong(1);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count(*) from %s\", this.resultSet.getLong(1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ResultSet resultSet = this.resultClient.of(this.field, from %s\", resultSet.tableName);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*; from %s\", this.resultSet.nextName);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count count(*; from %s\", persistentEntity.tableName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count(*) from %s\", this.resultSet.nextName;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.filter count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.name), resultSet.tableName;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count(*) from %s\", this.resultSet.getLong(1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ResultSet resultSet = persistentEntity.ofUseBigInteger.format(\"select count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.nameUse + from %s\", resultSet.tableName);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*) from %s\", this.resultSet.nextName);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.nameUse + from %s\", resultSet.nextName);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count(*) from %s\", this.resultSet.nextName);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ResultSet resultSet = persistentEntity.of(this.resultSet. from %s\", this.resultSet.nextName);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet count(*;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.select count(*) from %s\", this.resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count count(*) from %s\", this.resultSet.nextName);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.name;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.nameUse + from %s\", resultSet.getLong(0);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ResultSet resultSet = this.resultClient.executeQuery(operator) from %s\", this.resultSet.getLong(1);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count(*; from %s\", this.resultSet.nextName);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count(*; from %s\", this.resultSet.tableName);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ResultSet resultSet = persistentEntity.ofUseS.format(\"select count(*) from %s\", persistentEntity.tableName;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet, persistentEntity.class %s\", resultSet.tableName);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ResultSet resultSet = persistentEntity.ofUseRoute.format(\"select count count(*; from %s\", persistentEntity.tableName;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ResultSet resultSet = this.databaseClient.of(this.resultSet. from %s\", this.resultSet.getLong(1);",
                "identical": false
            }
        ],
        "buggy_line": "ResultSet resultSet = this.databaseClient.singleUse().executeQuery(Statement.of( String.format(\"select count(*) from %s\", persistentEntity.tableName()))); resultSet.next(); return resultSet.getLong(0);",
        "fixed_line": "Statement statement = Statement.of(String.format( \"select count(*) from %s\", persistentEntity.tableName())); try (ResultSet resultSet = this.databaseClient.singleUse().executeQuery(statement)) { resultSet.next(); return resultSet.getLong(0); }"
    },
    "Bears-22": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (_referencedType; }",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if (_referencedType == ref; }",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (_referencedType != new) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (_referencedType == ref) { _referencedType; }",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (_referencedType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (_referencedType != new) { _referencedType; }",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (_referencedType; }encedType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if _referencedType; }",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (_referencedType+1; }",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (_referencedType+1; }encedType == ref refUSE_referencedType; }",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (_referencedType; }encedType == refType.referencedType; }",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (_referencedType == ref) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (_referencedType != NO_referencedType; }",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (_referencedType+1; }encedType == ref ref additional",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (referencedType+1; }encedType == _referencedType; }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (_referencedType+1; }encedType == ref ref refUSE_referencedType; }",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if _referencedType; }encedType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (_referencedType; } else { _referencedType; }",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (_referencedType; } else if _referencedType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if (_referencedType+1; }encedType == refType.referencedType; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (_referencedType+1; } else { _referencedType; }",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (referencedType+1; }encedType == _referencedType) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (_referencedType; }encedType == ref refUSE_referencedType; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (_referencedType+1; }encedType < _referencedType; }",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if (_referencedType; } else if _referencedType) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (_referencedType+1; }encedType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (_referencedType+1; }encedType == ref ref ref refUSE_referencedType; }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (_referencedType; }encedType != new) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (_referencedType; }encedType == ref) { _referencedType; }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if (_referencedType+1; }encedType == ref ref ref additional",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (_referencedType != new; }",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (_referencedType != new) { //Not expect this.referencedType; }",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (_referencedType == STATE_referencedType; }",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if _referencedType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (_referencedType; } else if _referencedType == refType; }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (_referencedType+1; }encedType == ref refUSE_referencedType) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (_referencedType; }encedType) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (_referencedType; }encedType == ref refEnd) { _referencedType; }",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (_referencedType != JsonToken.VALUE_referencedType; }",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (_referencedType; }encedType < _referencedType; }",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (_referencedType+1; }encedType == NO_referencedType; }",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (_referencedType+1; }encedType == connectionsType.referencedType; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if _referencedType+1; }encedType == _referencedType; }",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if _referencedType; } else if _referencedType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (_referencedType+1; }encedType == _referencedType; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (_referencedType; }encedType == ref ref additional",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (_referencedType+1; }encedType == ref refOptionalType.referencedType; }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (_referencedType; } else if _referencedType == ref) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if (_referencedType; }encedType != NO_referencedType) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (_referencedType == ref) { return _referencedType; }",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (referencedType == _referencedType; }",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (_referencedType.language) { _referencedType; }",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (_referencedType+1; }encedType == ref refEndType.referencedType; }",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (_referencedType; } else if _referencedType == ref) { _referencedType; }",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (_referencedType+1; }encedType == ref) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (_referencedType+1; }encedType == ref ref refUSE_referencedType) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (_referencedType; }encedType == ref refType.referencedType; }",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (_referencedType+1; }encedType != NO_referencedType) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (_referencedType+1; }encedType == value) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (_referencedType; }encedType == ref refEndType.referencedType; }",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (referencedType == ref) { _referencedType; }",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (_referencedType+1; }encedType == ref ref printStackTraceType.referencedType; }",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (_referencedType+1; }encedType == NO_referencedType) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (_referencedType == new) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (_referencedType == new) { _referencedType; }",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (_referencedType+1; }encedType == ref refEnd) { _referencedType; }",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (_referencedType == size) { _referencedType; }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (_referencedType; }encedType == ref refOptionalType; }",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (_referencedType; }encedType == ref refEndType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (_referencedType+1; }encedType == ref ref Bla) { _referencedType; }",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (_referencedType; } else { _referencedType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (ref != new) { _referencedType; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (_referencedType+1; }encedType == ref",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if (_referencedType+1; }encedType == TYPE_referencedType; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (_referencedType; }encedType == refType.referencedType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (_referencedType+1; }encedType == ref ref refDescriptor_referencedType; }",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (_referencedTypeIconType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (_referencedType != new) { //ref; }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (_referencedType; }encedType == ref) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (_referencedType+1; }encedType == ref ref connectorType.referencedType; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (_referencedType+1; }encedType == ref refType.referencedType; }",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if _referencedType; }encedType == _referencedType; }",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if (_referencedType+1; }encedType == refOptionalType.referencedType; }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (_referencedType; }encedType == ref ref ref additional",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (_referencedType+1; } else if _referencedType == refType; }",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (_referencedType+\", ref; }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (_referencedType+1; }encedType == ref ref ref printStackTraceType.referencedType; }",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (_referencedType+1; }encedType == ref refEnd) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (_referencedType; }encedType == refType; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (_referencedType; }encedType == ref refUSE_referencedType) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (_referencedType+1; } else if _referencedType == ref refUSE_referencedType; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (_referencedType+1; } else if _referencedType == ref) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (_referencedType; } else if _referencedType == ref refType; }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (_referencedType+\", _referencedType; }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (_referencedType; }encedType == value) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (_referencedType; } else if _referencedType == refType) { _referencedType; }",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if (_referencedType; }encedType+1; }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (_referencedType+1; } else if _referencedType == ref) { _referencedType; }",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (_referencedType+1; }encedType != new) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (_referencedType != STATE_referencedType; }",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public JavaType getSuperClass() { if (_referencedType != null) { return _referencedType.getSuperClass(); } return super.getSuperClass(); }"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return BlobId.of(uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return BlobId.of(this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return BlobId.of(this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return BlobId.of(uri.getHost(), uri.this.uri);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return BlobId.of(uri.getHost;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return BlobId.of(uri.getHost(), this.uri);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return BlobId.of(uri.getHost(), uri.this.uri;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return BlobId.of(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return BlobId.of(uri.getHost(), uri)InPath;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return BlobId.of(uri.getHost(), this.uri;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return BlobId.of(uri, uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return BlobId.of(uri.getHost(), uri) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return BlobId.of(uri.getHost(), uri) = BlobId;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return BlobId.of(this.uri, uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return BlobId.of(this.uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return BlobId.of(this._uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return BlobId.of(this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return BlobId.of(uri.getHost(), uri = BlobId;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return BlobId.of(uri.getHostbuttonPath, uri);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return BlobId.of(uri.getHost(), uri) uri;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return BlobId.of(uri.getHost(), uri) this.uri;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return BlobId.of(uri, uri.getHost(), this.uri);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return BlobId.of(uri.getHost(), uri.uri);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return BlobId.of(this.uri.getHost(), uri) + 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return BlobId.of(uri.getHost(), uri.uri;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return BlobId.of(this.uri.getHost(), uri) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return BlobId.of(uri.getHost(), uri) + this.uri;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return BlobId.of(uri.getHost(), uri.thisthis.uri);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return BlobId.of(uri.getHost , uri.this.uri);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return BlobId.of(uri.getHost = uri;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return BlobId.of(uri.getHost(), uri) ;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return BlobId.of(uri.getHost(), uri) additional additionalClear);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return BlobId.of(uri.getHost);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return BlobId.of(uri.getHost(), uri) return BlobId;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return BlobId.of(uri.getHost(), uri) % this.uri;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return BlobId.of(uri.getHost(), uri*\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return BlobId.of(uri.getHostbuttonPath, uri.this.uri);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return BlobId.of(uri.getHostHost(), uri;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return BlobId.of(this._uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return BlobId.of(this.uri.getHost(), uri)InPath;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return BlobId.of(uri.getHost password;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return BlobId.of(uri.getHost(), uri)Char;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return BlobId.of(uri.getHost(), uri) _uri;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return BlobId.of(uri.getHostNumber_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return BlobId.of(uri.getHost(), uri) uri.getHost;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return BlobId.of(this.uri.getHost(), uri) = BlobId;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return BlobId.of(uri.getHost(), uri uri;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return BlobId.of(uri.getHostcontinPath, uri);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return BlobId.of(uri.getHostStart);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return BlobId.of(uri.getHost , uri);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return BlobId.of(uri.getHost12_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return BlobId.of(uri.getHost(), uri) += uri.getHost;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return BlobId.of(uri.getHost(), uri.EXPRESSION;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return BlobId.of(uri.getHost\"), uri);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return BlobId.of(uri.getHost , uri;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return BlobId.of(uri.getHost , uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return BlobId.of(uri.getHost(), uri)};",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return BlobId.of(uri.getHost(), uri) additional additionalClear, uri.getHost;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return BlobId.of(uri, uri.getHost(), this.uri;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return BlobId.of(uri.getHost(), host;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return BlobId.of(uri.getHost(), uri.\".length;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return BlobId.of(uri.getHost determine_URI, uri);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return BlobId.of(uri.getHost-2;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return BlobId.of(uri.getHost2;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return BlobId.of(uri.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return BlobId.of(this.uri.getHost(), uri = BlobId;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return BlobId.of(uri.getHost(), uri*(1000\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return BlobId.of(uri.getHostHost(), uri);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return BlobId.of(uri.getHost(), uri) additional additional additionalClear, uri.getHost;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return BlobId.of(uri.getHost(), uri.class;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return BlobId.of(uri.getHost variable(), uri;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return BlobId.of(uri.getHost(), uri)}, uri.getHost;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return BlobId.of(uri.getHost(), uri.thisthis.uri;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return BlobId.of(uri.getHost(), uri.wsdlLocation);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return BlobId.of(uri.getHost(), uri));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return BlobId.of(this.uri.getHost;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return BlobId.of(uri.getHost, uri);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return BlobId.of(uri.getHostAmount;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return BlobId.of(uri.getHost(), uriInPath;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return BlobId.of(uri.getHost(), uri)}, this.uri;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return BlobId.of(uri.getHost converterName);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return BlobId.of(this.uri.getHost(), uri.this.uri);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return BlobId.of(uri.getHostInPath, uri);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return BlobId.of(uri.getHost fragment;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return BlobId.of(uri.getHost(), uri.wsdlId;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return BlobId.of(uri.getHost(), uri) additional additional.getHost;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return BlobId.of(uri.getHostbuttonPath, uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return BlobId.of(uri.getHost(), uri.class);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return BlobId.of(uri.getHost))) return Blob;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return BlobId.of(uri.getHost(), uri.UTF_8;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return BlobId.of(uri.getHost(), uri)Column = BlobId;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return BlobId.of(uri.getHost(), uri) additional additional additionalClear);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return BlobId.of(uri.getHost(), uri*36;",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-120": {
        "fixes": [
            {
                "k": 1,
                "patch": "return channel;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return buf.readableBytes() - 11;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return buf.readableBytes() - 12;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (buf.readableBytes() < MESSAGE_MINIMUM_LENGTH) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return COORDINATE_TYPE_EXTENDED_RECORDS;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return segmentId if (buf.readableBytes() < 11) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return buf.readableBytes() < MESSAGE_MINIMUM_LENGTH;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return segmentId if (buf.readableBytes() < MESSAGE_MINIMUM_LENGTH) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return buf.readableBytes() + 11;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return buf.readableBytes() + 12;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (buf.readableBytes() < 11) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return buf.readableBytes() - 6;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < MESSAGE_MINIMUM_LENGTH;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "buf buf.readableBytes() < MESSAGE_MINIMUM_LENGTH) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (buf.readableBytes() < MESSAGE_MINI_EVENT_REPORT) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return COORDINATES_TYPE_EXTENDED_RECORDS;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return buf;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return position != MSG_EXTENDED_RECORDS) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "returnHandlerContext;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() - 12;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "buf buf.readableBytes() < MESSAGE_MINIMUM_LENGTH;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return response.readableBytes() < MESSAGE_MINIMUM_LENGTH;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return COORDINATES_TYPE_EXTENTI____SP, buf.readableBytes() - 12;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return COORDINATE_TYPE_PUBACK.readableBytes() - 12;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return position != MSG_EXTENDED_RECORDS;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "returnHandlerContextHandlerContextType buf.readableBytes() < MESSAGE_MINIMUM_LENGTH;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (buf.readableBytes() < MESSAGE_MINI_EVENT_LENGTH) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < 11;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < 80;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() + 12;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return channel != buf.readableBytes() - 12;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (buf.readableBytes() < MESSAGE_MINI_EVENT_BUS) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return buf.readableBytes() < MESSAGE_MINIMUM_LENGTH) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return buf.readableBytes() - 8;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (buf.readableBytes() < MESSAGE_MINIMUM_POSITION_LENGTH) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (buf.readableBytes() < MESSAGE_HEADER) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (buf.readableBytes() < MESSAGE_MINIMUM_POSITION_COUNT) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return buf.readableBytes() < MESSAGE_MINI_EVENT_LENGTH;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return COORDINATE_TYPE_EXTENTER_LENGTH;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return preferences.readableBytes() < MESSAGE_MINIMUM_LENGTH;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return buf.readableBytes() - 10;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return COORDINATE_TYPE_EXTEND_PATTERN;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return 0, ctx.readableBytes() - 11;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return buf.readableBytes() - 40;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (buf.readableBytes() < 80) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (buf.readableBytes() < MESSAGE_MINUS) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (buf.readableBytes() < MESSAGE_MINI_EVENT_BOTTOM) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return COORDINATES_TYPE_EXTENTER.readableBytes() < MESSAGE_MINIMUM_LENGTH;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return buf.readableBytes() < MESSAGE_MINI_EVENT_BIG_LENGTH;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (buf.readableBytes() < MESSAGE_MINI_EVENT_BIG_LENGTH) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return COORDINATE_TYPE_EXTENDED_RECORDS) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return buf.readableBytes() < MESSAGE_MINI_EVENT_BUS;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return buf.readableBytes() < MESSAGE_MINI_EVENT_BOTTOM) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return COORDINATE_TYPE_EXTENTER__LENGTH;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return COORDINATES_TYPE_EXTEND_PATTERN;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return segmentId if (buf.readableBytes() < MESSAGE_MINI_EVENT_REPORT) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return buf.readableBytes() < MESSAGE_MINI_EVENT_REPORT) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return COORDINATE_TYPE_EXTENTER_PATTERN;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < MESSAGE_LENGTH;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return COORDINATE_TYPE_MINI_EVENT_REPORT;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < MESSAGE_MINUS;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return COORDINATE_TYPE_EXTEND__LENGTH;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < MESSAGE_MINI_EVENT_BUS;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "returnHandlerContextHandlerContextType buf.readableBytes() < MESSAGE_MINI_EVENT_BOTTOM) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return segmentId if (buf.readableBytes() < MESSAGE_MINI_EVENT_LENGTH) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < MESSAGE_MINIMUM_POSITION_LENGTH;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return COORDINATE_TYPE_FUNCTIONS_LENGTH;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return COORDINATE_TYPE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < MESSAGE_BUS;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return COORDINATE_TYPE_EXTENTER___LENGTH;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return COORDINATE_TYPE_EXTEND__PATTERN;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return COORDINATE_TYPE_LIST;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return position;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < MESSAGE_HEADER;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return COORDINATES_TYPE_EXTENTI____SP, buf.readableBytes() - 11;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return COORDINATE_TYPE_EXTEND___LENGTH;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "buf buf.readableBytes() < MESSAGE_MINI_EVENT_REPORT) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "returnHandlerContextHandlerContextType buf.readableBytes() < MESSAGE_MINI_EVENT_LENGTH;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return COORDINATE_TYPE_EMBEDDED_ARRAY;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return COORDINATE_TYPE_EXTENDED_PATTERN;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < MESSAGE_MINI_EVENT_BOTTOM) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < MESSAGE_MINI_EVENT_BIG_LENGTH;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "returnHandlerContextHandlerContextType buf.readableBytes() < MESSAGE_MINI_EVENT_REPORT) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "returnHandlerContextHandlerContextType buf.readableBytes() < MESSAGE_MINI_EVENT_BIG_LENGTH;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() + 11;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return buf.readableBytes() + 2 + 3;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() != 11;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "buf buf.readableBytes() < MESSAGE_MINI_EVENT_LENGTH) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return position.readableBytes() + 12;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "returnHandlerContextHandlerContext(buf.readableBytes() < 11;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return COORDINATE_TYPE_EXTENDED__RECORDS;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return COORDINATE_TYPE_PLEVIOUS_ASCII;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return COORDINATE_TYPE_EXTENTER.readableBytes() < MESSAGE_MINIMUM_LENGTH) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "returnHandlerContextHandlerContextType buf.readableBytes() - 11;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return COORDINATE_TYPE_PATCHED;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return buf.readableBytes() - 10);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "buf buf.readableBytes() < MESSAGE_MINI_EVENT_BOTTOM) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "returnHandlerContextHandlerContextType buf.readableBytes() < MESSAGE_MINI_EVENT_BUS;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return COORDINATE_TYPE_ARRAY;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "// Skip Alive message while (buf.readable() && Character.isDigit(buf.getByte(buf.readerIndex()))) { buf.readByte(); }"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"x+)?,\") + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"x+)?,\") adc 2",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"x+)?,\") adc 2 + 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"x+)?,\") adc 2=",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"x+)?,\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"x+)?,\") adc 2 bytes;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"x+)?,\") adc 2});",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"x+)?,\") adc 2 R;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"x+)?,\") adc 214;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"x+)?,\") adc 2Present);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"x+)?,\") adc 2ENCODING;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"x+)?,\") adc 2Present;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"x+)?,\")*(*(",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"x+)?,\") % 10;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"x+)?,\")*(*(;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"x+)?,\") adc 2 Eclipse",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"x+)?,\") adc 2 - 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"x+)?,\") adc 2Authenticated",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"x+)?,\") adc 2 links);",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"x+)?,\") adc 212);",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"x+)?,\") adc 2=);",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"x+)?,\") adc 2URI;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"x+)?,\")*(*( // adc 2",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"x+)?,\") adc 2[1]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"x+)?,\") adc 2 ...",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"x+)?,\") adc 2(\"\\",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"x+)?,\") adc 2mk);",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"x+)?,\") ? 2 : 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"x+)?,\") adc 2 1000003;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"x+)?,\") adc 2 >>> 4;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"x+)?,\") adc 2 v;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"x+)?,\") adc 2 brackets);",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"x+)?,\") adc 2 | 3);",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"x+)?,\") * adc 2",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"x+)?,\") adc 2 | 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"x+)?,\") adc 2Character;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"x+)?,\") adc 2 1}",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"x+)?,\") adc 2 latitude;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"x+)?,\") adc 227;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"x+)?,\") adc 2 guaranteed;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"x+)?,\") adc 2 scAadc 2",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"x+)?,\") adc 2(4);",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"x+)?,\") - 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"x+)?,\") adc 2 brackets;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"x+)?,\") * adc 2 + 1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"x+)?,\") adc 2 END_VALUE;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"x+)?,\") adc 2= 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"x+)?,\") adc 2QUERY",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"x+)?,\") adc 2 >>> 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"x+)?,\") 19 + 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"x+)?,\") adc 2 sr);",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"x+)?,\") adc 2 translate",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"x+)?,\") adc 2TEXT;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"x+)?,\") adc 259 + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"x+)?,\") adc 2 & 0x07;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"x+)?,\")[1].Readers;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"x+)?,\") adc 2 & 0x adc 2",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"x+)?,\") adc 2= 8;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"x+)?,\") adc 2 anti;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"x+)?,\") adc 2 shift);",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"x+)?,\") adc 2ACTION;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"x+)?,\") adc 2bucket);",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"x+)?,\") adc 2 10000;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2 + 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"x+)?,\") adc 2Group);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"x+)?,\") + 6;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"x+)?,\") adc 2up",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"x+)?,\") adc 2Present = adc 212;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"x+)?,\") adc 2CURRENT);",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"x+)?,\") adc 2 2).",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"x+)?,\") adc 2 io;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"x+)?,\") adc 2getIdgetId",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"x+)?,\") adc 2 propagate;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"x+)?,\") adc 2 ann;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"x+)?,\") adc 2Present + 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2 bytes;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"x+)?,\") out 2 + 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"x+)?,\") adc 2=24;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"x+)?,\") adc 2*(",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"x+)?,\") adc 2 scAUTATED;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"x+)?,\") ){",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"x+)?,\") adc 2('<);",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"x+)?,\") * adc 212);",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"x+)?,\") adc 2 TEXT);",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"x+)?,\") adc 21\"",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"x+)?,\") adc 227",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"x+)?,\") adc 2accessor);",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"x+)?,\") adc 2 sc",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"x+)?,\") adc 2 Exceptions",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"x+)?,\") 0x adc 2",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"x+)?,\") adc 2documentation;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"x+)?,\") adc 2getId",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"x+)?,\") adc 2Present = 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"x+)?,\") adc 2 v + 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"x+)?,\")*(*(*(",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"x+)?,\") adc 2 10;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"x+)?,\") adc 2.\");",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\") // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional() // adc 2"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignored.getIgnored();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignored.getIgnored;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = explicitorals.getIgnored;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = explicitorals.getIgnored();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = explicit.getIgnored();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = explicit.getIgnored;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored =capitalorals.getIgnored;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = parsedToals.getIgnored;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored =OPENorals.getIgnored;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = NOorals.getIgnored;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored =OPENorals.getIgnored();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = anyorals.getIgnored;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = }, ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = }, ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = builder.ignored;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = madeorals.getIgnored;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = anyAny.getIgnored();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = anyorals.getIgnored();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored =DSorals.getIgnored;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ABorals.getIgnored;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = recursiveorals.getIgnored;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = builder.getIgnored;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATOR + ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored =Swaggerals.getIgnored;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = savedorals.getIgnored;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored =EQUALorals.getIgnored;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTEND_NAMED_CONNECTIONS.getIgnored;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored =Oforals.getIgnored;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = Korals.getIgnored;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored =minuteorals.getIgnored;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored =Zorals.getIgnored;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTEND_NAMED_CONNECTIONS.getIgnored;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored =ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = Multipartorals.getIgnored;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = reasonorals.getIgnored;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored =Hourorals.getIgnored;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored =capitalorals.getIgnored();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = parsedToals.getIgnored();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored =OrUpdateorals.getIgnored;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignorals.getIgnored++) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = NOorals.getIgnored();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = ignorals.getIgnored<>(ignorals);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored =Lowerorals.getIgnored;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored =OrUpdateorals.getIgnored();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = recursiveorals.getIgnored();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = savedorals.getIgnored();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored =ESorals.getIgnored;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getIgnored<>(ignorals)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = added.getIgnored;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored =HeightToals.getIgnored;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDAR.getIgnored();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = getDescriptororals.getIgnored;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = removedElementModels.getIgnored;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTENDARTEND_NAMED_CONNECTIONS.getIgnored;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored =Lowerorals.getIgnored();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDAR_NAMED_CONNECTIONS.getIgnored;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTENDAR.getIgnored();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = ignorals.getIgnored DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = headers.getIgnored;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignorals.getIgnored - 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDAR.getIgnored;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignorals.getIgnoredUTATED;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = selectals.getIgnored;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTENDAR.getIgnored;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = implals.getIgnored;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = ignorals.getIgnored<>(repairAny);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored =Arithmetic.getIgnored;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTEND_NAME.getIgnored;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored =Sworals.getIgnored;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = /=orals.getIgnored;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTEND_NAMED_MESSAGES.getIgnored;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = ignorals.getIgnored<>(ignorals;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTEND_NAME.getIgnored;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTEND_NAMED_MESSAGES.getIgnored;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTENDAR_NAMED_CONNECTIONS.getIgnored;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignorals.getIgnored + 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = aboveorals.getIgnored;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored =minuteorals.getIgnored();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ctx.getIgnored;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = arguments.getIgnored;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = body.getIgnored;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTEND_NAMED_KEY.getIgnored;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = ABorals.getIgnored();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTEND_NAMED_KEY.getIgnored;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = reasonorals.getIgnored();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getIgnored DEFAULT_MESSAGE_PROPERTY_NAME;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored =Heightals.getIgnored;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTEND_NAMED_INSTANCE.getIgnored;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored =DSorals.getIgnored();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDAR_NAMED_CONNECTIONS.getIgnored;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTENDARTENDAR.getIgnored();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = scriptals.getIgnored;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTENDARTEND_NAMED_MESSAGES.getIgnored;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTENDARSE_NAMED_CONNECTIONS.getIgnored;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDOR_NAMED_CONNECTIONS.getIgnored;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored =Zorals.getIgnored();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATORSTARTENDARTENDARTENDOR_NAMED_CONNECTIONS.getIgnored;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-186": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (interfaceOnly) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} if (interfaceOnly) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} if (interfaceOnly != null) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if (interfaceOnly != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (interfaceOnly) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (interfaceOnly.valueOf(additionalProperties) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if (interfaceOnly.containsKey) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (interfaceOnly != extensionProperties.DEFAULT_POM) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} if (interfaceOnly != extensionProperties.DEFAULT_POM) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if (interfaceOnly.valueOf(additionalProperties)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (interfaceOnly != extensionProperties.valueOf(interfaceOnly) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (interfaceOnly != extensionProperties.get(INTERFACE_ONLY) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} if (interfaceOnly.containsKey) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (interfaceOnly.valueOf(ANNOTATION_ONLY) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} if (interfaceOnly != extensionProperties.get(INTERFACE_ONLY) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (interfaceOnly.valueOf(additionalProperties != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (interfaceOnly > firstPom) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} if (interfaceOnly != extensionProperties.valueOf(interfaceOnly) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (interfaceOnly.valueOf(additionalProperties, default artifactId) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} if (interfaceOnly.valueOf(additionalProperties) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (interfaceOnly >extractedProperties.valueOf(ANNOTATION_ONLY) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (interfaceOnly.valueOf( interfaceOnly) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (interfaceOnly != extensionProperties.valueOf(INTERFACE_ONLY) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if (interfaceOnly != extensionProperties.valueOf(ANNOTATION_ONLY) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} if (interfaceOnly > firstPom) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (interfaceOnly != extensionProperties.valueOf(DEFAULT_POM) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if (interfaceOnly.valueOf(interfaceOnly) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if (interfaceOnly != extensionProperties.valueOf( interfaceOnly) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (interfaceOnly >extractedProperties.valueOf(interfaceOnly) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} if (interfaceOnly != extensionProperties.valueOf(ANNOTATION_ONLY) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if (interfaceOnly !=Short.valueOf( interfaceOnly) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (interfaceOnly && default artifactId) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (interfaceOnly != null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (interfaceOnly != null){",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (interfaceOnly != extensionProperties.ANSEG_POM) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} if (interfaceOnly != extensionProperties.valueOf( interfaceOnly) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} if (interfaceOnly != extensionProperties.valueOf(INTERFACE_ONLY) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} if (interfaceOnly && default artifactId) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (interfaceOnly.DEFAULT_POM) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (interfaceOnly != extensionProperties.valueOf(AMATE_POM) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (interfaceOnly.charAt(0) == ChangedecodedecodeATE_POM) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if (interfaceOnly > > additionalProperties.valueOf(INTERFACE_ONLY) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (interfaceOnly != firstPom) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (interfaceOnly.valueOf(firstNonATE_POM) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if (interfaceOnly != extensionProperties.valueOf(DEFAULT_POM)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (interfaceOnly > >extractedProperties.valueOf(ANNOTATION_ONLY) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (interfaceOnly >extractedProperties.valueOf(ANNOTATION) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (interfaceOnly != NO_POM) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} if (interfaceOnly != extensionProperties.valueOf(DEFAULT_POM) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} if (interfaceOnly != extensionProperties.ANSEG_POM) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (interfaceOnly >extractedProperties.valueOf(INTERFACE_ONLY) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (interfaceOnly > >extractedProperties.valueOf(interfaceOnly) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (interfaceOnly > > firstPom) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if (interfaceOnly >extractedProperties.valueOf(firstNonATE_POM) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (interfaceOnly != extensionProperties. artifactId) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (interfaceOnly != extensionProperties.INTERFACE_ONLY) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (interfaceOnly.charAt(0) == ChangedecodedecodedecodeATE_POM) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} if (interfaceOnly == null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (interfaceOnly != extensionProperties.PATTERN_POM) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (interfaceOnly >extractedProperties.valueOf(ANOTED_ONLY) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (interfaceOnly.valueOf(additionalProperties.DEFAULT_POM) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (interfaceOnly == null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (interfaceOnly.valueOf(additionalProperties != DEFAULT_POM) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if (interfaceOnly.valueOf(additionalProperties.DEFAULT_POM)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (interfaceOnly == extension.DEFAULT_POM) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (interfaceOnly == firstPom) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (interfaceOnly.valueOf(additionalProperties.ANOTED_ONLY) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} if (interfaceOnly != extensionProperties.INTERFACE_ONLY) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} if (interfaceOnly.valueOf(additionalProperties)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (interfaceOnly >extractedProperties.valueOf(ANSEGATE_POM) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} if (interfaceOnly != extensionProperties. artifactId) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} if (interfaceOnly.valueOf(ANNOTATION_ONLY) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (interfaceOnly != extensionProperties.POD_POM) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "default artifactId = additionalProperties.valueOf(interfaceOnly) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} if (interfaceOnly != extensionProperties.valueOf(DEFAULT_POM)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (interfaceOnly > >extractedProperties.valueOf(INTERFACE_ONLY) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (interfaceOnly.valueOf(additionalProperties.ANNOTATION_ONLY) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (interfaceOnly != extensionProperties.valueOf(AMQP_POM) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (interfaceOnly.valueOf(this. artifactId) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if (interfaceOnly.valueOf(ANNOTATION) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (interfaceOnly !=Short.valueOf(interfaceOnly) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (interfaceOnly.charAt(0) == ChangeHtml. artifactId) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} if (interfaceOnly != NO_POM) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} if (interfaceOnly != extensionProperties.PATTERN_POM) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (interfaceOnly.valueOfvalueOf(additionalProperties) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (interfaceOnly != default artifactId) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (interfaceOnly > >extractedProperties.valueOf(ANNOTATION) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (interfaceOnly > >extractedProperties.valueOf(ANOTED_ONLY) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (interfaceOnly != Query QueryATE_POM) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (interfaceOnly != extensionProperties.Dialect_POM) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (interfaceOnly > >extractedProperties.valueOf(firstNonATE_POM) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (interfaceOnly !=pgNoProperties.valueOf( interfaceOnly) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (interfaceOnly.valueOf(RIATE_POM) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (interfaceOnly != extensionProperties.interfaceOnly) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (interfaceOnly != extensionProperties.valueOf(additionalProperties) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (interfaceOnly !=Short.valueOf(additionalProperties) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} if (interfaceOnly !=GENERATE_POM) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (interfaceOnly != extensionProperties.Remaining) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if (interfaceOnly != extensionProperties.MAX_POM) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if (interfaceOnly.charAt(0) == ChangedecodedecodedecodedecodeATE_POM) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (!interfaceOnly) { additionalProperties.remove(INTERFACE_ONLY); }"
    },
    "Bears-160": {
        "fixes": [
            {
                "k": 1,
                "patch": "} else if (tokens.canConsume) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "} else if(tokens.canConsume) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "} else if (tokens.length == 2) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "} else if(tokens.length == 2) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "} else if (tokens.length == 3) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "} else if (tokens.length == 2){",
                "identical": false
            },
            {
                "k": 7,
                "patch": "} else if(tokens.length == 3) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "} else if (tokens.length == 6) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "} else if (tokens.length == 0 && tokens;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "} else if(columnName == tableColumnNames) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "} else if (tokens.equals(columnName) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "} else if (tokens.equals(columnName)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "} else if (tokens.length == 4) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "} else if (tokens.canConsume == tableColumnNames) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "} else if (tokens.length == 0 && tokens.isColumnNameTER) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "} else if (tokens.length == 0 && tokens.isVisibleTER) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "} else if (tokens.startsWithConsume) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "} else if (tokens.size() == 2) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "} else if (tokens.equals(columnName);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "} else if(tokens.length == 2){",
                "identical": false
            },
            {
                "k": 21,
                "patch": "} else if (tokens.typeTokenQuoted) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "} else if (tokens.length == 0 && tokens); } else if(columnName) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "} else if (tokens.length == typeTokenQuoted) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "} else if(tokens.length == 4) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "} else if(columnName == tableTokenQuoted) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "} else if (tokens.length == 0 && tokens.isColumnNameTER;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "} else if(tokens.length == 6) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "} else if(tokens.canConsume){",
                "identical": false
            },
            {
                "k": 29,
                "patch": "} else if (tokens.length == 16) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "} else if(tokens.columnName) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "} else if(tokens.canConsume == tableColumnNames) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "} else if (tokens.length == tableColumnNames) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "} else if (tokens.length == 1) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "} else if (tokens.length == 0 && columnName) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "} else if (tokens.canConsume(\" columnName, tokens.columnName) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "} else if (tokens.TEXTConsume) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "} else if (tokens.length == 0 && tokens.isColumnNameTER",
                "identical": false
            },
            {
                "k": 38,
                "patch": "} else if (tokens.canConsume(\" <= table.columnName) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "} else if (tokens. typeTokenQuoted) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "} else if (tokens.length == 0 && tokens.isStatic) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "} else if (tokens.canConsume(\" <= table); } else if(columnName) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "} else if(tokens.length == 16) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "} else if (tokens.canConsume && columnName) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "} else if (tokens.canConsume(\" columnName, table\")) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "} else if(tableName == tableColumnNames) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "} else if (tokens.length == 0 && tokens.isColumnNameTERTER) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "} else if (tokens.length == 1){",
                "identical": false
            },
            {
                "k": 48,
                "patch": "} else if (tokens.length == 1 && tokens.isVisibleTER) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "} else if(columnName == tokens.canConsume) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "} else if (tokens.canConsume(\" columnName, tokens.columnName != null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "} else if (tokens.canConsume errorQuoted) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "} else if (tokens.length == 0 && tokens.isNotLast) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "} else if (tokens.canConsume(\" columnName, tableTokenQuoted); } else if(columnName) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "} else if(tokensName) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "} else if (tokens.length == tableColumnTER) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "} else if (tokens.length == 0 && tokens.isSTTER) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "} else if (tokens.canConsumeCQuoted) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "} else if (tokens.length == 0 && tokens.isColumnName) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "} else if (tokens.canConsumeSTARGER) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "} else if (tokens.length == 0 && tokens != tableTokenQuoted) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "} else if (tokens.equals(\" columnName) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "} else if (tokens.length == 0 && tokens.isMIDDLETER) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "} else if (tokens.canConsumeBOTTOM) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "} else if(tokens.canConsume errorQuoted) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "} else if (tokens.length == 30) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "} else if (tokens.canConsume(\" columnName, tokens.canConsume) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "} else if (tokens.equals(columnName); } else if tokens.canConsume) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "} else if (tokens.length == 0 && tokens.iscomment) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "} else if (tokens.canConsume(\" columnName, tokens);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "} else if (tokens.canConsume(\" columnName, table::isName) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "} else if (tokens.length == 1 && tokens;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "} else if (tokens.length > 0 && tokens.isVisibleTER) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "} else if (tokens.isColumnToWrite) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "} else if(tokens.canConsume(\" columnName, tokens.columnName) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "} else if (tokens.canConsume == tableTokenQuoted) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "} else if (tokens.length == 0 && tokens.is4;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "} else if (tokens.canConsumeBORDER_HEIGHT) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "} else if (tokens.length ==rowColumnNames) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "} else if (tokens.length == 0 && tokens.islayoutTER) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "} else if(tokens.TEXTConsume) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "} else if (tokens.length == 0 && tokens.isNotLast){",
                "identical": false
            },
            {
                "k": 82,
                "patch": "} else if (tokens.canConsumeHeader) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "} else if(tokens.length == 0 && tokens;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "} else if (tokens.canConsume(\" columnName, table::isName != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "} else if (tokens.equals(columnName); } else if(columnName) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "} else if (tokens.length == - 1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "} else if (tokens.canConsume(\" <= table); } else if(!tokens.canConsume) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "} else if (tokens.BufferTERTER) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "} else if (tokens.length == 0 && tokensMIDDLETER) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "} else if (tokens.canConsume context 2 == tableColumnNames) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "} else if (tokens.canConsume(\" columnName, tokens.columnName != tableTokenQuoted) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "} else if (tokens.length == 0 && tokens); } else if(!tokens.canConsume) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "} else if (tokens.canConsumeBREAKIdentifier){",
                "identical": false
            },
            {
                "k": 94,
                "patch": "} else if (tokens.canConsume(\" columnName, table.columnName) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "} else if (tokens.length == 0 && tokens.isFieldTER) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "} else if (tokens.length == tableColumnToWrite) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "} else if(tokens.canConsumeBOTTOM) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "} else if (tokens.canConsume || columnName == tableTokenQuoted) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "} else if(tokens.length == 1) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "} else if(tokens.canConsumeBREAKIdentifier){",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "tokens.canConsume(\"RESTRICT\");"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (channel.getPipeline().get(HttpRequest.class) != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (channel.getPipeline().get(Basic.class) != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (channel.getPipeline().get(Calendar.class) != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (channel.getPipeline().get(Activity.class) != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (channel.getPipeline().get(HttpRequest.class) != null;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (channel.getPipeline().get(Basic.class) != null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (channel.getPipeline().get(remoteAddress.class) != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (channel.getPipeline().get(channel.class) != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (channel.getPipeline().get(formHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (channel.getPipeline().get(ErrorHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (channel.getPipeline().get(string.class) != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (channel.getPipeline().get(Database.class) != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (channel.getPipeline().get(EOFHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (channel.getPipeline().get(Ele.class) != null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (channel.getPipeline().get(27.class) != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (channel.getPipeline().get(Group.class) != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (channel.getPipeline().get(placeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (channel.getPipeline().get( Change.class) != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (channel.getPipeline().get(formHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (channel.getPipeline().get(Database.class) != null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (channel.getPipeline().get(KE.class) != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (channel.getPipeline().get($.class) != null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (channel.getPipeline().get(DatabaseDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (channel.getPipeline().get(buf.class) != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (channel.getPipeline().get(ErrorHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (channel.getPipeline().get(RestHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (channel.getPipeline().get(DatabaseDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (channel.getPipeline().get(channel.class) != null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (channel.getPipeline().get(Process.class) != null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (channel.getPipeline().get(mimeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (channel.getPipeline().get(remoteAddress.class) != null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (channel.getPipeline().get(Rest.class) != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (channel.getPipeline().get('){Decoder.class) != null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (channel.getPipeline().get(Generated.class) != null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (channel.getPipeline().get(Val.class) != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) == null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (channel.getPipeline().get(HttpRequestTemplate.class) != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (channel.getPipeline().get(DS.class) != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (channel.getPipeline().get(Generator.class) != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (channel.getPipeline().get(placeDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (channel.getPipeline().get(MONTHHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null) { // only one allowed",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (channel.getPipeline().get([,.class) != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (channel.getPipeline().get(Proxy.class) != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (channel.getPipeline().get(RestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (channel.getPipeline().get( Change.class) != null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (channel.getPipeline().get(9.class) != null) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (channel.getPipeline().get(FORM_URDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (channel.getPipeline().get(versionHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (channel.getPipeline().get(AsyncHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (channel.getPipeline().get(deviceId.class) != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (channel.getPipeline().get(EOFHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (channel.getPipeline().get( Then.class) != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (channel.getPipeline().get(Query.class) != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (channel.getPipeline().get(Activity.class) != null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (channel.getPipeline().get(remoteHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (channel.getPipeline().get(FORM_URDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (channel.getPipeline().get(serialization.class) != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (channel.getPipeline().get(DOWN.class) != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (channel.getPipeline().get((5,HttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (channel.getPipeline().get(Infinity.class) != null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (channel.getPipeline().get(MONTHHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (channel.getPipeline().get(Invocation.class) != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (channel.getPipeline().get(Session.class) != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (channel.getPipeline().get(8) == null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (channel.getPipeline().get(Ele.class) != null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (channel.getPipeline().get(party.class) != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (channel.getPipeline().get(KE.class) != null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (channel.getPipeline().get(errDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (channel.getPipeline().get(27.class) != null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (channel.getPipeline().get(Formatter.class) != null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (channel.getPipeline().get(string.class) != null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (channel.getPipeline().get(proto.class) != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // only one allowed",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (channel.getPipeline().get(Week.class) != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (channel.getPipeline().get(ManualDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (channel.getPipeline().get(Calendar.class) != null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (channel.getPipeline().get(Only.class) != null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (channel.getPipeline().get(years.class) != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (channel.getPipeline().get(password.class) != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (channel.getPipeline().get(Group.class) != null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (channel.getPipeline().get(version.class) != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (channel.getPipeline().get(atypeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (channel.getPipeline().get(\\HttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (channel.getPipeline().get(Checker.class) != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null){",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (channel.getPipeline().get(tag.class) != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (channel.getPipeline().get(mimeDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (channel.getPipeline().get(Field.class) != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (channel.getPipeline().get(PARAMETER.class) != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (channel.getPipeline().get( \\\"HttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (channel.getPipeline().get(versionHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (channel.getPipeline().get( ST.class) != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) == null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (channel.getPipeline().get(Detect.class) != null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (channel.getPipeline().get(remoteHttpRequestDecoder.class) != null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-127": {
        "fixes": [
            {
                "k": 1,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "decodeStatus(position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "decodeStatus(device time, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "decodeStatus(buf, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "decodeStatus(deviceSession, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "decodeStatus(channel, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "decodeStatus(device, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() << 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "decodeStatus(device timeType, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() << 8;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "decodeStatus(position, buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "decodeStatus(position, buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "decodeStatus(type, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "decodeStatus(position, buf.readUnsignedShort() << 8;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "decodeStatus(deviceStatus, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x01;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() > 0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "decodeStatus(KEY_POSITION_NEW, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "decodeStatus(position, buf.readUnsignedShort() != 0;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() != 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "decodeStatus(devicedeviceId, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "decodeStatus(link, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "decodeStatus(position, buf.readUnsignedShort() << 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "decodeStatus(deviceTime, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() << 4;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() != 0);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort(16);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "decodeStatus(status, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "decodeStatus( device time, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "decodeStatus(position, buf.readUnsignedShort() & 0x01;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "decodeStatus(command, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "decodeStatus(position, buf.readUnsignedShort() > 0;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "decodeStatus(device in, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "decodeStatus(position, buf.readUnsignedShort(5;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "decodeStatus(position, buf.readUnsignedShort(16);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "decodeStatus(LIType, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "decodeStatusStatus(deviceId, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x03);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() >>> 4;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "decodeStatus(deviceListeners, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "decodeStatus(context, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "decodeStatus(position, buf.readUnsignedShort() != 0);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort(5;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "decodeStatus(KEY_EVENT, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "decodeStatus(position, buf.readUnsignedShort()) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x01);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x07;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "decodeStatus(devicerc, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "decodeStatus(position, buf buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "decodeStatus(deviceh, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "decodeStatus(blockType, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "decodeStatus(position, buf.readUnsignedShort() >>> 4;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "decodeStatus(deviceNames, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "decodeStatus(deviceDefinitionKey, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "decodeStatus(count, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "decodeStatus(deviceCall, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x03",
                "identical": false
            },
            {
                "k": 61,
                "patch": "decodeStatus(position, buf.readUnsignedShort() << 4;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "decodeStatus(device buf, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x0203) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "decodeStatus(deviceType, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() > 0);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "decodeStatus(device processorType, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "decodeStatus(device time, buf.readUnsignedShort() << 8;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "decodeStatus(device pn, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "decodeStatus(position, buf.readUnsignedShort(8);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "decodeStatus(devicerealType, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() << 6;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort()linkType;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "decodeStatus(position, buf.readUnsignedShort() & 0x03);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "decodeStatus(device time, buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort()); // 0x01",
                "identical": false
            },
            {
                "k": 76,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort()];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "decodeStatus(deviceable, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort()DEFAULT_POSITION_NEW;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() + 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "decodeStatus(deviceRemoval, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "decodeStatus(device 28, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "decodeStatus(devicetransport, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x05) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "decodeStatus(mode, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "decodeStatus(deviceData, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "decodeStatus(buf, buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "decodeStatus(deviceHint, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "decodeStatus(oningType, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x00;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort()link;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "decodeStatus(shareType, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x03;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "decodeStatus(deviceFunctions, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x0f;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "decodeStatus(position, buf.readUnsignedShort(5);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() & 0x04;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort){",
                "identical": false
            },
            {
                "k": 98,
                "patch": "decodeStatus(deviceER, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "decodeStatus(position, buf.readUnsignedShort() & 0x01);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "decodeStatus(deviceId, buf.readUnsignedShort() - 4;",
                "identical": false
            }
        ],
        "buggy_line": "decodeStatus(position, buf.readUnsignedShort());",
        "fixed_line": "if (buf.readableBytes() >= 2) { decodeStatus(position, buf.readUnsignedShort()); }"
    },
    "Bears-131": {
        "fixes": [
            {
                "k": 1,
                "patch": "int index = 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int index = 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int index = 2), 16;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int index = 15;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int index = 11.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int index = value.substring(4), 16;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int index = len - 16;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int index = value.substring(4 + 16;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int index = value.substring(2), 16;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int index = 11;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int index = 16;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int index = comparator.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int index = value;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int index =pc.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int index = Collections.valueOf(temp) * 16;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int index = 0, value.substring(4), 16;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int index = 11.substring(4), 16;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int index =Ktemp.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int index = add.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int index = value.substring(400, 16;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int index = Integer.valueOf(temp) * 16;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int index = lenfuel.substring(4), 16;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int index = value.substring(2 * 16;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int index = value.substring(16), 16;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int index = \"+temp.substring(4), 16;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int index = lenMenu.valueOf(temp) / 16;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int index = calendar.valueOf(temp) * 16;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int index = Simple.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int index = 3;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int index = 11.substring(2), 16;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int index = lenFlags.substring(4), 16;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int index = digits.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int index = lenFlags.substring(2), 16;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int index = 0, value.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int index = len;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int index = SCROLLBAR_TEMP + 16;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int index = Collections.valueOf(temp) % 16;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int index = value.substring(10, 16;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int index =Ktemp.substring(4 + 16;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int index = lenfuel.substring(400, 16;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int index = calendar.valueOf(temp) + 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int index = 32;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int index = value.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int index = lenFlags.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int index = value & 16;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int index = Collections.valueOf(temp) / 16;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int index = value.substring(4 * 16;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int index =mediate.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int index = value.substring(temp) * 16;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int index =etric.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int index = 11.substring(4 + 16;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int index = calendar.valueOf(temp) % 16;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int index = lenfuel.substring(4 + 16;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int index = 11.substring(16), 16;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int index =KEY.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int index = comparator.length % 16;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int index = value.substring(2000, 16) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int index = comparator.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int index =Ktemp.substring(2), 16;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int index = Integer.valueOf(temp) / 16;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int index =Ktemp.substring(4), 16;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int index = calendar.valueOf(temp) / 16;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int index = value.substring(temp.length() - 2), 16;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int index = lenMenu.valueOf(temp) % 16;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int index = value.substring(temp.length % 16;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int index = lenfuel.substring(4 * 16;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int index = value.length;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int index = 0, value.substring(2), 16;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int index = Integer.valueOf(temp) + 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int index = lenfuel.substring(2), 16;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int index = lenMenu.valueOf(temp) >> 16;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int index = handles.valueOf(temp) / 16;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int index = Integer.valueOf(temp) % 16;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int index = possible.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int index = value.substring(16 + 16;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int index = handles.valueOf(temp) * 16;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int index = produces.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int index = lenMenu.valueOf(temp) * 16;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int index =Components.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int index = 12;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int index = Collections.valueOf(temp) + 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int index = lenFlags.substring(2 * 16;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int index = value.substring(2, 2), 16;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int index = temp.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int index = value.substring(5, 2), 16;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int index = value.substring(temp.length - 2), 16;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int index =value.substring(0, 2), 16;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int index = value.substring(7 * 16;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int index = temp.substring(400, 16;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int index = len1) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int index = SCROLLBAR_TEMP + 1) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int index = 11.substring(10, 16;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int index = lenMenu.valueOf(temp) + 1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int index = Collections.valueOf(temp) + 16;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int index = calendar.valueOf(temp) + 16;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int index = value.substring(2000, 16;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int index = lenFlags.substring(400, 16;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int index =pc.substring(2), 16;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int index = comparator.substring(2000, 16) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int index = value.substring(10, 2), 16;",
                "identical": false
            }
        ],
        "buggy_line": "int index = Integer.valueOf(temp.substring(0, 2), 16); if (protocol >= 3) { double value = Short.valueOf(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.valueOf(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.valueOf(temp.substring(4), 16);",
        "fixed_line": "int index = Integer.parseInt(temp.substring(0, 2), 16); if (protocol >= 3) { double value = (short) Integer.parseInt(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.parseByte(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.parseInt(temp.substring(4), 16);"
    },
    "Bears-100": {
        "fixes": [
            {
                "k": 1,
                "patch": "boolean result = position.getDeviceId;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "boolean result = position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "boolean ignition = position.getDeviceId;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "boolean ignition = result.getDeviceId;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "boolean result = position.getDeviceId(), lastPosition;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "boolean ignition = result.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "boolean oldIgnition = result.getDeviceId;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "boolean result = position.getDeviceId(), oldIgnition;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "boolean ignition = position.getDeviceId(), result.getId;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "boolean result = position.getDeviceId(), position.getIdgetId;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "boolean oldIgnition = position.getDeviceId;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "boolean ignition = position.getDeviceId(), lastPosition;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "boolean oldIgnition = result.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "boolean ignition = position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "boolean position = result.getDeviceId;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "boolean position = result.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "boolean result = lastPosition.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "boolean result = position.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "boolean result = position.getDeviceId(), lastPosition.getId;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "boolean result = oldIgnition.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "boolean resultIgnition = position.getDeviceId;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "boolean result = position.getDeviceId(), result.getId;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "boolean result = position.getDeviceId != null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "boolean ignition = position.getDeviceId(), result.getIdgetId;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "boolean ignition = position.getDeviceId(), result;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "boolean result = position.getDeviceId(), lastPosition.getIdgetId;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "boolean ignition = position.getDeviceId(), lastPosition.getId;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "boolean position = oldIgnition;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "boolean result = position.getDeviceId != oldIgnition;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "boolean result = position.getDeviceId(), position.getId != null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "boolean oldIgnition = result;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "boolean result = oldIgnition.getDeviceId;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "boolean lastPosition = position.getDeviceId(), result.getId;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "boolean result = oldIgnition;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "boolean lastPosition = position.getDeviceId;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "boolean lastPosition = position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "boolean ignition = result.getDeviceId != position.getId;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "boolean lastPosition = position.getDeviceId(), lastPosition;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "boolean oldIgnition = position.getDeviceId(), result;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "boolean result = oldIgnition.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "boolean ignition = result.getDeviceId(), position.getIdgetId;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "boolean position = oldIgnition.getDeviceId;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "boolean result != oldIgnition.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "boolean ignition = position.getDeviceId(), lastPosition.getIdgetId;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "boolean result = position.getDeviceId(), position.getId != 0;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "boolean resultIgnition = position.getDeviceId(), lastPosition;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "boolean result) position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "boolean result = position.getDeviceId != oldIgnition) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "boolean result = position.getDeviceId(), lastPosition.getId()));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "boolean result = position.getDeviceId(), position.getId != NO_IGNITION_OFF;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "boolean result) position.getDeviceId(), lastPosition;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "boolean oldIgnition = position.getDeviceId(), result.getId;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "boolean result, position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "boolean result.position = position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "boolean result = position.getDeviceId(), oldIgnition) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "boolean result != oldIgnition.getDeviceId(), position.getIdgetId;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "boolean oldIgnition = result.getDeviceId(), position.getIdgetId;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "boolean result = oldIgnition.getDeviceId(), position.getIdgetId;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "boolean position = oldIgnition.getDeviceId(), result;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "boolean oldIgnition = result.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "boolean lastPosition = result.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "boolean result == position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "boolean result = position.getDeviceId != position.getId;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "boolean result) position.getDeviceId(), position.getIdgetId;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "boolean result != oldIgnition.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "boolean ignition = position.getDeviceId(), position.getIdgetId;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "boolean result = position.getDeviceId(), oldIgnition.getId;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "boolean result = position.getDeviceId(), position.getId) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "boolean result = position.getDeviceId(), result;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "boolean result = position.getDeviceId(), lastPosition) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "boolean result = lastPosition.getDeviceId;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "boolean resultIgnition = position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "boolean result.position = position.getDeviceId;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "boolean result = position.getDeviceId(), result.getIdgetId;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "boolean result = position.getDeviceId(), oldIgnition.getIdgetId;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "boolean ignition = lastPosition.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "boolean result != position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "boolean ignition = result.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "boolean result = position.getDeviceId(), map.getId;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "boolean result._position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "boolean result = lastPosition.getDeviceId(), position.getIdgetId;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "boolean position = lastPosition.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "boolean result = position.getDeviceId != oldIgnition.getId;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "boolean lastPosition = position.getDeviceId(), result.getIdgetId;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "boolean position = result.getDeviceId(), lastPosition;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "boolean result, position.getDeviceId(), position.getIdgetId;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "boolean result = position.getDeviceId(), lastCol.getId;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "boolean result = position.getDeviceId != 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "boolean result = position.getDeviceId(), position.getId();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "boolean position = result.getDeviceId(), position.getIdgetId;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "boolean result && position.getDeviceId(), lastPosition;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "boolean result = lastPosition.getDeviceId(), position.getId()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "boolean position = oldIgnition.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "boolean ignition = position.getDeviceId(), result.getId != null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "boolean result = position.getDeviceId(), oldIgnition.getId()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "boolean resultWidget = position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "boolean oldIgnition = position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "boolean result && position.getDeviceId(), position.getId;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "boolean oldIgnition = result.getDeviceId != position.getId;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "boolean oldIgnition = position.getDeviceId(), lastPosition;",
                "identical": false
            }
        ],
        "buggy_line": "boolean ignition = position.getBoolean(Position.KEY_IGNITION); boolean oldIgnition = false; Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null) { oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); } if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
        "fixed_line": "if (position.getAttributes().containsKey(Position.KEY_IGNITION)) { boolean ignition = position.getBoolean(Position.KEY_IGNITION); Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null && lastPosition.getAttributes().containsKey(Position.KEY_IGNITION)) { boolean oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId())); } }"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (completed) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (data[0].length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (data[3].length) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (data.length) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (dataFormat) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (data[3) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (running) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (started) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (data[1].length) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (neg) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (position.length) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (data.length > 24) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (data[0].length > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (data[4) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (data[2].[2].End) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (data.length > started) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (data.length > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (data[3[3].length) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parameters[3].length) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (position != 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (data[2]) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (mapping.length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (data[2].[2].) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parameters.length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (dataFormatReaders) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (data.length > 5) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (data[3];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (dataLength > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (data[0].length > started) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (data[2]. < data.length) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (Block[1].length) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (data.length > 4) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (dataLength > 10) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (dataLength) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (data[0].length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (activity[3].length) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (data[2]. < 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (datadata.length) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (data[1].length > 0) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (data[1] > 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (files.length) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (negated) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (mapping[0].length) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (dataLength > 24) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (data.length > 255) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (data[2].End) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (null != data.length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (null != data[3) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (data[2].length) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (data[300, 0x0020) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (dataFormatR1_LAST) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (position != 4) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (data[300, 0xtaximeterEnd) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (data.length > 3) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (dataFormatMin) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (data[3[3) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (data[3xff) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (or.length) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (reloading) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (data[started) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if ( position.length) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (data[0].length > 255) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (data[3].charAt) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (data.length > 10) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (dataFormatR000) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (position) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (data[300, position) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (dataDare) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (null != data[3].length) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (dataFormatFirst) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (allowimeterFormat) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (dataLength > 255) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (data[300, 0x00, 0x0020) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (data[0].length > 24) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (dataFormatReaders;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (dataFormatReaders[1].length) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (useimeterStart) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (dataFormatOffset) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (allowimeterimeterFirst) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (data[3 == 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (Block[0].length) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (dataFormatRUNTIME) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (data[300, 0x04End) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (data[300, 0x06) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (dataFormatR 5) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (dataFormatR) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (data[300, 0xtaximeterStart) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (all) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (data[3000) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (data.length > 0 ) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (dataFormatR1_FIRST) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (null != data[3){",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (data[300, 0x04) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (data.length > 0L) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (data[300, 0x00, 0x00};",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (dataFormat < 5) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (dataLength < 24) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (data[2].[2]. 2000) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (data bucket) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (data.length > distance) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-119": {
        "fixes": [
            {
                "k": 1,
                "patch": "String type = sentence.indexOf(',');",
                "identical": false
            },
            {
                "k": 2,
                "patch": "String type = sentence.substring(typeStart, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "String type = sentence.substring(typeStart, remoteAddress);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "String type = sentence.get(type, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "String type = sentence.substring(16, type);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "String type = sentence.charAt(0);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "String type = sentence.charAt(0);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "String type = sentence.substring(typeStart, graph);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "String type = sentence.substring(3, 12;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "String type = sentence.split(type, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "String type = sentence.substring(typeStart, buf.length);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "String type = sentence.value;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "String type = sentence.indexOf('*', typeStart, remoteAddress);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "String type = sentence.charAt(typeStart, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "String type = sentence.indexOf(type, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "String type = sentence.substring(typeStart,USUS_ASCII;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "String type = sentence.substring(typeStart, buf;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "String type = sentence.substring(typeStart, channel);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "String type = sentence.substring(typeStart, sentence);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "String type = sentence.substring(typeStart, length);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "String type = sentence.substring(typeStart, buf);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "String type = sentence.next;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "String type = sentence.substring(typeStart,Tail);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "String type = sentence.substring(5, 15;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "String type = sentence.substring(typeStart, 12 + 1 + 15;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "String type = sentence.substring(typeStart, channel)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "String type = sentence.indexOf('*', typeStart;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "String type = sentence.substring(16, type;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "String type = sentence.substring(typeStart, buf buf;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "String type = sentence.substring(typeStart,USUS_ASCII);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "String type = sentence.substring(typeStart, channel;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "String type = sentence.split(typeStart, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "String type = sentence.substring(typeStart, imei;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "String type = sentence.substring(typeStart,sentence);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "String type = sentence.substring channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "String type = sentence.substring(typeStart, 12);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "String type = sentence.charAtcharAt(typeStart, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "String type = sentence.substring(typeStart, responseEnd;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "String type = sentence.indexOf('*, remoteAddress);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "String type = sentence.substring(16, channel;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "String type = sentence.substring(typeStart, basicType);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "String type = sentence.substring(typeStart, buf buf.length);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "String type = sentence.substring(typeStart, bufLen);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "String type = sentence.(type, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "String type = sentence.substring(typeStart, 16);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "String type = sentence.substring(typeStart, 212;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "String type = sentence.substring(typeStart, e);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "String type = sentence.substring(typeStart, responseEnd);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "String type = sentence.substring(typeStart, channel) + 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "String type = sentence.split(typeStart, remoteAddress);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "String type = sentence.replace(type, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "String type = sentence.substring(typeStart, endIndex);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "String type = sentence.substring(typeStart,$;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "String type = sentence.substring(typeStart, len);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "String type = sentence.substring(typeStart, \";",
                "identical": false
            },
            {
                "k": 56,
                "patch": "String type = sentence.substring(typeStart, buf, remoteAddress);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "String type = sentence.substring(typeStart, buf.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "String type = sentence.substring(typeStart, remoteAddress;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "String type = sentence.substring(typeStart, inject);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "String type = sentence.substring(typeStart, 212);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "String type = sentence.indexOf('*', typeStart);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "String type = sentence.substring(typeStart, default: 0x00;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "String type = sentence.substring(typeStart, EOF);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "String type = sentence.substring(typeStart,US_ASCII);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "String type = sentence.substring(typeStart, 14);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "String type = sentence.substring(typeStart, 2;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "String type = sentence.substring(typeStart, id);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "String type = sentence.substring(typeStart, finalText >> 4);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "String type = sentence.substring(typeStart, imeii;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "String type = sentence.substring(typeStart, 12;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "String type = sentence.substring(typeStart, present);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "String type = sentence.US_ASCII;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "String type = sentence.substring(typeStart, 15);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "String type = sentence.substring(typeStart, channelX;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "String type = sentence.substring(16, channel);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "String type = sentence.substring(3, channel, remoteAddress);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "String type = sentence.substring(typeStart,USType);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "String type = sentence.substring(typeStart, (!);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "String type = sentence.substring(typeStart,statement);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "String type = sentence.substring(typeStart, prop);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "String type = sentence.substring(typeStart, response responseStart);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "String type = sentence.substring(typeStart, buf buf);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "String type = sentence.substring(typeStart,hostname);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "String type = sentence.substring(typeStart,US_ASCII;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "String type = sentence.substring(typeStart,!\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "String type = sentence.substring(typeStart, default: 0x0080;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "String type = sentence.substring(typeStart, 1LUS_ASCII;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "String type = sentence.substring(typeStart,Same);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "String type = sentence.substring(typeStart, type);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "String type = sentence.substring(typeStart, 0x00;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "String type = sentence.substring(typeStart, finalText >> 2);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "String type = sentence.substringUS_ASCII;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "String type = sentence.substring(typeStart,Jobs);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "String type = sentence.split(type, remoteAddress);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "String type = sentence.substring(typeStart,unknownY;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "String type = sentence.charAt(typeStart, remoteAddress);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "String type = sentence.substring(typeStart,Module);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "String type = sentence.substring(typeStart,BY);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "String type = sentence.substring(typeStart, remoteAddress, id);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "String type = sentence.substring(typeStart, 6);",
                "identical": false
            }
        ],
        "buggy_line": "String type = sentence.substring(typeStart, sentence.indexOf(',', typeStart)); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress);",
        "fixed_line": "int typeEnd = sentence.indexOf(',', typeStart); if (typeEnd > 0) { String type = sentence.substring(typeStart, typeEnd); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress); } } else { return null;"
    },
    "Bears-245": {
        "fixes": [
            {
                "k": 1,
                "patch": "for (Modifier modifier != modifiers) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "for (Modifier modifier != modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 3,
                "patch": "for (Modifier modifier != modifiers) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 4,
                "patch": "for (Modifier modifier _modifiers) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 5,
                "patch": "for (Modifier modifier this.modifiers; this.modifiers != modifiers) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "for (Modifier modifier _modifiers; modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 7,
                "patch": "for (Modifier modifier; modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 8,
                "patch": "for (Modifier modifier this.modifiers; _modifiers != modifiers) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "for (Modifier modifier this.modifiers; _modifiers) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "for (Modifier modifier this.modifiers; this.modifiers) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "for (Modifier modifier this.modifiers; modifiers) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "for (Modifier modifier.modifiers; this.modifiers != modifiers) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "for (Modifier modifierAs modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 14,
                "patch": "for (Modifier modifier _modifiers.add(modifier) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 15,
                "patch": "for (Modifier modifier _modifiers; this.modifiers != modifiers) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "for (Modifier modifier != modifiers) { this.modifiers.add(modifier; }",
                "identical": false
            },
            {
                "k": 17,
                "patch": "for (Modifier modifier modifier != modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 18,
                "patch": "for (Modifier modifier this.modifiers; exifiers != modifiers) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "for (Modifier modifier) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "for (Modifiermodifier; modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "for (Modifier modifier _modifiers.add(modifier);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "for (Modifier modifier; modifiers) { this.modifiers.add(modifiers); }",
                "identical": false
            },
            {
                "k": 23,
                "patch": "for (Modifier modifierAs modifiers) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "for (Modifier modifier : modifiers;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "for (Modifier modifier this.modifiers; _modifiers.add(modifiers) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "for (Modifier modifier this.modifiers; modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (Modifier modifier.modifiers; modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "for (Modifier modifier _modifiers; modifiers) { this.modifiers.add(modifiers); }",
                "identical": false
            },
            {
                "k": 29,
                "patch": "for (Modifier modifier _modifiers; modifiers) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "for (Modifier modifier;modifiers.add(modifier) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 31,
                "patch": "for (Modifier modifier this.modifiers; _modifier) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 32,
                "patch": "for (Modifier modifier != modifiers) { this.modifiers.add; }",
                "identical": false
            },
            {
                "k": 33,
                "patch": "for (Modifier modifier this.modifiers; pos++) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "for (Modifier modifier this.modifiers; pos != modifiers) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "for (Modifier modifier != modifiers) { this.modifiers.add(modifiers); }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "for (Modifier modifier; this.modifiers != modifiers) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "for (Modifier modifier this.modifiers; this.modifiers.add(modifier); }",
                "identical": false
            },
            {
                "k": 38,
                "patch": "for (Modifier modifier current modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 39,
                "patch": "for (Modifier modifier this.modifiers;modifiers != modifiers) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (Modifier modifier : modifiers;modifiers.add(modifier)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (Modifier modifier _modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 42,
                "patch": "for (Modifier modifier) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "for (Modifier modifier this.modifiers; _modifiers.add(modifier); }",
                "identical": false
            },
            {
                "k": 44,
                "patch": "for (Modifier modifierAsmodifiers.add(modifier) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (Modifier modifier this.modifiers; _modifiers) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "for (Modifier modifier this.modifiers; this.modifiers.add(modifier) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "for (Modifier modifier this.modifiers; pos < modifiers.modifiers.add(modifiers) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "for (Modifier modifier _modifiers.add(modifier; modifiers) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (Modifier modifier this.modifiers; _modifiers.add(modifiers); }",
                "identical": false
            },
            {
                "k": 50,
                "patch": "for (Modifier modifier this.modifiers; _modifiers.add(modifier) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "for (Modifier modifier.modifiers; this.modifiers) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (Modifier modifier this.modifiers; this.modifiers.add(modifiers) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "for (Modifier modifier this.modifiers; maxObject.add(modifiers) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "for (Modifier modifier this.modifiers; this.modifiers != null; ) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (Modifier modifier _modifiers; modifiers) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (Modifier modifierReason) { this.modifiers.add(modifiers; }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (Modifier modifier this.modifiers; this.modifiers != null; this.modifiers) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "for (Modifier modifier _modifiers; this.modifiers) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (Modifier modifier.modifiers; modifiers { this.modifiers.add(modifier); }",
                "identical": false
            },
            {
                "k": 60,
                "patch": "for (Modifier modifier this.modifiers; order != modifiers) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "for (Modifier modifier this.modifiers; pos < modifiers.modifiers) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "for (Modifier modifier.modifiers; modifiers { this.modifiers.add(modifier) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "for (Modifier modifier this.modifiers; _modifiers.add(modifier)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "for (Modifier modifierAsmodifiers.modifiers; this.modifiers != modifiers) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "for (Modifier modifier; modifiers { this.modifiers.add(modifier) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "for (Modifier modifier this.modifiers; _modifiers.add(modifier) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 67,
                "patch": "for (Modifier modifier this.modifiers; _modifiers) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (Modifier modifier this.modifiers; modifiers {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (Modifier modifier _modifiers.add(modifier;modifiers) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (Modifier modifier this.modifiers; pos < modifiers.modifiers.add(modifier) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "for (Modifier modifier.modifiers; _modifiers) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "for (Modifier modifier this.modifiers; this.modifiers <= modifiers) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "for (Modifier modifier.modifiers; modifiers { this.modifiers.add(modifiers) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "for (Modifier modifier _modifiers.add(modifier)) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "for (Modifiermodifier; modifiers) { this.modifiers.add(modifiers); }",
                "identical": false
            },
            {
                "k": 76,
                "patch": "for (Modifier modifier; modifiers) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 77,
                "patch": "for (Modifier modifier modifier != modifiers) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "for (Modifier modifier this.modifiers; modifiers) { this.modifiers.add(modifiers); }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "for (Modifier modifier this.modifiers.add(modifier);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (Modifier modifierToModifier.modifiers; this.modifiers != modifiers) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "for (Modifier modifier.modifiers; modifiers { this.modifiers != modifiers) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (Modifier modifier; pos < modifiers.modifiers.add(modifiers) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "for (Modifier modifier.modifiers; modifiers) { this.modifiers.add(modifiers); }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "for (Modifier modifier = modifiers;modifiers.add(modifier) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "for (Modifier modifier this.modifiers;modifier != modifiers) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (Modifier modifier _modifiers; pos < modifiers.modifiers.add(modifiers) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "for (Modifier modifier _modifiers; modifiers) { this.modifiers <= modifiers; }",
                "identical": false
            },
            {
                "k": 88,
                "patch": "for (Modifier modifier this.modifiers; return modifiers) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "for (Modifier modifier this.modifiers.add(modifier) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "for (Modifier modifier; modifiers) { this.modifiers.add(modifiersifiers; }",
                "identical": false
            },
            {
                "k": 91,
                "patch": "for (Modifier modifierReason) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "for (Modifier modifier _modifiers; pos < modifiers.modifiers) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "for (Modifier modifier; pos < modifiers.modifiers.add(modifier) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (Modifier modifier != modifiers) { this.modifiers.add(modifiers, modifiers); }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "for (Modifier modifier _modifiers;modifiers.add(modifiers) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (Modifier modifier this.modifiers; _modifier) { this.modifiers.add(modifiers); }",
                "identical": false
            },
            {
                "k": 97,
                "patch": "for (Modifier modifier _modifiers;modifiers.add(modifier) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "for (Modifier modifier : modifiers;modifiers.add(modifiers) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "for (Modifier modifier this.modifiers; _modifier) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "for (Modifier modifier; modifiers { this.modifiers.add(modifier); }",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (!modifier.equals(Modifier.FINAL)) { throw new IllegalStateException(\"unexpected parameter modifier: \" + modifier); }"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + icc;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state);",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NOSONAR",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd vertex",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + icc;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") > 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // sanity check",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") {",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // removed \" + icc;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA_TYPE;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // description;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + iccid;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 3;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // translateS;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //path;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id2}, {",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // Namedid",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iccid2}, {",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".expression(\"(?:[0-9F]{20})?,\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or strategy",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // bcc;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateid1).",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iter;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //FAIL",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA_TYPE_EQUALS;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 5;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateid",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\"))) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //boolean icc;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; // NOSONAR",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 2;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // activeid",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //xcc;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NRcc;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; icc;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // START;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NReaders;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // translateearch;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid2}, {",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //21",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // superClass",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // randomid",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner4;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or 0x00;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // minutes",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //ownerowner;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // sanity check;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd file;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //up",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA_TYPE, indexcc;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA_TYPE",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; icc, state);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //Printer",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\")))",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iccid .number Ccc;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 500;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // piid",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // pippToken",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //3]",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + indexcc;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd specific",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid \" + icc;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //21;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15;\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // LINE;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner't 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateidcc;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA_TYPE_LENGTH;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // activeid2}, {",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 15;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state=\" + icc;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iccid\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\";",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateid\";",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;//already internal.",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // positions;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vert;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //applicationid2}, {",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner.\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // pipposite;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // calendar;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") callbackcc;",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\") // iccid"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 8;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributes.length;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes.length) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributeName;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthOR_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 2);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributes;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthCode;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_KEY);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % this.attributes.length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % this.attributes;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attribute.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % this.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.result.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthEXECUTION_ID_KEY);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerNode);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attributes.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthEXECUTION_ID_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributesType.length;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerBatch;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributesName.length;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes.length;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 2, attributes.length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthcodec);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributeName), attributes.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.length;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentHashMap[0];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthOR_ID_KEY);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerNode;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.rebuild;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length JPanel;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthSize);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length additionalName);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributeName, attributes.length);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthincludedResult);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.attributes;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / _attributes.length;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthresult.length);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length1)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributeName.length);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % a.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthEXECUTION_RESERVED_TYPE_OBJECT;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 0;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_KEY);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes.length);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributesMap.length) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributesString.length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.parent.length;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthfilteredProps;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length]) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributeName_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthUserType);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length 255);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_ attributes);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length fnMapping, attributes);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthformer);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes attributes.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 1000;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthmappings;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.line.length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthSize;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.names.length;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthED_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_ID_KEY);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 2, attributes);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-2);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = this.attributes.length != attributes.length;",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-95": {
        "fixes": [
            {
                "k": 1,
                "patch": "return entity != null && !entity.getType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return entity.getType().getClassLoader() != null || !entity.getType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return entity.getType().getClassLoader() != null || !entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return entity != null && !entity.getType().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return entity != null && !entity.getType().getPackage().toString().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return entity != null || !entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return entity.getType().getClassLoader != null && !entity.getType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return entity != null && !entity.getType().getPackage().indexOf(\" \");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return entity != null && !entity.getType().getPackage().substring(\" \");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return entity.getType().getClassLoaderError == null || !entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return entityId.getType().getClassLoader() != null && !entity.getType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return entity.getType().getClassLoader().entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return key.getType().getClassLoader() != null && !entity.getType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return entity != null && !entity.getType().getPackage().startsWith(\" docEntity.class().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return entity != null && !entity.getType().getPackage().length > 0;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return entity != null && !entity.getType().getPackage().getNamegetName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith C \");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return entity.getType().getClassLoader != null && !entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return entity.getType().getClassLoaderError == null || !entity.getType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\". \");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithContext. \");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return entity != null && !entity.getType().getPackage().getName;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" doc;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith bound;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return entity != null && !entity.getType().getPackage().hashCode(\" \");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return entity != null && !entity.getType().getPackage().getName:startsWith(\" \");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return entity != null && !entity.getType().getPackage().body().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return entity != null && !entity.getType().getPackage().problem().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return entity != null && !entity.getType().getPackage().substring(1);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return entity != null && !entity.getType().getPackage().startsWith C \");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return entity != null && !entity.getType().getPackage().split(\" \");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return entity != null && !entity.getType().getPackage().filter.startsWith(\" \");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "returnentity != null && !entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" docEntity.class().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return entity != null && !entity.getType().getPackageVariablegetName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWitht \");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return entity != null && !entity.getType().getPackage().getValue(\" \");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return entity != null && !entity.getType().getPackage().startsWith(\" doc;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return entity != null && !entity.getType().getPackage().equals(\" \");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithNS) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return entityId.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithNS;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return entity.getType().getClassLoader().entity.getType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" scA().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithComponent. \");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithWatch",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return entity != null && !entity.getType().getPackage().getContext().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithAccessor(\" \");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return key.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithNS_ \");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return entity != null && !entity.getTypegetType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" docEntity. \");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().indexOf(\" \");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().toString().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return entity != null && !entity.getType().getPackage().getClass().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWitht. \");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" 2);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithNING_URL_startsWith(\" \");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithTypes;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" .startsWith(\" \");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "returnentity != null && !entity.getType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return entity != null && !entity.getType().getPackage().getName.startsWith(\" \");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" \")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith the \");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return entity != null ? !entity.getType().getPackage().getName().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" docEntity;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return entity != null && !entity.getType().getPackage().getNamezstartsWith(\" \");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithNING_URL;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return entity != null && !entity.getType().getPackage().startsWithContext. \");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" docEntity.class;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithStartDate;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return entity != null && !entity.getType().getPackage().getParameter(\" \");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithByte(\" \");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return entity != null && !entity.getType().getPackage().startsWith(\". \");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return entity != null && !entity.getType().getPackage().startsWith(\" field\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" 8) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" field;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" field\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith};",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" field",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return entity != null && !entity.getType().getPackage().startsWith(\" field",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return entity != null && !entity.getType().getPackage().getSelected(\" \");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\" \"))",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().startsWithed().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return entity != null && !entity.getType().getPackage().startsWith(\" \"))",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return entity != null && !entity.getType().getPackage().getAttribute(\" \");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithConfig. \");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return entity != null || !entity.getType().getPackage().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return entity != null && !entity.getType().getPackage().filter(\" \");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().startsWith C \");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithNSATION_URI().startsWith(\" \");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWithNSATION_HEADER;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith(\":\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return entity != null && !entity.getType().getPackage().getName().startsWith< \");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return entity != null && !entity.getType().getPackage().startsWithTypes. \");",
                "identical": false
            }
        ],
        "buggy_line": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith(\"java\");",
        "fixed_line": "Class<?> type = entity.getType(); return type.getClassLoader() != null && (type.getPackage() == null || !type.getPackage().getName().startsWith(\"java\"));"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\n\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData started",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData != null;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData51List\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData \");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData'));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData}\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSessionFactory\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataELEMENT\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData links\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDatappo.SessionData\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDatanpmList\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataCode;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataES);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataManaged",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataThread WhiteList\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFactor;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(5;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData document",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDatachoiceList\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataByteBuffer\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData #;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData MINUTEList\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataATTRIBUTE",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSessionFactory",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataappendChildList\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData2;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData+\"",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData themes;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData10\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSubject\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData0);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData ;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataActivities\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData split\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataremoteAddress\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataraw WhiteList\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSK WhiteList.class;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.query.SessionData\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\\")\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData not WhiteList\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData variableName",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData+\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData4;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData config",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataMetaData\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataExtension\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataNANOSECONDS;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData executorServiceList\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataActivities;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData augment",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData28;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataNANOSECONDS.SessionData\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData + this.query.SessionData\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSK WhiteList\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(3, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFactorFactor;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSetter\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataremoteAddressData\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData config\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData};",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDatanet/\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataException;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataborder",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData > this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData added;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData link.class;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData > WhiteList.class;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData repair repair",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDatappo.class;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData 12",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData}\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(3, this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData link",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData field",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData link.SessionData\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(3, this.query.SessionData\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData repair repair repair",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-159": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\";",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\";",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of-TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TSFormatter TS_FORMAT_PATTERN.of-TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofAGGER_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; ) private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TSFormatterFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; flags to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofofPattern;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TSFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TSFormatter TS_FORMAT_PATTERN.of-TS_FORMAT;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMATFORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; this private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofParameters(TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofAG_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of '{Formatter TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:HOME\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:hash\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of maps_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of(TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of READ_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of(\"TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH: used\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of BFormatter TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:Indent\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:debFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\";\\r static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TS_FORMAT_PATTERN.of-TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of orderFormatter TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT_PATTERN = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\";SCOPE, private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; same to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; 6:ss\";",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofON_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern \"TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; of private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TSFormatter TS_FORMAT_PATTERN.of-TS_FORMATFORMAT;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; client static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofAGGERGER_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; link to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofING_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofAGGER_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPER_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern[]) private static final DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; 6 to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; props to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of-TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TSFormatter TS_FORMAT_PATTERN.of-TS_FORMATFORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern 'TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; first DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofParametersFormatterFormatter TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; variable to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of BFormatter TS_FORMAT;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; add class to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofData(TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\";ART to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; 6 to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofsynchron_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of '{Formatter TS_FORMAT;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TS_FORMAT_PATTERN.of-TS_FORMAT;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of maps_TS_FORMAT;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\";\\r static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; deser to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofSimpleFormatter TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of rankFormatter TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; add to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofences_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TSFormatter TS_FORMAT_PATTERN.of-TS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of READ_TS_FORMAT;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofMut_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofAGGERFormatterFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofAG_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofParametersFormatter TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of orderFormatter TS_FORMAT;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofON_TS_FORMAT;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPRESSION_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TSFormatter.of-TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; // private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\";evaluate to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; variable/TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of-TS_FORMAT;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; strFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of READ_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:modFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofSelector_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\";spacing to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofprintln_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\";spacing-of-TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:joinFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.of rank_TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofAGGERFormatter TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; props to DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = \"TSFormatterFormatter.of-TS_FORMAT_PATTERN;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.oftTS_FORMAT_PATTERN;",
                "identical": false
            }
        ],
        "buggy_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
        "fixed_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss[.S]\"; private static final DateTimeFormatter TS_FORMAT = new DateTimeFormatterBuilder() .appendPattern(\"yyyy-MM-dd HH:mm:ss\") .appendFraction(ChronoField.MICRO_OF_SECOND, 0, 6, true) .toFormatter();"
    },
    "Bears-222": {
        "fixes": [
            {
                "k": 1,
                "patch": "List<E> viAdj = adj.length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "List<E> viAdj = adj.r;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "List<E> viAdj = adj.children;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "List<E> viAdj = adj.-1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "List<E> viAdj = adj.right;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "List<E> viAdj = adj.next;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "List<E> viAdj = adj.get(v) % n;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "List<E> viAdj = adj.get(r) % n;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "List<E> viAdj = target;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "List<E> viAdj = adj.n;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "List<E> viAdj = adj.add(v;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "List<E> viAdj = adj.item;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "List<E> viAdj = adj.instance;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "List<E> viAdj = adj.add(v) % n;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "List<E> viAdj = adj.get(e) % n;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "List<E> viAdj = adj.data;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "List<E> viAdj = adj.get(vi) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "List<E> viAdj = adj.parent;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "List<E> viAdj = adj.params;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "List<E> viAdj = adj.v;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "List<E> viAdj = adj.Assert;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "List<E> viAdj = adj.seq;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "List<E> viAdj = adj.add(n;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "List<E> viAdj = adj.get(vi) % n;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "List<E> viAdj = adj.get(k) % n;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "List<E> viAdj = adj.get(v, j) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "List<E> viAdj = adj.add(v, j) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "List<E> viAdj = adj.target;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "List<E> viAdj = i;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "List<E> viAdj = adj.command;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "List<E> viAdj = adj.get(v, k;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "List<E> viAdj = adj.adjEdgesHead;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "List<E> viAdj = adj.add(v, k);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "List<E> viAdj = adj.getHeight;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "List<E> viAdj = adj.get(v) % 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "List<E> viAdj = adj.add(v, 1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "List<E> viAdj = adj.get(n) % n;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "List<E> viAdj = adj. 1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "List<E> viAdj = adj.get(v, j) % n;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "List<E> viAdj = adj.parentEdge;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "List<E> viAdj = adj.get(i) % n;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "List<E> viAdj = adj. << 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "List<E> viAdj = adj.get(r) - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "List<E> viAdj = adj.get(v) <= k;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "List<E> viAdj = adj.get(v, k) % n;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "List<E> viAdj = adj.value;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "List<E> viAdj = adj.Names;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "List<E> viAdj = adj.add(v, n) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "List<E> viAdj = adj.get(r) % 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "List<E> viAdj = adj.dy;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "List<E> viAdj = adj.SENTINEL;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "List<E> viAdj = adj.get(k) % 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "List<E> viAdj = adj.width;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "List<E> viAdj = adj.add(v, r);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "List<E> viAdj = adj.degree;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "List<E> viAdj = adj.isDirected) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "List<E> viAdj = adj.get(v, k);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "List<E> viAdj = adj.graph;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "List<E> viAdj = adj.add(v) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "List<E> viAdj = adj.get(k) % 2;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "List<E> viAdj = adj.get(vi) <= k;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "List<E> viAdj = 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "List<E> viAdj = adj.add(v) <= k;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "List<E> viAdj = adj.get(v) - 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "List<E> viAdj = adj.get(vi, k;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "List<E> viAdj = adj.get(v, k) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "List<E> viAdj = adj.getTime;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "List<E> viAdj = target.right;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "List<E> viAdj = adj.is;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "List<E> viAdj = adj.client;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "List<E> viAdj = adj.decode(v) % n;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "List<E> viAdj = adj.get(vi, n) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "List<E> viAdj = adj.addEdge;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "List<E> viAdj = adj.Instance;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "List<E> viAdj = adj.get(n) <= k;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "List<E> viAdj = adj.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "List<E> viAdj = adj.allEdge;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "List<E> viAdj = clause;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "List<E> viAdj = adj.get(v) % 2;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "List<E> viAdj = adj.get(target) % n;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "List<E> viAdj = adj.add(vi);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "List<E> viAdj = adj.get(v, 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "List<E> viAdj = adj.get(j) % n;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "List<E> viAdj = p.right;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "List<E> viAdj = adj.get(v, r);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "List<E> viAdj = adj.get(r) / 2;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "List<E> viAdj = adj.adjEdgesPerNode;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "List<E> viAdj = adj.add;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "List<E> viAdj = adj.size;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "List<E> viAdj = v;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "List<E> viAdj = adj.add(v, j) % n;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "List<E> viAdj = adj.get(vi) + 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "List<E> viAdj = adj.get(vi);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "List<E> viAdj = adj.get(vi, k) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "List<E> viAdj = adj. Builder;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "List<E> viAdj = adj.add(v, k;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "List<E> viAdj = adj.get(v, n) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "List<E> viAdj = adj.get(v) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "List<E> viAdj = adj.get(vi) <= p;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "List<E> viAdj = adj.get(vi) - 1;",
                "identical": false
            }
        ],
        "buggy_line": "List<E> viAdj = adj.get(i); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { V v = ring.get(i); E e = adj.get(i).get(r);",
        "fixed_line": "List<E> viAdj = adj.get(vi); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { if (rng.nextDouble() < p) { V v = ring.get(i); E e = adj.get(v).get(r);"
    },
    "Bears-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (startNoEventIndex == startNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (startNoEventIndex == endNoCount) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (startNoEventIndex == endNo) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (startNoEventIndex == endNoIndex) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (startNoEventIndex == endNo;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (startNoEventIndex == startNoEventIndex;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (startNoEventIndex == endNoEventIndex) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (startNoEventIndex == endNoEventIndex = 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (startNoEventIndex == endNoEventIndex;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (startNoEventIndex == i) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (startNoEventIndex == 0; } else if (startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (startNoEventIndex == -1) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (startNoEventIndex == endNoState.INHERIT) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (startNoEventIndex == endNoEventIndex = i;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (startNoEventIndex == endNoNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (startNoEventIndex == startNoEventIndex = 0; }",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (startNoEventIndex == endNoState.height) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (startNoEventIndex == startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (startNoEventIndex == endNoIndex;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (startNoEventIndex == endNoState.DEFAULT) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (startNoEventIndex == endNoState.finish) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (startNoEventIndex == endNoCount;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (startNoEventIndex == endNoState.SPAN_ONLY) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (startNoEventIndex == endNoState.INLINE_START) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (startNoEventIndex == startNoEventIndex = 0; } else if (startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (startNoEventIndex == endNoState.length) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (startNoEventIndex == endNoIndex = 0;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (startNoEventIndex == endNoStateIndex) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (startNoEventIndex == endNoState.MESSAGE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (startNoEventIndex == -1){",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; // no partially decoded UTF-8 codepoint",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (startNoEventIndex == endNoState.DELETE) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (startNoEventIndex == endNoState.JOIN) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (startNoEventIndex == endNoState.SPANOSECONDS) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (startNoEventIndex == 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (startNoEventIndex == startNoEventIndex = 0; // no partially decoded UTF-8 codepoint",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (startNoEventIndex == endNoState.notEmpty) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (startNoEventIndex = 0; } else if (startNoEventIndex == endNoCount) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (startNoEventIndex == endNoEnd) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex != 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (startNoEventIndex == endNoState.INLINE_LENGTH) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (startNoEventIndex == endNo - 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (startNoEventIndex == endNoRef) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (startNoEventIndex == endNoState.SPLIT_CHARACTERS;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (startNoEventIndex == endNoState.SPANOOM_1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (startNoEventIndex == endNoState.route;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (startNoEventIndex = 0; } else if (startNoEventIndex == startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (startNoEventIndex == endNoState.route) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (startNoEventIndex == endNoFilename) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (startNoEventIndex == endNoState.devicedeviceStateIndex;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex != startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex[0]) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex != -1) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (startNoEventIndex == endNoScope) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (startNoEventIndex == endNoState.PAGE_POSITION) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex >= 0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (startNoEventIndex == endNoState.SPANOOM_ONLY) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (startNoEventIndex == endNoActivity) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (startNoEventIndex == endNoState.SPANNING) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if(deviceStateIndex == startNoEventIndex;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex == endNoCount) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex == startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (startNoEventIndex == startNoEventIndex = 0; } else if (startNoEventIndex[0]) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (startNoEventIndex == endNoKeyword) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (startNoEventIndex == endNoNoEventIndex = 0; } else if (startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (startNoEventIndex == endNoION) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (startNoEventIndex == currentNoEventIndex = 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (startNoEventIndex == endNoExtension) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (startNoEventIndex == startNoEventIndex = 0; } else if (startNoEventIndex == endNoCount) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (startNoEventIndex == endNoState.INLINE_LOGMSG) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoRef) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (startNoEventIndex == endNoIndex = 0; } else if (startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex != endNoEventIndex) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (startNoEventIndex = 0; } else if (startNoEventIndex == startNoEventIndex[0]) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex != endNoIndex) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (startNoEventIndex == startNoEventIndex = 0; } else if (startNoEventIndex != 0) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (startNoEventIndex == endNoNoEventIndex = 1;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (startNoEventIndex == endNoState.INLINE_CONNECTION) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoCount) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex > 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (startNoEventIndex = 0; } else if (startNoEventIndex == endNoIndex) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (startNoEventIndex == subtypes.length) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (startNoEventIndex == Token.TK_IDENT) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (startNoEventIndex != endNoEventIndex = 0; } else if (startNoEventIndex) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (startNoEventIndex == endNoState.SPANNOTATION_ONLY) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (startNoEventIndex == endNoState.INLINE_EVENTS) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (startNoEventIndex == 0; } else if (startNoEventIndex[0]) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (startNoEventIndex == Token.TK_COMPENSATION) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (startNoEventIndex == endNoNoEventIndex) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (startNoEventIndex == startNoEventIndex = 0; } else if (startNoEventIndex != endNoIndex) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex == startNoEventIndex[0]) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (startNoEventIndex == startNoEventIndex = 0; } else if (startNoEventIndex != -1) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if there's.",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoEventIndex != null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (startNoEventIndex == endNoEventIndex = 0; } else if (startNoNoEventIndex) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (startNoEventIndex == startNoEventIndex = 1;",
                "identical": false
            }
        ],
        "buggy_line": "if (deviceState.getMotionPosition() != null && startEventIndex == -1 && trips != deviceState.getMotionState()) { startEventIndex = i; startNoEventIndex = -1; } if (trips == deviceState.getMotionState()) { if (startNoEventIndex == -1) { startNoEventIndex = i; } else if (deviceState.getMotionPosition() == null) { startNoEventIndex = -1; }",
        "fixed_line": "if (startEventIndex == -1 && (trips != deviceState.getMotionState() && deviceState.getMotionPosition() != null || trips == deviceState.getMotionState() && event != null)) { startEventIndex = i; startNoEventIndex = -1; } else if (trips != deviceState.getMotionState() && startEventIndex != -1 && deviceState.getMotionPosition() == null && event == null) { startEventIndex = -1; } if (startNoEventIndex == -1 && (trips == deviceState.getMotionState() && deviceState.getMotionPosition() != null || trips != deviceState.getMotionState() && event != null)) { startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() == null && event == null) { startNoEventIndex = -1;"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldClass;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldfield.getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldfield.getName());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldAcceptableField.getName());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray, ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldValue);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldNumber.getName());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldNumber;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldAcceptableField.getName());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass.getName());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray0' || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldClass.getName());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldType.getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && message.contains(field.getName());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.getName;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldAcceptable);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldNames.getName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == boolean.class;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && millisNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray_TASK || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return field.getType().isPrimitiveValue && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldType.getName());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldAcceptableField.getName;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldValue.getName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && delegate.contains(field.getName());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field10;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && overrideNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.getType().isPrimitiveing || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldNumber;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray false || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldAcceptable);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.getType().isPrimitiveValue && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == other.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && cloneNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field).getName();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() object object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field10;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray + ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() || field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.getType().isPrimitiveType && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldAcceptable;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == ignoredNames.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == usernameNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && totalSize.contains(field.getName());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldfield);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName())) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() &&visitNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldfield);",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-138": {
        "fixes": [
            {
                "k": 1,
                "patch": "int mnc = buf.length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int mnc = buf.readUnsignedByte;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int mnc = lac, cid, rssi;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int mnc = buf.read(i, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int mnc = buf.length % 7;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int mnc = lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int mnc = buf.length - 7;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int mnc = buf.read(i, lac, cid, rssi;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int mnc = buf.read(i, lac, cid);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int mnc = buf.read(i, mnc, lac, cid);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "int mnc = i;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int mnc = buf.read(i, lac, cid;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int mnc = buf.read(i, lac, cid cid, rssi);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int mnc = buf.readUnsignedInt;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int mnc = buf.readUnsignedByte << 8;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int mnc = buf.read(i, lac, cid - 7;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int mnc = buf.read(i, potential, lac, cid);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int mnc = buf.read((i >>> 5) & 0xcc, mnc, lac, cid);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int mnc = buf.readUnsignedByte() << 8;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int mnc = buf.readUnsigned(12;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int mnc = buf.readUnsignedByte << 6;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int mnc = buf.readUnsignedUnsignedByte;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int mnc = buf.from(i, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int mnc = buf.readUnsignedByte() << 6;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int mnc = buf.readUnsignedByte - 7;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int mnc = buf.read(i, lac, cid cid, rssi;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int mnc = buf.readUnsignedShort;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int mnc = buf.readUnsignedByte << 7;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int mnc = buf.readCellTower;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int mnc = buf.read((i >>> 5) & 0xcc, lac, cid;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int mnc = buf.read((i >>> 5) & 0xcc, mnc, lac, cid;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int mnc = buf.read(i, mnc, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int mnc = family.read(i, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int mnc = buf.readUnsignedByte() & 0xcc, mnc, lac, cid);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int mnc = buf.read((i >>> 5) & 0xcc, lac, cid);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int mnc = buf.from;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int mnc = buf.(i, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int mnc = buf.readUnsigned shortFormatT, mnc, lac, cid);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int mnc = buf.read((i >>> 4) & 0xcc, mnc, lac, cid);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int mnc = buf.read(i, cid, rssi;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int mnc = buf.readc, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int mnc = new int Scc, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int mnc = buf.readFlags;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int mnc = buf.length-1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int mnc = buf.readUnsignedByte; // mnc, lac, cid",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int mnc = buf.read(i, 13, lac, cid);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int mnc = buf.read((i >>> 4) & 0xcc, mnc, lac, cid;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int mnc = buf.read((i >>> 7) & 0xcc, mnc, lac, cid);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int mnc = buf.read(i, lac, cid) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int mnc = buf.readers;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int mnc = buf.read((i >>> 5) & 0xcc;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int mnc = buf.readUnsignedByteByte;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int mnc = lac, cid, rssi % 7;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int mnc = buf.read((i >>> 4) & 0xcc, lac, cid;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int mnc = buf.readUnsigned shortFormatT, lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int mnc = buf.readUnsigned shortFormatT, lac, cid);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int mnc = buf.readUnsigned;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int mnc = buf.read(i, lac, cid, rssi)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int mnc = buf.read(i, len, lac, cid);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int mnc = buf.readers << 7;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int mnc = buf.readUnsignedByte >> 4;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int mnc = buf.read(i, lac, cid) ? 8 : 7;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int mnc = buf.readUnsignedByte % 7;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int mnc = buf.readUnsigned shortFormatT, lac, cid, rssi;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int mnc = buf.readUnsignedByte() << 7;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int mnc = buf.readUnsignedShort() - 7;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int mnc = buf.readUnsignedMedium;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int mnc = lac, cid, rssi)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int mnc = buf.read(i, potential, cid, rssi);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int mnc = buf.readUnsignedDATE_AND_EMBEDDED_OF_STRING;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int mnc = buf.read((i >>> 7) & 0xcc, lac, cid);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int mnc = buf.read(i, lac, cid, rssi) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int mnc = buf.read(i, lac, cid, rssi % 7;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int mnc = buf.read(i, mnc, lac, cid;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int mnc = buf.read((i >>> 7) & 0x04;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int mnc = buf.read(i, cid, rssi);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int mnc = buf.readUnsignedByte >> 7;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int mnc = buf.read((i >>> 4) & 0x04;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int mnc = buf.readc, lac, cid, rssi;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int mnc = family.read(i, lac, cid);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int mnc = buf.from(i, lac, cid cid, rssi);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int mnc = buf.read(i, lac, cid cid;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int mnc = buf.read((i >>> 7) & 0x0203) != 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int mnc = buf.read(i, lac, cid) ? 8 : rssi;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int mnc = lac, cid - 7;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int mnc = buf.read(i, lac, cid & 0x3000) != 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int mnc = lac, cid;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int mnc = buf.readUnsignedDATE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int mnc = buf.from(i, lac, cid, rssi;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int mnc = buf.read(i, lac, cid) != 0;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int mnc = lac lac, cid, rssi);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int mnc = buf.read(i, lac, cid + rssi;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int mnc = buf.readers << 8;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int mnc = buf.readUnsignedByte() & 0x00;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int mnc = buf.read(i, lac, cid) % 7;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int mnc = buf.readUnsigned shortFormatT, lac, cid;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int mnc = buf.read(i, len, rssi);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int mnc = new;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int mnc = buf.readUnsignedpartyId;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int mnc = lac lac, cid, rssi;",
                "identical": false
            }
        ],
        "buggy_line": "int mnc = buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));",
        "fixed_line": "int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"x+),\") + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"x+2, prop);",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"x+2, include;",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"x+),\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"x+),\") - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"x+\", battery;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"x+2, include + 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"x+2, - 9;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"x+2, prop).",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"x+ '-'\") + 1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"x+2, prop prop);",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"x+2,\") + 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"x+), uuid;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"x+\"]\";",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"x+blockblock // NR_BIGDECIMAL().number;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"x+2, 6;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"x+ typeName;",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"x+ValueException\") + 1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"x+), superClass - 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"x+2, 2 - 9;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"x+block;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"x+relationship\") - 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"x+\") + 1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"x+2, 2;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"x+2,14;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"x+INPUT;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"x+2, include 0.5;",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"x+2] = battery;",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"x+blockblock // NR_BIGDECIMAL().group(1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"x+2, NO_MUST_NOT_BE_EMPTY);",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"x+2, selection;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"x+blockblock // NR_BIGDECIMAL().numberLong;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"x+2, 2Authenticated;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"x+), prop;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"x+2, includeOfType;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"x+2, NO_MUST_NOT_IMPLEMENTED);",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"x+relationship\") + 1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"x+blockblock // NR_BIGINT;",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"x+2]",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"x+3, 6;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"x+blockblock // NR_BIGDECIMAL).",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"x+ValueException;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"x+2, prop).num;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"x+blockblock // NR_BIGDECIMAL().numberInt;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"x+ [END_BUGGY] ;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"x+2, include = battery;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"x+2, 2);",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"x+2,numTypesValid + NR_UNKNOWN;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"x+2, 2});",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"x+2, 2 dateFormat;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"x+2, 214;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"x+2, len).",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"x+2, 63;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"x+2, NO_MUSTERS_NOT_IMPLEMENTED);",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"x+2]' // 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"x+2, 2().numberInt;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"x+2, len - 5;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"x+blockblock // NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"x+2, 2Authenticated",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"x+2, 2 -> 6;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"x+2, includeBinary",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"x+2, prop;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"x+2, includeGroup);",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"x+2, _numberLong;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"x+2, 2UTE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"x+2] prop;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"x+ labels;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"x+2, 0). power;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"x+2, 2 value value;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"x+blockblock // NR_BIGDECIMAL().numberLong",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"x+2, prop). -;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"x+blockblock // NR_BIGDECIMAL .group(1);",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"x+2, 2 getComponent);",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"x+2, NO_MUST_NOT_BE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"x+\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"x+blockblock // NR_BIGDECIMAL().numberOfPlayers;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"x+4;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"x+ sb;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"x+),\") + 10;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"x+2, 2 - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"x+\"];",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"x+2, 2FLOW;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"x+2] prop prop;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"x+2, NO_MUST_NOT_BEFORE).group(1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"x+2, 2Authenticatedvalues;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"x+2, includeReason).",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"x+blockblock // NR_BIG",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"x+2] to 0x0",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"x+blockblock // NR_BIGINT).",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"x+2, 2+0000;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"x+), ch1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"x+2, 2 Eclipse",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"x+2] or 0x0",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"x+2, prop+4;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"x+2, prop+4;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"x+2, NO_MUST_NOT_BE_EMPTY;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"x+blockblock // NR_BIGDECIMAL().numberOfDeath;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"x+2, include allow",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"x+2, words;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"x+2, 2 all;",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\") // power",
        "fixed_line": ".number(\"(x+)?,\") // power"
    },
    "Bears-108": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"dd)(dd): NR_FLOAT;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"dd)(dd):}d+.?d*\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"dd)(dd): \\\\d+.?d*\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"dd)(dd):NANOd+.?d*\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"dd)(dd):NANNOTATIONS;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"dd)(dd):#d+.?d*\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"dd)(dd): has)(d+.?d*\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"dd)(dd):Conditionald+.?d*\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"dd)(dd): setsd+.?d*\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"dd)(dd): controld+.?d*\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"dd)(dd): Dd+.?d*\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"dd)(dd):ootd+.?d*\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"dd)(dd): 0).numberBigDecimal*d+.?d*\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"dd)(dd):update)(d+.?d*\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"dd)(dd): getCoded+.?d*\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"dd)(dd): 1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"dd)(dd):/d+.?d*\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"dd)(dd): composerd+.?d*\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"dd)(dd): TOmmss;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"dd)(dd): padd+.?d*\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"dd)(dd):scriptscriptd+.?d*\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"dd)(dd):ByteBufferd+.?d*\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"dd)(dd): pos+.?d*\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"dd)(dd):serverd+.?d*\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"dd)(dd): NR_BIGINT;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"dd)(dd): secretKey;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"dd)(dd): '+d+.?d*\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"dd)(dd):!\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"dd)(dd): 65d+.?d*\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"dd)(dd): 0).numberBigDecimal*\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"dd)(dd): storemmss;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"dd)(dd): BufferedWriterd+.?d*\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"dd)(dd): NR_BIGINT, course+.?d*\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"dd)(dd): gettersd+.?d*\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"dd)(dd):Importd+.?d*\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"dd)(dd): NR_BIGINT, date);",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"dd)(dd): considerd+.?d*\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"dd)(dd): 1d+.?d*\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"dd)(dd):States;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"dd)(dd):\\d+.?d*\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"dd)(dd): NR_BIGOd+.?d*\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"dd)(dd):NANOd+.?d*",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"dd)(dd): controld*\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"dd)(dd): NR_BIGINT)..?d*\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"dd)(dd):NANNOTATIONSATIONS;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"dd)(dd): NReaders;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"dd)(dd):CamelContextd*\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"dd)(dd): tfd*\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"dd)(dd): 3;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"dd)(dd): migrated*\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"dd)(dd):NTHd*\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"dd)(dd): NR_.?d*\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"dd)(dd): Timed*\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"dd)(dd):Microsoftd*\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"dd)(dd): NR_BIGINT, coursed*\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"dd)(dd): whitelistd*\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"dd)(dd): 65d*\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"dd)(dd):/converter;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"dd)(dd): NR_UNKNOWN;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"dd)(dd): NR_DOUBLE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"dd)(dd):update)(d*\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"dd)(dd):scriptscriptscriptd+.?d*\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"dd)(dd): \").numberOfPlayersd+.?d*\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"dd)(dd): '-'d*\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"dd)(dd):elapsedd*\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"dd)(dd): trimmmss;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"dd)(dd):NANOSECONDS;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"dd)(dd): NR_NUMBER;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"dd)(dd):-numberBigDecimal;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"dd)(dd): considerd*\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"dd)(dd): totalCountd*\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"dd)(dd): NR_BIGINT, numberOfd*\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"dd)(dd):NANOd+.?d+.?d*\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"dd)(dd): \" + 6;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"dd)(dd): trackerd*\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"dd)(dd): reviewd*\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"dd)(dd): \").numberOfPlayersd+.?d*",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"dd)(dd): 0).numberBigDecimal+.?d*\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"dd)(dd): \\\\d+.?d*",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"dd)(dd): HTMLd*\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"dd)(dd):dir;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"dd)(dd): setsd*\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"dd)(dd): NAME;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"dd)(dd): \" + 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"dd)(dd): padd*\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"dd)(dd): gettersd*\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"dd)(dd): NR_BIGINT)..?d+.?d*\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"dd)(dd): NR_BIGINT, dateFrom);",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"dd)(dd): 120d*\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"dd)(dd): 1d NR_FLOAT;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"dd)(dd): \\\\d*\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"dd)(dd):getIdgetIdgetIdgetIdgetIdgetId",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"dd)(dd): 1d NReaders;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"dd)(dd): NR_BIGINT, date5);",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"dd)(dd): Dd*\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"dd)(dd): 1d NRINHERIT;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"dd)(dd): 1d2;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"dd)(dd):\u0e40d*\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"dd)(dd): NAME",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"dd)(dd): NR_BIGINT, numberOf numberOfd*\");",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(dd)(dd)(dd):\") // time (hhmmss) .number(\"(-?d+.d+):\") // longitude .number(\"(-?d+.d+):\") // latitude .number(\"(d+.?d*):\") // speed .number(\"(?:NAN|(d+.?d*)):\") // accuracy .number(\"(?:NAN|(d+.?d*)):\") // course .number(\"(?:NAN|(d+.?d*))\") // altitude",
        "fixed_line": ".number(\"(dd)(dd)(dd)\") // time (hhmmss) .number(\":(-?d+.d+)\") // longitude .number(\":(-?d+.d+)\") // latitude .number(\":(d+.?d*)\") // speed .number(\":(?:NAN|(d+.?d*))\") // accuracy .number(\":(?:NAN|(d+.?d*))\") // course .number(\":(?:NAN|(d+.?d*))\").optional() // altitude"
    },
    "Bears-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "return type; } else if (_objectIdReader != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return type; } else if (_ioContext != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return type; } else if (_objectIdReader != JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return type; } else if (_objectIdReader != JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return type; }",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return type; } else if (_ioContext != JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return type; } else if (_ioContext != JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return type; } else if (_baseTypeName != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return type; } else if (_objectIdReader != JsonToken.VALUE_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return type; } else if (_objectIdReader != JsonToken.VALUE_STRING) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.VALUE_STRING) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return type; } else if (implClass == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return type; } else if (_objectIdReader != JsonToken.VALUE_OBJECT) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.VALUE_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return type;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return type; } else if (_objectIdReader != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return type; } else if (_objectIdReader != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return type; } else if (_objectIdReader != JsonToken.VALUE_EMBEDDED_OBJECT ) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return type; } else if (_propertyproperty == JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return type; } else if (implClass == JsonToken.FIELD_NAME) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return type; } else if (_ioContext == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return type; } else if (_ioContext != JsonToken.VALUE_STRING) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return type; } else if (_ioContext != JsonToken.VALUE_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.VALUE_OBJECT) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return type; } else if (_baseTypeName != JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.VALUE_EMBEDDED_OBJECT ) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return type; } else if ( class \"+baseTypeName()+\") != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return type; } else if (_objectIdReader != JsonToken.VALUE_NUMBER_NAME) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return type; } else if (_ioContext != JsonToken.FIELD_NAME) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return type; } else if (_currToken == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return type; } else if (_ioContext != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return type; } else if (_fromLongFromAny(ctxt) { return JsonToken.VALUE_NULL; }",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return type; } else if (_ioContext != JsonToken.FIELD_NAME && ctxt != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return type; } else if (_propertyproperty == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return type; } else if (_ioContext != JsonToken.VALUE_NULL) { return JsonToken.FIELD_NAME; }",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return type; } else if (_ioContext != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return type; } else if (_propertyproperty != JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return type; } else if (_objectIdFromAny(ctxt) { return JsonToken.VALUE_NULL; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return type; } else if (or instanceof JsonToken.FIELD_NAMED_UNKNOWN) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return type; } else if (_baseTypeName != JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return type; } else if (_ioContext != JsonToken.VALUE_NULL) { return JsonToken.VALUE_OBJECT; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return type; } else if (ctxt == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return type; } else if (implClass == JsonToken.VALUE_NULL) { return JsonToken.FIELD_NAME; }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return type; } else if (_objectCodecCodec == JsonToken.FIELD_NAME) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return type; } else if (implClass == JsonToken.VALUE_NULL) { return JsonToken.VALUE_OBJECT; }",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return type; } else if (_ioContext != JsonToken.VALUE_EMBEDDED_OBJECT ) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.FIELD_NAME) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return type; } else if (_objectIdReader != JsonToken.FIELD_NAME) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return type; } else if (ctxt == JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return type; } else if (_ioContext == JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return type; } else if ( class \"+baseTypeName()+\") == JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return type; } else if (implClass == JsonToken.VALUE_NULL) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return type; } else if (implClass == JsonToken.FIELD_NAME) { return JsonToken.VALUE_NULL; }",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return type; } else if (_propertyproperty == JsonToken.FIELD_NAME) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return classTypedFromAny(ctxt == JsonToken.VALUE_NULL) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return type; } else if (_ioContext != JsonToken.VALUE_OBJECT) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return type; } else if (ctxt == JsonToken.FIELD_NAME) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return type; } else if (_objectIdDeserializer == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return type; } else if (_typePropertyName != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return type; } else if (_objectIdWriter == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return type; } else if (_objectIdReader != JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.FIELD_NAME && ctxt != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return type; } else if (implClass == JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return type; } else if (_propertyproperty != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.VALUE_NUMBER_NAME) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return type; } else if (_objectIdReader != JsonToken.VALUE_NULL) { return JsonToken.VALUE_OBJECT; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return type; } else if (_ioContext != JsonToken.VALUE_NULL) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return type; } else if (_objectIdDeserializer == JsonToken.FIELD_NAME) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return type; } else if (ctxt == JsonToken.VALUE_NULL) { return JsonToken.FIELD_NAME; }",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return type; } else if (_propertyproperty != JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return type; } else if (_ioContext != JsonToken.FIELD_NAME) { return JsonToken.VALUE_NULL; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return type; } else if (_ioContext != JsonToken.VALUE_NULL) { return JsonToken.VALUE_TYPE_OBJECT; }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return type; } else if ( class \"+baseTypeName()+\") != JsonToken.VALUE_NULL) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return type; } else if (_objectIdReader != JsonToken.VALUE_NULL) { return JsonToken.FIELD_NAME; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return classTypedFromAny(ctxt == JsonToken.VALUE_NULL) { return JsonToken.FIELD_NAME; }",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return type; } else if (_objectIdReader != JsonToken.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return type; } else if (_currToken == JsonToken.FIELD_NAME) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return type; } else if (or instanceof JsonToken.FIELD_NAMED_OBJECT) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.VALUE_NULL) { return JsonToken.VALUE_OBJECT; }",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return type; } else if (_ioContext == JsonToken.FIELD_NAME) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return type; } else if (_objectIdInfo == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return type; } else if (orClass == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return type; } else if (_objectIdReader != JsonToken.VALUE_NULL) { return JsonToken.END_OBJECT; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return type; } else if (_ioContext != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return type; } else if (_fromLongFromAny(ctxt) { return JsonToken.FIELD_NAME; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.FIELD_NAMED_OBJECT) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return type; } else if (_objectIdFromAny(ctxt) { return JsonToken.VALUE_TYPE_OBJECT; }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return type; } else if (_objectIdWriter != JsonToken.VALUE_NULL) { return JsonToken.FIELD_NAME; }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return type; } else if (implClass == JsonToken.VALUE_NULL) { return JsonToken.VALUE_STRING; }",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return type; } else if (_objectIdReader != JsonToken.FIELD_NAME && ctxt != JsonToken.END_OBJECT) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return type; } else if (implClass == JsonToken.VALUE_NULL) { return JsonToken.END_ARRAY; }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return type; } else if (Concept == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return type; } else if (typeId != JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return type; } else if (_objectCodecCodec == JsonToken.FIELD_NAME) { return JsonToken.VALUE_NULL; }",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "} else if (p.getCurrentToken() == JsonToken.VALUE_STRING) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) { String str = p.getText().trim(); if (str.isEmpty()) { return null; } }"
    },
    "Bears-223": {
        "fixes": [
            {
                "k": 1,
                "patch": "import io.vavr.typ(destinationType;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "import io.vavr.typ).import(sourceType;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "import io.vavr.typ(destinationValue;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "import io.vavr.typ).import(destinationType;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "import io.vavr.modelmapper;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "import io.vavr.getItem import org.modelmapper;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "import io.vavr.getAttributeValue;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "import io.vavr.typ). import org.modelmapper;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "import io.vavr.typated;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "import io.vavr.typValue;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "import io.vavr.typ(destination;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "import io.vavr.Mapping;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "import io.vavr.typ). import org.model(destinationType;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "import io.vavr.typ).model(destinationType;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "import io.vavr.typ). import org.modelmapper.spi;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "import io.vavr.typFont; import org.modelmapper",
                "identical": false
            },
            {
                "k": 17,
                "patch": "import io.vavr.typ).import(targetType;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "import io.vavr. buf;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "import io.vavr.query;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "import io.vavr.evaluate(destinationValue;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "import io.vavr.cssValue;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "import io.vavr.modelmapperResponseValue;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "import io.vavr.typ). import org.modelmapper",
                "identical": false
            },
            {
                "k": 24,
                "patch": "import io.vavr.typED;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "import io.vavr.internalValue;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "import io.vavr. j import org.typ(destinationType;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "import io.vavr.getItem import org.modelmapper.length;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "import io.vavr.getItem import org.modelmapper.query;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "import io.vavr.typ(sourceType;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "import io.vavr.evaluate;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "import io.vavr.Value;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "import io.vavr.evaluate(destinationType;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "import io.vavr.typ).current import org.model(destinationType;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "import io.vavr.typFont(destinationType;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "import io.vavr.typEnabled;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "import io.vavr.doubleValue;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "import io.vavr.typ this import org.modelmapper;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "import io.vavr.modelmapper.typ(destinationValue;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "import io.vavr.startsWith(targetType;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "import io.vavr.typ). import(sourceType;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "import io.vavr.typ private(destinationType;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "import io.vavr.typ). import org.modelmapperResponseValue;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "import io.vavr.typ).import(rows;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "import io.vavr.getItem import org.modelmapper.typ).map(destinationType;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "import.vavr.typ(destinationType;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "import io.vavr. constructorValue;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "import io.vavr.typ). import org.modelmapper.query(destinationType;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "import io.vavr.typ).current import org.modelmapper;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "import.vavr.typ(destinationValue;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "import io.vavr.maxSendAmount;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "import io.vavr.startsWith(destinationValue;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "import io.vavr. characterValue;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "import io.vavr.typ[modelmapper.length;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "import io.vavr.kind;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "import io.vavr.typ).model(destinationValue;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "import io.vavr.AL;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "import io.vavr.typ). sValue;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "import io.vavr.typ[modelmapper.MappingEngine;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "import io.vavr.getItem import org.modelmapperResponseValue;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "import io.vavr.getItem import org.modelmapper, destinationType;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "import io.vavr.typFont(destinationValue;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "import io.vavr.ENCODING;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "import io.vavr.getClass;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "import io.vavr.typ this import org.modelmapper.length;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "import io.vavr.typ).current import org.modelmapper",
                "identical": false
            },
            {
                "k": 66,
                "patch": "import io.vavr.typ).body(sourceType;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "import io.vavr.typ).import(sourcesourceType;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "import io.vavr.typ). import org.modelmapper.arg;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "import io.vavr.modelmapper.typ(destinationType;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "import io.vavr.modelmapper.typ).map(destinationType;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "import io.vavr.typ). import org.modelmapper.Length;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "import io.vavr.typ).map(destinationType;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "import.vavr.typ).model(destinationType;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "import io.vavr.getItem import org.modelmapper.typ).map(sourceType;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "import io.vavr.typ(6;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "import io.vavr.typ(targetType;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "import io.vavr.leftmapper;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "import io.vavr.typ).prev(sourceType;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "import io.vavr.typBy(destinationType;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "import io.vavr.typ). import org.modelmapper.MappingEngineSettings;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "import io.vavr.typ). import org.modelmapper. langValue;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "import io.vavr.typ supported;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "import io.vavr. additionalValue;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "import io.vavr.typ). import org.modelmapper.MappingEngine value;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "import io.vavr.getItem import org.modelmapper.typ).map(targetType;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "import io.vavr.typ). import org.modelmapper.MCS;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "import io.vavr. MET import org.modelmapper;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "import io.vavr. - import org.modelmapper;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "import io.vavr.getItem import org.modelmapper. language;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "import io.vavr.notValue;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "import io.vavr.validationValue;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "import io.vavr.typFont;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "import io.vavr.typ(destination, sourceType;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "import io.vavr.typ). import org.modelmapper.spi, destinationType;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "import io.vavr.target import org.modelmapper.typ).map(destinationType;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "import io.vavr.getItem import org.modelmapper.LINE, destinationType;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "import io.vavr.after(destinationValue;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "import io.vavr.typ). import org.modelmapper.spi) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "import io.vavr.typ).model(sourceType;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "import io.vavr.getItem import org.modelmappermapper;",
                "identical": false
            }
        ],
        "buggy_line": "import io.vavr.Value; import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.spi.ConditionalConverter; import org.modelmapper.spi.MappingContext; import org.modelmapper.spi.PropertyInfo; /** * @author jstuecker * * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }",
        "fixed_line": "import io.vavr.Value; /** * @author jstuecker * <p> * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { if (context == null || context.getSource() == null) { return null; } final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = (l << 8) | a[i]; // sign bit",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign bit",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign bit",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the i.",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign for the i.",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for the i.",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+mask",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for now",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the l for the i.",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l for the i.",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l.",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l for the i.",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = (l << 8) | a[i]; // size",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a[i];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = (l << 8) | a[i]; // l for now",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l.",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = (l << 8) | a[i]; // sign will shift+mask",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for the i.",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, size",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = (l << 8) | a[i]; // sign removal, l for the i.",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = (l << 8) | a[i]; // sign removal, can's",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the l for now",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign will need to sign for the i.",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for now",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner loop",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the i.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = (l << 8) | a[i]; // sign bit set to the l for the i.",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l for the i.",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l l.",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight for now",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = (l << 8) | a[i]; // l for the i.",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do for now",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l for now",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, l for the i.",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a l for now",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the i.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, can do a and the l for the i.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign for now",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = (l << 8) | a[i]; // sign removal, can still size",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = (l << 8) | a[i]; // sign removal, l for now",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l of sign",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign for the l.",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign the l for the i.",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for now",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = (l << 8) | a[i]; // sign removal, size",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply the l for the i.",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l of the i.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = (l << 8) | a[i]; // sign will need to for the i.",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l-style.",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 4 for the i.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = (l << 8) | a[i]; // sign removal, result for now",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner l for the i.",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l l for the i.",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = (l << 8) | a[i]; // sign removal, length for l-style.length - 1];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l of sign",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = (l << 8) | a[i]; // sign removal, result[i];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, need to sign for the i.",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the i.",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign will need to sign bit",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = (l << 8) | a[i]; // sign will include possible comma",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the l for the i.",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = (l << 8) | a[i]; // sign will include the i.",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l of size",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign for the l l for the i.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l for now",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l bits",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l of size",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l-style.",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+ the l for the i.",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply the l for now",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a 'i];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = (l << 8) | a[i]; // sign removal, but also need to sign for the i.",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 1 for the i.",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, l for the i.",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in the i.",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l l for now",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign will need to sign the l for the i.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the i.",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the l for now",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the lED for the i.",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign for the l l.",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3 for the i.",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, can's",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a l for the i.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, so multiply the l for the i.",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = (l << 8) | a[i]; // 13 bits",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, can do a[i];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do for the i.",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a timestamp for now",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply by + i.",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = (l << 8) | a[i]; // sign bit set in the l for the i.",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = (l << 8) | a[i]; // sign will need to shift+mask",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so for l-style.length - 1];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l for now",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = (l << 8) | a[i]; // sign will need to check the i.",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l begin for now",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encryptedDataKeys = request.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encryptedDataKeys = ret.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encryptedDataKeys = this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encryptedDataKeys = this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encryptedDataKeys = request.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.event.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedDataKeys = newSize.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encryptedDataKeys = storage.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encryptedDataKeys = request.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encryptedDataKeys = request.implEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encryptedDataKeys = Pryption.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.request;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encryptedDataKeys = request.getEncryptedCursor;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / node.event.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - this.context.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / node.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.eventDataKeys;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys /shadowContext.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encryptedDataKeys = request.context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.eventDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know the this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encryptedDataKeys = request.nextEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know the this.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't this.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys /shadowContext.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys > this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - this.context.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encryptedDataKeys = response.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / config.event.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encryptedDataKeys = request.eventDataKeys;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / / this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encryptedDataKeys = aggregate.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encryptedDataKeys = request.getEncryptedTos2.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.contextDataKeys;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know if this.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys > 0;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know if this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encryptedDataKeys = code.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encryptedDataKeys = add.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / config.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know if (this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encryptedBox = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.event.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encryptedDataKeys = request.getEncryptedTos.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encryptedDataKeys = request.getEncryptedFilename;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTosRequest;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don'tApiClient with this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // this.encryptedDataKeys, this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't this.request.getEncryptedDataKeys",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't this.this.context.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / frame.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encryptedDataKeys = context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / node.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.request;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encryptedDataKeys = language.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't this.this.context.request.getEncryptedDataKeys",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't this.this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know if this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know the this.context.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, this.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys0.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't this.context.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // 1 is encryptionContext.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encryptedDataKeys = xml.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encryptedDataKeys = encryptedDataKeys.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / builder.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.eventDataKeys;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.context.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / cell.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encryptedDataKeys = request.getAttributeEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know the this.context.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // 1 is encryptionContext.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // since we don't know the this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.requestDataKeys;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - this.context.getEncryptedDataKeys;",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-187": {
        "fixes": [
            {
                "k": 1,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final ObjectMapper mapper = new ObjectMapper(pAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final ObjectMapper mapper = new ObjectMapper((3AMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final ObjectMapper mapper = new ObjectMapper(MAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final ObjectMapper mapper = new ObjectMapper(offAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final ObjectMapper mapper = new ObjectMapper(ApiAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final ObjectMapper mapper = new ObjectMapper(XMLAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final ObjectMapper mapper = new ObjectMapper(dataSource.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final ObjectMapper mapper = new ObjectMapper(Const.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(XAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final ObjectMapper mapper = new ObjectMapper(pAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final ObjectMapper mapper = new ObjectMapper(CodeAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final ObjectMapper mapper = new ObjectMapper(Storage.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final ObjectMapper mapper = new ObjectMapper(trimmedGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final ObjectMapper mapper = new ObjectMapper(ENGINE_YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(new YAMLFactory.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final ObjectMapper mapper = new ObjectMapper(Views.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final ObjectMapper mapper = new ObjectMapper( BorderGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final ObjectMapper mapper = new ObjectMapper(ToYAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final ObjectMapper mapper = new ObjectMapper((MAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final ObjectMapper mapper = new ObjectMapper(CODECODEGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final ObjectMapper mapper = new ObjectMapper(Control.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final ObjectMapper mapper = new ObjectMapper(dataSource.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final ObjectMapper mapper = new ObjectMapper(pAMLGenerator.Feature.MINIMIZE_QUOTES, true);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final ObjectMapper mapper = new ObjectMapper(serialization.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final ObjectMapper mapper = new ObjectMapper(offGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final ObjectMapper mapper = new ObjectMapper((YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final ObjectMapper mapper = new ObjectMapper( factory.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final ObjectMapper mapper = new ObjectMapper(pAMLGenerator.Feature.MINIMIZE_QUOTES, true;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(Const.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final ObjectMapper mapper = new ObjectMapper(StringFeature.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final ObjectMapper mapper = new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure((3AMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final ObjectMapper mapper = new ObjectMapper(OAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, true;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(StringFeature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final ObjectMapper mapper = new ObjectMapper(SwaggerGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(cls.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final ObjectMapper mapper = new ObjectMapper(FilterFactory.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final ObjectMapper mapper = new ObjectMapper(recoveryAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final ObjectMapper mapper = new ObjectMapper(YAMLGenerator.Feature.MINIMIZE_QUOTES, true);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final ObjectMapper mapper = new ObjectMapper(DefinitionFeature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final ObjectMapper mapper = new ObjectMapper(job.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(job.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final ObjectMapper mapper = new ObjectMapper(DAYAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final ObjectMapper mapper = new ObjectMapper((3AMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final ObjectMapper mapper = new ObjectMapper(link.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final ObjectMapper mapper = new ObjectMapper(ok.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final ObjectMapper mapper = new ObjectMapper(VALUEAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final ObjectMapper mapper = new ObjectMapper(dataSource.Feature.MINIMIZE_QUOTES, true;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final ObjectMapper mapper = new ObjectMapper((swaggerGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final ObjectMapper mapper = new ObjectMapper(mAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final ObjectMapper mapper = new ObjectMapper(resAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final ObjectMapper mapper = new ObjectMapper(StorageStorage.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final ObjectMapper mapper = new ObjectMapper( couldApiAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory.Feature.MINIMIZE_QUOTES, true;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final ObjectMapper mapper = new ObjectMapper(ControlGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final ObjectMapper mapper = new ObjectMapper(ApiAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final ObjectMapper mapper = new ObjectMapper(wAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final ObjectMapper mapper = new ObjectMapper(8,AMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final ObjectMapper mapper = new ObjectMapper(MAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final ObjectMapper mapper = new ObjectMapper(retAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final ObjectMapper mapper = new ObjectMapper(offoffAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final ObjectMapper mapper = new ObjectMapper(DeclarationFactory.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final ObjectMapper mapper = new ObjectMapper(MySqlAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final ObjectMapper mapper = new ObjectMapper(CONTEXTAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final ObjectMapper mapper = new ObjectMapper(persistentFactory.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final ObjectMapper mapper = new ObjectMapper(ISOFactory.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final ObjectMapper mapper = new ObjectMapper(pAMLGenerator.Feature.MINIMIZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final ObjectMapper mapper = new ObjectMapper(IAMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final ObjectMapper mapper = new ObjectMapper((dataSource.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final ObjectMapper mapper = new ObjectMapper(indices.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final ObjectMapper mapper = new ObjectMapper(okGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final ObjectMapper mapper = new ObjectMapper( factory.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final ObjectMapper mapper = new ObjectMapper(Values.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final ObjectMapper mapper = new ObjectMapper(cls.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final ObjectMapper mapper = new ObjectMapper(Views.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final ObjectMapper mapper = new ObjectMapper(time,AMLGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final ObjectMapper mapper = new ObjectMapper(HintGenerator.Feature.MINIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final ObjectMapper mapper = new ObjectMapper(offAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final ObjectMapper mapper = new ObjectMapper(XMLAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final ObjectMapper mapper = new ObjectMapperFactory().configure(XAMLGenerator.Feature.MINIMIZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final ObjectMapper mapper = new ObjectMapper(serialization.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final ObjectMapper mapper = new ObjectMapper(StringFeature.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final ObjectMapper mapper = new ObjectMapper((3AMLGenerator.Feature.MINIMIZE_QUOTES, false);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final ObjectMapper mapper = new ObjectMapper(CodeAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final ObjectMapper mapper = new ObjectMapper((3AMLGenerator.Feature.MINIMIZE_QUOTES, true;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final ObjectMapper mapper = new ObjectMapper((3AMLGenerator.Feature.MINIMIZE_QUOTES, true);",
                "identical": false
            }
        ],
        "buggy_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
        "fixed_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory() .configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true) .configure(YAMLGenerator.Feature.ALWAYS_QUOTE_NUMBERS_AS_STRINGS, true));"
    }
}