{
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 16;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 16;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625.0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625.0;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625};",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625};",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625[i - 1];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625[i - 1];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 6 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625};",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525 * 0.0625;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525 * 0.0625;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 16;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 16;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525 * 0.0625;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525 * 0.0625;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] =25 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 101,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525%625;",
                "identical": false
            },
            {
                "k": 102,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525%625;",
                "identical": false
            },
            {
                "k": 103,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 6 * 0.0625;",
                "identical": false
            },
            {
                "k": 104,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 6 * 0.0625;",
                "identical": false
            },
            {
                "k": 105,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 % 16;",
                "identical": false
            },
            {
                "k": 106,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 % 16;",
                "identical": false
            },
            {
                "k": 107,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index / 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 108,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index / 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 109,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 110,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525[index++] - 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 111,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625];",
                "identical": false
            },
            {
                "k": 112,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625];",
                "identical": false
            },
            {
                "k": 113,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 114,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 115,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 116,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 117,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 118,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625%625;",
                "identical": false
            },
            {
                "k": 119,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 120,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 121,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 6 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 122,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 6 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 123,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 124,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 125,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 126,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 127,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 128,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625[index++] - 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 129,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 130,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625%625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 131,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 132,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 133,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] = 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 134,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] = 12 * 0.0625;",
                "identical": false
            },
            {
                "k": 135,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 136,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 137,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 138,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 139,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index / 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 140,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index / 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 141,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 142,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 143,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 144,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525[index++] - 12 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 145,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525",
                "identical": false
            },
            {
                "k": 146,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525",
                "identical": false
            },
            {
                "k": 147,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 1];",
                "identical": false
            },
            {
                "k": 148,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 1];",
                "identical": false
            },
            {
                "k": 149,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 1625 * 0.0625;",
                "identical": false
            },
            {
                "k": 150,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 1625 * 0.0625;",
                "identical": false
            },
            {
                "k": 151,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index / 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 152,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625[index / 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 153,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 154,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 155,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 2 * 0.0625;",
                "identical": false
            },
            {
                "k": 156,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 2 * 0.0625;",
                "identical": false
            },
            {
                "k": 157,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625.0;",
                "identical": false
            },
            {
                "k": 158,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625.0;",
                "identical": false
            },
            {
                "k": 159,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625};",
                "identical": false
            },
            {
                "k": 160,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625};",
                "identical": false
            },
            {
                "k": 161,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 162,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 163,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 1625 * 0.0625;",
                "identical": false
            },
            {
                "k": 164,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 1625 * 0.0625;",
                "identical": false
            },
            {
                "k": 165,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 2 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 166,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 2 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 167,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 168,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 2 * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 169,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625",
                "identical": false
            },
            {
                "k": 170,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625",
                "identical": false
            },
            {
                "k": 171,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.06252;",
                "identical": false
            },
            {
                "k": 172,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.06252;",
                "identical": false
            },
            {
                "k": 173,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 174,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625.0;",
                "identical": false
            },
            {
                "k": 175,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 176,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 0.0625 * 0.0625%625 * 0.0625;",
                "identical": false
            },
            {
                "k": 177,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625[i - 1];",
                "identical": false
            },
            {
                "k": 178,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625[i - 1];",
                "identical": false
            },
            {
                "k": 179,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525%625;",
                "identical": false
            },
            {
                "k": 180,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.062525%625;",
                "identical": false
            },
            {
                "k": 181,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 182,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625 * 0.0625%625;",
                "identical": false
            },
            {
                "k": 183,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625];",
                "identical": false
            },
            {
                "k": 184,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625];",
                "identical": false
            },
            {
                "k": 185,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] =25 * 0.0625 / 0.0625;",
                "identical": false
            },
            {
                "k": 186,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] =25 * 0.0625 / 0.0625;",
                "identical": false
            },
            {
                "k": 187,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625",
                "identical": false
            },
            {
                "k": 188,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625",
                "identical": false
            },
            {
                "k": 189,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 190,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] - 12 * 0.0625 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 191,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.062525;",
                "identical": false
            },
            {
                "k": 192,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 12 * 0.062525;",
                "identical": false
            },
            {
                "k": 193,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 3 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 194,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.0625[index++] - 3 * 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 195,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] =25 * 0.0625 / 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 196,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625[index++] =25 * 0.0625 / 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 197,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 198,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525[index++] =25 * 0.0625;",
                "identical": false
            },
            {
                "k": 199,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525[index++] - 0.0625 * 0.0625;",
                "identical": false
            },
            {
                "k": 200,
                "patch": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(index++], 16) * 0.062525[index++] - 0.0625 * 0.0625;",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes.length;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes.length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length != attributes);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.length;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.length;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length, attributes);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.length;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.length;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 8;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 8;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 2);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / 2);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes.length) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes.length) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_KEY);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_KEY);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > batchSize) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > batchSize) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attributes.length;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attributes.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length0) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attributes;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthOR_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthOR_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributeName;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributeName;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthCode;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthCode;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > _attributes.length;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > _attributes.length;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % this.length;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % this.length;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.attributes;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.attributes;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.attributes);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % a.length;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % a.length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attribute.length;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attribute.length;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length5, attributes);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributeName), attributes.length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributeName), attributes.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 1) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 1) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attributes);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attributes);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length+1);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attribute.length;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / attribute.length;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributes.length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributes.length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 2) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > 2) {",
                "identical": false
            },
            {
                "k": 101,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >attributeName.length;",
                "identical": false
            },
            {
                "k": 102,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >attributeName.length;",
                "identical": false
            },
            {
                "k": 103,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 0;",
                "identical": false
            },
            {
                "k": 104,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 0;",
                "identical": false
            },
            {
                "k": 105,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >=attributes.length;",
                "identical": false
            },
            {
                "k": 106,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >=attributes.length;",
                "identical": false
            },
            {
                "k": 107,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerNode);",
                "identical": false
            },
            {
                "k": 108,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerNode);",
                "identical": false
            },
            {
                "k": 109,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >=attributes.length) {",
                "identical": false
            },
            {
                "k": 110,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >=attributes.length) {",
                "identical": false
            },
            {
                "k": 111,
                "patch": "attributesMap = new ConcurrentHashMap[0];",
                "identical": false
            },
            {
                "k": 112,
                "patch": "attributesMap = new ConcurrentHashMap[0];",
                "identical": false
            },
            {
                "k": 113,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1);",
                "identical": false
            },
            {
                "k": 114,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length + 1);",
                "identical": false
            },
            {
                "k": 115,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length JPanel;",
                "identical": false
            },
            {
                "k": 116,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length JPanel;",
                "identical": false
            },
            {
                "k": 117,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1;",
                "identical": false
            },
            {
                "k": 118,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1;",
                "identical": false
            },
            {
                "k": 119,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_KEY);",
                "identical": false
            },
            {
                "k": 120,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_KEY);",
                "identical": false
            },
            {
                "k": 121,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length1)) {",
                "identical": false
            },
            {
                "k": 122,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length1)) {",
                "identical": false
            },
            {
                "k": 123,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_KEY);",
                "identical": false
            },
            {
                "k": 124,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_KEY);",
                "identical": false
            },
            {
                "k": 125,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % this.attributes;",
                "identical": false
            },
            {
                "k": 126,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % this.attributes;",
                "identical": false
            },
            {
                "k": 127,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 128,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length_ID_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 129,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthSize);",
                "identical": false
            },
            {
                "k": 130,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthSize);",
                "identical": false
            },
            {
                "k": 131,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.attributes);",
                "identical": false
            },
            {
                "k": 132,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > o.attributes);",
                "identical": false
            },
            {
                "k": 133,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthresult.length);",
                "identical": false
            },
            {
                "k": 134,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthresult.length);",
                "identical": false
            },
            {
                "k": 135,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthcodec);",
                "identical": false
            },
            {
                "k": 136,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthcodec);",
                "identical": false
            },
            {
                "k": 137,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 138,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 139,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length '9') {",
                "identical": false
            },
            {
                "k": 140,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length '9') {",
                "identical": false
            },
            {
                "k": 141,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes;",
                "identical": false
            },
            {
                "k": 142,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes;",
                "identical": false
            },
            {
                "k": 143,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributes;",
                "identical": false
            },
            {
                "k": 144,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.attributes;",
                "identical": false
            },
            {
                "k": 145,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length];",
                "identical": false
            },
            {
                "k": 146,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length];",
                "identical": false
            },
            {
                "k": 147,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_ID_KEY);",
                "identical": false
            },
            {
                "k": 148,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthXED_ID_KEY);",
                "identical": false
            },
            {
                "k": 149,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributeName.length);",
                "identical": false
            },
            {
                "k": 150,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributeName.length);",
                "identical": false
            },
            {
                "k": 151,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 0) {",
                "identical": false
            },
            {
                "k": 152,
                "patch": "attributesMap = new ConcurrentHashMap<>(attribute.length > 0) {",
                "identical": false
            },
            {
                "k": 153,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthED_KEY);",
                "identical": false
            },
            {
                "k": 154,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthED_KEY);",
                "identical": false
            },
            {
                "k": 155,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % this.attributes.length;",
                "identical": false
            },
            {
                "k": 156,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % this.attributes.length;",
                "identical": false
            },
            {
                "k": 157,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes attributes.length;",
                "identical": false
            },
            {
                "k": 158,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >= attributes attributes.length;",
                "identical": false
            },
            {
                "k": 159,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthSize;",
                "identical": false
            },
            {
                "k": 160,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthSize;",
                "identical": false
            },
            {
                "k": 161,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerBatch;",
                "identical": false
            },
            {
                "k": 162,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerBatch;",
                "identical": false
            },
            {
                "k": 163,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length]) {",
                "identical": false
            },
            {
                "k": 164,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length]) {",
                "identical": false
            },
            {
                "k": 165,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthED_ID_KEY);",
                "identical": false
            },
            {
                "k": 166,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthED_ID_KEY);",
                "identical": false
            },
            {
                "k": 167,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.result.length;",
                "identical": false
            },
            {
                "k": 168,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length / this.result.length;",
                "identical": false
            },
            {
                "k": 169,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthOR_ID_KEY);",
                "identical": false
            },
            {
                "k": 170,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthOR_ID_KEY);",
                "identical": false
            },
            {
                "k": 171,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attribute);",
                "identical": false
            },
            {
                "k": 172,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length > attribute);",
                "identical": false
            },
            {
                "k": 173,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length), attributes);",
                "identical": false
            },
            {
                "k": 174,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length), attributes);",
                "identical": false
            },
            {
                "k": 175,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length data.length;",
                "identical": false
            },
            {
                "k": 176,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length data.length;",
                "identical": false
            },
            {
                "k": 177,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthmappings;",
                "identical": false
            },
            {
                "k": 178,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthmappings;",
                "identical": false
            },
            {
                "k": 179,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % 1000;",
                "identical": false
            },
            {
                "k": 180,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % 1000;",
                "identical": false
            },
            {
                "k": 181,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerNode;",
                "identical": false
            },
            {
                "k": 182,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthPerNode;",
                "identical": false
            },
            {
                "k": 183,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >attribute.length;",
                "identical": false
            },
            {
                "k": 184,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length >attribute.length;",
                "identical": false
            },
            {
                "k": 185,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthseparatorChar);",
                "identical": false
            },
            {
                "k": 186,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthseparatorChar);",
                "identical": false
            },
            {
                "k": 187,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1;",
                "identical": false
            },
            {
                "k": 188,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length-1;",
                "identical": false
            },
            {
                "k": 189,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthfilteredProps;",
                "identical": false
            },
            {
                "k": 190,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthfilteredProps;",
                "identical": false
            },
            {
                "k": 191,
                "patch": "attributesMap = this.attributes.length != attributes.length;",
                "identical": false
            },
            {
                "k": 192,
                "patch": "attributesMap = this.attributes.length != attributes.length;",
                "identical": false
            },
            {
                "k": 193,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % a;",
                "identical": false
            },
            {
                "k": 194,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length % a;",
                "identical": false
            },
            {
                "k": 195,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length[] {",
                "identical": false
            },
            {
                "k": 196,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.length[] {",
                "identical": false
            },
            {
                "k": 197,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthUserType);",
                "identical": false
            },
            {
                "k": 198,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthUserType);",
                "identical": false
            },
            {
                "k": 199,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthincludedResult);",
                "identical": false
            },
            {
                "k": 200,
                "patch": "attributesMap = new ConcurrentHashMap<>(attributes.lengthincludedResult);",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-200": {
        "fixes": [
            {
                "k": 1,
                "patch": "return convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return convert(throwable, throwable;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return convert(throwable, throwable;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return convert(v, throwable);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return convert(v, throwable);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of throwable",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of throwable",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 101,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 102,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 103,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 104,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 105,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 106,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 107,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 108,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 109,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of throwable",
                "identical": false
            },
            {
                "k": 110,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of throwable",
                "identical": false
            },
            {
                "k": 111,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 112,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 113,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 114,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 115,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 116,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 117,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 118,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 119,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 120,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 121,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 122,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 123,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 124,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 125,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 126,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 127,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the n",
                "identical": false
            },
            {
                "k": 128,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the n",
                "identical": false
            },
            {
                "k": 129,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 130,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 131,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 132,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 133,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of throwable",
                "identical": false
            },
            {
                "k": 134,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of throwable",
                "identical": false
            },
            {
                "k": 135,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 136,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 137,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of throwable",
                "identical": false
            },
            {
                "k": 138,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of throwable",
                "identical": false
            },
            {
                "k": 139,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 140,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 141,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 142,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 143,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 144,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 145,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 146,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 147,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 148,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 149,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end",
                "identical": false
            },
            {
                "k": 150,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end",
                "identical": false
            },
            {
                "k": 151,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 152,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 153,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 154,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 155,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the lastRELATION_QUERY, throwable",
                "identical": false
            },
            {
                "k": 156,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the lastRELATION_QUERY, throwable",
                "identical": false
            },
            {
                "k": 157,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 158,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 159,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 160,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 161,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 162,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 163,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, throwable",
                "identical": false
            },
            {
                "k": 164,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, throwable",
                "identical": false
            },
            {
                "k": 165,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 166,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 167,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 168,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 169,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 170,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 171,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of throwable",
                "identical": false
            },
            {
                "k": 172,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of throwable",
                "identical": false
            },
            {
                "k": 173,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of record or input",
                "identical": false
            },
            {
                "k": 174,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of record or input",
                "identical": false
            },
            {
                "k": 175,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 176,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 177,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 178,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 179,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 180,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 181,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of throwable",
                "identical": false
            },
            {
                "k": 182,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of throwable",
                "identical": false
            },
            {
                "k": 183,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the lastRELATION_QUERY, throwable",
                "identical": false
            },
            {
                "k": 184,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the lastRELATION_QUERY, throwable",
                "identical": false
            },
            {
                "k": 185,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 186,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 187,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 188,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 189,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 190,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end",
                "identical": false
            },
            {
                "k": 191,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of throwable",
                "identical": false
            },
            {
                "k": 192,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of throwable",
                "identical": false
            },
            {
                "k": 193,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 194,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 195,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 196,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of record or input",
                "identical": false
            },
            {
                "k": 197,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 198,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of throwable",
                "identical": false
            },
            {
                "k": 199,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            },
            {
                "k": 200,
                "patch": "return convert(throwable, throwable); // allows not be assigned. Also declare the end of the end of the n is the root of the end of the constructor need to check the end of the end of the end of the n is the root of the end of the end of the end of the end of the end of the end-of-null, but also need to check the end of the end of the end of the end of the end of the end of the n",
                "identical": false
            }
        ],
        "buggy_line": "return convert(null, throwable);",
        "fixed_line": "return convert(\"\", throwable);"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\n\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\n\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData != null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData != null;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData started",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData started",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData'));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData'));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData51List\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData51List\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataELEMENT\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataELEMENT\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData \");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData \");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(5;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(5;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add(\"ro.pippo.SessionData\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(\"ro.pippo.SessionData\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData}\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData}\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSessionFactory\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSessionFactory\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData links\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData links\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(\"ro.pippo.sessionData\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add(\"ro.pippo.sessionData\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1(this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1(this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(\"ro.pippo.this.session.SessionData\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add(\"ro.pippo.this.session.SessionData\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData1\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFactor;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFactor;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDatanpmList\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDatanpmList\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataES);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataES);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.\", this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataKey;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataMetaData\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataMetaData\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSetter\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSetter\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData4;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData4;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\\")\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\\\")\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData10\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData10\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataByteBuffer\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataByteBuffer\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData 12",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData 12",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData #;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData #;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData config\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData config\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataWidgets\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataWidgets\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData+\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData+\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataThread WhiteList\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataThread WhiteList\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataATTRIBUTE",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataATTRIBUTE",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\"));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\"));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataExtension\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataExtension\");",
                "identical": false
            },
            {
                "k": 101,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups",
                "identical": false
            },
            {
                "k": 102,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataGroups",
                "identical": false
            },
            {
                "k": 103,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData augment\");",
                "identical": false
            },
            {
                "k": 104,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData augment\");",
                "identical": false
            },
            {
                "k": 105,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData",
                "identical": false
            },
            {
                "k": 106,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData",
                "identical": false
            },
            {
                "k": 107,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData defList\");",
                "identical": false
            },
            {
                "k": 108,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData defList\");",
                "identical": false
            },
            {
                "k": 109,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData document",
                "identical": false
            },
            {
                "k": 110,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData document",
                "identical": false
            },
            {
                "k": 111,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.session.SessionData\");",
                "identical": false
            },
            {
                "k": 112,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.session.SessionData\");",
                "identical": false
            },
            {
                "k": 113,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData repair repair",
                "identical": false
            },
            {
                "k": 114,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData repair repair",
                "identical": false
            },
            {
                "k": 115,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 116,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.ENGINE_NAME;",
                "identical": false
            },
            {
                "k": 117,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr.class;",
                "identical": false
            },
            {
                "k": 118,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr.class;",
                "identical": false
            },
            {
                "k": 119,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData could\");",
                "identical": false
            },
            {
                "k": 120,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData could\");",
                "identical": false
            },
            {
                "k": 121,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataManaged",
                "identical": false
            },
            {
                "k": 122,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataManaged",
                "identical": false
            },
            {
                "k": 123,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData + 1, this.query.SessionData\");",
                "identical": false
            },
            {
                "k": 124,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData + 1, this.query.SessionData\");",
                "identical": false
            },
            {
                "k": 125,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData themes;",
                "identical": false
            },
            {
                "k": 126,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData themes;",
                "identical": false
            },
            {
                "k": 127,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr\");",
                "identical": false
            },
            {
                "k": 128,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData curr\");",
                "identical": false
            },
            {
                "k": 129,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData repair",
                "identical": false
            },
            {
                "k": 130,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData repair",
                "identical": false
            },
            {
                "k": 131,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData2;",
                "identical": false
            },
            {
                "k": 132,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData2;",
                "identical": false
            },
            {
                "k": 133,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 134,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\")) {",
                "identical": false
            },
            {
                "k": 135,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData field",
                "identical": false
            },
            {
                "k": 136,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData field",
                "identical": false
            },
            {
                "k": 137,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData link.class;",
                "identical": false
            },
            {
                "k": 138,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData link.class;",
                "identical": false
            },
            {
                "k": 139,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData+\"",
                "identical": false
            },
            {
                "k": 140,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData+\"",
                "identical": false
            },
            {
                "k": 141,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataColumn\");",
                "identical": false
            },
            {
                "k": 142,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataColumn\");",
                "identical": false
            },
            {
                "k": 143,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment\");",
                "identical": false
            },
            {
                "k": 144,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataFragment\");",
                "identical": false
            },
            {
                "k": 145,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData variableName",
                "identical": false
            },
            {
                "k": 146,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData variableName",
                "identical": false
            },
            {
                "k": 147,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class\");",
                "identical": false
            },
            {
                "k": 148,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData.class\");",
                "identical": false
            },
            {
                "k": 149,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 150,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 151,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataCode;",
                "identical": false
            },
            {
                "k": 152,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataCode;",
                "identical": false
            },
            {
                "k": 153,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataNANOSECONDS;",
                "identical": false
            },
            {
                "k": 154,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataNANOSECONDS;",
                "identical": false
            },
            {
                "k": 155,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData ;",
                "identical": false
            },
            {
                "k": 156,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData ;",
                "identical": false
            },
            {
                "k": 157,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData config",
                "identical": false
            },
            {
                "k": 158,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData config",
                "identical": false
            },
            {
                "k": 159,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataPARENT",
                "identical": false
            },
            {
                "k": 160,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataPARENT",
                "identical": false
            },
            {
                "k": 161,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataif\");",
                "identical": false
            },
            {
                "k": 162,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataif\");",
                "identical": false
            },
            {
                "k": 163,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.session.SessionData;",
                "identical": false
            },
            {
                "k": 164,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData()+\", this.session.SessionData;",
                "identical": false
            },
            {
                "k": 165,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData seconds",
                "identical": false
            },
            {
                "k": 166,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData seconds",
                "identical": false
            },
            {
                "k": 167,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1);",
                "identical": false
            },
            {
                "k": 168,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1);",
                "identical": false
            },
            {
                "k": 169,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataChar;",
                "identical": false
            },
            {
                "k": 170,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataChar;",
                "identical": false
            },
            {
                "k": 171,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSessionFactory",
                "identical": false
            },
            {
                "k": 172,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataSessionFactory",
                "identical": false
            },
            {
                "k": 173,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData0);",
                "identical": false
            },
            {
                "k": 174,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData0);",
                "identical": false
            },
            {
                "k": 175,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData ty;",
                "identical": false
            },
            {
                "k": 176,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData ty;",
                "identical": false
            },
            {
                "k": 177,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.class;",
                "identical": false
            },
            {
                "k": 178,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData\", this.class;",
                "identical": false
            },
            {
                "k": 179,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData link.class",
                "identical": false
            },
            {
                "k": 180,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData link.class",
                "identical": false
            },
            {
                "k": 181,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData + 1, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 182,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData + 1, this.ENGINE_SCOPE;",
                "identical": false
            },
            {
                "k": 183,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataborder",
                "identical": false
            },
            {
                "k": 184,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataborder",
                "identical": false
            },
            {
                "k": 185,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData link",
                "identical": false
            },
            {
                "k": 186,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData link",
                "identical": false
            },
            {
                "k": 187,
                "patch": "WhiteList.add(\"ro.pippo.class.SessionData\");",
                "identical": false
            },
            {
                "k": 188,
                "patch": "WhiteList.add(\"ro.pippo.class.SessionData\");",
                "identical": false
            },
            {
                "k": 189,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData \";",
                "identical": false
            },
            {
                "k": 190,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData \";",
                "identical": false
            },
            {
                "k": 191,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.query.SessionData\");",
                "identical": false
            },
            {
                "k": 192,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData(1, this.query.SessionData\");",
                "identical": false
            },
            {
                "k": 193,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData executorService",
                "identical": false
            },
            {
                "k": 194,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData executorService",
                "identical": false
            },
            {
                "k": 195,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData classes\");",
                "identical": false
            },
            {
                "k": 196,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData classes\");",
                "identical": false
            },
            {
                "k": 197,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataShow",
                "identical": false
            },
            {
                "k": 198,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionDataShow",
                "identical": false
            },
            {
                "k": 199,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData added;",
                "identical": false
            },
            {
                "k": 200,
                "patch": "WhiteList.add(\"ro.pippo.session.SessionData added;",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"x+)?,\") + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"x+)?,\") + 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"x+)?,\") adc 2",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"x+)?,\") adc 2",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"x+)?,\") adc 2 bytes;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"x+)?,\") adc 2 bytes;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"x+)?,\") adc 2});",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"x+)?,\") adc 2});",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"x+)?,\") adc 2=",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"x+)?,\") adc 2=",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"x+)?,\") adc 2Present);",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"x+)?,\") adc 2Present);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"x+)?,\") adc 2 + 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"x+)?,\") adc 2 + 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"x+)?,\") adc 2 R;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"x+)?,\") adc 2 R;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"x+)?,\")*(*(",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"x+)?,\")*(*(",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"x+)?,\") adc 214;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"x+)?,\") adc 214;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"x+)?,\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"x+)?,\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"x+)?,\") adc 2 | 3);",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"x+)?,\") adc 2 | 3);",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"x+)?,\") adc 2Authenticated",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"x+)?,\") adc 2Authenticated",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"x+)?,\") adc 2 links);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"x+)?,\") adc 2 links);",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"x+)?,\") adc 2[1]);",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"x+)?,\") adc 2[1]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"x+)?,\") adc 2 ...",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"x+)?,\") adc 2 ...",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"x+)?,\") adc 212);",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"x+)?,\") adc 212);",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"x+)?,\") adc 2ENCODING;",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"x+)?,\") adc 2ENCODING;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"x+)?,\") adc 2mk);",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"x+)?,\") adc 2mk);",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"x+)?,\") adc 2 translate",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"x+)?,\") adc 2 translate",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"x+)?,\") adc 2Character;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"x+)?,\") adc 2Character;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"x+)?,\") adc 2(\"\\",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"x+)?,\") adc 2(\"\\",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"x+)?,\") adc 2 >>> 4;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"x+)?,\") adc 2 >>> 4;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"x+)?,\") adc 2 1}",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"x+)?,\") adc 2 1}",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"x+)?,\") adc 2 brackets);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"x+)?,\") adc 2 brackets);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"x+)?,\") adc 2 Eclipse",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"x+)?,\") adc 2 Eclipse",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"x+)?,\") adc 2 1000003;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"x+)?,\") adc 2 1000003;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"x+)?,\") adc 2 dateFormat",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"x+)?,\") adc 2 latitude;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"x+)?,\") adc 2 latitude;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"x+)?,\") adc 2Present;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"x+)?,\") adc 2Present;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"x+)?,\")*(*( // adc 2",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"x+)?,\")*(*( // adc 2",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"x+)?,\") adc 2=);",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"x+)?,\") adc 2=);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"x+)?,\") adc 2 guaranteed;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"x+)?,\") adc 2 guaranteed;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"x+)?,\") adc 2Profile);",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"x+)?,\") adc 2Profile);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"x+)?,\") adc 2 shift);",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"x+)?,\") adc 2 shift);",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"x+)?,\") adc 2 END_VALUE;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"x+)?,\") adc 2 END_VALUE;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"x+)?,\") adc 2 anti;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"x+)?,\") adc 2 anti;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"x+)?,\") ? 2 : 1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"x+)?,\") ? 2 : 1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"x+)?,\") adc 2 conversion);",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"x+)?,\") adc 2 conversion);",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"x+)?,\") adc 2 - 1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"x+)?,\") adc 2 - 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"x+)?,\") adc 2URI;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"x+)?,\") adc 2URI;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"x+)?,\") adc 2 anti);",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"x+)?,\") adc 2 anti);",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"x+)?,\") adc 2 & 0x07;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"x+)?,\") adc 2 & 0x07;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"x+)?,\") adc 2QUERY",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"x+)?,\") adc 2QUERY",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"x+)?,\")*(*(;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"x+)?,\")*(*(;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"x+)?,\") adc 227;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"x+)?,\") adc 227;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"x+)?,\") adc 2Present = 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"x+)?,\") adc 2Present = 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"x+)?,\") adc 2 Messages;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"x+)?,\") adc 2 Messages;",
                "identical": false
            },
            {
                "k": 101,
                "patch": ".number(\"x+)?,\") adc 227",
                "identical": false
            },
            {
                "k": 102,
                "patch": ".number(\"x+)?,\") adc 227",
                "identical": false
            },
            {
                "k": 103,
                "patch": ".number(\"x+)?,\") adc 290);",
                "identical": false
            },
            {
                "k": 104,
                "patch": ".number(\"x+)?,\") adc 290);",
                "identical": false
            },
            {
                "k": 105,
                "patch": ".number(\"x+)?,\") adc 2 whitelist);",
                "identical": false
            },
            {
                "k": 106,
                "patch": ".number(\"x+)?,\") adc 2 whitelist);",
                "identical": false
            },
            {
                "k": 107,
                "patch": ".number(\"x+)?,\") adc 2Present = adc 212;",
                "identical": false
            },
            {
                "k": 108,
                "patch": ".number(\"x+)?,\") adc 2Present = adc 212;",
                "identical": false
            },
            {
                "k": 109,
                "patch": ".number(\"x+)?,\") adc 2 v;",
                "identical": false
            },
            {
                "k": 110,
                "patch": ".number(\"x+)?,\") adc 2 v;",
                "identical": false
            },
            {
                "k": 111,
                "patch": ".number(\"x+)?,\") % 10;",
                "identical": false
            },
            {
                "k": 112,
                "patch": ".number(\"x+)?,\") % 10;",
                "identical": false
            },
            {
                "k": 113,
                "patch": ".number(\"x+)?,\") * adc 2",
                "identical": false
            },
            {
                "k": 114,
                "patch": ".number(\"x+)?,\") * adc 2",
                "identical": false
            },
            {
                "k": 115,
                "patch": ".number(\"x+)?,\") adc 2CURRENT);",
                "identical": false
            },
            {
                "k": 116,
                "patch": ".number(\"x+)?,\") adc 2CURRENT);",
                "identical": false
            },
            {
                "k": 117,
                "patch": ".number(\"x+)?,\") adc 2 ann;",
                "identical": false
            },
            {
                "k": 118,
                "patch": ".number(\"x+)?,\") adc 2 ann;",
                "identical": false
            },
            {
                "k": 119,
                "patch": ".number(\"x+)?,\") adc 2 translate;",
                "identical": false
            },
            {
                "k": 120,
                "patch": ".number(\"x+)?,\") adc 2 translate;",
                "identical": false
            },
            {
                "k": 121,
                "patch": ".number(\"x+)?,\") adc 2 | 1;",
                "identical": false
            },
            {
                "k": 122,
                "patch": ".number(\"x+)?,\") adc 2 | 1;",
                "identical": false
            },
            {
                "k": 123,
                "patch": ".number(\"x+)?,\") adc 2 10000;",
                "identical": false
            },
            {
                "k": 124,
                "patch": ".number(\"x+)?,\") adc 2 10000;",
                "identical": false
            },
            {
                "k": 125,
                "patch": ".number(\"x+)?,\") adc 2ENCODING",
                "identical": false
            },
            {
                "k": 126,
                "patch": ".number(\"x+)?,\") adc 2ENCODING",
                "identical": false
            },
            {
                "k": 127,
                "patch": ".number(\"x+)?,\")[0] & 0x07;",
                "identical": false
            },
            {
                "k": 128,
                "patch": ".number(\"x+)?,\")[0] & 0x07;",
                "identical": false
            },
            {
                "k": 129,
                "patch": ".number(\"x+)?,\") adc 2 scAadc 2",
                "identical": false
            },
            {
                "k": 130,
                "patch": ".number(\"x+)?,\") adc 2 scAadc 2",
                "identical": false
            },
            {
                "k": 131,
                "patch": ".number(\"x+)?,\") adc 2bucket);",
                "identical": false
            },
            {
                "k": 132,
                "patch": ".number(\"x+)?,\") adc 2bucket);",
                "identical": false
            },
            {
                "k": 133,
                "patch": ".number(\"x+)?,\") adc 2ACTION;",
                "identical": false
            },
            {
                "k": 134,
                "patch": ".number(\"x+)?,\") adc 2ACTION;",
                "identical": false
            },
            {
                "k": 135,
                "patch": ".number(\"x+)?,\")[1].Readers);",
                "identical": false
            },
            {
                "k": 136,
                "patch": ".number(\"x+)?,\")[1].Readers);",
                "identical": false
            },
            {
                "k": 137,
                "patch": ".number(\"x+)?,\") adc 212,",
                "identical": false
            },
            {
                "k": 138,
                "patch": ".number(\"x+)?,\") adc 212,",
                "identical": false
            },
            {
                "k": 139,
                "patch": ".number(\"x+)?,\") adc 2 & 0x adc 2",
                "identical": false
            },
            {
                "k": 140,
                "patch": ".number(\"x+)?,\") adc 2 & 0x adc 2",
                "identical": false
            },
            {
                "k": 141,
                "patch": ".number(\"x+)?,\") adc 2 Exceptions);",
                "identical": false
            },
            {
                "k": 142,
                "patch": ".number(\"x+)?,\") adc 2 Exceptions);",
                "identical": false
            },
            {
                "k": 143,
                "patch": ".number(\"x+)?,\") adc 214);",
                "identical": false
            },
            {
                "k": 144,
                "patch": ".number(\"x+)?,\") adc 214);",
                "identical": false
            },
            {
                "k": 145,
                "patch": ".number(\"x+)?,\") adc 2 Exceptions",
                "identical": false
            },
            {
                "k": 146,
                "patch": ".number(\"x+)?,\") adc 2 Exceptions",
                "identical": false
            },
            {
                "k": 147,
                "patch": ".number(\"x+)?,\") adc 2QUERY, 3);",
                "identical": false
            },
            {
                "k": 148,
                "patch": ".number(\"x+)?,\") adc 2QUERY, 3);",
                "identical": false
            },
            {
                "k": 149,
                "patch": ".number(\"x+)?,\") adc 2 v & 0x07;",
                "identical": false
            },
            {
                "k": 150,
                "patch": ".number(\"x+)?,\") adc 2 v & 0x07;",
                "identical": false
            },
            {
                "k": 151,
                "patch": ".number(\"x+)?,\") * adc 212);",
                "identical": false
            },
            {
                "k": 152,
                "patch": ".number(\"x+)?,\") * adc 212);",
                "identical": false
            },
            {
                "k": 153,
                "patch": ".number(\"x+)?,\") adc 2URI);",
                "identical": false
            },
            {
                "k": 154,
                "patch": ".number(\"x+)?,\") adc 2URI);",
                "identical": false
            },
            {
                "k": 155,
                "patch": ".number(\"x+)?,\") adc 2/4/);",
                "identical": false
            },
            {
                "k": 156,
                "patch": ".number(\"x+)?,\") adc 2/4/);",
                "identical": false
            },
            {
                "k": 157,
                "patch": ".number(\"x+)?,\") adc 2accessor);",
                "identical": false
            },
            {
                "k": 158,
                "patch": ".number(\"x+)?,\") adc 2accessor);",
                "identical": false
            },
            {
                "k": 159,
                "patch": ".number(\"x+)?,\") out 2 + 1;",
                "identical": false
            },
            {
                "k": 160,
                "patch": ".number(\"x+)?,\") out 2 + 1;",
                "identical": false
            },
            {
                "k": 161,
                "patch": ".number(\"x+)?,\") 0x adc 2",
                "identical": false
            },
            {
                "k": 162,
                "patch": ".number(\"x+)?,\") 0x adc 2",
                "identical": false
            },
            {
                "k": 163,
                "patch": ".number(\"x+)?,\") adc 2FileSystem",
                "identical": false
            },
            {
                "k": 164,
                "patch": ".number(\"x+)?,\") adc 2FileSystem",
                "identical": false
            },
            {
                "k": 165,
                "patch": ".number(\"x+)?,\") adc 2 & 0x07);",
                "identical": false
            },
            {
                "k": 166,
                "patch": ".number(\"x+)?,\") adc 2 & 0x07);",
                "identical": false
            },
            {
                "k": 167,
                "patch": ".number(\"x+)?,\")*(*( // adc 2 bytes;",
                "identical": false
            },
            {
                "k": 168,
                "patch": ".number(\"x+)?,\")*(*( // adc 2 bytes;",
                "identical": false
            },
            {
                "k": 169,
                "patch": ".number(\"x+)?,\")*(*( // adc 2 bytes",
                "identical": false
            },
            {
                "k": 170,
                "patch": ".number(\"x+)?,\")*(*( // adc 2 bytes",
                "identical": false
            },
            {
                "k": 171,
                "patch": ".number(\"x+)?,\") adc 2up",
                "identical": false
            },
            {
                "k": 172,
                "patch": ".number(\"x+)?,\") adc 2up",
                "identical": false
            },
            {
                "k": 173,
                "patch": ".number(\"x+)?,\") adc 2 just;",
                "identical": false
            },
            {
                "k": 174,
                "patch": ".number(\"x+)?,\") adc 2 just;",
                "identical": false
            },
            {
                "k": 175,
                "patch": ".number(\"x+)?,\") adc 2 >>> 1;",
                "identical": false
            },
            {
                "k": 176,
                "patch": ".number(\"x+)?,\") adc 2 >>> 1;",
                "identical": false
            },
            {
                "k": 177,
                "patch": ".number(\"x+)?,\") adc 2 bytes",
                "identical": false
            },
            {
                "k": 178,
                "patch": ".number(\"x+)?,\") adc 2 bytes",
                "identical": false
            },
            {
                "k": 179,
                "patch": ".number(\"x+)?,\") adc 2 brackets;",
                "identical": false
            },
            {
                "k": 180,
                "patch": ".number(\"x+)?,\") adc 2 brackets;",
                "identical": false
            },
            {
                "k": 181,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2 bytes;",
                "identical": false
            },
            {
                "k": 182,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2 bytes;",
                "identical": false
            },
            {
                "k": 183,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2 + 1;",
                "identical": false
            },
            {
                "k": 184,
                "patch": ".number(\"x+)?,\") adc 2 int adc 2 + 1;",
                "identical": false
            },
            {
                "k": 185,
                "patch": ".number(\"x+)?,\") adc 2*(",
                "identical": false
            },
            {
                "k": 186,
                "patch": ".number(\"x+)?,\") adc 2*(",
                "identical": false
            },
            {
                "k": 187,
                "patch": ".number(\"x+)?,\") adc 2.\");",
                "identical": false
            },
            {
                "k": 188,
                "patch": ".number(\"x+)?,\") adc 2.\");",
                "identical": false
            },
            {
                "k": 189,
                "patch": ".number(\"x+)?,\") adc 2nr;",
                "identical": false
            },
            {
                "k": 190,
                "patch": ".number(\"x+)?,\") adc 2nr;",
                "identical": false
            },
            {
                "k": 191,
                "patch": ".number(\"x+)?,\")[1].Readers;",
                "identical": false
            },
            {
                "k": 192,
                "patch": ".number(\"x+)?,\")[1].Readers;",
                "identical": false
            },
            {
                "k": 193,
                "patch": ".number(\"x+)?,\") adc 2LOG;",
                "identical": false
            },
            {
                "k": 194,
                "patch": ".number(\"x+)?,\") adc 2LOG;",
                "identical": false
            },
            {
                "k": 195,
                "patch": ".number(\"x+)?,\") adc 2('<);",
                "identical": false
            },
            {
                "k": 196,
                "patch": ".number(\"x+)?,\") adc 2('<);",
                "identical": false
            },
            {
                "k": 197,
                "patch": ".number(\"x+)?,\") out 212;",
                "identical": false
            },
            {
                "k": 198,
                "patch": ".number(\"x+)?,\") out 212;",
                "identical": false
            },
            {
                "k": 199,
                "patch": ".number(\"x+)?,\") adc 2 PATTERN;",
                "identical": false
            },
            {
                "k": 200,
                "patch": ".number(\"x+)?,\") adc 2 PATTERN;",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\")                    // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional()         // adc 2"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // message length",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // message length",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(2 + 2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(2 + 2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8; // length",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8; // length",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(2 + 2 + 7 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(2 + 2 + 7 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // length",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2; // length",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(2 + 1 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(2 + 1 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(2 + 2 + result + 2 + content.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(2 + 2 + result + 2 + content.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(2 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(2 + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2; // message length",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(2 + 2 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(2 + 2 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 5 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 5 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 101,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 102,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 103,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 104,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 105,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 106,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 107,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 108,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 109,
                "patch": "result.writeShort(2 + 1 + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 110,
                "patch": "result.writeShort(2 + 1 + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 111,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + 2); // message length",
                "identical": false
            },
            {
                "k": 112,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + 2); // message length",
                "identical": false
            },
            {
                "k": 113,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2;",
                "identical": false
            },
            {
                "k": 114,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2;",
                "identical": false
            },
            {
                "k": 115,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 116,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 117,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 118,
                "patch": "result.writeShort(2 + 1 + 4 + result.readableBytes() + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 119,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2;",
                "identical": false
            },
            {
                "k": 120,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2;",
                "identical": false
            },
            {
                "k": 121,
                "patch": "result.writeShort(2 + 1 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 122,
                "patch": "result.writeShort(2 + 1 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 123,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 124,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 125,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 126,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 127,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 128,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + content.readableBytes() + 2); // message length",
                "identical": false
            },
            {
                "k": 129,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 16;",
                "identical": false
            },
            {
                "k": 130,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 16;",
                "identical": false
            },
            {
                "k": 131,
                "patch": "result.writeShort(2 + 2 + 7 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 132,
                "patch": "result.writeShort(2 + 2 + 7 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 133,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + result.readableBytes;",
                "identical": false
            },
            {
                "k": 134,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + contentStart + result.readableBytes;",
                "identical": false
            },
            {
                "k": 135,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 136,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 137,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8; // length",
                "identical": false
            },
            {
                "k": 138,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8; // length",
                "identical": false
            },
            {
                "k": 139,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // one for length",
                "identical": false
            },
            {
                "k": 140,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + 2); // one for length",
                "identical": false
            },
            {
                "k": 141,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 142,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 143,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 144,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 8 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 145,
                "patch": "result.writeShort(2 + 2 + result + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 146,
                "patch": "result.writeShort(2 + 2 + result + 2 + content.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 147,
                "patch": "result.writeShort(2 + 1 + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 148,
                "patch": "result.writeShort(2 + 1 + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 149,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 150,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + length + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 151,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 152,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 153,
                "patch": "result.writeShort(2 + 1 + 7 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 154,
                "patch": "result.writeShort(2 + 1 + 7 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 155,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 156,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 2 + contentStart + 2); // message length",
                "identical": false
            },
            {
                "k": 157,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2; // length",
                "identical": false
            },
            {
                "k": 158,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 2 + 2; // length",
                "identical": false
            },
            {
                "k": 159,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 2); // message length",
                "identical": false
            },
            {
                "k": 160,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 2); // message length",
                "identical": false
            },
            {
                "k": 161,
                "patch": "result.writeShort(2 + 2 + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 162,
                "patch": "result.writeShort(2 + 2 + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 163,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 164,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 165,
                "patch": "result.writeShort(2 + 2 + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 166,
                "patch": "result.writeShort(2 + 2 + 4 + 8 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 167,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 168,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes()); // length",
                "identical": false
            },
            {
                "k": 169,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + input.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 170,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + input.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 171,
                "patch": "result.writeShort(2 + 2 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 172,
                "patch": "result.writeShort(2 + 2 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 173,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 174,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 175,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 176,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + 8 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 177,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 178,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 4 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 179,
                "patch": "result.writeShort(2 + 2 + result + 2 + content.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 180,
                "patch": "result.writeShort(2 + 2 + result + 2 + content.readableBytes() + 4 + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 181,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 182,
                "patch": "result.writeShort(2 + 2 + result.readableBytes() + 2 + result.readableBytes() + 2); // length",
                "identical": false
            },
            {
                "k": 183,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 184,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + 2 + result.readableBytes; // length",
                "identical": false
            },
            {
                "k": 185,
                "patch": "result.writeShort(2 + 2 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 186,
                "patch": "result.writeShort(2 + 2 + 2 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 187,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 16;",
                "identical": false
            },
            {
                "k": 188,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 16;",
                "identical": false
            },
            {
                "k": 189,
                "patch": "result.writeShort(2 + 1 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 190,
                "patch": "result.writeShort(2 + 1 + 8 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 191,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 192,
                "patch": "result.writeShort(2 + 1 + result.readableBytes() + 4 + 8 + 2 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 193,
                "patch": "result.writeShort(2 + 2 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 194,
                "patch": "result.writeShort(2 + 2 + 1 + result.readableBytes() + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 195,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 196,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + 1 + result.readableBytes() + 2 + 2); // message length",
                "identical": false
            },
            {
                "k": 197,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 198,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 4 + 2 + 2); // length",
                "identical": false
            },
            {
                "k": 199,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes;",
                "identical": false
            },
            {
                "k": 200,
                "patch": "result.writeShort(2 + 2 + 7 + 2 + result.readableBytes() + 3 + 1 + result.readableBytes;",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray, ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray, ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray.contains(field.getName());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray.contains(field.getName());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray0' || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray0' || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.getType().isPrimitive() && field.getType().equals(field.getName());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.getType().isPrimitive() && field.getType().equals(field.getName());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(field.getName;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.getName;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == o.getName;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray.\" + ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray.\" + ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray ioNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray ioNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.getType().isPrimitive && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() object object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() object object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayed || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.getName;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.getName;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.getType().isPrimitiveValue && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.getType().isPrimitiveValue && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray false || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray false || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.getType().isPrimitiveValue && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.getType().isPrimitiveValue && field.getType().isArray() && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == boolean.class;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == boolean.class;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.getType().isPrimitiveing || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.getType().isPrimitiveing || field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.getName;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.getName;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && message.contains(field.getName());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && message.contains(field.getName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == usernameNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == usernameNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayIds || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayIds || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return field.getType().isPrimitiveType && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return field.getType().isPrimitiveType && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return field.getType().isPrimitive() && field.getType(). original.contains(field.getName());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return field.getType().isPrimitive() && field.getType(). original.contains(field.getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray = field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray = field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 101,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 102,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 103,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 104,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 105,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 106,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 107,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 108,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() != ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 109,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field);",
                "identical": false
            },
            {
                "k": 110,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field);",
                "identical": false
            },
            {
                "k": 111,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 112,
                "patch": "return field.getType().isPrimitive() || field.getType().isArray() && field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 113,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == other.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 114,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == other.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 115,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayKey || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 116,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayKey || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 117,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && context.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 118,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && context.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 119,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 120,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() object.contains(field.getName());",
                "identical": false
            },
            {
                "k": 121,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray(), ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 122,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray(), ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 123,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass;",
                "identical": false
            },
            {
                "k": 124,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass;",
                "identical": false
            },
            {
                "k": 125,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 126,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 127,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray matcher.contains(field.getName());",
                "identical": false
            },
            {
                "k": 128,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray matcher.contains(field.getName());",
                "identical": false
            },
            {
                "k": 129,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == context.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 130,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == context.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 131,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayError || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 132,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayError || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 133,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() {field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 134,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() {field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 135,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayListed || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 136,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayListed || ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 137,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayListed || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 138,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayListed || field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 139,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray000 && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 140,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray000 && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 141,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == type.contains(field.getName());",
                "identical": false
            },
            {
                "k": 142,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == type.contains(field.getName());",
                "identical": false
            },
            {
                "k": 143,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayAfter && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 144,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayAfter && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 145,
                "patch": "return field.getType().isPrimitive_TYPE && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 146,
                "patch": "return field.getType().isPrimitive_TYPE && field.getType().isArray() && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 147,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && millisNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 148,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && millisNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 149,
                "patch": "return field.getType().isPrimitive() && field.getType(). dualNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 150,
                "patch": "return field.getType().isPrimitive() && field.getType(). dualNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 151,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldClass;",
                "identical": false
            },
            {
                "k": 152,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldClass;",
                "identical": false
            },
            {
                "k": 153,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayColumnNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 154,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayColumnNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 155,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 156,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && o.field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 157,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() !=field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 158,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() !=field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 159,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayAndfield.contains(field.getName());",
                "identical": false
            },
            {
                "k": 160,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayAndfield.contains(field.getName());",
                "identical": false
            },
            {
                "k": 161,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray + ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 162,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray + ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 163,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName);",
                "identical": false
            },
            {
                "k": 164,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field.getName);",
                "identical": false
            },
            {
                "k": 165,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == context.getName;",
                "identical": false
            },
            {
                "k": 166,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() == context.getName;",
                "identical": false
            },
            {
                "k": 167,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 168,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 169,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 170,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() ==field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 171,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayflags && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 172,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayflags && field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 173,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 174,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != field.contains(field.getName());",
                "identical": false
            },
            {
                "k": 175,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray) {",
                "identical": false
            },
            {
                "k": 176,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray) {",
                "identical": false
            },
            {
                "k": 177,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 178,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray != context.contains(field.getName());",
                "identical": false
            },
            {
                "k": 179,
                "patch": "return field.getType().isPrimitive() && field.getType(). && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 180,
                "patch": "return field.getType().isPrimitive() && field.getType(). && ignoredNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 181,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass.getName());",
                "identical": false
            },
            {
                "k": 182,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && ignoredNames.contains(fieldClass.getName());",
                "identical": false
            },
            {
                "k": 183,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 184,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(fieldValue;",
                "identical": false
            },
            {
                "k": 185,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayArray.contains(field.getName());",
                "identical": false
            },
            {
                "k": 186,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayArray.contains(field.getName());",
                "identical": false
            },
            {
                "k": 187,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 188,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayin || field.contains(field.getName;",
                "identical": false
            },
            {
                "k": 189,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayNode.contains(field.getName());",
                "identical": false
            },
            {
                "k": 190,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayNode.contains(field.getName());",
                "identical": false
            },
            {
                "k": 191,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayListfield.contains(field.getName());",
                "identical": false
            },
            {
                "k": 192,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayListfield.contains(field.getName());",
                "identical": false
            },
            {
                "k": 193,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayArray;",
                "identical": false
            },
            {
                "k": 194,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayArray;",
                "identical": false
            },
            {
                "k": 195,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayConverter.contains(field.getName());",
                "identical": false
            },
            {
                "k": 196,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayConverter.contains(field.getName());",
                "identical": false
            },
            {
                "k": 197,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field;",
                "identical": false
            },
            {
                "k": 198,
                "patch": "return field.getType().isPrimitive() && field.getType().isArray() && field.contains(field;",
                "identical": false
            },
            {
                "k": 199,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayOfT.contains(field.getName());",
                "identical": false
            },
            {
                "k": 200,
                "patch": "return field.getType().isPrimitive() && field.getType().isArrayOfT.contains(field.getName());",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // DATA",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NOSONAR",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NOSONAR",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state);",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd vertex",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd vertex",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + icc;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + icc;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateidcc;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateidcc;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + icc;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + icc;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or strategy",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or strategy",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner;",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // bcc;",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // bcc;",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15d{1,2};",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15d{1,2};",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + imei;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + imei;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // sanity check",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // sanity check",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // Namedid",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // Namedid",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // activeid",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // activeid",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; icc, stateid",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; icc, stateid",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 3;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 3;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // description;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // description;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 5;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 5;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 0xcc;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 0xcc;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //path;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //path;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") > 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") > 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //}\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // even vertex",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // even vertex",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //2}, {",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //2}, {",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 15;",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 15;",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateidcc);",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateidcc);",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or 0x00;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd or 0x00;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // ordering",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // ordering",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iter;",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // iter;",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + iccid;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + iccid;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // tags",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // tags",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // randomid",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // randomid",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, state;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15;\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15;\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd file;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd file;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // piid",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // piid",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //FAIL",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //FAIL",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\"))) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\"))) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\")))",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //\")))",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; // NOSONAR",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; // NOSONAR",
                "identical": false
            },
            {
                "k": 101,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + indexcc;",
                "identical": false
            },
            {
                "k": 102,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + indexcc;",
                "identical": false
            },
            {
                "k": 103,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15d{1,2}; // NOSONAR",
                "identical": false
            },
            {
                "k": 104,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15d{1,2}; // NOSONAR",
                "identical": false
            },
            {
                "k": 105,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; icc, state);",
                "identical": false
            },
            {
                "k": 106,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc; icc, state);",
                "identical": false
            },
            {
                "k": 107,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd\");",
                "identical": false
            },
            {
                "k": 108,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd\");",
                "identical": false
            },
            {
                "k": 109,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // currentccid",
                "identical": false
            },
            {
                "k": 110,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // currentccid",
                "identical": false
            },
            {
                "k": 111,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //xcc;",
                "identical": false
            },
            {
                "k": 112,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //xcc;",
                "identical": false
            },
            {
                "k": 113,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateid);",
                "identical": false
            },
            {
                "k": 114,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateid);",
                "identical": false
            },
            {
                "k": 115,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //up",
                "identical": false
            },
            {
                "k": 116,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //up",
                "identical": false
            },
            {
                "k": 117,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\");",
                "identical": false
            },
            {
                "k": 118,
                "patch": ".expression(\"(?:[0-9F]{20})?,\")\");",
                "identical": false
            },
            {
                "k": 119,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + iccid;",
                "identical": false
            },
            {
                "k": 120,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") + iccid;",
                "identical": false
            },
            {
                "k": 121,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6;\");",
                "identical": false
            },
            {
                "k": 122,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6;\");",
                "identical": false
            },
            {
                "k": 123,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd \\ \\2}, {",
                "identical": false
            },
            {
                "k": 124,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd \\ \\2}, {",
                "identical": false
            },
            {
                "k": 125,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // START;",
                "identical": false
            },
            {
                "k": 126,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // START;",
                "identical": false
            },
            {
                "k": 127,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 6;",
                "identical": false
            },
            {
                "k": 128,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 6;",
                "identical": false
            },
            {
                "k": 129,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // LINE;",
                "identical": false
            },
            {
                "k": 130,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // LINE;",
                "identical": false
            },
            {
                "k": 131,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NOSON2}, {",
                "identical": false
            },
            {
                "k": 132,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NOSON2}, {",
                "identical": false
            },
            {
                "k": 133,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //21",
                "identical": false
            },
            {
                "k": 134,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //21",
                "identical": false
            },
            {
                "k": 135,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NRcc, state);",
                "identical": false
            },
            {
                "k": 136,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NRcc, state);",
                "identical": false
            },
            {
                "k": 137,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6; icc, state);",
                "identical": false
            },
            {
                "k": 138,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6; icc, state);",
                "identical": false
            },
            {
                "k": 139,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // translateS;",
                "identical": false
            },
            {
                "k": 140,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // translateS;",
                "identical": false
            },
            {
                "k": 141,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400, icc;",
                "identical": false
            },
            {
                "k": 142,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 400, icc;",
                "identical": false
            },
            {
                "k": 143,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // selection",
                "identical": false
            },
            {
                "k": 144,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // selection",
                "identical": false
            },
            {
                "k": 145,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NRcc;",
                "identical": false
            },
            {
                "k": 146,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NRcc;",
                "identical": false
            },
            {
                "k": 147,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // superClass",
                "identical": false
            },
            {
                "k": 148,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // superClass",
                "identical": false
            },
            {
                "k": 149,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // state;",
                "identical": false
            },
            {
                "k": 150,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // state;",
                "identical": false
            },
            {
                "k": 151,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 6) {",
                "identical": false
            },
            {
                "k": 152,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + 6) {",
                "identical": false
            },
            {
                "k": 153,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // maximumid",
                "identical": false
            },
            {
                "k": 154,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // maximumid",
                "identical": false
            },
            {
                "k": 155,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateid",
                "identical": false
            },
            {
                "k": 156,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc, stateid",
                "identical": false
            },
            {
                "k": 157,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner't 0;",
                "identical": false
            },
            {
                "k": 158,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner't 0;",
                "identical": false
            },
            {
                "k": 159,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // sanity check;",
                "identical": false
            },
            {
                "k": 160,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // sanity check;",
                "identical": false
            },
            {
                "k": 161,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NRcc, iccidcc;",
                "identical": false
            },
            {
                "k": 162,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NRcc, iccidcc;",
                "identical": false
            },
            {
                "k": 163,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //+)",
                "identical": false
            },
            {
                "k": 164,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //+)",
                "identical": false
            },
            {
                "k": 165,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;//already internalid",
                "identical": false
            },
            {
                "k": 166,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // icc;//already internalid",
                "identical": false
            },
            {
                "k": 167,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15;",
                "identical": false
            },
            {
                "k": 168,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15;",
                "identical": false
            },
            {
                "k": 169,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15d NOSONAR",
                "identical": false
            },
            {
                "k": 170,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 15d NOSONAR",
                "identical": false
            },
            {
                "k": 171,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd specific",
                "identical": false
            },
            {
                "k": 172,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd specific",
                "identical": false
            },
            {
                "k": 173,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // protocol version;",
                "identical": false
            },
            {
                "k": 174,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // protocol version;",
                "identical": false
            },
            {
                "k": 175,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6; icc, stateid",
                "identical": false
            },
            {
                "k": 176,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 6; icc, stateid",
                "identical": false
            },
            {
                "k": 177,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner;\");",
                "identical": false
            },
            {
                "k": 178,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //owner;\");",
                "identical": false
            },
            {
                "k": 179,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 500;",
                "identical": false
            },
            {
                "k": 180,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // 500;",
                "identical": false
            },
            {
                "k": 181,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd \\ \\n\");",
                "identical": false
            },
            {
                "k": 182,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd \\ \\n\");",
                "identical": false
            },
            {
                "k": 183,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + iccid);",
                "identical": false
            },
            {
                "k": 184,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //(\"#id \" + iccid);",
                "identical": false
            },
            {
                "k": 185,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // translate",
                "identical": false
            },
            {
                "k": 186,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // translate",
                "identical": false
            },
            {
                "k": 187,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid \" + icc;",
                "identical": false
            },
            {
                "k": 188,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // vertid \" + icc;",
                "identical": false
            },
            {
                "k": 189,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd;",
                "identical": false
            },
            {
                "k": 190,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd;",
                "identical": false
            },
            {
                "k": 191,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd desc, iccidcc;",
                "identical": false
            },
            {
                "k": 192,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // odd desc, iccidcc;",
                "identical": false
            },
            {
                "k": 193,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // pattern;",
                "identical": false
            },
            {
                "k": 194,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // pattern;",
                "identical": false
            },
            {
                "k": 195,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NReaders;",
                "identical": false
            },
            {
                "k": 196,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // NReaders;",
                "identical": false
            },
            {
                "k": 197,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // maximumid \" + icc;",
                "identical": false
            },
            {
                "k": 198,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") // maximumid \" + icc;",
                "identical": false
            },
            {
                "k": 199,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //ounterPackage",
                "identical": false
            },
            {
                "k": 200,
                "patch": ".expression(\"(?:[0-9F]{20})?,\") //ounterPackage",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\")      // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\")     // iccid"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encryptedDataKeys = request.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encryptedDataKeys = request.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encryptedDataKeys = request.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encryptedDataKeys = request.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encryptedDataKeys = request.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encryptedDataKeys = request.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encryptedDataKeys = this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encryptedDataKeys = this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 2;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encryptedDataKeys = this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encryptedDataKeys = this.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys || request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys || request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encryptedDataKeys = request.eventDataKeys;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encryptedDataKeys = request.eventDataKeys;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encryptedDataKeys = request.context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encryptedDataKeys = request.context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encryptedDataKeys = ret.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedDataKeys = ret.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encryptedDataKeys = request.implEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encryptedDataKeys = request.implEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encryptedDataKeys = request.mDataKeys;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encryptedDataKeys = request.mDataKeys;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encryptedDataKeys = request.getEncryptedBox.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys > 0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys > 0;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.event.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.event.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encryptedDataKeys = request.nextEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encryptedDataKeys = request.nextEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys | request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys | request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encryptedDataKeys = request.request;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encryptedDataKeys = request.request;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTosRequest;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTosRequest;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encryptedDataKeys = request.getEncryptedCursor;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encryptedDataKeys = request.getEncryptedCursor;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys0.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys0.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / node.event.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / node.event.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS_AND_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_POLL_INTERVAL_MS;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_POLL_INTERVAL_MS;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - a.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys - a.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_REDataKeys;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_REDataKeys;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys /attribute.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys /attribute.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encryptedDataKeys = request.getEncryptedTos.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encryptedDataKeys = request.getEncryptedTos.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.request;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys.request;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.eventDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.eventDataKeys = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos2.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos2.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / node.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / node.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeyssRequest;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeyssRequest;",
                "identical": false
            },
            {
                "k": 101,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 102,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.context.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 103,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.request;",
                "identical": false
            },
            {
                "k": 104,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.request;",
                "identical": false
            },
            {
                "k": 105,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.eventDataKeys;",
                "identical": false
            },
            {
                "k": 106,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / this.eventDataKeys;",
                "identical": false
            },
            {
                "k": 107,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 108,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys().encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 109,
                "patch": "this.encryptedBox = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 110,
                "patch": "this.encryptedBox = request.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 111,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 8;",
                "identical": false
            },
            {
                "k": 112,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 8;",
                "identical": false
            },
            {
                "k": 113,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.context.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 114,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.context.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 115,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys + 1;",
                "identical": false
            },
            {
                "k": 116,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys + 1;",
                "identical": false
            },
            {
                "k": 117,
                "patch": "this.encryptedDataKeys = request.getAttributeEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 118,
                "patch": "this.encryptedDataKeys = request.getAttributeEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 119,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / frame.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 120,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / frame.this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 121,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 122,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 123,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_ this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 124,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_ this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 125,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / frame.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 126,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / frame.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 127,
                "patch": "this.encryptedDataKeys = request.childrenDataKeys;",
                "identical": false
            },
            {
                "k": 128,
                "patch": "this.encryptedDataKeys = request.childrenDataKeys;",
                "identical": false
            },
            {
                "k": 129,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.request.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 130,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.request.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 131,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 132,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // apply lazy delta spreading",
                "identical": false
            },
            {
                "k": 133,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 134,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RESERVED_TYPE;",
                "identical": false
            },
            {
                "k": 135,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeyss.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 136,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeyss.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 137,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 138,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 139,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.context.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 140,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.context.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 141,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 1000;",
                "identical": false
            },
            {
                "k": 142,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys / 1000;",
                "identical": false
            },
            {
                "k": 143,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos.request;",
                "identical": false
            },
            {
                "k": 144,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysTos.request;",
                "identical": false
            },
            {
                "k": 145,
                "patch": "this.encryptedDataKeys = request.responseDataKeys;",
                "identical": false
            },
            {
                "k": 146,
                "patch": "this.encryptedDataKeys = request.responseDataKeys;",
                "identical": false
            },
            {
                "k": 147,
                "patch": "this.encryptedDataKeys = request.contextDataKeys;",
                "identical": false
            },
            {
                "k": 148,
                "patch": "this.encryptedDataKeys = request.contextDataKeys;",
                "identical": false
            },
            {
                "k": 149,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysDataKeys;",
                "identical": false
            },
            {
                "k": 150,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysDataKeys;",
                "identical": false
            },
            {
                "k": 151,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 152,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope, to this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 153,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_POLL_INTERVAL_KEY;",
                "identical": false
            },
            {
                "k": 154,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_POLL_INTERVAL_KEY;",
                "identical": false
            },
            {
                "k": 155,
                "patch": "this.encryptedDataKeys = request.PDataKeys;",
                "identical": false
            },
            {
                "k": 156,
                "patch": "this.encryptedDataKeys = request.PDataKeys;",
                "identical": false
            },
            {
                "k": 157,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope to this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 158,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // nope to this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 159,
                "patch": "this.encryptedDataKeys = request.getEncryptedFilename;",
                "identical": false
            },
            {
                "k": 160,
                "patch": "this.encryptedDataKeys = request.getEncryptedFilename;",
                "identical": false
            },
            {
                "k": 161,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // 1 is encryptionContext.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 162,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // 1 is encryptionContext.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 163,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_KEY;",
                "identical": false
            },
            {
                "k": 164,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_KEY;",
                "identical": false
            },
            {
                "k": 165,
                "patch": "this.encryptedDataKeys = request.dataDataKeys;",
                "identical": false
            },
            {
                "k": 166,
                "patch": "this.encryptedDataKeys = request.dataDataKeys;",
                "identical": false
            },
            {
                "k": 167,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysSubjects.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 168,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysSubjects.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 169,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 170,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_this.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 171,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 172,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS_NOT_IMPLEMENTED;",
                "identical": false
            },
            {
                "k": 173,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS_NOT_CONTDataKeys;",
                "identical": false
            },
            {
                "k": 174,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysS_NOT_CONTDataKeys;",
                "identical": false
            },
            {
                "k": 175,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.request.getEncryptedDataKeys",
                "identical": false
            },
            {
                "k": 176,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // no changes its this.request.getEncryptedDataKeys",
                "identical": false
            },
            {
                "k": 177,
                "patch": "this.encryptedDataKeys = request.getEncryptedCursor();",
                "identical": false
            },
            {
                "k": 178,
                "patch": "this.encryptedDataKeys = request.getEncryptedCursor();",
                "identical": false
            },
            {
                "k": 179,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_ELEVATION;",
                "identical": false
            },
            {
                "k": 180,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_ELEVATION;",
                "identical": false
            },
            {
                "k": 181,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_PREFERENCE;",
                "identical": false
            },
            {
                "k": 182,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_AND_EMBEDDED_PREFERENCE;",
                "identical": false
            },
            {
                "k": 183,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // 1 is encryptionContext.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 184,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys; // 1 is encryptionContext.request.this.encryptedDataKeys",
                "identical": false
            },
            {
                "k": 185,
                "patch": "this.encryptedDataKeys = request.getEncryptedTos.request;",
                "identical": false
            },
            {
                "k": 186,
                "patch": "this.encryptedDataKeys = request.getEncryptedTos.request;",
                "identical": false
            },
            {
                "k": 187,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RESERVED_status.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 188,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RESERVED_status.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 189,
                "patch": "this.encryptedDataKeys = response.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 190,
                "patch": "this.encryptedDataKeys = response.getEncryptedDataKeys;",
                "identical": false
            },
            {
                "k": 191,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_KEY;",
                "identical": false
            },
            {
                "k": 192,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_KEY;",
                "identical": false
            },
            {
                "k": 193,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RECOVERY_TYPE;",
                "identical": false
            },
            {
                "k": 194,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RECOVERY_TYPE;",
                "identical": false
            },
            {
                "k": 195,
                "patch": "this.encryptedDataKeys = request.getEncryptedTos.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 196,
                "patch": "this.encryptedDataKeys = request.getEncryptedTos.encryptedDataKeys;",
                "identical": false
            },
            {
                "k": 197,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysFIELDS;",
                "identical": false
            },
            {
                "k": 198,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeysFIELDS;",
                "identical": false
            },
            {
                "k": 199,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RECOVERY_KEY;",
                "identical": false
            },
            {
                "k": 200,
                "patch": "this.encryptedDataKeys = request.getEncryptedDataKeys_RECOVERY_KEY;",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = (l << 8) | a[i]; // sign bit",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = (l << 8) | a[i]; // sign bit",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign bit",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign bit",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign bit",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign bit",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+mask",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+mask",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = (l << 8) | a[i]; // size",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = (l << 8) | a[i]; // size",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = (l << 8) | a[i]; // sign removal, result[i];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = (l << 8) | a[i]; // sign removal, result[i];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = (l << 8) | a[i]; // sign will shift+mask",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = (l << 8) | a[i]; // sign will shift+mask",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, size",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, size",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a[i];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a[i];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = (l << 8) | a[i]; // sign removal, can's",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = (l << 8) | a[i]; // sign removal, can's",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = (l << 8) | a[i]; // sign removal, size",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = (l << 8) | a[i]; // sign removal, size",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for the i.",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for the i.",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for now",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for now",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to first 7+",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to first 7+",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner loop:",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for now",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for now",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l of size",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l of size",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for the i.",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for the i.",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, result[i];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, result[i];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3rd byte",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3rd byte",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the l for now",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the l for now",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = (l << 8) | a[i]; // sign will include the i.",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = (l << 8) | a[i]; // sign will include the i.",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for now",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the l for now",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the i.",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the i.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = (l << 8) | a[i]; // sign removal, length for l-style.length - 1];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = (l << 8) | a[i]; // sign removal, length for l-style.length - 1];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = (l << 8) | a[i]; // sign will need to handle LF later on",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = (l << 8) | a[i]; // sign will need to handle LF later on",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = (l << 8) | a[i]; // l for now",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = (l << 8) | a[i]; // l for now",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = (l << 8) | a[i]; // sign removal, result for now",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = (l << 8) | a[i]; // sign removal, result for now",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 4 for now",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = (l << 8) | a[i]; // sign will need to have at most 4 for now",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l for the i.",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l for the i.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = (l << 8) | a[i]; // sign will need to shift+mask",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = (l << 8) | a[i]; // sign will need to shift+mask",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = (l << 8) | a[i]; // sign will also clear, l for the i.",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = (l << 8) | a[i]; // sign will also clear, l for the i.",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, can's",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, can's",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = (l << 8) | a[i]; // sign will also clear, l for now",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = (l << 8) | a[i]; // sign will also clear, l for now",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the l for the i.",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the l for the i.",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign can's",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign can's",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l of size",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l of size",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the l for now",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a and the l for now",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = (l << 8) | a[i]; // sign will shift+2] for now",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = (l << 8) | a[i]; // sign will shift+2] for now",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = (l << 8) | a[i]; // odd vertex",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = (l << 8) | a[i]; // odd vertex",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have 16 for now",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have 16 for now",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = (l << 8) | a[i]; // sign will include possible comma",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = (l << 8) | a[i]; // sign will include possible comma",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the i.",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = (l << 8) | a[i]; // sign removal, can use the i.",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in case there's",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in case there's",
                "identical": false
            },
            {
                "k": 101,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign will need to sign bit",
                "identical": false
            },
            {
                "k": 102,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign will need to sign bit",
                "identical": false
            },
            {
                "k": 103,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the l for the i.",
                "identical": false
            },
            {
                "k": 104,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the l for the i.",
                "identical": false
            },
            {
                "k": 105,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply the l for now",
                "identical": false
            },
            {
                "k": 106,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply the l for now",
                "identical": false
            },
            {
                "k": 107,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner loop",
                "identical": false
            },
            {
                "k": 108,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner loop",
                "identical": false
            },
            {
                "k": 109,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the i.",
                "identical": false
            },
            {
                "k": 110,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to check the i.",
                "identical": false
            },
            {
                "k": 111,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply by + i.",
                "identical": false
            },
            {
                "k": 112,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply by + i.",
                "identical": false
            },
            {
                "k": 113,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to i.",
                "identical": false
            },
            {
                "k": 114,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to i.",
                "identical": false
            },
            {
                "k": 115,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply by default",
                "identical": false
            },
            {
                "k": 116,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply by default",
                "identical": false
            },
            {
                "k": 117,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l of size",
                "identical": false
            },
            {
                "k": 118,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l of size",
                "identical": false
            },
            {
                "k": 119,
                "patch": "l = (l << 8) | a[i]; // sign bit set to the l for the i.",
                "identical": false
            },
            {
                "k": 120,
                "patch": "l = (l << 8) | a[i]; // sign bit set to the l for the i.",
                "identical": false
            },
            {
                "k": 121,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l.",
                "identical": false
            },
            {
                "k": 122,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l l.",
                "identical": false
            },
            {
                "k": 123,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, can do a[i];",
                "identical": false
            },
            {
                "k": 124,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, can do a[i];",
                "identical": false
            },
            {
                "k": 125,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply by default",
                "identical": false
            },
            {
                "k": 126,
                "patch": "l = (l << 8) | a[i]; // sign removal, so multiply by default",
                "identical": false
            },
            {
                "k": 127,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l for now",
                "identical": false
            },
            {
                "k": 128,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign the l for now",
                "identical": false
            },
            {
                "k": 129,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to vertex",
                "identical": false
            },
            {
                "k": 130,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to vertex",
                "identical": false
            },
            {
                "k": 131,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply by + i.",
                "identical": false
            },
            {
                "k": 132,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply by + i.",
                "identical": false
            },
            {
                "k": 133,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in the i.",
                "identical": false
            },
            {
                "k": 134,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in the i.",
                "identical": false
            },
            {
                "k": 135,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have at most 4 for now",
                "identical": false
            },
            {
                "k": 136,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have at most 4 for now",
                "identical": false
            },
            {
                "k": 137,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply in the l of size",
                "identical": false
            },
            {
                "k": 138,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply in the l of size",
                "identical": false
            },
            {
                "k": 139,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have at most size",
                "identical": false
            },
            {
                "k": 140,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to have at most size",
                "identical": false
            },
            {
                "k": 141,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do for now",
                "identical": false
            },
            {
                "k": 142,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do for now",
                "identical": false
            },
            {
                "k": 143,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3 bits",
                "identical": false
            },
            {
                "k": 144,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to 3 bits",
                "identical": false
            },
            {
                "k": 145,
                "patch": "l = (l << 8) | a[i]; // sign removal,a[i];",
                "identical": false
            },
            {
                "k": 146,
                "patch": "l = (l << 8) | a[i]; // sign removal,a[i];",
                "identical": false
            },
            {
                "k": 147,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight for now",
                "identical": false
            },
            {
                "k": 148,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight for now",
                "identical": false
            },
            {
                "k": 149,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+ the l for the i.",
                "identical": false
            },
            {
                "k": 150,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+ the l for the i.",
                "identical": false
            },
            {
                "k": 151,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in the root of sign",
                "identical": false
            },
            {
                "k": 152,
                "patch": "l = (l << 8) | a[i]; // sign will include possible in the root of sign",
                "identical": false
            },
            {
                "k": 153,
                "patch": "l = (l << 8) | a[i]; // sign removal, common",
                "identical": false
            },
            {
                "k": 154,
                "patch": "l = (l << 8) | a[i]; // sign removal, common",
                "identical": false
            },
            {
                "k": 155,
                "patch": "l = (l << 8) | a[i]; // sign removal, length for l-style.length-1];",
                "identical": false
            },
            {
                "k": 156,
                "patch": "l = (l << 8) | a[i]; // sign removal, length for l-style.length-1];",
                "identical": false
            },
            {
                "k": 157,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for the l.",
                "identical": false
            },
            {
                "k": 158,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to l for the l.",
                "identical": false
            },
            {
                "k": 159,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign for the i.",
                "identical": false
            },
            {
                "k": 160,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign for the i.",
                "identical": false
            },
            {
                "k": 161,
                "patch": "l = (l << 8) | a[i]; // 21",
                "identical": false
            },
            {
                "k": 162,
                "patch": "l = (l << 8) | a[i]; // 21",
                "identical": false
            },
            {
                "k": 163,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l of sign",
                "identical": false
            },
            {
                "k": 164,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l of sign",
                "identical": false
            },
            {
                "k": 165,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l of the i.",
                "identical": false
            },
            {
                "k": 166,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign for the l of the i.",
                "identical": false
            },
            {
                "k": 167,
                "patch": "l = (l << 8) | a[i]; // 13 bits",
                "identical": false
            },
            {
                "k": 168,
                "patch": "l = (l << 8) | a[i]; // 13 bits",
                "identical": false
            },
            {
                "k": 169,
                "patch": "l = (l << 8) | a[i]; // 14 bits",
                "identical": false
            },
            {
                "k": 170,
                "patch": "l = (l << 8) | a[i]; // 14 bits",
                "identical": false
            },
            {
                "k": 171,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so for now",
                "identical": false
            },
            {
                "k": 172,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so for now",
                "identical": false
            },
            {
                "k": 173,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+2] for now",
                "identical": false
            },
            {
                "k": 174,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+2] for now",
                "identical": false
            },
            {
                "k": 175,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, result for now",
                "identical": false
            },
            {
                "k": 176,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, result for now",
                "identical": false
            },
            {
                "k": 177,
                "patch": "l = (l << 8) | a[i]; // sign removal, can still size",
                "identical": false
            },
            {
                "k": 178,
                "patch": "l = (l << 8) | a[i]; // sign removal, can still size",
                "identical": false
            },
            {
                "k": 179,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a direct child.",
                "identical": false
            },
            {
                "k": 180,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a direct child.",
                "identical": false
            },
            {
                "k": 181,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, need to sign bit",
                "identical": false
            },
            {
                "k": 182,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, need to sign bit",
                "identical": false
            },
            {
                "k": 183,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+ the l for now",
                "identical": false
            },
            {
                "k": 184,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to shift+ the l for now",
                "identical": false
            },
            {
                "k": 185,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply in the l for now",
                "identical": false
            },
            {
                "k": 186,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply in the l for now",
                "identical": false
            },
            {
                "k": 187,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign for now",
                "identical": false
            },
            {
                "k": 188,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign for now",
                "identical": false
            },
            {
                "k": 189,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to first 7 for the i.",
                "identical": false
            },
            {
                "k": 190,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to first 7 for the i.",
                "identical": false
            },
            {
                "k": 191,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply current size",
                "identical": false
            },
            {
                "k": 192,
                "patch": "l = (l << 8) | a[i]; // sign removal, need to sign removal, so multiply current size",
                "identical": false
            },
            {
                "k": 193,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner size",
                "identical": false
            },
            {
                "k": 194,
                "patch": "l = (l << 8) | a[i]; // sign removal, can do a tight inner size",
                "identical": false
            },
            {
                "k": 195,
                "patch": "l = (l << 8) | a[i]; // sign removal, Java-style.length - 1];",
                "identical": false
            },
            {
                "k": 196,
                "patch": "l = (l << 8) | a[i]; // sign removal, Java-style.length - 1];",
                "identical": false
            },
            {
                "k": 197,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 198,
                "patch": "l = (l << 8) | a[i]; // sign will need to sign removal, so multiply the l of size",
                "identical": false
            },
            {
                "k": 199,
                "patch": "l = (l << 8) | a[i]; // sign will need to shift+",
                "identical": false
            },
            {
                "k": 200,
                "patch": "l = (l << 8) | a[i]; // sign will need to shift+",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == String.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == String.class || kind == Object.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class || kind == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == String.class || raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == String.class || raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == String.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == String.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == String.class || raw == Object.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == String.class || raw == Object.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == String.class || types == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == String.class || types == Object.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == String.class || type == Object.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class || raw == Object.class.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == String.class || raw == Object.class.class) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == String.class || raw == Object.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == String.class || raw == Object.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class || provider == Object.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == String.class || provider == Object.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class || raw == Object.classclass) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == String.class || raw == Object.classclass) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class)",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class)",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class ||KEY == Object.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == String.class ||KEY == Object.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == String.class || UNKNOWN_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class || UNKNOWN_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class || raw == int.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, Object.class",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, Object.class",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class || TYPE_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == String.class || TYPE_UUID == Object.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class)",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class)",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class || !raw == Object.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class || !raw == Object.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class)",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class)",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class == Object.class",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class == Object.class",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class || raw == Object.class) { // special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to be Object.class",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to be Object.class",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to avoid double.class",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny to avoid double.class",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class || || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class || || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, include with above, Object.class",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, String.class",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class || raw == Object.class) { // most common special one, String.class",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class)",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class)",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class == Object.class",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, String.class == Object.class",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, Object.class",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, Object.class",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class || rawValue == Object.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class || rawValue == Object.class) {",
                "identical": false
            },
            {
                "k": 101,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear, String.class",
                "identical": false
            },
            {
                "k": 102,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also clear, String.class",
                "identical": false
            },
            {
                "k": 103,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class.class",
                "identical": false
            },
            {
                "k": 104,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR.class.class",
                "identical": false
            },
            {
                "k": 105,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 106,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to handle LF later on",
                "identical": false
            },
            {
                "k": 107,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, String.class",
                "identical": false
            },
            {
                "k": 108,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny with above, String.class",
                "identical": false
            },
            {
                "k": 109,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 110,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 111,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 112,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 113,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to String.class",
                "identical": false
            },
            {
                "k": 114,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to String.class",
                "identical": false
            },
            {
                "k": 115,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class",
                "identical": false
            },
            {
                "k": 116,
                "patch": "if (raw == String.class || raw == Object.class) {//and whitespace.class == Object.class",
                "identical": false
            },
            {
                "k": 117,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class.class) {",
                "identical": false
            },
            {
                "k": 118,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class.class) {",
                "identical": false
            },
            {
                "k": 119,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 120,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class) {",
                "identical": false
            },
            {
                "k": 121,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class == Object.class",
                "identical": false
            },
            {
                "k": 122,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class == Object.class",
                "identical": false
            },
            {
                "k": 123,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 124,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 125,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 126,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 127,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || kind == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 128,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || kind == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 129,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 130,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 131,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny-class",
                "identical": false
            },
            {
                "k": 132,
                "patch": "if (raw == String.class || raw == Object.class) { // tiny-class",
                "identical": false
            },
            {
                "k": 133,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 134,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 135,
                "patch": "if (raw == String.class || raw == Object.class) { // skip to avoid double.class",
                "identical": false
            },
            {
                "k": 136,
                "patch": "if (raw == String.class || raw == Object.class) { // skip to avoid double.class",
                "identical": false
            },
            {
                "k": 137,
                "patch": "if (raw == String.class || raw == Object.class) { // special-class",
                "identical": false
            },
            {
                "k": 138,
                "patch": "if (raw == String.class || raw == Object.class) { // special-class",
                "identical": false
            },
            {
                "k": 139,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 140,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ||raw == Object.class == Object.class)",
                "identical": false
            },
            {
                "k": 141,
                "patch": "if (raw == String.class || raw == Object.class) { // IPv4-Compatible or \".class.class.class.class.class.equals(raw == Object.class",
                "identical": false
            },
            {
                "k": 142,
                "patch": "if (raw == String.class || raw == Object.class) { // IPv4-Compatible or \".class.class.class.class.class.equals(raw == Object.class",
                "identical": false
            },
            {
                "k": 143,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 144,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 145,
                "patch": "if (raw == String.class || raw == Object.class) { // [databind#116]",
                "identical": false
            },
            {
                "k": 146,
                "patch": "if (raw == String.class || raw == Object.class) { // [databind#116]",
                "identical": false
            },
            {
                "k": 147,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 148,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 149,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.equals(raw == Object.class)",
                "identical": false
            },
            {
                "k": 150,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.equals(raw == Object.class)",
                "identical": false
            },
            {
                "k": 151,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class == Object.class.class",
                "identical": false
            },
            {
                "k": 152,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class == Object.class.class",
                "identical": false
            },
            {
                "k": 153,
                "patch": "if (raw == String.class || raw == Object.class) { // IPv4-Compatible or \".class.class.class.class.class.equals(raw == Object.class) {",
                "identical": false
            },
            {
                "k": 154,
                "patch": "if (raw == String.class || raw == Object.class) { // IPv4-Compatible or \".class.class.class.class.class.equals(raw == Object.class) {",
                "identical": false
            },
            {
                "k": 155,
                "patch": "if (raw == String.class || raw == Object.class) { // never have array as with above, Object.class",
                "identical": false
            },
            {
                "k": 156,
                "patch": "if (raw == String.class || raw == Object.class) { // never have array as with above, Object.class",
                "identical": false
            },
            {
                "k": 157,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 158,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 159,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to be Object.class",
                "identical": false
            },
            {
                "k": 160,
                "patch": "if (raw == String.class || raw == Object.class) { // not parsed at the end of record; but also need to be Object.class",
                "identical": false
            },
            {
                "k": 161,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 162,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 163,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class",
                "identical": false
            },
            {
                "k": 164,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class",
                "identical": false
            },
            {
                "k": 165,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 166,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 167,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 168,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 169,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class == Object.class",
                "identical": false
            },
            {
                "k": 170,
                "patch": "if (raw == String.class || raw == Object.class) { // most special one, Object.class == Object.class",
                "identical": false
            },
            {
                "k": 171,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class : TYPE_UUID.class; but also need to include with above, Object.class",
                "identical": false
            },
            {
                "k": 172,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class : TYPE_UUID.class; but also need to include with above, Object.class",
                "identical": false
            },
            {
                "k": 173,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 174,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 175,
                "patch": "if (raw == String.class || raw == boolean.class) {",
                "identical": false
            },
            {
                "k": 176,
                "patch": "if (raw == String.class || raw == boolean.class) {",
                "identical": false
            },
            {
                "k": 177,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 178,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 179,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class",
                "identical": false
            },
            {
                "k": 180,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class",
                "identical": false
            },
            {
                "k": 181,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 182,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class == Object.class)",
                "identical": false
            },
            {
                "k": 183,
                "patch": "if (raw ==String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 184,
                "patch": "if (raw ==String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 185,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.equals(raw == Object.class",
                "identical": false
            },
            {
                "k": 186,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.equals(raw == Object.class",
                "identical": false
            },
            {
                "k": 187,
                "patch": "if (raw == String.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 188,
                "patch": "if (raw == String.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 189,
                "patch": "if (raw == String.class ||cl == Object.class) {",
                "identical": false
            },
            {
                "k": 190,
                "patch": "if (raw == String.class ||cl == Object.class) {",
                "identical": false
            },
            {
                "k": 191,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class",
                "identical": false
            },
            {
                "k": 192,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class",
                "identical": false
            },
            {
                "k": 193,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 194,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class.class.class.class.class == Object.class",
                "identical": false
            },
            {
                "k": 195,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class",
                "identical": false
            },
            {
                "k": 196,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class == Object.class",
                "identical": false
            },
            {
                "k": 197,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 198,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class || raw == Object.class.class == Object.class == Object.class) {",
                "identical": false
            },
            {
                "k": 199,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class == Object.class) {",
                "identical": false
            },
            {
                "k": 200,
                "patch": "if (raw == String.class || raw == Object.class) { // NOSONAR (raw == Object.class ? Object.class.class.class.class.class == Object.class) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (channel.getPipeline().get(HttpRequest.class) != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (channel.getPipeline().get(HttpRequest.class) != null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (channel.getPipeline().get(Calendar.class) != null) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (channel.getPipeline().get(Calendar.class) != null) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (channel.getPipeline().get(Basic.class) != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (channel.getPipeline().get(Basic.class) != null) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (channel.getPipeline().get(Database.class) != null) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (channel.getPipeline().get(Database.class) != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (channel.getPipeline().get(Activity.class) != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (channel.getPipeline().get(Activity.class) != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (channel.getPipeline().get(formHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (channel.getPipeline().get(formHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (channel.getPipeline().get(ErrorHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (channel.getPipeline().get(ErrorHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (channel.getPipeline().get(RestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (channel.getPipeline().get(RestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (channel.getPipeline().get(Ele.class) != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (channel.getPipeline().get(Ele.class) != null) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (channel.getPipeline().get(placeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (channel.getPipeline().get(placeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (channel.getPipeline().get(Group.class) != null) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (channel.getPipeline().get(Group.class) != null) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (channel.getPipeline().get( ChangeHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (channel.getPipeline().get( ChangeHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (channel.getPipeline().get(remoteHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (channel.getPipeline().get(remoteHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (channel.getPipeline().get(EOFHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (channel.getPipeline().get(EOFHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (channel.getPipeline().get(MONTHHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (channel.getPipeline().get(MONTHHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) == null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) == null) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (channel.getPipeline().get( ==HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (channel.getPipeline().get( ==HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (channel.getPipeline().get(Generator.class) != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (channel.getPipeline().get(Generator.class) != null) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (channel.getPipeline().get(27.class) != null) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (channel.getPipeline().get(27.class) != null) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (channel.getPipeline().get(KE.class) != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (channel.getPipeline().get(KE.class) != null) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (channel.getPipeline().get(Generated.class) != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (channel.getPipeline().get(Generated.class) != null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (channel.getPipeline().get(remoteAddress.class) != null) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (channel.getPipeline().get(remoteAddress.class) != null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // should never occur...",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // should never occur...",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (channel.getPipeline().get(Process.class) != null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (channel.getPipeline().get(Process.class) != null) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (channel.getPipeline().get(DS.class) != null) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (channel.getPipeline().get(DS.class) != null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (channel.getPipeline().get(string.class) != null) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (channel.getPipeline().get(string.class) != null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (channel.getPipeline().get(channel.class) != null) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (channel.getPipeline().get(channel.class) != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (channel.getPipeline().get(DatabaseDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (channel.getPipeline().get(DatabaseDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if(channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if(channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (channel.getPipeline().get( \\\"HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (channel.getPipeline().get( \\\"HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (channel.getPipeline().get(\\HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (channel.getPipeline().get(\\HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (channel.getPipeline().get(password.class) != null) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (channel.getPipeline().get(password.class) != null) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (channel.getPipeline().get( ==HttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (channel.getPipeline().get( ==HttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // only one allowed",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // only one allowed",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (channel.getPipeline().get(FORM_URDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (channel.getPipeline().get(FORM_URDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (channel.getPipeline().get(protoHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (channel.getPipeline().get(protoHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (channel.getPipeline().get([,.class) != null) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (channel.getPipeline().get([,.class) != null) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (channel.getPipeline().get(Error == null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (channel.getPipeline().get(Error == null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (channel.getPipeline().get((5,HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (channel.getPipeline().get((5,HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (channel.getPipeline().get(buf.class) != null) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (channel.getPipeline().get(buf.class) != null) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (channel.getPipeline().get(mimeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (channel.getPipeline().get(mimeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (channel.getPipeline().get(DOWN.class) != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (channel.getPipeline().get(DOWN.class) != null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (channel.getPipeline().get(0HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (channel.getPipeline().get(0HttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (channel.getPipeline().get(Only.class) != null) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (channel.getPipeline().get(Only.class) != null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (channel.getPipeline().get(Formatter.class) != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (channel.getPipeline().get(Formatter.class) != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (channel.getPipeline().get(Field.class) != null) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (channel.getPipeline().get(Field.class) != null) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (channel.getPipeline().get(Val.class) != null) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (channel.getPipeline().get(Val.class) != null) {",
                "identical": false
            },
            {
                "k": 101,
                "patch": "if (channel.getPipeline().get(8) == null) {",
                "identical": false
            },
            {
                "k": 102,
                "patch": "if (channel.getPipeline().get(8) == null) {",
                "identical": false
            },
            {
                "k": 103,
                "patch": "if (channel.getPipeline().get(HttpRequest.class) != null;",
                "identical": false
            },
            {
                "k": 104,
                "patch": "if (channel.getPipeline().get(HttpRequest.class) != null;",
                "identical": false
            },
            {
                "k": 105,
                "patch": "if (channel.getPipeline().get($.class) != null) {",
                "identical": false
            },
            {
                "k": 106,
                "patch": "if (channel.getPipeline().get($.class) != null) {",
                "identical": false
            },
            {
                "k": 107,
                "patch": "if (channel.getPipeline().get('){Decoder.class) != null) {",
                "identical": false
            },
            {
                "k": 108,
                "patch": "if (channel.getPipeline().get('){Decoder.class) != null) {",
                "identical": false
            },
            {
                "k": 109,
                "patch": "if (channel.getPipeline().get( Change.class) != null) {",
                "identical": false
            },
            {
                "k": 110,
                "patch": "if (channel.getPipeline().get( Change.class) != null) {",
                "identical": false
            },
            {
                "k": 111,
                "patch": "if (channel.getPipeline().get(AsyncHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 112,
                "patch": "if (channel.getPipeline().get(AsyncHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 113,
                "patch": "if (channel.getPipeline().get(Query.class) != null) {",
                "identical": false
            },
            {
                "k": 114,
                "patch": "if (channel.getPipeline().get(Query.class) != null) {",
                "identical": false
            },
            {
                "k": 115,
                "patch": "if (channel.getPipeline().get(HttpRequestIds.class) != null) {",
                "identical": false
            },
            {
                "k": 116,
                "patch": "if (channel.getPipeline().get(HttpRequestIds.class) != null) {",
                "identical": false
            },
            {
                "k": 117,
                "patch": "if (channel.getPipeline().get(errDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 118,
                "patch": "if (channel.getPipeline().get(errDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 119,
                "patch": "if (channel.getPipeline().get(QueryHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 120,
                "patch": "if (channel.getPipeline().get(QueryHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 121,
                "patch": "if (channel.getPipeline().get(Week.class) != null) {",
                "identical": false
            },
            {
                "k": 122,
                "patch": "if (channel.getPipeline().get(Week.class) != null) {",
                "identical": false
            },
            {
                "k": 123,
                "patch": "if (channel.getPipeline().get(DSDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 124,
                "patch": "if (channel.getPipeline().get(DSDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 125,
                "patch": "if (channel.getPipeline().get(LocDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 126,
                "patch": "if (channel.getPipeline().get(LocDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 127,
                "patch": "if (channel.getPipeline().get(versionHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 128,
                "patch": "if (channel.getPipeline().get(versionHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 129,
                "patch": "if (channel.getPipeline().get( milliseconds.class) != null) {",
                "identical": false
            },
            {
                "k": 130,
                "patch": "if (channel.getPipeline().get( milliseconds.class) != null) {",
                "identical": false
            },
            {
                "k": 131,
                "patch": "if (channel.getPipeline().get(Invocation.class) != null) {",
                "identical": false
            },
            {
                "k": 132,
                "patch": "if (channel.getPipeline().get(Invocation.class) != null) {",
                "identical": false
            },
            {
                "k": 133,
                "patch": "if (channel.getPipeline().get(serialization.class) != null) {",
                "identical": false
            },
            {
                "k": 134,
                "patch": "if (channel.getPipeline().get(serialization.class) != null) {",
                "identical": false
            },
            {
                "k": 135,
                "patch": "if (channel.getPipeline().get(tag.class) != null) {",
                "identical": false
            },
            {
                "k": 136,
                "patch": "if (channel.getPipeline().get(tag.class) != null) {",
                "identical": false
            },
            {
                "k": 137,
                "patch": "if (channel.getPipeline().get(EOFHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 138,
                "patch": "if (channel.getPipeline().get(EOFHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 139,
                "patch": "if (channel.getPipeline().get( GHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 140,
                "patch": "if (channel.getPipeline().get( GHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 141,
                "patch": "if (channel.getPipeline().get(protectedDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 142,
                "patch": "if (channel.getPipeline().get(protectedDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 143,
                "patch": "if (channel.getPipeline().get(RestHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 144,
                "patch": "if (channel.getPipeline().get(RestHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 145,
                "patch": "if (channel.getPipeline().get( Then.class) != null) {",
                "identical": false
            },
            {
                "k": 146,
                "patch": "if (channel.getPipeline().get( Then.class) != null) {",
                "identical": false
            },
            {
                "k": 147,
                "patch": "if (channel.getPipeline().get(ParameterSpec.class) != null) {",
                "identical": false
            },
            {
                "k": 148,
                "patch": "if (channel.getPipeline().get(ParameterSpec.class) != null) {",
                "identical": false
            },
            {
                "k": 149,
                "patch": "if (channel.getPipeline().get(9.class) != null) {",
                "identical": false
            },
            {
                "k": 150,
                "patch": "if (channel.getPipeline().get(9.class) != null) {",
                "identical": false
            },
            {
                "k": 151,
                "patch": "if (channel.getPipeline().get(Proxy.class) != null) {",
                "identical": false
            },
            {
                "k": 152,
                "patch": "if (channel.getPipeline().get(Proxy.class) != null) {",
                "identical": false
            },
            {
                "k": 153,
                "patch": "if (channel.getPipeline().get(Infinity.class) != null) {",
                "identical": false
            },
            {
                "k": 154,
                "patch": "if (channel.getPipeline().get(Infinity.class) != null) {",
                "identical": false
            },
            {
                "k": 155,
                "patch": "if (channel.getPipeline().get(ErrorHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 156,
                "patch": "if (channel.getPipeline().get(ErrorHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 157,
                "patch": "if (channel.getPipeline().get( ChangeHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 158,
                "patch": "if (channel.getPipeline().get( ChangeHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 159,
                "patch": "if (channel.getPipeline().get(Database.class) != null;",
                "identical": false
            },
            {
                "k": 160,
                "patch": "if (channel.getPipeline().get(Database.class) != null;",
                "identical": false
            },
            {
                "k": 161,
                "patch": "if (channel.getPipeline().get(Session.class) != null) {",
                "identical": false
            },
            {
                "k": 162,
                "patch": "if (channel.getPipeline().get(Session.class) != null) {",
                "identical": false
            },
            {
                "k": 163,
                "patch": "if (channel.getPipeline().get( numeric.class) != null) {",
                "identical": false
            },
            {
                "k": 164,
                "patch": "if (channel.getPipeline().get( numeric.class) != null) {",
                "identical": false
            },
            {
                "k": 165,
                "patch": "if (channel.getPipeline().get( matched.class) != null) {",
                "identical": false
            },
            {
                "k": 166,
                "patch": "if (channel.getPipeline().get( matched.class) != null) {",
                "identical": false
            },
            {
                "k": 167,
                "patch": "if (channel.getPipeline().get(EntityManager.class) != null) {",
                "identical": false
            },
            {
                "k": 168,
                "patch": "if (channel.getPipeline().get(EntityManager.class) != null) {",
                "identical": false
            },
            {
                "k": 169,
                "patch": "if (channel.getPipeline().get(party.class) != null) {",
                "identical": false
            },
            {
                "k": 170,
                "patch": "if (channel.getPipeline().get(party.class) != null) {",
                "identical": false
            },
            {
                "k": 171,
                "patch": "if (channel.getPipeline().get(atypeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 172,
                "patch": "if (channel.getPipeline().get(atypeDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 173,
                "patch": "if (channel.getPipeline().get( >=HttpRequestDecoder.class) {",
                "identical": false
            },
            {
                "k": 174,
                "patch": "if (channel.getPipeline().get( >=HttpRequestDecoder.class) {",
                "identical": false
            },
            {
                "k": 175,
                "patch": "if (channel.getPipeline().get(version.class) != null) {",
                "identical": false
            },
            {
                "k": 176,
                "patch": "if (channel.getPipeline().get(version.class) != null) {",
                "identical": false
            },
            {
                "k": 177,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null){",
                "identical": false
            },
            {
                "k": 178,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null){",
                "identical": false
            },
            {
                "k": 179,
                "patch": "if (channel.getPipeline().getSetHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 180,
                "patch": "if (channel.getPipeline().getSetHttpRequestDecoder.class) != null) {",
                "identical": false
            },
            {
                "k": 181,
                "patch": "if (channel.getPipeline().get(Params.class) != null) {",
                "identical": false
            },
            {
                "k": 182,
                "patch": "if (channel.getPipeline().get(Params.class) != null) {",
                "identical": false
            },
            {
                "k": 183,
                "patch": "if (channel.getPipeline().get(Api.class) != null) {",
                "identical": false
            },
            {
                "k": 184,
                "patch": "if (channel.getPipeline().get(Api.class) != null) {",
                "identical": false
            },
            {
                "k": 185,
                "patch": "if (channel.getPipeline().get(Family.class) != null) {",
                "identical": false
            },
            {
                "k": 186,
                "patch": "if (channel.getPipeline().get(Family.class) != null) {",
                "identical": false
            },
            {
                "k": 187,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) == null;",
                "identical": false
            },
            {
                "k": 188,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) == null;",
                "identical": false
            },
            {
                "k": 189,
                "patch": "if (channel.getPipeline().get(atype.class) != null) {",
                "identical": false
            },
            {
                "k": 190,
                "patch": "if (channel.getPipeline().get(atype.class) != null) {",
                "identical": false
            },
            {
                "k": 191,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // should never occur but...",
                "identical": false
            },
            {
                "k": 192,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // should never occur but...",
                "identical": false
            },
            {
                "k": 193,
                "patch": "if (channel.getPipeline().get(years.class) != null) {",
                "identical": false
            },
            {
                "k": 194,
                "patch": "if (channel.getPipeline().get(years.class) != null) {",
                "identical": false
            },
            {
                "k": 195,
                "patch": "if (channel.getPipeline().get(formHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 196,
                "patch": "if (channel.getPipeline().get(formHttpRequestDecoder.class) != null;",
                "identical": false
            },
            {
                "k": 197,
                "patch": "if (channel.getPipeline().get(Checker.class) != null) {",
                "identical": false
            },
            {
                "k": 198,
                "patch": "if (channel.getPipeline().get(Checker.class) != null) {",
                "identical": false
            },
            {
                "k": 199,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // should never occur but if null",
                "identical": false
            },
            {
                "k": 200,
                "patch": "if (channel.getPipeline().get(HttpRequestHttpRequestDecoder.class) != null) { // should never occur but if null",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return position_ms;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return position_ms;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return position_ms.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return position_ms.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return position_ms[position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return position_ms[position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return position_msOneed.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return position_msOneed.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return position_ms_.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return position_ms_.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return position_ms(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return position_ms(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return position_ms(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return position_ms(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return position_ms_ that that.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return position_ms_ that that.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ context_ms;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ context_ms;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return position_ms_ that.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return position_ms_ that.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return position_ms = setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return position_ms = setQueryParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return position_msHash.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return position_msHash.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return position_ms_ms;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return position_ms_ms;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return position_msicms.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return position_msicms.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return position_ms(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return position_ms(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return position_ms_associationTypes.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return position_ms_associationTypes.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return position_ms_ context.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return position_ms_ context.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ fieldType;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ fieldType;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return position_ms.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return position_ms.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return position_msView.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return position_msView.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_JOIN_TYPE_ms;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_JOIN_TYPE_ms;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return position_ms.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return position_ms.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ context_ms);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ context_ms);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return position_msOneed.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return position_msOneed.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", distance_ms);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", distance_ms);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ms);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ms);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return position_ms_associationTypes.position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return position_ms_associationTypes.position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return position_msConfig.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return position_msConfig.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return position_msStyle.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return position_msStyle.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return position_ms_ that that.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return position_ms_ that that.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ that.position_ms;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ that.position_ms;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms) {",
                "identical": false
            },
            {
                "k": 101,
                "patch": "return position_ms == setQueryParameter.position_ms;",
                "identical": false
            },
            {
                "k": 102,
                "patch": "return position_ms == setQueryParameter.position_ms;",
                "identical": false
            },
            {
                "k": 103,
                "patch": "return position_ms != setQueryParameter.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 104,
                "patch": "return position_ms != setQueryParameter.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 105,
                "patch": "return position_ms_ that that.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 106,
                "patch": "return position_ms_ that that.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 107,
                "patch": "return position_ms = setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 108,
                "patch": "return position_ms = setQueryParameter(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 109,
                "patch": "return position_msDescriptor.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 110,
                "patch": "return position_msDescriptor.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 111,
                "patch": "return position_ms\", count);",
                "identical": false
            },
            {
                "k": 112,
                "patch": "return position_ms\", count);",
                "identical": false
            },
            {
                "k": 113,
                "patch": "return position_msms(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 114,
                "patch": "return position_msms(\"position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 115,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms */_ms;",
                "identical": false
            },
            {
                "k": 116,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms */_ms;",
                "identical": false
            },
            {
                "k": 117,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_END_ms;",
                "identical": false
            },
            {
                "k": 118,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_END_ms;",
                "identical": false
            },
            {
                "k": 119,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 120,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 121,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ that;",
                "identical": false
            },
            {
                "k": 122,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ that;",
                "identical": false
            },
            {
                "k": 123,
                "patch": "return position_msms(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 124,
                "patch": "return position_msms(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 125,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 126,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count);",
                "identical": false
            },
            {
                "k": 127,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 128,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", date_ms;",
                "identical": false
            },
            {
                "k": 129,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_LBS_ms;",
                "identical": false
            },
            {
                "k": 130,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_LBS_ms;",
                "identical": false
            },
            {
                "k": 131,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 132,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 133,
                "patch": "return position_msConfig.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 134,
                "patch": "return position_msConfig.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 135,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 136,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 137,
                "patch": "return position_ms.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 138,
                "patch": "return position_ms.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 139,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_INTERVAL_ms;",
                "identical": false
            },
            {
                "k": 140,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_INTERVAL_ms;",
                "identical": false
            },
            {
                "k": 141,
                "patch": "return position_ms_ that that.position_ms\", count);",
                "identical": false
            },
            {
                "k": 142,
                "patch": "return position_ms_ that that.position_ms\", count);",
                "identical": false
            },
            {
                "k": 143,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_argument;",
                "identical": false
            },
            {
                "k": 144,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_argument;",
                "identical": false
            },
            {
                "k": 145,
                "patch": "return position_ms_.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 146,
                "patch": "return position_ms_.position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 147,
                "patch": "return position_ms[position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 148,
                "patch": "return position_ms[position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 149,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms_ms;",
                "identical": false
            },
            {
                "k": 150,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", date_ms_ms;",
                "identical": false
            },
            {
                "k": 151,
                "patch": "return position_msView(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 152,
                "patch": "return position_msView(\"position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 153,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 154,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 155,
                "patch": "return position_ms_ other.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 156,
                "patch": "return position_ms_ other.position_ms\", position_ms;",
                "identical": false
            },
            {
                "k": 157,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 158,
                "patch": "return position_mssideParameter(\"position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 159,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms_ms;",
                "identical": false
            },
            {
                "k": 160,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", count_ms_ms;",
                "identical": false
            },
            {
                "k": 161,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", value_ms);",
                "identical": false
            },
            {
                "k": 162,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", value_ms);",
                "identical": false
            },
            {
                "k": 163,
                "patch": "return position_ms\", count_ms_ms;",
                "identical": false
            },
            {
                "k": 164,
                "patch": "return position_ms\", count_ms_ms;",
                "identical": false
            },
            {
                "k": 165,
                "patch": "return position_ms_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 166,
                "patch": "return position_ms_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 167,
                "patch": "return position_mssideParameter(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 168,
                "patch": "return position_mssideParameter(\"position_ms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 169,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_NEW;",
                "identical": false
            },
            {
                "k": 170,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_NEW;",
                "identical": false
            },
            {
                "k": 171,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 172,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 173,
                "patch": "return position_ms.position_ms\", count);",
                "identical": false
            },
            {
                "k": 174,
                "patch": "return position_ms.position_ms\", count);",
                "identical": false
            },
            {
                "k": 175,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_offset;",
                "identical": false
            },
            {
                "k": 176,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_offset;",
                "identical": false
            },
            {
                "k": 177,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 178,
                "patch": "return position_msicms != setQueryParameter(\"position_ms\", position_ms_ms;",
                "identical": false
            },
            {
                "k": 179,
                "patch": "return position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 180,
                "patch": "return position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 181,
                "patch": "return position_ms + setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 182,
                "patch": "return position_ms + setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 183,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count_ms);",
                "identical": false
            },
            {
                "k": 184,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", count_ms);",
                "identical": false
            },
            {
                "k": 185,
                "patch": "return position_ms_ that.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 186,
                "patch": "return position_ms_ that.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 187,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ needs;",
                "identical": false
            },
            {
                "k": 188,
                "patch": "return position_ms != setQueryParameter(\"position_ms\", position_ms_ needs;",
                "identical": false
            },
            {
                "k": 189,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 190,
                "patch": "return position_ms != setQueryParameterTypes.position_ms\", position_ms);",
                "identical": false
            },
            {
                "k": 191,
                "patch": "return position_msms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 192,
                "patch": "return position_msms\", setQueryParameter_ms;",
                "identical": false
            },
            {
                "k": 193,
                "patch": "return position_msHash.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 194,
                "patch": "return position_msHash.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 195,
                "patch": "return position_ms_.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 196,
                "patch": "return position_ms_.position_ms\", count_ms;",
                "identical": false
            },
            {
                "k": 197,
                "patch": "return position_msHash.position_ms\", count_ms_ms;",
                "identical": false
            },
            {
                "k": 198,
                "patch": "return position_msHash.position_ms\", count_ms_ms;",
                "identical": false
            },
            {
                "k": 199,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", value_ms;",
                "identical": false
            },
            {
                "k": 200,
                "patch": "return position_ms == setQueryParameter(\"position_ms\", value_ms;",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (data[3].length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (data[3].length) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (data[0].length) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (data[0].length) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (data.length) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (data.length) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (completed) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (completed) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (data[3) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (data[3) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (data[1].length) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (data[1].length) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (started) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (started) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (dataFormat) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (dataFormat) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (data[2].[2].End) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (data[2].[2].End) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (data[3]));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (data[3]));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (running) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (running) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (data[2].length) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (data[2].length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (data[4) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (data[4) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (data.length > started) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (data.length > started) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (data[2]) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (data[2]) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (data[3];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (data[3];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (data[2]. < data.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (data[2]. < data.length) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (data[3[3].length) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (data[3[3].length) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (data.length > 24) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (data.length > 24) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (data[2].[2].) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (data[2].[2].) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (files.length) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (files.length) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (Block[1].length) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (Block[1].length) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (position.length) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (position.length) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parameters[3].length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parameters[3].length) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (data[0].length > started) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (data[0].length > started) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parameters.length) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parameters.length) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (data.length > 5) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (data.length > 5) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (mapping.length) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (mapping.length) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (data[3xff) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (data[3xff) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (neg) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (neg) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (data[2].[2]. < data.length) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (data[2].[2]. < data.length) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (position != 0) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (position != 0) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (dataLength) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (dataLength) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (data.length > 4) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (data.length > 4) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (data[1] > 0) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (data[1] > 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (data.length > 0) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (data.length > 0) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (data[0].length > 0) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (data[0].length > 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (data[3[3) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (data[3[3) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (data[2].End) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (data[2].End) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (dataFormat[3].length) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (dataFormat[3].length) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (activity[3].length) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (activity[3].length) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (dataFormat[1].length) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (dataFormat[1].length) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (data[300, 0xtaximeterEnd) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (data[300, 0xtaximeterEnd) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (data[2]. < 0) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (data[2]. < 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (data[3Paths) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (data[3Paths) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (dataLength > 10) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (dataLength > 10) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (dataLength > 0) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (dataLength > 0) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (data[3AN_DELTA) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (data[3AN_DELTA) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (data[0].length;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (data[0].length;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (dataFormatMin) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (dataFormatMin) {",
                "identical": false
            },
            {
                "k": 101,
                "patch": "if (data[3AN_DELIMITER) {",
                "identical": false
            },
            {
                "k": 102,
                "patch": "if (data[3AN_DELIMITER) {",
                "identical": false
            },
            {
                "k": 103,
                "patch": "if (null) {",
                "identical": false
            },
            {
                "k": 104,
                "patch": "if (null) {",
                "identical": false
            },
            {
                "k": 105,
                "patch": "if (data.length > 255) {",
                "identical": false
            },
            {
                "k": 106,
                "patch": "if (data.length > 255) {",
                "identical": false
            },
            {
                "k": 107,
                "patch": "if (data[3]);",
                "identical": false
            },
            {
                "k": 108,
                "patch": "if (data[3]);",
                "identical": false
            },
            {
                "k": 109,
                "patch": "if (data[3PAGE) {",
                "identical": false
            },
            {
                "k": 110,
                "patch": "if (data[3PAGE) {",
                "identical": false
            },
            {
                "k": 111,
                "patch": "if (data[3US_BYTES) {",
                "identical": false
            },
            {
                "k": 112,
                "patch": "if (data[3US_BYTES) {",
                "identical": false
            },
            {
                "k": 113,
                "patch": "if (data[3Mappings) {",
                "identical": false
            },
            {
                "k": 114,
                "patch": "if (data[3Mappings) {",
                "identical": false
            },
            {
                "k": 115,
                "patch": "if ([3].length) {",
                "identical": false
            },
            {
                "k": 116,
                "patch": "if ([3].length) {",
                "identical": false
            },
            {
                "k": 117,
                "patch": "if (data[3US_ASCII) {",
                "identical": false
            },
            {
                "k": 118,
                "patch": "if (data[3US_ASCII) {",
                "identical": false
            },
            {
                "k": 119,
                "patch": "if (data[2]. < data[3].length) {",
                "identical": false
            },
            {
                "k": 120,
                "patch": "if (data[2]. < data[3].length) {",
                "identical": false
            },
            {
                "k": 121,
                "patch": "if (data[300, position) {",
                "identical": false
            },
            {
                "k": 122,
                "patch": "if (data[300, position) {",
                "identical": false
            },
            {
                "k": 123,
                "patch": "if (data[300, 0xtaximeterStart) {",
                "identical": false
            },
            {
                "k": 124,
                "patch": "if (data[300, 0xtaximeterStart) {",
                "identical": false
            },
            {
                "k": 125,
                "patch": "if (position != 4) {",
                "identical": false
            },
            {
                "k": 126,
                "patch": "if (position != 4) {",
                "identical": false
            },
            {
                "k": 127,
                "patch": "if (data[3each) {",
                "identical": false
            },
            {
                "k": 128,
                "patch": "if (data[3each) {",
                "identical": false
            },
            {
                "k": 129,
                "patch": "if (dataLength > 24) {",
                "identical": false
            },
            {
                "k": 130,
                "patch": "if (dataLength > 24) {",
                "identical": false
            },
            {
                "k": 131,
                "patch": "if (dataFormatStart) {",
                "identical": false
            },
            {
                "k": 132,
                "patch": "if (dataFormatStart) {",
                "identical": false
            },
            {
                "k": 133,
                "patch": "if (data[3ed) {",
                "identical": false
            },
            {
                "k": 134,
                "patch": "if (data[3ed) {",
                "identical": false
            },
            {
                "k": 135,
                "patch": "if (dataFormatReaders) {",
                "identical": false
            },
            {
                "k": 136,
                "patch": "if (dataFormatReaders) {",
                "identical": false
            },
            {
                "k": 137,
                "patch": "if (data.length > 10) {",
                "identical": false
            },
            {
                "k": 138,
                "patch": "if (data.length > 10) {",
                "identical": false
            },
            {
                "k": 139,
                "patch": "if (data[1].length > started) {",
                "identical": false
            },
            {
                "k": 140,
                "patch": "if (data[1].length > started) {",
                "identical": false
            },
            {
                "k": 141,
                "patch": "if (data[1].length > 0) {",
                "identical": false
            },
            {
                "k": 142,
                "patch": "if (data[1].length > 0) {",
                "identical": false
            },
            {
                "k": 143,
                "patch": "if (data[0].length > 255) {",
                "identical": false
            },
            {
                "k": 144,
                "patch": "if (data[0].length > 255) {",
                "identical": false
            },
            {
                "k": 145,
                "patch": "if (dataFormatFirst) {",
                "identical": false
            },
            {
                "k": 146,
                "patch": "if (dataFormatFirst) {",
                "identical": false
            },
            {
                "k": 147,
                "patch": "if (data[300, 0x0020) {",
                "identical": false
            },
            {
                "k": 148,
                "patch": "if (data[300, 0x0020) {",
                "identical": false
            },
            {
                "k": 149,
                "patch": "if (mapping[0].length) {",
                "identical": false
            },
            {
                "k": 150,
                "patch": "if (mapping[0].length) {",
                "identical": false
            },
            {
                "k": 151,
                "patch": "if (dataDare) {",
                "identical": false
            },
            {
                "k": 152,
                "patch": "if (dataDare) {",
                "identical": false
            },
            {
                "k": 153,
                "patch": "if (data[3000) {",
                "identical": false
            },
            {
                "k": 154,
                "patch": "if (data[3000) {",
                "identical": false
            },
            {
                "k": 155,
                "patch": "if (data.length % started) {",
                "identical": false
            },
            {
                "k": 156,
                "patch": "if (data.length % started) {",
                "identical": false
            },
            {
                "k": 157,
                "patch": "if (data[3render) {",
                "identical": false
            },
            {
                "k": 158,
                "patch": "if (data[3render) {",
                "identical": false
            },
            {
                "k": 159,
                "patch": "if (data[300, 0x04End) {",
                "identical": false
            },
            {
                "k": 160,
                "patch": "if (data[300, 0x04End) {",
                "identical": false
            },
            {
                "k": 161,
                "patch": "if (dataFormatR1_LAST) {",
                "identical": false
            },
            {
                "k": 162,
                "patch": "if (dataFormatR1_LAST) {",
                "identical": false
            },
            {
                "k": 163,
                "patch": "if (position) {",
                "identical": false
            },
            {
                "k": 164,
                "patch": "if (position) {",
                "identical": false
            },
            {
                "k": 165,
                "patch": "if (data.length > 3) {",
                "identical": false
            },
            {
                "k": 166,
                "patch": "if (data.length > 3) {",
                "identical": false
            },
            {
                "k": 167,
                "patch": "if (data[2].[2]. 2000) {",
                "identical": false
            },
            {
                "k": 168,
                "patch": "if (data[2].[2]. 2000) {",
                "identical": false
            },
            {
                "k": 169,
                "patch": "if (or.length) {",
                "identical": false
            },
            {
                "k": 170,
                "patch": "if (or.length) {",
                "identical": false
            },
            {
                "k": 171,
                "patch": "if (allowimeterimeterStart) {",
                "identical": false
            },
            {
                "k": 172,
                "patch": "if (allowimeterimeterStart) {",
                "identical": false
            },
            {
                "k": 173,
                "patch": "if (data[2].[2].length) {",
                "identical": false
            },
            {
                "k": 174,
                "patch": "if (data[2].[2].length) {",
                "identical": false
            },
            {
                "k": 175,
                "patch": "if (data[1) {",
                "identical": false
            },
            {
                "k": 176,
                "patch": "if (data[1) {",
                "identical": false
            },
            {
                "k": 177,
                "patch": "if (data[300, 0x00, 0x0020) {",
                "identical": false
            },
            {
                "k": 178,
                "patch": "if (data[300, 0x00, 0x0020) {",
                "identical": false
            },
            {
                "k": 179,
                "patch": "if (data[300, 0x06) {",
                "identical": false
            },
            {
                "k": 180,
                "patch": "if (data[300, 0x06) {",
                "identical": false
            },
            {
                "k": 181,
                "patch": "if (data[2].[2]. < data[3].length) {",
                "identical": false
            },
            {
                "k": 182,
                "patch": "if (data[2].[2]. < data[3].length) {",
                "identical": false
            },
            {
                "k": 183,
                "patch": "if (all) {",
                "identical": false
            },
            {
                "k": 184,
                "patch": "if (all) {",
                "identical": false
            },
            {
                "k": 185,
                "patch": "if (data[0].length > 24) {",
                "identical": false
            },
            {
                "k": 186,
                "patch": "if (data[0].length > 24) {",
                "identical": false
            },
            {
                "k": 187,
                "patch": "if (dataFormatReaders;",
                "identical": false
            },
            {
                "k": 188,
                "patch": "if (dataFormatReaders;",
                "identical": false
            },
            {
                "k": 189,
                "patch": "if (data[3 instanceof getEmpty) {",
                "identical": false
            },
            {
                "k": 190,
                "patch": "if (data[3 instanceof getEmpty) {",
                "identical": false
            },
            {
                "k": 191,
                "patch": "if (dataFormatR000) {",
                "identical": false
            },
            {
                "k": 192,
                "patch": "if (dataFormatR000) {",
                "identical": false
            },
            {
                "k": 193,
                "patch": "if (data[2] {",
                "identical": false
            },
            {
                "k": 194,
                "patch": "if (data[2] {",
                "identical": false
            },
            {
                "k": 195,
                "patch": "if (data[2) {",
                "identical": false
            },
            {
                "k": 196,
                "patch": "if (data[2) {",
                "identical": false
            },
            {
                "k": 197,
                "patch": "if (data[3AN_DELIM) {",
                "identical": false
            },
            {
                "k": 198,
                "patch": "if (data[3AN_DELIM) {",
                "identical": false
            },
            {
                "k": 199,
                "patch": "if (data[300, 5607) {",
                "identical": false
            },
            {
                "k": 200,
                "patch": "if (data[300, 5607) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignored.getIgnored();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignored.getIgnored();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignored.getIgnored;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignored.getIgnored;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = explicitorals.getIgnored;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = explicitorals.getIgnored;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored =capitalorals.getIgnored;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored =capitalorals.getIgnored;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = explicitorals.getIgnored();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = explicitorals.getIgnored();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignoredAny.getIgnored();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignoredAny.getIgnored();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = reasonorals.getIgnored;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = reasonorals.getIgnored;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = ignorals.getIgnored + ignoreAny;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = ignorals.getIgnored + ignoreAny;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignorals.getIgnored++) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignorals.getIgnored++) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = ignorals.getIgnored + 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = ignorals.getIgnored + 1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = anyAny.getIgnored();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = anyAny.getIgnored();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = reasonorals.getIgnored();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = reasonorals.getIgnored();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getIgnoredUTATED;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = ignorals.getIgnoredUTATED;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getIgnored<>(repairAny;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignorals.getIgnored<>(repairAny;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignorals.getIgnored<>(repairAny);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignorals.getIgnored<>(repairAny);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignorals.getIgnored DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignorals.getIgnored DEFAULT_LIST_DELIMITER;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = ignorals.getIgnored<>(modelName);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignorals.getIgnored<>(modelName);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignorals.getIgnored - 1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = ignorals.getIgnored - 1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored =capitalorals.getIgnored();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored =capitalorals.getIgnored();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored =Zorals.getIgnored;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored =Zorals.getIgnored;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getIgnored<>(repairAny)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignorals.getIgnored<>(repairAny)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignorals.getIgnored BET;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignorals.getIgnored BET;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.getIgnored + 1, ignorals;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = ignorals.getIgnored + 1, ignorals;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored =ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored =ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = georals.getIgnored;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = georals.getIgnored;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = Korals.getIgnored;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = Korals.getIgnored;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignorals.getIgnored<>(hasAny)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignorals.getIgnored<>(hasAny)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = ignorals.getIgnored DEFAULT_MESSAGE_PROPERTY_NAME;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = ignorals.getIgnored DEFAULT_MESSAGE_PROPERTY_NAME;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = }, ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = }, ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = getDescriptororals.getIgnored;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = getDescriptororals.getIgnored;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = includeorals.getIgnored;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = includeorals.getIgnored;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = ignorals.getIgnored+1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = ignorals.getIgnored+1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = ignorals.getIgnored<>(replaced_BINDINGS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = ignorals.getIgnored<>(replaced_BINDINGS_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored =DECorals.getIgnored;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored =DECorals.getIgnored;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = ignorals.getIgnoredError(ignoreAny);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ignorals.getIgnoredError(ignoreAny);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored =minuteorals.getIgnored;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored =minuteorals.getIgnored;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = parsedToals.getIgnored;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = parsedToals.getIgnored;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getIgnored ;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignorals.getIgnored ;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored =DSorals.getIgnored;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored =DSorals.getIgnored;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignoredAny.getIgnored;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = ignoredAny.getIgnored;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = ignorals.getIgnored<>(hasAny;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = ignorals.getIgnored<>(hasAny;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ABorals.getIgnored;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = ABorals.getIgnored;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignorals.getIgnored battery;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignorals.getIgnored battery;",
                "identical": false
            },
            {
                "k": 101,
                "patch": "ignored =OrUpdateorals.getIgnored;",
                "identical": false
            },
            {
                "k": 102,
                "patch": "ignored =OrUpdateorals.getIgnored;",
                "identical": false
            },
            {
                "k": 103,
                "patch": "ignored = }, ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 104,
                "patch": "ignored = }, ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 105,
                "patch": "ignored = ignorals.getIgnored<>(dayAny;",
                "identical": false
            },
            {
                "k": 106,
                "patch": "ignored = ignorals.getIgnored<>(dayAny;",
                "identical": false
            },
            {
                "k": 107,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 108,
                "patch": "ignored = NO_ARRAY_ELEMENT_SEPARATOR;",
                "identical": false
            },
            {
                "k": 109,
                "patch": "ignored = Snapshotorals.getIgnored;",
                "identical": false
            },
            {
                "k": 110,
                "patch": "ignored = Snapshotorals.getIgnored;",
                "identical": false
            },
            {
                "k": 111,
                "patch": "ignored = /=orals.getIgnored;",
                "identical": false
            },
            {
                "k": 112,
                "patch": "ignored = /=orals.getIgnored;",
                "identical": false
            },
            {
                "k": 113,
                "patch": "ignored = ignorals.getIgnored<>(ignorals)) {",
                "identical": false
            },
            {
                "k": 114,
                "patch": "ignored = ignorals.getIgnored<>(ignorals)) {",
                "identical": false
            },
            {
                "k": 115,
                "patch": "ignored = Multipartorals.getIgnored;",
                "identical": false
            },
            {
                "k": 116,
                "patch": "ignored = Multipartorals.getIgnored;",
                "identical": false
            },
            {
                "k": 117,
                "patch": "ignored = ignorals.getIgnored<>(includeAny);",
                "identical": false
            },
            {
                "k": 118,
                "patch": "ignored = ignorals.getIgnored<>(includeAny);",
                "identical": false
            },
            {
                "k": 119,
                "patch": "ignored = ignorals.getIgnored<>((), ignoreAny;",
                "identical": false
            },
            {
                "k": 120,
                "patch": "ignored = ignorals.getIgnored<>((), ignoreAny;",
                "identical": false
            },
            {
                "k": 121,
                "patch": "ignored = ignorals.getIgnored 12;",
                "identical": false
            },
            {
                "k": 122,
                "patch": "ignored = ignorals.getIgnored 12;",
                "identical": false
            },
            {
                "k": 123,
                "patch": "ignored = getAny.getIgnored();",
                "identical": false
            },
            {
                "k": 124,
                "patch": "ignored = getAny.getIgnored();",
                "identical": false
            },
            {
                "k": 125,
                "patch": "ignored = alreadyorals.getIgnored;",
                "identical": false
            },
            {
                "k": 126,
                "patch": "ignored = alreadyorals.getIgnored;",
                "identical": false
            },
            {
                "k": 127,
                "patch": "ignored = ignorals.getIgnored<>(replaced_MESSAGES_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 128,
                "patch": "ignored = ignorals.getIgnored<>(replaced_MESSAGES_PER_SEGMENT;",
                "identical": false
            },
            {
                "k": 129,
                "patch": "ignored = ignorals.getIgnored<>(successorals)) {",
                "identical": false
            },
            {
                "k": 130,
                "patch": "ignored = ignorals.getIgnored<>(successorals)) {",
                "identical": false
            },
            {
                "k": 131,
                "patch": "ignored = ignorals.getIgnored<>(ignored;",
                "identical": false
            },
            {
                "k": 132,
                "patch": "ignored = ignorals.getIgnored<>(ignored;",
                "identical": false
            },
            {
                "k": 133,
                "patch": "ignored = ignorals.getIgnored<>(includeAny)) {",
                "identical": false
            },
            {
                "k": 134,
                "patch": "ignored = ignorals.getIgnored<>(includeAny)) {",
                "identical": false
            },
            {
                "k": 135,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny)) {",
                "identical": false
            },
            {
                "k": 136,
                "patch": "ignored = ignorals.getIgnored<>(ignoreAny)) {",
                "identical": false
            },
            {
                "k": 137,
                "patch": "ignored =resentationorals.getIgnored;",
                "identical": false
            },
            {
                "k": 138,
                "patch": "ignored =resentationorals.getIgnored;",
                "identical": false
            },
            {
                "k": 139,
                "patch": "ignored = ignorals.getIgnored<>(repairAny, ignorals);",
                "identical": false
            },
            {
                "k": 140,
                "patch": "ignored = ignorals.getIgnored<>(repairAny, ignorals);",
                "identical": false
            },
            {
                "k": 141,
                "patch": "ignored = ignorals.getIgnoredVector();",
                "identical": false
            },
            {
                "k": 142,
                "patch": "ignored = ignorals.getIgnoredVector();",
                "identical": false
            },
            {
                "k": 143,
                "patch": "ignored = ignorals.getIgnored<>(replaced_LINE_MIME_TYPES)) {",
                "identical": false
            },
            {
                "k": 144,
                "patch": "ignored = ignorals.getIgnored<>(replaced_LINE_MIME_TYPES)) {",
                "identical": false
            },
            {
                "k": 145,
                "patch": "ignored = ignorals.getIgnored<>(ignAny;",
                "identical": false
            },
            {
                "k": 146,
                "patch": "ignored = ignorals.getIgnored<>(ignAny;",
                "identical": false
            },
            {
                "k": 147,
                "patch": "ignored = savedorals.getIgnored;",
                "identical": false
            },
            {
                "k": 148,
                "patch": "ignored = savedorals.getIgnored;",
                "identical": false
            },
            {
                "k": 149,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGURLENCODED;",
                "identical": false
            },
            {
                "k": 150,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGURLENCODED;",
                "identical": false
            },
            {
                "k": 151,
                "patch": "ignored = ignorals.getIgnored DEFAULT_AND_ELEVATION_KEY;",
                "identical": false
            },
            {
                "k": 152,
                "patch": "ignored = ignorals.getIgnored DEFAULT_AND_ELEVATION_KEY;",
                "identical": false
            },
            {
                "k": 153,
                "patch": "ignored =OrUpdateorals.getIgnored();",
                "identical": false
            },
            {
                "k": 154,
                "patch": "ignored =OrUpdateorals.getIgnored();",
                "identical": false
            },
            {
                "k": 155,
                "patch": "ignored = ignorals.getIgnored<>(includeAny;",
                "identical": false
            },
            {
                "k": 156,
                "patch": "ignored = ignorals.getIgnored<>(includeAny;",
                "identical": false
            },
            {
                "k": 157,
                "patch": "ignored = recursiveorals.getIgnored;",
                "identical": false
            },
            {
                "k": 158,
                "patch": "ignored = recursiveorals.getIgnored;",
                "identical": false
            },
            {
                "k": 159,
                "patch": "ignored =().orals.getIgnored;",
                "identical": false
            },
            {
                "k": 160,
                "patch": "ignored =().orals.getIgnored;",
                "identical": false
            },
            {
                "k": 161,
                "patch": "ignored = ignorals.getIgnored + 1).orals;",
                "identical": false
            },
            {
                "k": 162,
                "patch": "ignored = ignorals.getIgnored + 1).orals;",
                "identical": false
            },
            {
                "k": 163,
                "patch": "ignored = ignorals.getIgnored<>(mimeType)) {",
                "identical": false
            },
            {
                "k": 164,
                "patch": "ignored = ignorals.getIgnored<>(mimeType)) {",
                "identical": false
            },
            {
                "k": 165,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals)) {",
                "identical": false
            },
            {
                "k": 166,
                "patch": "ignored = ignorals.getIgnored<>((), ignorals)) {",
                "identical": false
            },
            {
                "k": 167,
                "patch": "ignored = ignorals.getIgnored<>(replaced_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 168,
                "patch": "ignored = ignorals.getIgnored<>(replaced_PARAM_NAME;",
                "identical": false
            },
            {
                "k": 169,
                "patch": "ignored = hasMoreorals.getIgnored;",
                "identical": false
            },
            {
                "k": 170,
                "patch": "ignored = hasMoreorals.getIgnored;",
                "identical": false
            },
            {
                "k": 171,
                "patch": "ignored = explorals.getIgnored;",
                "identical": false
            },
            {
                "k": 172,
                "patch": "ignored = explorals.getIgnored;",
                "identical": false
            },
            {
                "k": 173,
                "patch": "ignored = ignorals.getIgnored<>(updateAny;",
                "identical": false
            },
            {
                "k": 174,
                "patch": "ignored = ignorals.getIgnored<>(updateAny;",
                "identical": false
            },
            {
                "k": 175,
                "patch": "ignored = NOorals.getIgnored;",
                "identical": false
            },
            {
                "k": 176,
                "patch": "ignored = NOorals.getIgnored;",
                "identical": false
            },
            {
                "k": 177,
                "patch": "ignored =ESorals.getIgnored;",
                "identical": false
            },
            {
                "k": 178,
                "patch": "ignored =ESorals.getIgnored;",
                "identical": false
            },
            {
                "k": 179,
                "patch": "ignored = ignorals.getIgnored {",
                "identical": false
            },
            {
                "k": 180,
                "patch": "ignored = ignorals.getIgnored {",
                "identical": false
            },
            {
                "k": 181,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGURER_EVENT_PROCESSOR_INFO;",
                "identical": false
            },
            {
                "k": 182,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGURER_EVENT_PROCESSOR_INFO;",
                "identical": false
            },
            {
                "k": 183,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGS;",
                "identical": false
            },
            {
                "k": 184,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGS;",
                "identical": false
            },
            {
                "k": 185,
                "patch": "ignored = ignorals.getIgnored endpoint;",
                "identical": false
            },
            {
                "k": 186,
                "patch": "ignored = ignorals.getIgnored endpoint;",
                "identical": false
            },
            {
                "k": 187,
                "patch": "ignored = ignorals.getIgnored<>(replaced_LINE_MIME_TYPES;",
                "identical": false
            },
            {
                "k": 188,
                "patch": "ignored = ignorals.getIgnored<>(replaced_LINE_MIME_TYPES;",
                "identical": false
            },
            {
                "k": 189,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGURER_EVENT_PROCESSORDS;",
                "identical": false
            },
            {
                "k": 190,
                "patch": "ignored = ignorals.getIgnoredCANCE_CONFIGURER_EVENT_PROCESSORDS;",
                "identical": false
            },
            {
                "k": 191,
                "patch": "ignored = ignorals.getIgnored<>(replaced_LINE_FOR_MIME_TYPES)) {",
                "identical": false
            },
            {
                "k": 192,
                "patch": "ignored = ignorals.getIgnored<>(replaced_LINE_FOR_MIME_TYPES)) {",
                "identical": false
            },
            {
                "k": 193,
                "patch": "ignored = ignorals.getIgnored<>(replaced_BINDINGS_PER_NOT_IMPLEMENTED);",
                "identical": false
            },
            {
                "k": 194,
                "patch": "ignored = ignorals.getIgnored<>(replaced_BINDINGS_PER_NOT_IMPLEMENTED);",
                "identical": false
            },
            {
                "k": 195,
                "patch": "ignored =AttributeNameorals.getIgnored;",
                "identical": false
            },
            {
                "k": 196,
                "patch": "ignored =AttributeNameorals.getIgnored;",
                "identical": false
            },
            {
                "k": 197,
                "patch": "ignored = errorMessageorals.getIgnored;",
                "identical": false
            },
            {
                "k": 198,
                "patch": "ignored = errorMessageorals.getIgnored;",
                "identical": false
            },
            {
                "k": 199,
                "patch": "ignored =EQUALorals.getIgnored;",
                "identical": false
            },
            {
                "k": 200,
                "patch": "ignored =EQUALorals.getIgnored;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\"x+),\") + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\"x+),\") + 1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\"x+2, prop);",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\"x+2, prop);",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\"x+),\") - 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\"x+),\") - 1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\"x+2, include;",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\"x+2, include;",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".number(\"x+2]\", NR_BIGINT;",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\"x+2]\", NR_BIGINT;",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\"x+),\");",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\"x+),\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".number(\"x+2,\") + 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\"x+2,\") + 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\"x+\", NR_BIGINT;",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\"x+\", NR_BIGINT;",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"x+2]\", NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"x+2]\", NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\"x+2, 2 value value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\"x+2, 2 value value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\"x+2, 2;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"x+2, 2;",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\"x+2, 2 value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\"x+2, 2 value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\"x+2]' // NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\"x+2]' // NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\"x+2, 212);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"x+2, 212);",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\"x+2, NR_BIGINT;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\"x+2, NR_BIGINT;",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\"x+\", NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"x+\", NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\"x+2, 2Authenticated",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\"x+2, 2Authenticated",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\"x+2, 2});",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\"x+2, 2});",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\"x+2]",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\"x+2]",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\"x+2, 2FLOW;",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\"x+2, 2FLOW;",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"x+2, include = R;",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"x+2, include = R;",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\"x+2, 2Authenticated;",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\"x+2, 2Authenticated;",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\"x+2, include + 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"x+2, include + 1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\"x+2]\", NR_FLOAT;",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\"x+2]\", NR_FLOAT;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\"x+2, 2TEXT;",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\"x+2, 2TEXT;",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\"x+2, len;",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\"x+2, len;",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\"x+2, _numberLong;",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\"x+2, _numberLong;",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\"x+2, 290;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\"x+2, 290;",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\"x+ '-'\") + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".number(\"x+ '-'\") + 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\"x+\"]\") + 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\"x+\"]\") + 1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\"x+relationship\") - 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\"x+relationship\") - 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\"x+2, 23) + 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\"x+2, 23) + 1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\"x+2, 2 value value & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"x+2, 2 value value & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\"x+2, 2 value value;",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\"x+2, 2 value value;",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\"x+2]' // NR_BIGDECIMAL().group(1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\"x+2]' // NR_BIGDECIMAL().group(1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\"x+2, 2 END_VALUE;",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\"x+2, 2 END_VALUE;",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\"x+2, NR_OF_WEEK;",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\"x+2, NR_OF_WEEK;",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\"x+2, 2UTE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".number(\"x+2, 2UTE;",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\"x+2, NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\"x+2, NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\"x+2, selection;",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\"x+2, selection;",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\"x+2, 2 -> 6;",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\"x+2, 2 -> 6;",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".number(\"x+2, 2 value & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\"x+2, 2 value & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\"x+2, 2 value value & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\"x+2, 2 value value & NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\"x+2]' // NR_BIGINT;",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\"x+2]' // NR_BIGINT;",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\"x+2, 6;",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\"x+2, 6;",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\"x+2]\", NR_BIGNEG);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\"x+2]\", NR_BIGNEG);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\"x+2, 212;",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"x+2, 212;",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\"x+2, 2Authenticated byte 0x NR_BIGINT;",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\"x+2, 2Authenticated byte 0x NR_BIGINT;",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\"x+2, 2 value & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\"x+2, 2 value & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\"x+2, 2 END_ & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\"x+2, 2 END_ & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 101,
                "patch": ".number(\"x+block;",
                "identical": false
            },
            {
                "k": 102,
                "patch": ".number(\"x+block;",
                "identical": false
            },
            {
                "k": 103,
                "patch": ".number(\"x+2, 2 value value value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 104,
                "patch": ".number(\"x+2, 2 value value value & NR_BIGINT;",
                "identical": false
            },
            {
                "k": 105,
                "patch": ".number(\"x+2, NR_BIGDECIMAL().group(1);",
                "identical": false
            },
            {
                "k": 106,
                "patch": ".number(\"x+2, NR_BIGDECIMAL().group(1);",
                "identical": false
            },
            {
                "k": 107,
                "patch": ".number(\"x+2]\", NR_BIGINT);",
                "identical": false
            },
            {
                "k": 108,
                "patch": ".number(\"x+2]\", NR_BIGINT);",
                "identical": false
            },
            {
                "k": 109,
                "patch": ".number(\"x+2, 2nr;",
                "identical": false
            },
            {
                "k": 110,
                "patch": ".number(\"x+2, 2nr;",
                "identical": false
            },
            {
                "k": 111,
                "patch": ".number(\"x+2, 2 all;",
                "identical": false
            },
            {
                "k": 112,
                "patch": ".number(\"x+2, 2 all;",
                "identical": false
            },
            {
                "k": 113,
                "patch": ".number(\"x+2, 2 - 1;",
                "identical": false
            },
            {
                "k": 114,
                "patch": ".number(\"x+2, 2 - 1;",
                "identical": false
            },
            {
                "k": 115,
                "patch": ".number(\"x+2, NR_UNKNOWN);",
                "identical": false
            },
            {
                "k": 116,
                "patch": ".number(\"x+2, NR_UNKNOWN);",
                "identical": false
            },
            {
                "k": 117,
                "patch": ".number(\"x+2, 2 dateFormat;",
                "identical": false
            },
            {
                "k": 118,
                "patch": ".number(\"x+2, 2 dateFormat;",
                "identical": false
            },
            {
                "k": 119,
                "patch": ".number(\"x+2, 2navigation;",
                "identical": false
            },
            {
                "k": 120,
                "patch": ".number(\"x+2, 2navigation;",
                "identical": false
            },
            {
                "k": 121,
                "patch": ".number(\"x+2, 2 value value & NR_OF_WEEK;",
                "identical": false
            },
            {
                "k": 122,
                "patch": ".number(\"x+2, 2 value value & NR_OF_WEEK;",
                "identical": false
            },
            {
                "k": 123,
                "patch": ".number(\"x+2, 2FLOAT;",
                "identical": false
            },
            {
                "k": 124,
                "patch": ".number(\"x+2, 2FLOAT;",
                "identical": false
            },
            {
                "k": 125,
                "patch": ".number(\"x+2]' // NR_BIGINT, 212);",
                "identical": false
            },
            {
                "k": 126,
                "patch": ".number(\"x+2]' // NR_BIGINT, 212);",
                "identical": false
            },
            {
                "k": 127,
                "patch": ".number(\"x+2, 2OID;",
                "identical": false
            },
            {
                "k": 128,
                "patch": ".number(\"x+2, 2OID;",
                "identical": false
            },
            {
                "k": 129,
                "patch": ".number(\"x+2, - 9;",
                "identical": false
            },
            {
                "k": 130,
                "patch": ".number(\"x+2, - 9;",
                "identical": false
            },
            {
                "k": 131,
                "patch": ".number(\"x+\", battery;",
                "identical": false
            },
            {
                "k": 132,
                "patch": ".number(\"x+\", battery;",
                "identical": false
            },
            {
                "k": 133,
                "patch": ".number(\"x+),\") + 10;",
                "identical": false
            },
            {
                "k": 134,
                "patch": ".number(\"x+),\") + 10;",
                "identical": false
            },
            {
                "k": 135,
                "patch": ".number(\"x+2, 2 translate);",
                "identical": false
            },
            {
                "k": 136,
                "patch": ".number(\"x+2, 2 translate);",
                "identical": false
            },
            {
                "k": 137,
                "patch": ".number(\"x+2, 2Helper);",
                "identical": false
            },
            {
                "k": 138,
                "patch": ".number(\"x+2, 2Helper);",
                "identical": false
            },
            {
                "k": 139,
                "patch": ".number(\"x+2, 2Authenticated byte 0x00;",
                "identical": false
            },
            {
                "k": 140,
                "patch": ".number(\"x+2, 2Authenticated byte 0x00;",
                "identical": false
            },
            {
                "k": 141,
                "patch": ".number(\"x+2, 2Helper;",
                "identical": false
            },
            {
                "k": 142,
                "patch": ".number(\"x+2, 2Helper;",
                "identical": false
            },
            {
                "k": 143,
                "patch": ".number(\"x+), superClass - 1;",
                "identical": false
            },
            {
                "k": 144,
                "patch": ".number(\"x+), superClass - 1;",
                "identical": false
            },
            {
                "k": 145,
                "patch": ".number(\"x+2, 2 value & NR_OF_WEEK;",
                "identical": false
            },
            {
                "k": 146,
                "patch": ".number(\"x+2, 2 value & NR_OF_WEEK;",
                "identical": false
            },
            {
                "k": 147,
                "patch": ".number(\"x+2, 2Converter;",
                "identical": false
            },
            {
                "k": 148,
                "patch": ".number(\"x+2, 2Converter;",
                "identical": false
            },
            {
                "k": 149,
                "patch": ".number(\"x+2, 2 STYLE;",
                "identical": false
            },
            {
                "k": 150,
                "patch": ".number(\"x+2, 2 STYLE;",
                "identical": false
            },
            {
                "k": 151,
                "patch": ".number(\"x+2, NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 152,
                "patch": ".number(\"x+2, NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 153,
                "patch": ".number(\"x+),\") || || & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 154,
                "patch": ".number(\"x+),\") || || & NR_FLOAT;",
                "identical": false
            },
            {
                "k": 155,
                "patch": ".number(\"x+2, prop+0000;",
                "identical": false
            },
            {
                "k": 156,
                "patch": ".number(\"x+2, prop+0000;",
                "identical": false
            },
            {
                "k": 157,
                "patch": ".number(\"x+2, NR_FLOAT;",
                "identical": false
            },
            {
                "k": 158,
                "patch": ".number(\"x+2, NR_FLOAT;",
                "identical": false
            },
            {
                "k": 159,
                "patch": ".number(\"x+3, 6;",
                "identical": false
            },
            {
                "k": 160,
                "patch": ".number(\"x+3, 6;",
                "identical": false
            },
            {
                "k": 161,
                "patch": ".number(\"x+), uuid;",
                "identical": false
            },
            {
                "k": 162,
                "patch": ".number(\"x+), uuid;",
                "identical": false
            },
            {
                "k": 163,
                "patch": ".number(\"x+2, 2 value & NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 164,
                "patch": ".number(\"x+2, 2 value & NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 165,
                "patch": ".number(\"x+2, 2 abort;",
                "identical": false
            },
            {
                "k": 166,
                "patch": ".number(\"x+2, 2 abort;",
                "identical": false
            },
            {
                "k": 167,
                "patch": ".number(\"x+2, 2 value;",
                "identical": false
            },
            {
                "k": 168,
                "patch": ".number(\"x+2, 2 value;",
                "identical": false
            },
            {
                "k": 169,
                "patch": ".number(\"x+2, NR_OF_WEEKWEEK;",
                "identical": false
            },
            {
                "k": 170,
                "patch": ".number(\"x+2, NR_OF_WEEKWEEK;",
                "identical": false
            },
            {
                "k": 171,
                "patch": ".number(\"x+2, 2Helper",
                "identical": false
            },
            {
                "k": 172,
                "patch": ".number(\"x+2, 2Helper",
                "identical": false
            },
            {
                "k": 173,
                "patch": ".number(\"x+2, len - 5;",
                "identical": false
            },
            {
                "k": 174,
                "patch": ".number(\"x+2, len - 5;",
                "identical": false
            },
            {
                "k": 175,
                "patch": ".number(\"x+2, 2 widget",
                "identical": false
            },
            {
                "k": 176,
                "patch": ".number(\"x+2, 2 widget",
                "identical": false
            },
            {
                "k": 177,
                "patch": ".number(\"x+2, 2 value & 0x00;",
                "identical": false
            },
            {
                "k": 178,
                "patch": ".number(\"x+2, 2 value & 0x00;",
                "identical": false
            },
            {
                "k": 179,
                "patch": ".number(\"x+2, include = battery;",
                "identical": false
            },
            {
                "k": 180,
                "patch": ".number(\"x+2, include = battery;",
                "identical": false
            },
            {
                "k": 181,
                "patch": ".number(\"x+2, 2 value value & NR_UNKNOWN;",
                "identical": false
            },
            {
                "k": 182,
                "patch": ".number(\"x+2, 2 value value & NR_UNKNOWN;",
                "identical": false
            },
            {
                "k": 183,
                "patch": ".number(\"x+2, 2TEXT + 1;",
                "identical": false
            },
            {
                "k": 184,
                "patch": ".number(\"x+2, 2TEXT + 1;",
                "identical": false
            },
            {
                "k": 185,
                "patch": ".number(\"x+2, 2 value value value;",
                "identical": false
            },
            {
                "k": 186,
                "patch": ".number(\"x+2, 2 value value value;",
                "identical": false
            },
            {
                "k": 187,
                "patch": ".number(\"x+2, pgStart;",
                "identical": false
            },
            {
                "k": 188,
                "patch": ".number(\"x+2, pgStart;",
                "identical": false
            },
            {
                "k": 189,
                "patch": ".number(\"x+2]\", NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 190,
                "patch": ".number(\"x+2]\", NR_BIGDECIMAL;",
                "identical": false
            },
            {
                "k": 191,
                "patch": ".number(\"x+2, user & 0x3\");",
                "identical": false
            },
            {
                "k": 192,
                "patch": ".number(\"x+2, user & 0x3\");",
                "identical": false
            },
            {
                "k": 193,
                "patch": ".number(\"x+\") + 1;",
                "identical": false
            },
            {
                "k": 194,
                "patch": ".number(\"x+\") + 1;",
                "identical": false
            },
            {
                "k": 195,
                "patch": ".number(\"x+2, 2 value value & NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 196,
                "patch": ".number(\"x+2, 2 value value & NR_BIGDECIMAL);",
                "identical": false
            },
            {
                "k": 197,
                "patch": ".number(\"x+2, NR_OF_NAMES;",
                "identical": false
            },
            {
                "k": 198,
                "patch": ".number(\"x+2, NR_OF_NAMES;",
                "identical": false
            },
            {
                "k": 199,
                "patch": ".number(\"x+2, _numberFloat",
                "identical": false
            },
            {
                "k": 200,
                "patch": ".number(\"x+2, _numberFloat",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\")                     // power",
        "fixed_line": ".number(\"(x+)?,\")                    // power"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return BlobId.of(uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return BlobId.of(uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return BlobId.of(this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return BlobId.of(this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return BlobId.of(this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return BlobId.of(this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return BlobId.of(uri.getHost(), uri.this.uri);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return BlobId.of(uri.getHost(), uri.this.uri);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostAmount;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostAmount;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return BlobId.of(uri.getHost \"this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return BlobId.of(uri.getHost \"this.uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return BlobId.of(uri.getHost(), this.uri);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return BlobId.of(uri.getHost(), this.uri);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHost;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostHost;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostHost;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return BlobId.of(uri.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return BlobId.of(uri.getHost(), uri.length;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return BlobId.of(uri.getHost(), UTF8_ENCODING);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return BlobId.of(uri.getHost(), uri) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return BlobId.of(uri.getHost(), uri) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return BlobId.of(uri.getHost(), uri) + 1);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return BlobId.of(uri.getHost;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return BlobId.of(uri.getHost;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost2;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost2;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHost);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHost);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostExecutor;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostExecutor;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return BlobId.of(uri.getHost != uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return BlobId.of(uri.getHost != uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostBackFromPath);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostBackFromPath);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostplet",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostplet",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return BlobId.of(uri.getHost \"uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return BlobId.of(uri.getHost \"uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostSpeedInPath;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostSpeedInPath;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostInPath;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostInPath;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost << 1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost << 1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostServerId;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostServerId;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return BlobId.of(uri.getHost = uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return BlobId.of(uri.getHost = uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return BlobId.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostValue;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostValue;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost) + 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost) + 1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return BlobId.of(uri.getHostHost(), uri);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return BlobId.of(uri.getHostHost(), uri);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return BlobId.of(uri.getHost \"this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return BlobId.of(uri.getHost \"this.uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostSpeedInPath);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostSpeedInPath);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost = uri;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost = uri;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return BlobId.of(uri.getHost , uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return BlobId.of(uri.getHost , uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostRequest;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostRequest;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return BlobId.of(uri.getHost(), uri.thisthis.uri);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return BlobId.of(uri.getHost(), uri.thisthis.uri);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return BlobId.of(uri.getHost(), uri = BlobId;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return BlobId.of(uri.getHost(), uri = BlobId;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return BlobId.of(uri.getHostbuttonPath, uri);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return BlobId.of(uri.getHostbuttonPath, uri);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostInPath);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostInPath);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost executor",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost executor",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostfm;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostfm;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return BlobId.of(uri.getHost = uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return BlobId.of(uri.getHost = uri.getHost(), uri;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return BlobId.of(uri.getHost(), uri.EXPRESSION;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return BlobId.of(uri.getHost(), uri.EXPRESSION;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostBackFromPath;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostBackFromPath;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostName);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostName);",
                "identical": false
            },
            {
                "k": 101,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostServerId);",
                "identical": false
            },
            {
                "k": 102,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostServerId);",
                "identical": false
            },
            {
                "k": 103,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost long uri);",
                "identical": false
            },
            {
                "k": 104,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost long uri);",
                "identical": false
            },
            {
                "k": 105,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost long uri;",
                "identical": false
            },
            {
                "k": 106,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost long uri;",
                "identical": false
            },
            {
                "k": 107,
                "patch": "return BlobId.of(uri.getHost(), uri.nodes;",
                "identical": false
            },
            {
                "k": 108,
                "patch": "return BlobId.of(uri.getHost(), uri.nodes;",
                "identical": false
            },
            {
                "k": 109,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost fragment;",
                "identical": false
            },
            {
                "k": 110,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost fragment;",
                "identical": false
            },
            {
                "k": 111,
                "patch": "return BlobId.of(uri.getHost(), uri)InPath;",
                "identical": false
            },
            {
                "k": 112,
                "patch": "return BlobId.of(uri.getHost(), uri)InPath;",
                "identical": false
            },
            {
                "k": 113,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostUTATED;",
                "identical": false
            },
            {
                "k": 114,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostUTATED;",
                "identical": false
            },
            {
                "k": 115,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost};",
                "identical": false
            },
            {
                "k": 116,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost};",
                "identical": false
            },
            {
                "k": 117,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost != uri.getHost;",
                "identical": false
            },
            {
                "k": 118,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost != uri.getHost;",
                "identical": false
            },
            {
                "k": 119,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostHost);",
                "identical": false
            },
            {
                "k": 120,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostHost);",
                "identical": false
            },
            {
                "k": 121,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost fragmentName);",
                "identical": false
            },
            {
                "k": 122,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost fragmentName);",
                "identical": false
            },
            {
                "k": 123,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostSpeedInKilo);",
                "identical": false
            },
            {
                "k": 124,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostSpeedInKilo);",
                "identical": false
            },
            {
                "k": 125,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost != uri.this.uri);",
                "identical": false
            },
            {
                "k": 126,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost != uri.this.uri);",
                "identical": false
            },
            {
                "k": 127,
                "patch": "return BlobId.of(uri.getHost);",
                "identical": false
            },
            {
                "k": 128,
                "patch": "return BlobId.of(uri.getHost);",
                "identical": false
            },
            {
                "k": 129,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostInKilo);",
                "identical": false
            },
            {
                "k": 130,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostInKilo);",
                "identical": false
            },
            {
                "k": 131,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost fragmentName;",
                "identical": false
            },
            {
                "k": 132,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost fragmentName;",
                "identical": false
            },
            {
                "k": 133,
                "patch": "return BlobId.of(uri.getHost(), uri.wsdlLocation);",
                "identical": false
            },
            {
                "k": 134,
                "patch": "return BlobId.of(uri.getHost(), uri.wsdlLocation);",
                "identical": false
            },
            {
                "k": 135,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostNumber;",
                "identical": false
            },
            {
                "k": 136,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostNumber;",
                "identical": false
            },
            {
                "k": 137,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost paddingId);",
                "identical": false
            },
            {
                "k": 138,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost paddingId);",
                "identical": false
            },
            {
                "k": 139,
                "patch": "return BlobId.of(uri.getHost(), uri.UTF_8;",
                "identical": false
            },
            {
                "k": 140,
                "patch": "return BlobId.of(uri.getHost(), uri.UTF_8;",
                "identical": false
            },
            {
                "k": 141,
                "patch": "return BlobId.of(uri.getHost(), uri.\".length;",
                "identical": false
            },
            {
                "k": 142,
                "patch": "return BlobId.of(uri.getHost(), uri.\".length;",
                "identical": false
            },
            {
                "k": 143,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost here;",
                "identical": false
            },
            {
                "k": 144,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost here;",
                "identical": false
            },
            {
                "k": 145,
                "patch": "return BlobId.of(uri.getHost(), uri*\");",
                "identical": false
            },
            {
                "k": 146,
                "patch": "return BlobId.of(uri.getHost(), uri*\");",
                "identical": false
            },
            {
                "k": 147,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost(), this.uri);",
                "identical": false
            },
            {
                "k": 148,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost(), this.uri);",
                "identical": false
            },
            {
                "k": 149,
                "patch": "return BlobId.of(uri.getHost(), uri.wsdlId;",
                "identical": false
            },
            {
                "k": 150,
                "patch": "return BlobId.of(uri.getHost(), uri.wsdlId;",
                "identical": false
            },
            {
                "k": 151,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHostAmount;",
                "identical": false
            },
            {
                "k": 152,
                "patch": "return BlobId.of(this.uri.getHost(), uri.getHostAmount;",
                "identical": false
            },
            {
                "k": 153,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost path;",
                "identical": false
            },
            {
                "k": 154,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost path;",
                "identical": false
            },
            {
                "k": 155,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostResponseLength);",
                "identical": false
            },
            {
                "k": 156,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostResponseLength);",
                "identical": false
            },
            {
                "k": 157,
                "patch": "return BlobId.of(uri.getHost(), uri.length);",
                "identical": false
            },
            {
                "k": 158,
                "patch": "return BlobId.of(uri.getHost(), uri.length);",
                "identical": false
            },
            {
                "k": 159,
                "patch": "return BlobId.of(uri.getHostNumber_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 160,
                "patch": "return BlobId.of(uri.getHostNumber_RESERVED_WORD;",
                "identical": false
            },
            {
                "k": 161,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostade;",
                "identical": false
            },
            {
                "k": 162,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostade;",
                "identical": false
            },
            {
                "k": 163,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost0);",
                "identical": false
            },
            {
                "k": 164,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost0);",
                "identical": false
            },
            {
                "k": 165,
                "patch": "return BlobId.of(uri.getHost(), uri.uri);",
                "identical": false
            },
            {
                "k": 166,
                "patch": "return BlobId.of(uri.getHost(), uri.uri);",
                "identical": false
            },
            {
                "k": 167,
                "patch": "return BlobId.of(uri.getHost , uri);",
                "identical": false
            },
            {
                "k": 168,
                "patch": "return BlobId.of(uri.getHost , uri);",
                "identical": false
            },
            {
                "k": 169,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost paddingId;",
                "identical": false
            },
            {
                "k": 170,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost paddingId;",
                "identical": false
            },
            {
                "k": 171,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostINSTANCE);",
                "identical": false
            },
            {
                "k": 172,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostINSTANCE);",
                "identical": false
            },
            {
                "k": 173,
                "patch": "return BlobId.of(uri.getHost determine_URI, uri);",
                "identical": false
            },
            {
                "k": 174,
                "patch": "return BlobId.of(uri.getHost determine_URI, uri);",
                "identical": false
            },
            {
                "k": 175,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost 256;",
                "identical": false
            },
            {
                "k": 176,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost 256;",
                "identical": false
            },
            {
                "k": 177,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostThreshold;",
                "identical": false
            },
            {
                "k": 178,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostThreshold;",
                "identical": false
            },
            {
                "k": 179,
                "patch": "return BlobId.of(this.uri.getHost(), uri) {",
                "identical": false
            },
            {
                "k": 180,
                "patch": "return BlobId.of(this.uri.getHost(), uri) {",
                "identical": false
            },
            {
                "k": 181,
                "patch": "return BlobId.of(uri.getHostcontinPath, uri);",
                "identical": false
            },
            {
                "k": 182,
                "patch": "return BlobId.of(uri.getHostcontinPath, uri);",
                "identical": false
            },
            {
                "k": 183,
                "patch": "return BlobId.of(this.uri.getHost(), uri) + 1;",
                "identical": false
            },
            {
                "k": 184,
                "patch": "return BlobId.of(this.uri.getHost(), uri) + 1;",
                "identical": false
            },
            {
                "k": 185,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostName;",
                "identical": false
            },
            {
                "k": 186,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostName;",
                "identical": false
            },
            {
                "k": 187,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostTranslateId;",
                "identical": false
            },
            {
                "k": 188,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostTranslateId;",
                "identical": false
            },
            {
                "k": 189,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost+,Id;",
                "identical": false
            },
            {
                "k": 190,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost+,Id;",
                "identical": false
            },
            {
                "k": 191,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostScopes;",
                "identical": false
            },
            {
                "k": 192,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostScopes;",
                "identical": false
            },
            {
                "k": 193,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostStyleClass;",
                "identical": false
            },
            {
                "k": 194,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostStyleClass;",
                "identical": false
            },
            {
                "k": 195,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostMarkedIgnoredId);",
                "identical": false
            },
            {
                "k": 196,
                "patch": "return BlobId.of(uri.getHost(), uri.getHostMarkedIgnoredId);",
                "identical": false
            },
            {
                "k": 197,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost bytes;",
                "identical": false
            },
            {
                "k": 198,
                "patch": "return BlobId.of(uri.getHost(), uri.getHost bytes;",
                "identical": false
            },
            {
                "k": 199,
                "patch": "return BlobId.of(uri.getHost(), uri.this.uri;",
                "identical": false
            },
            {
                "k": 200,
                "patch": "return BlobId.of(uri.getHost(), uri.this.uri;",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "paintComponent(speedAngle;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "paintComponent(speedAngle;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "paintComponent(speedAngle);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "paintComponent(speedAngle);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "paintComponent.getGraphics());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "paintComponent.getGraphics());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "paintComponentContext.getGraphics());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "paintComponentContext.getGraphics());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "paintComponentContext.getGraphics;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "paintComponentContext.getGraphics;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "paintComponent swaggerType.PedalPosition;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "paintComponent swaggerType.PedalPosition;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "paintComponent =speedAngle;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "paintComponent =speedAngle;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "paintComponentContext.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "paintComponentContext.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "paintComponent.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "paintComponent.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "paintComponentContext.getGraphicsrangePedalPosition;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "paintComponentContext.getGraphicsrangePedalPosition;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "paintComponentContext.getGraphicsctorInPedalPosition;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "paintComponentContext.getGraphicsctorInPedalPosition;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "paintComponentContext.getGraphics {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "paintComponentContext.getGraphics {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "paintComponentContext.getGraphicsicPedalPosition;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "paintComponentContext.getGraphicsicPedalPosition;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "paintComponentContext =speedAngle;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "paintComponentContext =speedAngle;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "paintComponent.getGraphics;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "paintComponent.getGraphics;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "paintComponent(speedAngle, fileAngle);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "paintComponent(speedAngle, fileAngle);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "paintComponent.getGraphicsrangePedalPosition;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "paintComponent.getGraphicsrangePedalPosition;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "paintComponentContext.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "paintComponentContext.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "paintComponent splitPedalPosition.getGraphicsInPedalPosition;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "paintComponent splitPedalPosition.getGraphicsInPedalPosition;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "paintComponentPed.getGraphics;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "paintComponentPed.getGraphics;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "paintComponentContext.getGraphicsctorPedalPosition;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "paintComponentContext.getGraphicsctorPedalPosition;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "paintComponentContext.getGraphics2PedalPosition;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "paintComponentContext.getGraphics2PedalPosition;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "paintComponent splitPedalPosition.getGraphicspropertyInPedalPosition;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "paintComponent splitPedalPosition.getGraphicspropertyInPedalPosition;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "paintComponentContext.getGraphics() {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "paintComponentContext.getGraphics() {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "paintComponent splitPedalPosition.getGraphics;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "paintComponent splitPedalPosition.getGraphics;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "paintComponent upper upper.getGraphics());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "paintComponent upper upper.getGraphics());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "paintComponentPed)speedAngle;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "paintComponentPed)speedAngle;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "paintComponentContext.getGraphics fieldpm =speedAngle;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "paintComponentContext.getGraphics fieldpm =speedAngle;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "paintComponentContext.getGraphics fieldpmInPedalPosition;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "paintComponentContext.getGraphics fieldpmInPedalPosition;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "paintComponent splitPedalPosition.getGraphicsTypesInPedalPosition;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "paintComponent splitPedalPosition.getGraphicsTypesInPedalPosition;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "paintComponent splitPedalPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "paintComponent splitPedalPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "paintComponentSetgetGraphics;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "paintComponentSetgetGraphics;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "paintComponentContext.getGraphicsHERITPedalPosition;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "paintComponentContext.getGraphicsHERITPedalPosition;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "paintComponent.getGraphics {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "paintComponent.getGraphics {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "paintComponent.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "paintComponent.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "paintComponentRoutegetGraphics;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "paintComponentRoutegetGraphics;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "paintComponent(speedAngle, fileAngle;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "paintComponent(speedAngle, fileAngle;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "paintComponentPedalPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "paintComponentPedalPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "paintComponent.getGraphics fieldpm =speedAngle;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "paintComponent.getGraphics fieldpm =speedAngle;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "paintComponentPed.getGraphicsTypesInPedalPosition;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "paintComponentPed.getGraphicsTypesInPedalPosition;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "paintComponentPedalPosition.getGraphics;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "paintComponentPedalPosition.getGraphics;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "paintComponentContext.getGraphicsctor =speedAngle;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "paintComponentContext.getGraphicsctor =speedAngle;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "paintComponentManager.getGraphics());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "paintComponentManager.getGraphics());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "paintComponent upper upper =speedAngle;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "paintComponent upper upper =speedAngle;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "paintComponent(speedAngle.getGraphics;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "paintComponent(speedAngle.getGraphics;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "paintComponent swaggerType.PedalPositions;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "paintComponent swaggerType.PedalPositions;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "paintComponentContext.getGraphicsmodel)speedAngle;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "paintComponentContext.getGraphicsmodel)speedAngle;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "paintComponent splitPedalPosition.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "paintComponent splitPedalPosition.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "paintComponent splitPedalPosition.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "paintComponent splitPedalPosition.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "paintComponent this.speedAngle;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "paintComponent this.speedAngle;",
                "identical": false
            },
            {
                "k": 101,
                "patch": "paintComponentContext.getGraphicsCompletable |speedAngle;",
                "identical": false
            },
            {
                "k": 102,
                "patch": "paintComponentContext.getGraphicsCompletable |speedAngle;",
                "identical": false
            },
            {
                "k": 103,
                "patch": "paintComponent swaggerType.PedalPosition(2);",
                "identical": false
            },
            {
                "k": 104,
                "patch": "paintComponent swaggerType.PedalPosition(2);",
                "identical": false
            },
            {
                "k": 105,
                "patch": "paintComponent splitPedalPosition.getGraphicspropertyInPedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 106,
                "patch": "paintComponent splitPedalPosition.getGraphicspropertyInPedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 107,
                "patch": "paintComponent splitPedalPosition.getGraphics {",
                "identical": false
            },
            {
                "k": 108,
                "patch": "paintComponent splitPedalPosition.getGraphics {",
                "identical": false
            },
            {
                "k": 109,
                "patch": "paintComponent splitPedalPosition.getGraphicsgetNamegetNamePedalPosition;",
                "identical": false
            },
            {
                "k": 110,
                "patch": "paintComponent splitPedalPosition.getGraphicsgetNamegetNamePedalPosition;",
                "identical": false
            },
            {
                "k": 111,
                "patch": "paintComponent upper upper.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 112,
                "patch": "paintComponent upper upper.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 113,
                "patch": "paintComponent(speedAngle.getGraphics());",
                "identical": false
            },
            {
                "k": 114,
                "patch": "paintComponent(speedAngle.getGraphics());",
                "identical": false
            },
            {
                "k": 115,
                "patch": "paintComponentEntity.getGraphics());",
                "identical": false
            },
            {
                "k": 116,
                "patch": "paintComponentEntity.getGraphics());",
                "identical": false
            },
            {
                "k": 117,
                "patch": "paintComponent upper upper.getGraphics;",
                "identical": false
            },
            {
                "k": 118,
                "patch": "paintComponent upper upper.getGraphics;",
                "identical": false
            },
            {
                "k": 119,
                "patch": "paintComponent swaggerType.Pedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 120,
                "patch": "paintComponent swaggerType.Pedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 121,
                "patch": "paintComponent swaggerType.PedalPosition(1);",
                "identical": false
            },
            {
                "k": 122,
                "patch": "paintComponent swaggerType.PedalPosition(1);",
                "identical": false
            },
            {
                "k": 123,
                "patch": "paintComponentContext.getGraphics[0];",
                "identical": false
            },
            {
                "k": 124,
                "patch": "paintComponentContext.getGraphics[0];",
                "identical": false
            },
            {
                "k": 125,
                "patch": "paintComponentContext.getGraphics cc;",
                "identical": false
            },
            {
                "k": 126,
                "patch": "paintComponentContext.getGraphics cc;",
                "identical": false
            },
            {
                "k": 127,
                "patch": "paintComponent swaggerType.Pedal)speedAngle;",
                "identical": false
            },
            {
                "k": 128,
                "patch": "paintComponent swaggerType.Pedal)speedAngle;",
                "identical": false
            },
            {
                "k": 129,
                "patch": "paintComponent(speedAngle) {",
                "identical": false
            },
            {
                "k": 130,
                "patch": "paintComponent(speedAngle) {",
                "identical": false
            },
            {
                "k": 131,
                "patch": "paintComponentcaseInsensitive =speedAngle;",
                "identical": false
            },
            {
                "k": 132,
                "patch": "paintComponentcaseInsensitive =speedAngle;",
                "identical": false
            },
            {
                "k": 133,
                "patch": "paintComponent (speedAngle;",
                "identical": false
            },
            {
                "k": 134,
                "patch": "paintComponent (speedAngle;",
                "identical": false
            },
            {
                "k": 135,
                "patch": "paintComponentPed.getGraphics());",
                "identical": false
            },
            {
                "k": 136,
                "patch": "paintComponentPed.getGraphics());",
                "identical": false
            },
            {
                "k": 137,
                "patch": "paintComponent executor =speedAngle;",
                "identical": false
            },
            {
                "k": 138,
                "patch": "paintComponent executor =speedAngle;",
                "identical": false
            },
            {
                "k": 139,
                "patch": "paintComponent upper upper upper.getGraphics());",
                "identical": false
            },
            {
                "k": 140,
                "patch": "paintComponent upper upper upper.getGraphics());",
                "identical": false
            },
            {
                "k": 141,
                "patch": "paintComponent swaggerType.PedalPositionTAG_pm;",
                "identical": false
            },
            {
                "k": 142,
                "patch": "paintComponent swaggerType.PedalPositionTAG_pm;",
                "identical": false
            },
            {
                "k": 143,
                "patch": "paintComponent.getGraphics() {",
                "identical": false
            },
            {
                "k": 144,
                "patch": "paintComponent.getGraphics() {",
                "identical": false
            },
            {
                "k": 145,
                "patch": "paintComponentContext.getGraphicsrangePedalPositions;",
                "identical": false
            },
            {
                "k": 146,
                "patch": "paintComponentContext.getGraphicsrangePedalPositions;",
                "identical": false
            },
            {
                "k": 147,
                "patch": "paintComponentPedalPosition.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 148,
                "patch": "paintComponentPedalPosition.getGraphicsedalPosition;",
                "identical": false
            },
            {
                "k": 149,
                "patch": "paintComponentManagergetGraphics());",
                "identical": false
            },
            {
                "k": 150,
                "patch": "paintComponentManagergetGraphics());",
                "identical": false
            },
            {
                "k": 151,
                "patch": "paintComponentContext.getGraphics fieldpm = plusAngle;",
                "identical": false
            },
            {
                "k": 152,
                "patch": "paintComponentContext.getGraphics fieldpm = plusAngle;",
                "identical": false
            },
            {
                "k": 153,
                "patch": "paintComponent splitPedalPosition.getGraphicsInPedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 154,
                "patch": "paintComponent splitPedalPosition.getGraphicsInPedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 155,
                "patch": "paintComponent(0LTR;",
                "identical": false
            },
            {
                "k": 156,
                "patch": "paintComponent(0LTR;",
                "identical": false
            },
            {
                "k": 157,
                "patch": "paintComponent swaggerType.PedalRoute =speedAngle;",
                "identical": false
            },
            {
                "k": 158,
                "patch": "paintComponent swaggerType.PedalRoute =speedAngle;",
                "identical": false
            },
            {
                "k": 159,
                "patch": "paintComponentContext.getGraphicsCompletable;",
                "identical": false
            },
            {
                "k": 160,
                "patch": "paintComponentContext.getGraphicsCompletable;",
                "identical": false
            },
            {
                "k": 161,
                "patch": "paintComponentContext.getGraphicsctorInPedalPositions;",
                "identical": false
            },
            {
                "k": 162,
                "patch": "paintComponentContext.getGraphicsctorInPedalPositions;",
                "identical": false
            },
            {
                "k": 163,
                "patch": "paintComponent splitPedalPosition.getGraphicsCompletablePedalPosition;",
                "identical": false
            },
            {
                "k": 164,
                "patch": "paintComponent splitPedalPosition.getGraphicsCompletablePedalPosition;",
                "identical": false
            },
            {
                "k": 165,
                "patch": "paintComponentPedalPosition.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 166,
                "patch": "paintComponentPedalPosition.getGraphics =speedAngle;",
                "identical": false
            },
            {
                "k": 167,
                "patch": "paintComponent splitPedalPosition.getGraphicspropertyInPedalPositions;",
                "identical": false
            },
            {
                "k": 168,
                "patch": "paintComponent splitPedalPosition.getGraphicspropertyInPedalPositions;",
                "identical": false
            },
            {
                "k": 169,
                "patch": "paintComponent splitPedalPosition.getGraphicspropertyInPedal)speedAngle;",
                "identical": false
            },
            {
                "k": 170,
                "patch": "paintComponent splitPedalPosition.getGraphicspropertyInPedal)speedAngle;",
                "identical": false
            },
            {
                "k": 171,
                "patch": "paintComponentContext.getGraphicsedalPositions;",
                "identical": false
            },
            {
                "k": 172,
                "patch": "paintComponentContext.getGraphicsedalPositions;",
                "identical": false
            },
            {
                "k": 173,
                "patch": "paintComponent swaggerType.PedalPositionTAG_pmInPedalPosition;",
                "identical": false
            },
            {
                "k": 174,
                "patch": "paintComponent swaggerType.PedalPositionTAG_pmInPedalPosition;",
                "identical": false
            },
            {
                "k": 175,
                "patch": "paintComponentContext.getGraphicsedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 176,
                "patch": "paintComponentContext.getGraphicsedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 177,
                "patch": "paintComponent splitPedalPosition.getGraphicsTypesInPedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 178,
                "patch": "paintComponent splitPedalPosition.getGraphicsTypesInPedal \",speedAngle;",
                "identical": false
            },
            {
                "k": 179,
                "patch": "paintComponent = plusAngle;",
                "identical": false
            },
            {
                "k": 180,
                "patch": "paintComponent = plusAngle;",
                "identical": false
            },
            {
                "k": 181,
                "patch": "paintComponent swaggerData.getGraphics;",
                "identical": false
            },
            {
                "k": 182,
                "patch": "paintComponent swaggerData.getGraphics;",
                "identical": false
            },
            {
                "k": 183,
                "patch": "paintComponent swaggerType.PedalRoute;",
                "identical": false
            },
            {
                "k": 184,
                "patch": "paintComponent swaggerType.PedalRoute;",
                "identical": false
            },
            {
                "k": 185,
                "patch": "paintComponent swaggerType.getGraphics;",
                "identical": false
            },
            {
                "k": 186,
                "patch": "paintComponent swaggerType.getGraphics;",
                "identical": false
            },
            {
                "k": 187,
                "patch": "paintComponentPedalPosition.getGraphics {",
                "identical": false
            },
            {
                "k": 188,
                "patch": "paintComponentPedalPosition.getGraphics {",
                "identical": false
            },
            {
                "k": 189,
                "patch": "paintComponent splitPedalPosition.getGraphics[0];",
                "identical": false
            },
            {
                "k": 190,
                "patch": "paintComponent splitPedalPosition.getGraphics[0];",
                "identical": false
            },
            {
                "k": 191,
                "patch": "paintComponent getContent getContent.getGraphics;",
                "identical": false
            },
            {
                "k": 192,
                "patch": "paintComponent getContent getContent.getGraphics;",
                "identical": false
            },
            {
                "k": 193,
                "patch": "paintComponent.getGraphics fieldpm = plusAngle;",
                "identical": false
            },
            {
                "k": 194,
                "patch": "paintComponent.getGraphics fieldpm = plusAngle;",
                "identical": false
            },
            {
                "k": 195,
                "patch": "paintComponentPagePosition.getGraphics());",
                "identical": false
            },
            {
                "k": 196,
                "patch": "paintComponentPagePosition.getGraphics());",
                "identical": false
            },
            {
                "k": 197,
                "patch": "paintComponentContext.getGraphics3];",
                "identical": false
            },
            {
                "k": 198,
                "patch": "paintComponentContext.getGraphics3];",
                "identical": false
            },
            {
                "k": 199,
                "patch": "paintComponentManagergetGraphics;",
                "identical": false
            },
            {
                "k": 200,
                "patch": "paintComponentManagergetGraphics;",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parser.hasNext(4 * 1000) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parser.hasNext(4 * 1000) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.hasNext(4 * 1000;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.hasNext(4 * 1000;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parser.hasNext(4 * 45) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parser.hasNext(4 * 45) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parser.hasNext(4 << 24) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parser.hasNext(4 << 24) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parser.hasNext(4104) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parser.hasNext(4104) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parser.hasNext(410) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parser.hasNext(410) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parser.hasNext(4(4)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parser.hasNext(4(4)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parser.hasNext(4 == 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parser.hasNext(4 == 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parser.hasNext(400, 57) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parser.hasNext(400, 57) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parser.hasNext(410 << 24) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parser.hasNext(410 << 24) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parser.hasNext(410;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parser.hasNext(410;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parser.hasNext(4 * 3;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.hasNext(4 * 3;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parser.hasNext(4 * 1024) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parser.hasNext(4 * 1024) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parser.hasNext(4 == parser) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parser.hasNext(4 == parser) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.hasNext(4 == 1) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.hasNext(4 == 1) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parser.hasNext(4 == parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parser.hasNext(4 == parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.hasNext(400, 59) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parser.hasNext(400, 59) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.hasNext(400, \"0\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parser.hasNext(400, \"0\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.hasNext(4 * 45 {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parser.hasNext(4 * 45 {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parser.hasNext(400, 12) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parser.hasNext(400, 12) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parser.hasNext(41010) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parser.hasNext(41010) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parser.hasNext(400, 1) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parser.hasNext(400, 1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parser.hasNext(4 * 5)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parser.hasNext(4 * 5)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parser.hasNext(400, 5607) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parser.hasNext(400, 5607) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.hasNext(4 * 1024;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.hasNext(4 * 1024;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parser.hasNext(400, \"0\") {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.hasNext(400, \"0\") {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parser.hasNext(4 == parser.hasNext(5)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parser.hasNext(4 == parser.hasNext(5)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.hasNext(4 * 5), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.hasNext(4 * 5), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parser.hasNext(4 + 12) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parser.hasNext(4 + 12) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.hasNext(4 * 45;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parser.hasNext(4 * 45;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parser.hasNext(400, 0x04) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parser.hasNext(400, 0x04) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.hasNext(400, 13) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parser.hasNext(400, 13) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parser.hasNext(4 * 11) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parser.hasNext(4 * 11) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parser.hasNext(400, 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.hasNext(400, 1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.hasNext(4 * 180) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parser.hasNext(4 * 180) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parser.hasNext(4 * 5), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.hasNext(4 * 5), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parser.hasNext(4203) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parser.hasNext(4203) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parser.hasNext(4 == 11) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.hasNext(4 == 11) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.hasNext(422) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.hasNext(422) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.hasNext(4 == parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.hasNext(4 == parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parser.hasNext(4 << 18) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parser.hasNext(4 << 18) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parser.hasNext(400, 300) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parser.hasNext(400, 300) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parser.hasNext(4), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.hasNext(4), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parser.hasNext(4 *king) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parser.hasNext(4 *king) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.hasNext(4 == 13) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.hasNext(4 == 13) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parser.hasNext(410), parser)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parser.hasNext(410), parser)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parser.hasNext(400, 11) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parser.hasNext(400, 11) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parser.hasNext(4, parser) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parser.hasNext(4, parser) {",
                "identical": false
            },
            {
                "k": 101,
                "patch": "if (parser.hasNext(4Second) {",
                "identical": false
            },
            {
                "k": 102,
                "patch": "if (parser.hasNext(4Second) {",
                "identical": false
            },
            {
                "k": 103,
                "patch": "if (parser.hasNext(4 != 0) {",
                "identical": false
            },
            {
                "k": 104,
                "patch": "if (parser.hasNext(4 != 0) {",
                "identical": false
            },
            {
                "k": 105,
                "patch": "if (parser.hasNext(4 * 1) {",
                "identical": false
            },
            {
                "k": 106,
                "patch": "if (parser.hasNext(4 * 1) {",
                "identical": false
            },
            {
                "k": 107,
                "patch": "if (parser.hasNext(4 * 45), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 108,
                "patch": "if (parser.hasNext(4 * 45), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 109,
                "patch": "if (parser.hasNext(4 == parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 110,
                "patch": "if (parser.hasNext(4 == parser.hasNext(4) {",
                "identical": false
            },
            {
                "k": 111,
                "patch": "if (parser.hasNext(4 + 1) {",
                "identical": false
            },
            {
                "k": 112,
                "patch": "if (parser.hasNext(4 + 1) {",
                "identical": false
            },
            {
                "k": 113,
                "patch": "if (parser.hasNext(4 * 5), parser;",
                "identical": false
            },
            {
                "k": 114,
                "patch": "if (parser.hasNext(4 * 5), parser;",
                "identical": false
            },
            {
                "k": 115,
                "patch": "if (parser.hasNext(410), parser) {",
                "identical": false
            },
            {
                "k": 116,
                "patch": "if (parser.hasNext(410), parser) {",
                "identical": false
            },
            {
                "k": 117,
                "patch": "if (parser.hasNext(410), parser;",
                "identical": false
            },
            {
                "k": 118,
                "patch": "if (parser.hasNext(410), parser;",
                "identical": false
            },
            {
                "k": 119,
                "patch": "if (parser.hasNext(4 * 57) {",
                "identical": false
            },
            {
                "k": 120,
                "patch": "if (parser.hasNext(4 * 57) {",
                "identical": false
            },
            {
                "k": 121,
                "patch": "if (parser.hasNext(400, 5), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 122,
                "patch": "if (parser.hasNext(400, 5), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 123,
                "patch": "if (parser.hasNext(4 GridConstraints) {",
                "identical": false
            },
            {
                "k": 124,
                "patch": "if (parser.hasNext(4 GridConstraints) {",
                "identical": false
            },
            {
                "k": 125,
                "patch": "if (parser.hasNext(5 == 11) {",
                "identical": false
            },
            {
                "k": 126,
                "patch": "if (parser.hasNext(5 == 11) {",
                "identical": false
            },
            {
                "k": 127,
                "patch": "if (parser.hasNext(410104) {",
                "identical": false
            },
            {
                "k": 128,
                "patch": "if (parser.hasNext(410104) {",
                "identical": false
            },
            {
                "k": 129,
                "patch": "if (parser.hasNext(4 * 5), parser.next(4)) {",
                "identical": false
            },
            {
                "k": 130,
                "patch": "if (parser.hasNext(4 * 5), parser.next(4)) {",
                "identical": false
            },
            {
                "k": 131,
                "patch": "if (parser.hasNext(43) {",
                "identical": false
            },
            {
                "k": 132,
                "patch": "if (parser.hasNext(43) {",
                "identical": false
            },
            {
                "k": 133,
                "patch": "if (parser.hasNext(400, 5), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 134,
                "patch": "if (parser.hasNext(400, 5), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 135,
                "patch": "if (parser.hasNext(4), parser;",
                "identical": false
            },
            {
                "k": 136,
                "patch": "if (parser.hasNext(4), parser;",
                "identical": false
            },
            {
                "k": 137,
                "patch": "if (parser.hasNext(4), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 138,
                "patch": "if (parser.hasNext(4), parser.nextInt(16) {",
                "identical": false
            },
            {
                "k": 139,
                "patch": "if (parser.hasNext(4 * heap) {",
                "identical": false
            },
            {
                "k": 140,
                "patch": "if (parser.hasNext(4 * heap) {",
                "identical": false
            },
            {
                "k": 141,
                "patch": "if (parser.hasNext(4 *203) {",
                "identical": false
            },
            {
                "k": 142,
                "patch": "if (parser.hasNext(4 *203) {",
                "identical": false
            },
            {
                "k": 143,
                "patch": "if (parser.hasNext(5)) {",
                "identical": true
            },
            {
                "k": 144,
                "patch": "if (parser.hasNext(5)) {",
                "identical": true
            },
            {
                "k": 145,
                "patch": "if (parser.hasNext(4 *Close) {",
                "identical": false
            },
            {
                "k": 146,
                "patch": "if (parser.hasNext(4 *Close) {",
                "identical": false
            },
            {
                "k": 147,
                "patch": "if (parser.hasNext(4+1) {",
                "identical": false
            },
            {
                "k": 148,
                "patch": "if (parser.hasNext(4+1) {",
                "identical": false
            },
            {
                "k": 149,
                "patch": "if (parser.hasNext(4 * 12) {",
                "identical": false
            },
            {
                "k": 150,
                "patch": "if (parser.hasNext(4 * 12) {",
                "identical": false
            },
            {
                "k": 151,
                "patch": "if (parser.hasNext(4 * 1000)) {",
                "identical": false
            },
            {
                "k": 152,
                "patch": "if (parser.hasNext(4 * 1000)) {",
                "identical": false
            },
            {
                "k": 153,
                "patch": "if (parser.hasNext(400, 0x0020) {",
                "identical": false
            },
            {
                "k": 154,
                "patch": "if (parser.hasNext(400, 0x0020) {",
                "identical": false
            },
            {
                "k": 155,
                "patch": "if (parser.hasNext(400, 5), parser;",
                "identical": false
            },
            {
                "k": 156,
                "patch": "if (parser.hasNext(400, 5), parser;",
                "identical": false
            },
            {
                "k": 157,
                "patch": "if (parser.hasNext(4 && parser != 11) {",
                "identical": false
            },
            {
                "k": 158,
                "patch": "if (parser.hasNext(4 && parser != 11) {",
                "identical": false
            },
            {
                "k": 159,
                "patch": "if (parser.hasNext(4SEPARATOR) {",
                "identical": false
            },
            {
                "k": 160,
                "patch": "if (parser.hasNext(4SEPARATOR) {",
                "identical": false
            },
            {
                "k": 161,
                "patch": "if (parser.hasNext(4 * 45), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 162,
                "patch": "if (parser.hasNext(4 * 45), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 163,
                "patch": "if (parser.hasNext(4 * 2);",
                "identical": false
            },
            {
                "k": 164,
                "patch": "if (parser.hasNext(4 * 2);",
                "identical": false
            },
            {
                "k": 165,
                "patch": "if (parser.hasNext(410), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 166,
                "patch": "if (parser.hasNext(410), parser.hasNext(4)) {",
                "identical": false
            },
            {
                "k": 167,
                "patch": "if (parser.hasNext(4 * 100;",
                "identical": false
            },
            {
                "k": 168,
                "patch": "if (parser.hasNext(4 * 100;",
                "identical": false
            },
            {
                "k": 169,
                "patch": "if (parser.hasNext(400, 5), parser.next(4)) {",
                "identical": false
            },
            {
                "k": 170,
                "patch": "if (parser.hasNext(400, 5), parser.next(4)) {",
                "identical": false
            },
            {
                "k": 171,
                "patch": "if (parser.hasNext(4 *\");",
                "identical": false
            },
            {
                "k": 172,
                "patch": "if (parser.hasNext(4 *\");",
                "identical": false
            },
            {
                "k": 173,
                "patch": "if (parser.hasNext(4 *::parser;",
                "identical": false
            },
            {
                "k": 174,
                "patch": "if (parser.hasNext(4 *::parser;",
                "identical": false
            },
            {
                "k": 175,
                "patch": "if (parser.hasNext(4throws) {",
                "identical": false
            },
            {
                "k": 176,
                "patch": "if (parser.hasNext(4throws) {",
                "identical": false
            },
            {
                "k": 177,
                "patch": "if (parser.hasNext(410 == 1) {",
                "identical": false
            },
            {
                "k": 178,
                "patch": "if (parser.hasNext(410 == 1) {",
                "identical": false
            },
            {
                "k": 179,
                "patch": "if (parser.hasNext(4 * 510;",
                "identical": false
            },
            {
                "k": 180,
                "patch": "if (parser.hasNext(4 * 510;",
                "identical": false
            },
            {
                "k": 181,
                "patch": "if (parser.hasNext(4 sb) {",
                "identical": false
            },
            {
                "k": 182,
                "patch": "if (parser.hasNext(4 sb) {",
                "identical": false
            },
            {
                "k": 183,
                "patch": "if (parser.hasNext(4 * 45), parser;",
                "identical": false
            },
            {
                "k": 184,
                "patch": "if (parser.hasNext(4 * 45), parser;",
                "identical": false
            },
            {
                "k": 185,
                "patch": "if (parser.hasNext(4US_TEXT;",
                "identical": false
            },
            {
                "k": 186,
                "patch": "if (parser.hasNext(4US_TEXT;",
                "identical": false
            },
            {
                "k": 187,
                "patch": "if (parser.hasNext(410)) {",
                "identical": false
            },
            {
                "k": 188,
                "patch": "if (parser.hasNext(410)) {",
                "identical": false
            },
            {
                "k": 189,
                "patch": "if (parser.hasNext(4 << 56) {",
                "identical": false
            },
            {
                "k": 190,
                "patch": "if (parser.hasNext(4 << 56) {",
                "identical": false
            },
            {
                "k": 191,
                "patch": "if (parser.hasNext(4 == parser.hasNext(5) {",
                "identical": false
            },
            {
                "k": 192,
                "patch": "if (parser.hasNext(4 == parser.hasNext(5) {",
                "identical": false
            },
            {
                "k": 193,
                "patch": "if (parser.hasNext(4, parser)) {",
                "identical": false
            },
            {
                "k": 194,
                "patch": "if (parser.hasNext(4, parser)) {",
                "identical": false
            },
            {
                "k": 195,
                "patch": "if (parser.hasNext(42) {",
                "identical": false
            },
            {
                "k": 196,
                "patch": "if (parser.hasNext(42) {",
                "identical": false
            },
            {
                "k": 197,
                "patch": "if (parser.hasNext(4), parser) {",
                "identical": false
            },
            {
                "k": 198,
                "patch": "if (parser.hasNext(4), parser) {",
                "identical": false
            },
            {
                "k": 199,
                "patch": "if (parser.hasNext(400, 5)) {",
                "identical": false
            },
            {
                "k": 200,
                "patch": "if (parser.hasNext(400, 5)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private synchronized void addArrivedRecordsInput (ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private synchronized void addArrivedRecordsInput (ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private synchronized void addArrivedRecordsInput (DbRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private synchronized void addArrivedRecordsInput (DbRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private synchronized void addArrivedRecordsInput (ServerRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private synchronized void addArrivedRecordsInput (ServerRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private synchronized void addArrivedRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private synchronized void addArrivedRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private synchronized void addArrivedRecordsInputEntity.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private synchronized void addArrivedRecordsInputEntity.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private synchronized void addArrivedRecordsInputingProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private synchronized void addArrivedRecordsInputingProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private synchronized void addArrivedRecordsInput orProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private synchronized void addArrivedRecordsInput orProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private synchronized void addArrivedRecordsInput (configRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private synchronized void addArrivedRecordsInput (configRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private synchronized void addArrivedRecordsInputaddProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private synchronized void addArrivedRecordsInputaddProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private synchronized void addArrivedRecordsInputByKey(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private synchronized void addArrivedRecordsInputByKey(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private synchronized void addArrivedRecordsInput (ArrayRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private synchronized void addArrivedRecordsInput (ArrayRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private synchronized void addArrivedRecordsInput (ArrivedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private synchronized void addArrivedRecordsInput (ArrivedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private synchronized void addArrivedRecordsInput (ThreadRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private synchronized void addArrivedRecordsInput (ThreadRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private synchronized void addArrivedRecordsInput(\"ProcessRecordsInput to throws InterruptedException {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private synchronized void addArrivedRecordsInput(\"ProcessRecordsInput to throws InterruptedException {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private synchronized void addArrivedRecordsInput ( asyncRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private synchronized void addArrivedRecordsInput ( asyncRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private synchronized void addArrivedRecordsInput INHERIT) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private synchronized void addArrivedRecordsInput INHERIT) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private synchronized void addArrivedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private synchronized void addArrivedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private synchronized void addArrivedRecordsInputDoubleQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private synchronized void addArrivedRecordsInputDoubleQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput execute InterruptedException {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput execute InterruptedException {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private synchronized void addArrivedRecordsInputFlowPointsWithRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private synchronized void addArrivedRecordsInputFlowPointsWithRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private synchronized void addArrivedRecordsInputOrigin(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private synchronized void addArrivedRecordsInputOrigin(processRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private synchronized void addArrivedRecordsInputparseProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private synchronized void addArrivedRecordsInputparseProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private synchronized void addArrivedRecordsInputORQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private synchronized void addArrivedRecordsInputORQueue.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private synchronized void addArrivedRecordsInput = throwsRecordsInput;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private synchronized void addArrivedRecordsInput = throwsRecordsInput;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput) throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private synchronized void addArrivedRecordsInputURLProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private synchronized void addArrivedRecordsInputURLProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private synchronized void addArrivedRecordsInput toProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private synchronized void addArrivedRecordsInputFlowPointsToRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private synchronized void addArrivedRecordsInputFlowPointsToRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private synchronized void addArrivedRecordsInputListenerFromProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private synchronized void addArrivedRecordsInputListenerFromProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private synchronized void addArrivedRecordsInputScaleProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private synchronized void addArrivedRecordsInputScaleProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private synchronized void addArrivedRecordsInput(\"ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private synchronized void addArrivedRecordsInput(\"ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private synchronized void addArrivedRecordsInput GridConstraintsProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private synchronized void addArrivedRecordsInput GridConstraintsProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private synchronized void addArrivedRecordsInputByProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private synchronized void addArrivedRecordsInputByProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private synchronized void addArrivedRecordsInput 7;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private synchronized void addArrivedRecordsInput 7;",
                "identical": false
            },
            {
                "k": 101,
                "patch": "private synchronized void addArrivedRecordsInput subProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 102,
                "patch": "private synchronized void addArrivedRecordsInput subProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 103,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput propName propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 104,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput propName propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 105,
                "patch": "private synchronized void addArrivedRecordsInput 76, processRecordsInput) {",
                "identical": false
            },
            {
                "k": 106,
                "patch": "private synchronized void addArrivedRecordsInput 76, processRecordsInput) {",
                "identical": false
            },
            {
                "k": 107,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput_IN InterruptedException {",
                "identical": false
            },
            {
                "k": 108,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput_IN InterruptedException {",
                "identical": false
            },
            {
                "k": 109,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInputallyrow\") throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 110,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInputallyrow\") throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 111,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 112,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 113,
                "patch": "private synchronized void addArrivedRecordsInput args.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 114,
                "patch": "private synchronized void addArrivedRecordsInput args.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 115,
                "patch": "private synchronized void addArrivedRecordsInput propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 116,
                "patch": "private synchronized void addArrivedRecordsInput propName) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 117,
                "patch": "private synchronized void addArrivedRecordsInputDoubleQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 118,
                "patch": "private synchronized void addArrivedRecordsInputDoubleQueue.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 119,
                "patch": "private synchronized void addArrivedRecordsInput long throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 120,
                "patch": "private synchronized void addArrivedRecordsInput long throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 121,
                "patch": "private synchronized void addArrivedRecordsInput not throws InterruptedException {",
                "identical": false
            },
            {
                "k": 122,
                "patch": "private synchronized void addArrivedRecordsInput not throws InterruptedException {",
                "identical": false
            },
            {
                "k": 123,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 124,
                "patch": "private synchronized void addArrivedRecordsInput = requestedRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 125,
                "patch": "private synchronized void addArrivedRecordsInput_IN_PROGRESS_Input;",
                "identical": false
            },
            {
                "k": 126,
                "patch": "private synchronized void addArrivedRecordsInput_IN_PROGRESS_Input;",
                "identical": false
            },
            {
                "k": 127,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput_TYPE throws throwsKiloMeterPerHourInsteadruptedException {",
                "identical": false
            },
            {
                "k": 128,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput_TYPE throws throwsKiloMeterPerHourInsteadruptedException {",
                "identical": false
            },
            {
                "k": 129,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throws InterruptedException) {",
                "identical": false
            },
            {
                "k": 130,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throws InterruptedException) {",
                "identical": false
            },
            {
                "k": 131,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput;",
                "identical": false
            },
            {
                "k": 132,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput;",
                "identical": false
            },
            {
                "k": 133,
                "patch": "private synchronized void addArrivedRecordsInput {}ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 134,
                "patch": "private synchronized void addArrivedRecordsInput {}ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 135,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput){",
                "identical": false
            },
            {
                "k": 136,
                "patch": "private synchronized void addArrivedRecordsInput includeRecordsInput){",
                "identical": false
            },
            {
                "k": 137,
                "patch": "private synchronized void addArrivedRecordsInputFactory.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 138,
                "patch": "private synchronized void addArrivedRecordsInputFactory.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 139,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput() {",
                "identical": false
            },
            {
                "k": 140,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput() {",
                "identical": false
            },
            {
                "k": 141,
                "patch": "private synchronized void addArrivedRecordsInput {}ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 142,
                "patch": "private synchronized void addArrivedRecordsInput {}ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 143,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() {",
                "identical": false
            },
            {
                "k": 144,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput() {",
                "identical": false
            },
            {
                "k": 145,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput){",
                "identical": false
            },
            {
                "k": 146,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput){",
                "identical": false
            },
            {
                "k": 147,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 148,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput);",
                "identical": false
            },
            {
                "k": 149,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 150,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput.ProcessRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 151,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput;",
                "identical": false
            },
            {
                "k": 152,
                "patch": "private synchronized void addArrivedRecordsInput 74, processRecordsInput;",
                "identical": false
            },
            {
                "k": 153,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > 23) {",
                "identical": false
            },
            {
                "k": 154,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > 23) {",
                "identical": false
            },
            {
                "k": 155,
                "patch": "private synchronized void addArrivedRecordsInputallyrow\") throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 156,
                "patch": "private synchronized void addArrivedRecordsInputallyrow\") throws throws InterruptedException {",
                "identical": false
            },
            {
                "k": 157,
                "patch": "private synchronized void addArrivedRecordsInputFactory throws throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 158,
                "patch": "private synchronized void addArrivedRecordsInputFactory throws throwsRecordsInput) {",
                "identical": false
            },
            {
                "k": 159,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput;",
                "identical": false
            },
            {
                "k": 160,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput;",
                "identical": false
            },
            {
                "k": 161,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput* InterruptedException {",
                "identical": false
            },
            {
                "k": 162,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput* InterruptedException {",
                "identical": false
            },
            {
                "k": 163,
                "patch": "private synchronized void addArrivedRecordsInput_TYPE throws throwsS) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 164,
                "patch": "private synchronized void addArrivedRecordsInput_TYPE throws throwsS) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 165,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException) {",
                "identical": false
            },
            {
                "k": 166,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws InterruptedException) {",
                "identical": false
            },
            {
                "k": 167,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > 255) {",
                "identical": false
            },
            {
                "k": 168,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > 255) {",
                "identical": false
            },
            {
                "k": 169,
                "patch": "private synchronized void addArrivedRecordsInput_IN_PROGRESS_Input ( throwsRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 170,
                "patch": "private synchronized void addArrivedRecordsInput_IN_PROGRESS_Input ( throwsRecordsInput) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 171,
                "patch": "private synchronized void addArrivedRecordsInput execute InterruptedException {",
                "identical": false
            },
            {
                "k": 172,
                "patch": "private synchronized void addArrivedRecordsInput execute InterruptedException {",
                "identical": false
            },
            {
                "k": 173,
                "patch": "private synchronized void addArrivedRecordsInput > 23) {",
                "identical": false
            },
            {
                "k": 174,
                "patch": "private synchronized void addArrivedRecordsInput > 23) {",
                "identical": false
            },
            {
                "k": 175,
                "patch": "private synchronized void addArrivedRecordsInput_TYPE throws throwsRecordsInput;",
                "identical": false
            },
            {
                "k": 176,
                "patch": "private synchronized void addArrivedRecordsInput_TYPE throws throwsRecordsInput;",
                "identical": false
            },
            {
                "k": 177,
                "patch": "private synchronized void addArrivedRecordsInput 2) {",
                "identical": false
            },
            {
                "k": 178,
                "patch": "private synchronized void addArrivedRecordsInput 2) {",
                "identical": false
            },
            {
                "k": 179,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput() {",
                "identical": false
            },
            {
                "k": 180,
                "patch": "private synchronized void addArrivedRecordsInput(processRecordsInput() {",
                "identical": false
            },
            {
                "k": 181,
                "patch": "private synchronized void addArrivedRecordsInput_IN_PROGRESS_KEY.printlnRecordsInput;",
                "identical": false
            },
            {
                "k": 182,
                "patch": "private synchronized void addArrivedRecordsInput_IN_PROGRESS_KEY.printlnRecordsInput;",
                "identical": false
            },
            {
                "k": 183,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throws InterruptedException.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 184,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput > throws throws InterruptedException.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 185,
                "patch": "private synchronized void addArrivedRecordsInput = categoriesRecordsInput;",
                "identical": false
            },
            {
                "k": 186,
                "patch": "private synchronized void addArrivedRecordsInput = categoriesRecordsInput;",
                "identical": false
            },
            {
                "k": 187,
                "patch": "private synchronized void addArrivedRecordsInput args.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 188,
                "patch": "private synchronized void addArrivedRecordsInput args.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 189,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 190,
                "patch": "private synchronized void addArrivedRecordsInputToRecordsInput.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 191,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput;",
                "identical": false
            },
            {
                "k": 192,
                "patch": "private synchronized void addArrivedRecordsInputRouteQueue.ProcessRecordsInput;",
                "identical": false
            },
            {
                "k": 193,
                "patch": "private synchronized void addArrivedRecordsInputEntity.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 194,
                "patch": "private synchronized void addArrivedRecordsInputEntity.ProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 195,
                "patch": "private synchronized void addArrivedRecordsInputURLProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 196,
                "patch": "private synchronized void addArrivedRecordsInputURLProcessRecordsInput) {",
                "identical": false
            },
            {
                "k": 197,
                "patch": "private synchronized void addArrivedRecordsInputORACLE_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 198,
                "patch": "private synchronized void addArrivedRecordsInputORACLE_MAX_VALUE;",
                "identical": false
            },
            {
                "k": 199,
                "patch": "private synchronized void addArrivedRecordsInputORACLE_MAX_VALUE) throws InterruptedException {",
                "identical": false
            },
            {
                "k": 200,
                "patch": "private synchronized void addArrivedRecordsInputORACLE_MAX_VALUE) throws InterruptedException {",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    }
}