{
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new ConcurrentHashMap();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Set<Object>>();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, int>();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Integer>();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes, attribute.size());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,Domainattributes.length);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentHashMap<Object, V>();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Integer>();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Object>();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>(attributes.length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes.length);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.size());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Type>();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Set<Object>();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new ConcurrentHashMap<K, V>();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>(attributeMap.length);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Type>(attributeMap.length);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Set<Class<?>>();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Integer>();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new ConcurrentHashMap<Object,Domainattributes.length);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, V>();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Object>();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentHashMap(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.key, attribute);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes.size());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>>();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new ConcurrentHashMap<Object, JSType>();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentHashMap(attributes, attribute.size());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.class);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Type>(attributeMap.size);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Type>();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, V>();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Object>();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Type>(attributeMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentHashMap<Object,V>();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, int[attributes.length - 1];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>(attributeMap.size);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.key, attribute.length);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, String>();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.getParameterCount());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnType>();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, ?>>();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, V>(attributes.length);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new ConcurrentHashMap<Object,V>(attributes.length);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>(attributeMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new ConcurrentHashMap<Object, ?>>();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Type>(attributeMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnChar[]>();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, int[attributes.length - 1]];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute<?>, int>();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentHashMap<Object,Override>(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Type>(attributeMap.length);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.insert);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentHashMap<Object,V>(attributeMap.size());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, JSType>();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Class<?>>();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new ConcurrentHashMap<V, K>(attributes.length);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new ConcurrentHashMap<Object, String>();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet(), attributes.length);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes, attribute.keySet());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnChar);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Type>(attributeMap.keySet());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentHashMap<Object, SettableBeanProperty>();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentHashMap<Object,Override>(attributes, attribute.size());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new ConcurrentHashMap<Object,Override>(attributeMap.size());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, V>(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, JSType>();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>(attributeMap.length);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>,Domainattributes.length);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributeMap.size());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, String>();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeName);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.get(attributeCount());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.key, attribute.docInfo());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes.size, attribute.length);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Node>();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Set<Node>();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, ?>>();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentHashMap<K, V>(attributes.length);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new ConcurrentHashMap<Object, int>();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,Domainattributes.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute<?>, V>();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>(attributes.size());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new ConcurrentHashMap<Object,LID>();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Type>(attributeMap.size);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet(), attribute.size());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new ConcurrentHashMap<T>(attributes, attribute.size());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,Domainattributes.length>();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet(), attributes.length, attributeCount);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new ConcurrentHashMap<Object, V>(attributeMap.size());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new ConcurrentHashMap<Object,V>(attributeMap.length);",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnoredProperty(propName);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignorals.getIgnoredProperty(propertyName);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignorals.getIgnored().isIgnorable();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignorals.getIgnored ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignorals.getIgnored ? new HashSet() : ignorals;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignorals.getIgnoredProperty();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = ignorals.getIgnoredPropertyNames();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = ignorals.removeIgnored();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = ignorals.getIgnored().toArray(new String[prop.size()]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = ignorals.getIgnored ? new Boolean() : ignorals;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = ignorals.getIgnoredMethods();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignorals.getIgnoredCause();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorableProperties());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = ignorals.getIgnoredProperty(ignoreAny);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = ignorals.getIgnoredField();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = ignorals.getIgnoredSubtype(ignoreAny);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = ignorals.getIgnoredInterfaces();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignorals.getIgnoredValues();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignorals.getIgnoredValue();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.getIgnoredProperty(prop).isIgnorable();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignorals.getIgnoredOnly();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = ignorals.getIgnored != null;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = ignorals.getIgnored().toArray(new String[ignoreAny);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = ignorals.getIgnoredConstructor();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.Object\")) ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getIgnored()) : ignorals;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignore\", ignorals);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getIgnoredFor(ignoreAny);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignorals.getIgnoredProperty(\"properties\", new HashSet<String>() {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? ignorals : ignorals;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignorals.getIgnoredProperty(\"isIgnore\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignorals.getIgnoredProperty(\"is\", ignorals);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = ignorals.getIgnored(ignoreAny);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignorals.getIgnored still();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignorals.getIgnoredProperty(\"annotated.contains(propName);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignorals.getIgnoredPropertyHandler();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.ignored\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = ignorals.getIgnoredProperty(prop);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = ignorals.getIgnoredadd(ignoreAny);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = ignorals.getIgnoredDeclared(ignoreAny);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = ignorals.getIgnoredProperty(implName);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = ignorals.getIgnored() != null;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignorals.getIgnoredProperty(propName).isIgnorable();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.Object\")) ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getIgnoredComparator();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignorals.getIgnoredSibling();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignorals.getIgnoredQName();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignorals.getIgnoredProperty(\"property '\"+propName+\"'\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignore\", new HashSet<String>() {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = ignorals.contains(ignoreAny);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorableProperties);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = ignorals.getIgnoredMutableState();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = ignorals.getIgnoredProperty(\"properties\", new HashSet<String>(ignored) ? Boolean.TRUE : ignorals);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = ignorals.getIgnored Min();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = ignorals.getIgnoredProperty(prop, new HashSet<String>(ignoredProperties.length));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignorals.getIgnoredWith(propName);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? new Boolean() : ignorals;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : ignorals;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored\")) ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignoreUnknown '\"+propName+\"'\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = ignorals.getIgnored().toArray(new String[prop.length()]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = ignorals.getIgnoredveragedOutals();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = ignorals.isIgnorable();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = ignorals.getIgnoredProperty(ignorableProperties.size() - 1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : new HashSet<String>(ignored);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignorals.getIgnoredEdges();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = ignorals.getIgnoredPropertyWriter();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = ignorals.getIgnoredProperty(\"isIgnorable\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : new HashSet<String>();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = ignorals.getIgnoredProperty(\"msg.no.ignored\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.String\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignored\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored)\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = ignorals.getIgnoredProperty(\"new String\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ignorals.getIgnoredArguments();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignorals.getIgnoredProperty(\"eclare\", ignorals);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignore\", new HashSet<String>(ignored) ? Boolean.TRUE : ignorals);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = ignorals.getIgnoredProperty(\"is property '\"+propName+\"'\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = ignorals.getIgnoredMethod();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ignorals.getIgnoredProperty(prop, new HashSet<IgnoreUnknown);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getIgnoredProperty(\"annotated.contains(propName\"));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignorals.getIgnoredProperty(variableName);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.Object\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) ? ignored.getIgnored() : ignorals();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = ignorals.getIgnoredProperty(\"isIgnorable\", ignorals);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = ignorals.getIgnoredProperty(\"annotated.contains(propName)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = ignorals.getIgnoredProperty(\"\"+propName+\"\\\" (ignored != null) && ignored.contains(propName);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignorals.getIgnored ? new HashSet : ignorals;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.isIgnorable\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new Boolean() : ignorals;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.Object\")) ? new Boolean() : ignorals;",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(buf.length() + 1, buf.length());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(buf.length() + 2 + 1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(buf.length() + 2 + buf.toBytes());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(buf.length() + 2 + buf.toString());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(buf.length() + 1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(buf.length() + length);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(buf.length() + 2 + buf.length());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(buf.length() + 2 + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(buf.length() + \" length\";",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(buf.length() + 3 * buf.size());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(buf.length() + 0.5);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(buf.length() + buf.getClass());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(buf.length() + buf.toBytes());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(buf.length() + \"}\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(result.toBytes());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(buf.length() + 2 + \"}\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(buf.length() + MAX_connection);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(buf.length() + 0, buf.length());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(buf.length() + 2 + buf.getLength());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(buf.length() + 2 + buf.getClass());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(buf.length() + \"}\\\" + buf.toBytes());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(buf.length() + buf.length());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.height;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(buf.length() + \"}\\\" + buf.getClass());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(buf + 1, buf.length() + length);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(buf.length() + scope.getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(buf.length() +intern());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(buf.length() + buf.intValue());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(buf.length() + \" buf.toBytes());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(buf.length() + 1, buf.toBytes());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(buf.length() +POSITIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(buf.length() + 2 + byte.toBytes());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(buf.length() + buf.toString());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(buf.length() + \" buf.size());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(buf.length() + \"\\'\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(buf.length() + 2 + i.getLineno());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(buf.length() + \"}\\\" + buf.toString());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(buf.length() + _outputEnd);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.intValue());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(buf.length() + 2 + buf.size());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(buf.length() + \"}\\\" + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(buf.length() + OK.toBytes());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(result.length() + buf.length());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(buf.length() + 2 + buf.getLength() + length);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(buf.length() + 1 + buf.toString());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(buf.length() + \": \" + length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.height);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(buf.length() + 2 + \" \");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(buf.length() +estimateSize());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(buf.length() + \" 0, buf.length());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(buf.length() + 2 * buf.size());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(buf.length() + \"\\\")\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(buf.length() + 2 + buf.getSize());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(buf.length() + \" buf.doubleValue());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(buf.length() + 2) + buf.toBytes());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(buf.length() + \" buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(buf.length() + \" length ' ');",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(buf.length + 1, buf.length());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(buf.length() + 2 + 1, buf.length());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.toBytes());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(buf.length() + \"Constraint.toBytes());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(buf.length() + this.value + \"\\'\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(buf.length() + \"=\" + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(buf.length() + \" 2 * buf.size());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(buf.length() + 2 + buf.intValue());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(buf.length() + 2 + buf.height / 2);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(buf.length() + \" length\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(buf.length() + 2 + i.getName().length() + \"]\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(buf.length() + tick.getName());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(buf.length() + \": \" + buf.toBytes());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(buf.length() + 2 + buf.getBytes());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(buf.length() + 1).append(value + length);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(buf.length() + tick.getName().length() + \" length\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(buf.length() + \" buf.intValue());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(result.size() + buf.length());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(buf.length() + 2 + buf.getLineno());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeByte(buf.length() + length);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(buf.length() + \": \" + buf.size());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(buf.length() + 2 + buf.relativePositionOffset());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.toString());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.size());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(buf.length() + 2 + \" buf.getLength());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(buf.length() + 2);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(buf.length() + MAX_OFFSET);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(new String(buf, off + length));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(buf.length() + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(buf.length() + 2 + \" buf.toBytes());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(buf.length() + 1 + buf.toBytes());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(buf.length() + tick.getName().length() + \"]\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(buf.length() +ractionBytes.getClass());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(buf.length() + ZipShort.toBytes());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(buf.length() + IterableUtils.toBytes());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(buf.length() + \" length\", buf.height);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.getClass());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(buf.length() + 0) + buf.toString();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(buf.length() + 2 + buf.toString().substring(result));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(buf.length() + \": \" + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(buf.length() + 1 + buf.length());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(buf.length() + \" length\", buf.getClass().getName());",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return position + 1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return position == null ? Integer.MAX_VALUE : position;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return position == null ? position == 0) : text.substring(position);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return position == null ? \"\" : position;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return position == null ? \"\" : position.getSize();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return position == null ? position == 0) : new Integer(position);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return position == null ? new Integer(position) : mask_msk);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return position == null ? MIN_msise_msk1 : position;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return position == null ? position == 0) : text.substring(position + 1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return position == null ? \"\" : position.getValue();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return position == null ? position == 0) : ims;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return position == null ? new Integer(position) : text.length;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return position == null ? position == 0) : source.substring(position - 1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return position == null ? \"\" : position + 1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return position == null ? Collections.empty_ms\", position) : new Integer(position);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return position == null ? -1 : position;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return position == null ? MIN_msPasses.length() : position;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return position == null ? position == 0) : source.substring(position + 1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return position == null ? G_msk1 : position;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return position == null ? iParameter.getValue().length() : position;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return position == null ? -1 : position.getDeclaringClass().getName();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return position == null ? position == 0) : text.substring(position - 1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return position == null ? Integer.MAX_VALUE : 9;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return position == null ? position == 0) : source.substring(position);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return position == null ? attr.getValue().length() : position;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return position == null ? Integer.MAX_VALUE : new Integer(position);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return position == null ? -1 : position.getSize();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return position == null ? Integer.MAX_VALUE : iterator.substring(position);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return position == null ? optRequest_msise_msk1 : position;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return position == null ? MIN_msregister_msk1 : position;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return position == null ? MIN_msise_msPasses.substring(position) : position;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return position == null ? position == 1 : -1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return position1 != null ? position.getValue().length() : 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return position_msk1 != null ? position.getValue() : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return position == null ? Integer.MAX_VALUE : text;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return position == null ? DEFAULT_msise_ms\", position) : new Integer(position);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return position == null ? attr.getValue() : position;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return position == null ? Integer.MAX_VALUE : G_msk;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return position == null ? Integer.MAX_VALUE : values[position];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return position == null ? Long.MAX_VALUE : position;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return position == null ? Locale.getDefaultParameter().length() : position;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return position == null ? new Integer(position) : mask_msk;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return position == null ? MIN_ms : position;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return position == null ? position == null : position.getSize();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return position == null ? DEFAULT_msise_msk1 : position;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return position == null ? new Integer(position) : mask_msksum);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return position == null ? Complex.new_ms\", position) : new Integer(position);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return position_msk1 != null ? position.getValue().length() : 0;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return position == null ? JsonNull.create_ms : position;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return position == null ? MIN_msise_msPasses.substring(position) : position + 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return position == null ? Locale.getDefaultParameter().getValue() : position;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return position == null ? optRequest_msise_msk1 : new Integer(position);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return position == null ? Integer.MAX_VALUE : index + 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return position == null ? Collections.empty_ms : position;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return position == null ? attr.getValue().toString() : position;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return position == null ? new Integer(position) : mask_msknots.length);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return position == null ? \"\" : position.getDeclaringClass().getName();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return position == null ? root.getValue().length() : position;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return position == null ? Integer.MAX_VALUE : back;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return position == null ? DEFAULT_msise_msPasses.substring(position) : position + 1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return position == null ? -1 : position + 1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return position == null ? Collections.empty_ms\", position) - 1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return position == null ? new Integer(position) : mask_msk1 != null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return position == null ? MIN_msPasses.length : position;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return position == null ? MIN_msise_ms\", position) : new Integer(position);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return position == null ? position == 0) : this.position;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return position == null ? Integer.MAX_VALUE : TWO;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return position == null ? DEFAULT_msise_msPasses.substring(position) : position;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return position == null ? optRequest.getValue().length() : position;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return position == null ? new Integer(position) : mask_msk1 + 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return position1 != null ? position.getValue().trim() : 0;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return position == null ? position == 0) : i;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return position == null ? -1 : position.getValue().toString();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return position == null ? \"\" : position.getDeclaringClass();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return position_msk1 != null ? position.toString() : 0;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return position == null ? new Integer.MAX_VALUE : text;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return position == null ? Collections.empty_ms() : position;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return position == null ? new Builder(position) : position;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return position == null ? new Integer(position) : mask_msk << 1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return position == null ? MIN_msise_msPasses.length() : 2;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return position == null ? position == initStr : position;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return position_msk1 != null ? position.getValue().trim() : 0;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return position1 != null ? position.getValue().trim() : \"\";",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return position == null ? Integer.MAX_VALUE : i;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return position == null ? DEFAULT_msise_msPasses.length : position;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return position == null ? Integer.MAX_VALUE : MeterParameterTypes.length;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return position == null ? new Integer(position) : position;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return position_msk1 != null ? position.getValue().trim() : \"\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return position == null ? MIN_msise_msPasses.substring(position) : position + 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return position == null ? NULL_ms() : position;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return position == null ? optRequest_msk1 : position;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return position == null ? position.getValue().length() : position;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return position == null ? attr.getValue().toString() : new Integer(position);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return position == null ? Integer.MAX_VALUE : dms;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return position == null ? DEFAULT_msise_ms\", position) : new Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return position == null ? code.length() : position;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return position == null ? -1 : position.getDeclaringClass();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return position == null ? DEFAULT_msise_msPasses.substring(position) : position + 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return position == null ? position == 0) : source.getValue();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return position == null ? new Integer(position) : mask_msk1);",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".toString(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".toString(\"dd MMMM\").join();",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".toString(\"dd MMMM\"));",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".toString(\"dd MMMM\").first();",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".toString(\"dd MMMMoment. String\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".toString(\"dd MMMMoment\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.number);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".toString(\"dd MMMM\").print(N.numberOfHalfdays\"));",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".toString(\"dd MMMM0(dd)\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".toString(\"dd MMMMIC13: \" + adi.numberOfHalfday());",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".toString(\"dd MMMMIC13: \" + adc);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.Number(0): \" + adc);",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.numberOfHalfday\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".toString(\"dd MMMM\").first().substring(0, 2));",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\").printPartialStackTrace();",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\").print(N.numberOfHalfday()));",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".toString(\"dd MMMMICnumerator:mm: \" + unit.number);",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\").join();",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".toString(\"dd Millisecond\"));",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".toString(\"dd MMMMIC13: \" + adt.numberOfHalfday());",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".toString(\"dd MMMM\").print(N.numberOfHalfday()));",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".toString(\"dd MMMMAGIC:mm:ss.SSS\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".toString(\"dd MMMM0(dd)) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\").print(N.numberOfHalfdays\"));",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.number);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".toString(\"dd Mmm: \" + curr);",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".toString(\"dd MMMMICLOCKWISE_)?.Number(numberOfHalfday(), dataArea, edge);",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".toString(\"dd MMMMOTYPE: \" + adt.toString());",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".toString(\"dd MMMMoment\"));",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".toString(\"dd MMMMoments:mm:ss.numberOfHalfday\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.SSS\"));",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".toString(\"dd MMMMIC13: \" + unit.numberOfHalfday());",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.SSS\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".toString(\"dd MMMMoment.Integer.toString(number));",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".toString(\"dd MMMMoment\").print(N.numberOfHalfdays\"));",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".toString(\"dd MMMMoment+\")\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".toString(\"dd Mmm: \" + currName);",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.Number(numberOfHalfday\"));",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".toString(\"dd MMMM0(dd))));",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".toString(\"dd MMMMoment.number\"));",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".toString(\"dd MMMMoment.Number\")\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".toString(\"dd MMMMIC13: \" + adt.toString());",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".toString(\"dd MMMMIC13: \" + adt.numberOfSuccessor().toString());",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".toString(\"dd MMMMoment+\")};",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.SSS\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS |= 1d;",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.Number(0): \" + adc); // this is",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".toString(\"dd MMMMICnumerator:mm: \" + curr);",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.Number(numberOfSuccesses()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".toString(\"dd MMMMoments:mm: \" + unit.numberOfHalfday);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.Number(0): \" + unit.numberOfSuccessor);",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".toString(\"dd MMMMoments:mm:ss.Number(numberOfHalfday(): \"yyyy\"));",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.SSS\").print(N.numberOfHalfday()));",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.numberOfSuccesses\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".toString(\"dd MMMMOTYPE: \" + ad);",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".toString(\"dd MMMMoment.Integer.toString(numberOfHalfday, 2, 2);",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.SSS\").join();",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".toString(\"dd MMMMoments:mm: \" + curr);",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".toString(\"dd MMMMIC13: \" + unit.numberOfSuccessor().toString());",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".toString(\"dd MMMMAGIC:mm:ss.Number(numberOfHalfday(), unit.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.SSS\").printPartialStackTrace();",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".toString(\"dd Millisecond number:mm:ss.SSS\").printPartialStackTrace();",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".toString(\"dd MMMMoments:mm:ss.Number(numberOfHalfday, _numberNegative ? 1 : 0);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.SSS\").print(N.numberOfHalfdays\"));",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".toString(\"dd MMMMoments:mm:ss.number);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".toString(\"dd MMMM\").print(N.numberOfHalfday(), unit.y);",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".toString(\"dd MMMMoments:mm: \" + unit.numberOfSuccessor);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".toString(\"dd MMMMICnumerator:mm: \" + ad);",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".toString(\"dd MMMMICgcd:mm:ss.number);",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.Number(numberOfHalfday(): \"yyyy\"));",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".toString(\"dd MMMMICnumerator: \" + adc);",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".toString(\"dd MMMMICN\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\").print(number);",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".toString(\"dd MMMM0(hourOfDay)\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".toString(\"dd MMMMoments:mm: \" + adt.numberOfHalfday());",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.number\"));",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".toString(\"dd MMMMoment\").print(N.numberOfHalfday()));",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".toString(\"dd MMMMoments:mm:ss.Number(numberOfHalfday, _numberNegatived+\")\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".toString(\"dd Mmm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".toString(\"dd MMMMICLOCKWISE_numerator:mm:ss.number);",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".toString(\"dd MMMMAGIC:mm:ss.SSS\").join();",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".toString(\"dd Millisecond number:mm:ss.longValue(): \"yyyy\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".toString(\"dd MMMMOTYPE: \" + adc);",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".toString(\"dd MMMMIC13: \" + adi.numberOfSuccessor().toString());",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".toString(\"dd MMMMICnumerator:mm: \" + unit.numberOfSuccessor().toString());",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.Number(0): \" + unit.numberOfHalfday);",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".toString(\"dd MMMMICnumerator:mm: \" + unit.numberOfSuccessor);",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".toString(\"dd MMMM0(dd 3) + count / 2));",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\").printPartial(hourOfDay);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".toString(\"dd MMMMoments:mm:ss.Number(numberOfSuccesses()));",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.Number(0): \" + unit.numberOfSuccesses);",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".toString(\"dd MMMM d,[2]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".toString(\"dd MMMMoment.Number (numberOfHalfday:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\").printPartial(_number);",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".toString(\"dd MMMMICLOCKWISE_numerator:mm: \" + unit.number);",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".toString(\"dd MMMM\").substring(0, 2));",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".toString(\"dd MMMMoment.Number (numberOfHalfday:mm:ss.toString()));",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\")                    // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional()         // adc 2"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.getSize() == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.getSize() == 2) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parser.insideFunction()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parser.nextInt(position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.nextInt(parser.next()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.get(position).nextInt) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.get(position - 1);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parser.getPosition() == 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parser.contains(parser.nextInt(position)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parser.contains(parser.nextInt(position), parser)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parser.nextInt(v)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parser.getArgumentTypes() == null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parser.get(position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parser.get(position - 1, parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.toString())) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parser.nextInt(parser.getCurrentPosition() + 1, parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parser.getTwin() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parser.getnumberOfT() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parser.nextInt(parser.next())) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parser.getESCAPE() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parser.getMethod() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parser.getLanguageVersion() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parser.get getBaginary() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parser.nextInt(parser.next()) == false) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parser.contains(parser.nextInt(position))) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parser.contains(parser.nextInt(v)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parser.getPadding() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.nextInt(parser.getCurrentPosition() + 1, parser.MAX_CONSTRUCTOR)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parser.contains(parser.nextInt(true)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parser.get(4Twin() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parser.getMethod() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parser.getDescription() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.getTwin() == parser || parser.contains(parser.MAX_CONSTRUCTOR)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.getSize() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parser.getTwin() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parser.nextInt(parser.nextInt(position))) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.getDeclaringClass() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parser.getMethod() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.getESCAPE() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parser.getError() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.getTwin() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parser.getnumberOfT() == parser.parsePrune()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parser.getAnalyzer() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parser.getTwin() == parser.parsePrune()) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parser.getPos() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parser.getDeclaringClass() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parser.getDescription() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parser.getStartPosition() == 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parser.getLanguageVersion() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parser.getDeserializer() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parser.get getBaginary() == parser.parsePrune) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parser.geterrorPosition() == 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.getDeclaringClass() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.nextInt(parser.next(), parser)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parser.getSeriesIndex() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.getPadding() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parser.getExceptionPosition() == 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parser.getTokenList().contains(parser.nextInt())) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.getUpperPosition() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.getTokenList().contains(parser.nextInt)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parser.get(position - 1, parser.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parser.geterror() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.getError() == parser.parsePrune) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parser.get(position - 1, parser.MAX_VALUE) != null) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parser.get(position - 1, parser.MAX_VALUE) == 2) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (parser.getPadding() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.nextInt(parser.getCurrentPosition() + 1, parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parser.getError() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parser.getDeclaringClass() == parser.parsePrune) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parser.getate() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parser.getReturnType() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.getTwin() == parser || parser.next().equals(parser.MAX_CONSTRUCTOR)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.getCfg() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parser.getMetrics() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parser.getSeriesIndex() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.get(position).nextInt) == parser.parsePrune) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parser.getnumberOfT() == parser.parsePrune) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parser.getLocation() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parser.getDayOfWeek() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.nextInt(parser.next()) == parser.MAX_CONSTRUCTOR) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.getDeserializer() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.get getBaginary() == null) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.get getBinary() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.get(position - 1, parser.MAX_VALUE) == 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parser.getIterator() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parser.getDescription() == parser.parsePrune) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parser.getError() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parser.getIntervalPosition() == 0) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parser.getStartPosition() == parser.ESCAPE_VAR) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.getTwin() == null) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parser.getDeclaringClass() == parser.NAME) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parser.get(position - 1, parser.MAX_VALUE) == PropertyPointer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.getPosition() == parser.ESCAPE_VAR) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.geterror() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parser.getLineNumber() == 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parser.nextInt(parser.nextInt(position)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parser.getDescription() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.()), position) == false) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parser.getLeft() == null) {",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (position == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (position == 1) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (position >= Integer.MIN_VALUE && data <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (position == 0 && options.getLeft().length() > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (position == 0 && options.getTokenList().size() > 0) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (position == 0 && c.length() > 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (position >= 0 && position <= data[5]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (position == 0 && length == data.length) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (position == 0 && options.getTokenList().length() > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (position == 0 && i.getRawClass() == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (position == 0 && position == data.length) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (position == 0 && options.getLeft() != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (position == 0 && options.getFALSE().length() > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (position == 0 && options.get2().length() > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (position == 0 && options.get2().startsWith(\"0x\", dataArea.length() > 0) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (position >= 1 && position <= data[5') {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (position == 0 && i.getRawClass() == Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (position.length() > 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (position >= 0 && position <= data[0].length()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (position >= 0 && position <= data.length) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (position == 0 && row.length() > 0) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (position >= Integer.MIN_VALUE && c <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (position == 0 && options.getSize() == 2) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (position == 0 && i.getFirstChild() == data.length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (position == 0 && _valueType == null || position.length() == 0) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (position == 0 && options.get2().compareTo(\"0x\", dataArea.length() > 0) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (position >= 0 && position <= data[5') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (position == 0 && options.getStart().startsWith(\"0x\", dataArea.length() > 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (position == 0 && options.getLeftSubTree() == null) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (position == 0 && position.getSize() == 2) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (position == 0 && options.get2().compareTo(\"0x\", dataArea.length) > 0) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (position == 0 && options.getStart().length() > 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (position == 0 && i.equals(\"Collection\", dataArea.length() > 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (position == 0 && i.getEnd().startsWith(\"0x\", dataArea.length() > 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (position == 0 && i.getChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (position == 0 && position == null) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (position == 0 && position == Object.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (position == 0 && options.get8(\"data\", dataArea.length() > 0) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (position == 0 && _valueType == null || position.getRawClass() == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (position == 0 && options.get[5().length() > 0) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (position == 0 && i.getLeading().length() > 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (position == 0 && _valueType == null || position.length() == 2) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (position >= 1 && position <= 2) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (position == 0 && position == char.length() > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (position >= 1 && position <= data[5]);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (position == 0 && i.getSize() == 2) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (position == 0 && options.getTokenId() != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (position == 0 && i.length() > 0) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (position >= 0 && position <= data[5 Kit.codeBug();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (position.length() > 10) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (position == 0 && options.getBinaryValue(\"[]\", dataArea.length() > 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (position >= 0 && position <= data[3]) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (position >= 2 && position <= data[5') {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (position >= 0 && position <= data[0].length) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (position == 0 && _valueType == null || position.getRawClass() == Object.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (position == 0 && options.getTokenId() == null) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (position == 0 && options.getTokenId() == JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (position >= 0 && position <= datapoint.length) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (position == 0 && i.getEnd().length() == 0) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (position >= 0 && position <= data[0], values.length) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (position == 0 && options.getTokenId() == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (position >= 2 && position <= 56319) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (position >= 0 && position <= dataArea.length) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (position == 0 && options.get[1]() == Object.class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (position.length() == 2) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (position == 0 && position.length() > 0) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (position >= 0 && position <= data[5 || c.length) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (position == 0 && values.length() == 0) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (position == 0 && options.get2().startsWith(\"0x\", dataArea.length())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (position == 0 && _value.length() > 0) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (position == 0 && options.get[5Name() != null) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (orientation == PlotOrientation.VERTICAL) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (position == 0 && options.getLeftSubTree() != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (position == 0 && i.length == 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (position >= 0 && position <= data[5 || c.length < 2) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (position == 0 && position ==Values.length()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (position == 0 && options.getStart().startsWith(\"0x\", dataArea.length())) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (position == 0 && i.equals(\"Collection\", dataArea.length - 1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (position == 0 && options.get[1]() ==Values.length()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (position == 0 && position == char.length()) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (position == 0 && position == 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (position >= Integer.MIN_VALUE && position <= data[3]) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (data.length == 2) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (position == 0 && position == length) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (position == 0 && _valueType == null || position.getRawClass() == Integer.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (position == 0 && options.getBinaryValue(\"data\", \"set) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (position >= 2 && position <= data[5]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (position >= Integer.MIN_VALUE && position <= data[0].length) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (position == 0 && options.get2().startsWith(\"0x\", dataArea.length() > 2) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (position == 0 && i.getSpace() == 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (position == 0 && options.getTokenList().size() < data.length) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (position == 0 && i.getEnd() == 2) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (position == 0 && _[5Types.length == 2) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (position == 0 && options.get2().startsWith(\"0x\", dataArea.length() > 10) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (position >= 1 && position <= attributes.size()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (position == 0 && i.getRawClass() == Object.class) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (position == 0 && position ==Values.length() > 0) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (position == 0 && i.getFirstChild() == Object.class) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (position == 0 && options.getBinaryValue(\"[]\", \"set) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (position == 0 && options.get2().startsWith(\"0x\", dataArea.length() > 3) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "updateBreakPositionaload((int) input);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(input);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "updateXPoints(CoefficientPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "updateXPoints(CoaledPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getValue() : null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "updateBreakPositionaload((int) input.getMillis());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "iterateAngleStartPosition = calculatePachability(input);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input.getName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input.getClass().getName());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "updateBounds(CoefficientPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minimal Double.POSITIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "updateBreakPositional prefixes(input);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "iterateAngleStartPosition = calculateMediannotatedChild(input);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input.getMessage());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickValue(input);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(min().getTime() / DateTimeConstants.MILLIS_PER_SECOND);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minimalIterationCount);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "updateXPoints(minimalIterationCount, denominator);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "updateXPoints(minimalIterationCount, this.maxValue);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "updateBounds(n, this.allowDuplicateXValues);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "updateXPoints( denominator, rowAngle);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "updateXPoints(minimalIterationCount, maxIterations);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(min().getTime() / DateTimeConstants.MILLIS_PER_DAY);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "setupSmallLogFlag = calculatePachability(input);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minimal Double.NEGATIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "updateXPoints(getGraphics());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "updateBreakPositional prefixes(minimalAngle);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "updateBounds(n, CLASS_MUST_BE_LAST);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleForSet(input);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getTickLabelPosition() : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "updateXPoints(x, y);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minimalMatch);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getType() : null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "updateXPoints(minimalIterationCount, this.maxInput);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "updateXPoints(n, this.xPosition);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "updateXPoints(minimalIterationCount, this.upperBound);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "updateXPoints(minimalIterationCount, input);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getTickMarkPosition() : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickIncrement(input);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.doubleValue() : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getValues() : null;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getCharacterIndex();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickBandIsPrune;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getValue() : null;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.get SIX() : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getImplicitReturn() : null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "iterateAngleStartPosition = calculateMIDDLE(input);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getDenominator() : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "updateXPoints(minimalIterationCount, this.allowDuplicateXValues);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "updateBreakPositionaload((int) input.getDenominator()).toString();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickBandIsPaledPosition.getGraphics();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "MISSING_PROVIDE_WARNING = Math.pow(10.0f;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "updateBreakPositional prefixes(D.getGraphics());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getName() : null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "updateXPoints(minimalMatch, input);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "updateBreakTickIncrement(input);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? Integer.MAX_VALUE : input;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "iterateAngleStartPosition = calculateMediannotatedChildAfter(input);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getImplicitPrototype() : null;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "updateBreakPositionaload((int) input.getDenominator()).deraledMutation();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "updateXPoints(minimalType, input);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "updateBreakPositionaload((int) input.getCharacterIndex());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getValue() : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.get getCallbacks() : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickBandIsPruneiling(minimal Double.POSITIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "updateXPoints(n, this.dayAngle);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getValue() : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "updateXPoints(minimalIterationCount, this.maxCRC);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.get)) : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(min().getTime() / DateTimeConstants.MILLIS_PER_HOUR);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getTickIncrement() : null;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickBandIsPaledPosition(input);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getName() : null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "iterateAngleStartPosition = calculateLowestableValue(input);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getN() : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickBandIsPruneiling(minimal Double.NEGATIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getnight() : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "updateXPoints(minimalIterationCount, this.maximumItemCount);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getName() : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getDescription() : null;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "updateXPoints(minimalIterationCount, this.maxSize);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "MISSING_PROVIDE_WARNING = Math.abs(this.isAngleToDraw()) ? input.getTyping() : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "iterateAngleStartPosition = calculateThreshold(input);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "updateBreakPositionaload((int) input.getDenominator()).deraledPosition);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.get)) : null;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getMIDDLE();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.get getCallbacks() : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "updateXPoints(Coaled);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minY, input.MILLIS_PER_SECOND);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "updateBreakPositionaload((int) input.getMIDDLE());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics() > 0) ? input.getValue() : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minY);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getTime() : null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "updateBreakPosition.getGraphics());",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-200": {
        "fixes": [
            {
                "k": 1,
                "patch": "return convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return convert(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return convert(throwable,Throwable);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return convertator(throwable, throwable);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return convert(throwable, clazz, 0, false);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return convert(throwable, clazz, 0, size);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return convert(throwable, condition);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return convert(throwable, clazz, 0, buf.length);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return convertonestable(throwable, throwable);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return converton(throwable, throwable);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return convert(throwable, CAUSE_METHOD_NAMES);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return convert(throwable, error);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return convert(throwable, Throwable);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return convertWithThrowable(throwable, throwable);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return converton(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return convert(throwable, source, throwable);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return convert(throwable, InsnList) < 0) ? null : throwable;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return convert(throwable,ROUND_NOT_FOUND + \"]\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return convert(throwable, old);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return convert(throwable,Modifier.newThrowable(throwable));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return convertonValues(throwable, throwable);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return convertonMethod(throwable, throwable);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return convertPredicates(throwable, throwable);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return convert(throwable, DEFAULT_LOAD_FACTOR), throwable);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return convertCapacity(throwable, throwable);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return convert(throwable, clazz, 0, this.nestable);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return convertonMethod(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return convertPredicates(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return convertonValue(throwable, throwable);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return convertWithThrowable(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return convert(throwable, Throwable.class);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return convertValue(throwable, throwable);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return convertonestable(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return convert(throwable,ROUND_NOT_FOUND + \" is not a valid.\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return convert(throwable, ArrayUtils.EMPTY_LIST_ERROR));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return convert(throwable, sourceName, throwable);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return convert(throwable, MILLIS_PER_SEGMENT);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return convert(throwable, source);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return convert(throwable, MILLIS_PER_SECOND);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return convert(throwable,ROUND_NOT_FOUND + \" is invalid.\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return convert(throwable, null);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return convert(throwable, ArrayUtils.EMPTY_STRING_ARRAY);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return convert(throwable, clazz, 0, 0);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return convertonFile(throwable, throwable);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return convertonestimate(throwable, throwable);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return convertonFactory(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return convert(throwable, root);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return convert(throwable, clazz, 0, 0 );",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return convertonToThrowable(throwable, throwable);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return convert(throwable, methodName);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return convertatorFor(throwable, throwable);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return convertassign(throwable, throwable);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return convert(throwable, param);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return converton(throwable, clazz, 0, size);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return convert(throwable,MAX_VALUE);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return convert(throwable, clazz, 0, endIndex);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return convert(throwable, MILLIS_PER_WEEK);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return convert(throwable,ROUND_NOT_FOUND);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return convertByThrowable(throwable, throwable);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return convertKey(throwable, throwable);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return convertCumulative(throwable, throwable);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return convert(throwable, ARRAY);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return convert(throwable, lex);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return convertonestimate(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return converton(throwable, clazz, 0, buf.length);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return convert(throwable, 0, throwable);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return convert(throwable, clazz, builder);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return convert(throwable, ArrayUtils.EMPTY_LIST_CHARACTER);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return convertonExpression(throwable, throwable);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return convert(throwable, DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return convert(throwable, ArrayUtils.EMPTY_STRING_AS_NULL);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return convertonestable(throwable, clazz, 0, false);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return convertField(throwable, throwable);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return convertData(throwable, throwable);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return convertonMethod(throwable, clazz, 0, size);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return convertonType(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return converton(throwable, clazz, 0, false);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return convert(throwable, values);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return convert(throwable, Nopcode);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return convert(throwable, type);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return convert(throwable, CAUSE_METHOD_ERROR);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return convertonFactory(throwable, throwable);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return convert(throwable,ROUND_NOT_FOUND + 1, throwable);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return convert(throwable, InsnList) : throwable;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return convertonMethod(throwable, clazz, 0, false);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return convert(throwable, externs);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return convert(throwable, \"detail\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return convert(throwable, Throwable[index]);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return convertters(throwable, throwable);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return convert(throwable, InsnList) >= 0);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return convertonestable(throwable, clazz, 0, buf.length);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return converton(throwable, source, throwable);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return convert8(throwable, throwable);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return convertonestable(throwable, clazz, 0, size);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return convert(throwable,ROUND_NOT_FOUND + \" is less than 1:\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return convert>(throwable, throwable);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return convert(throwable,Modifier.EMPTY_LIST_ERROR));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return convert Collection(throwable, throwable);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return convert(throwable,ROUND_NOT_FOUND + \" 9\", throwable);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return convertPredicates(throwable, clazz, 0, buf.length);",
                "identical": false
            }
        ],
        "buggy_line": "return convert(null, throwable);",
        "fixed_line": "return convert(\"\", throwable);"
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.setShort(i, i + 1, 1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.setShort(index + 1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.setShort(index + 1, i, 3);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.setShort(i, i + 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.setPosition(i + 1, 1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.setShort(index + i, data[index], 0.0);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.setShort(index + 1, i, 3;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.setShort(i, i + 1, 0.0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.setShort(i, i + 1, 2);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.setShort(index + i, data[index++]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.setPosition(i + 1, text[index + i - 1]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.setShort(index + 1, text[index], 0.0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.setShort(i, j + 1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.setShort(i, data[index++], 16);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.setShort(i + 1, 1);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.setShort(i, i + 1, INT_SPACE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.setShort(index + 1, INT_SPACE) * 8;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.setPosition(i + 1, text[index + i - 1]));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.setPosition(i, i + 1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.setShort(index + 1, i,7);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.setPosition(i, i + 1, 1);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.setPosition(i + 1, INT_PREFIX[index], 0.0);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.setShort(index + 1, INT_PREFIX[index], 0.0);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.setShortName[index++] = INT_QUOTE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.setPosition(i + 1, text[index + i] - 1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.setShort(index + 1, 1);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.setShort(i, ((int) (data[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.setShortName(i, data[index++], 16);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.setShort(index + 1, i,ones.length - 1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.setShortName[index++] = BYTE_LT;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.setShort(index + 1, i, 8);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.setShortName[index++] = BYTE_BACKSLASH;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.setShort( i + 1, INT_PREFIX[index], 0.0);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.setShortText[index++] = INT_QUOTE;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.setShort(index + 1, i, 4);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.setShort(i + 1, INT_PREFIX[index], 0.0);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setShort(index + 1, text[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.setShort(i, i + 1, INT_QUOTE);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.setShort(index + 1, actually.length - 1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.setShort(i, ((int) (data[index++ + i], 0.0);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.setShort(index + 1, i, L - 1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.setShort(type + i, data[index], 0.0);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.setShort(i + 1, text[index + i - 1]);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.setShort(index + 1, i, typeId);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.setPosition(i + 1, text[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.setShort(index + 1, text[index + i - 1]);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.setShort(index + 1, i,6 - 1);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.setShort(i, data[index++]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.setPosition(i + 1, 7,[index + i - 1]);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.setShort(index + 1, data[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.setShort(i, ((int) (data[index], 16);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.setShort(i, NO_PREFIX + 1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.setShort(index + 1, text[index + i] - 1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.setShort(i, ((int) (data[index++ + i] * 8);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.setPosition(i + 1, 7,[index + i - 1]));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.set ShortPosition(i + 1, 1);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.setShort( i + 1, 1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.setShort(index + 1, i, power);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.setPosition(i + 1, 7,[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.setShort(index + 1, data[index + i - 1]);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.setShort(i, i + 1, 2, 3);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.setShort(index + 1, INT_SPACE) * 3) + 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.setShort(index + 1, i,state.length - 1);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.setShort(i, i + 1, INT_PREFIX.length - 1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.setShort(type + i, data[index++]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.setPosition(i + 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.setShort(index + 1, INT_QUOTED);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.setShortPosition(i, i + 1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.setShort(index + 1, i, 16);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.setPosition(i + 1, text[index], 0.0);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.setShort(i, i + 1, pairs[index], 0.0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.setShortName[index++] = BYTE_GROUPS[index], 0.0);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.setShort(i, i + 1, INT_QUOTED);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.setShort(index + 1, data[index], 0.0);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.setShortName[index++] = BYTE_QUOTE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.setShort(i, ((int) (data[index++] * 8);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.setShortPosition(i + 1, 1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.setShort(i, ((int) (data[index + i] * 8);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.setPosition(i, j + 1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set(i, data[index++], 16);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setShort(i, i + 1, 7,[index], 0.0);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.setTokenPosition(i, i + 1, 1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.setShort(index + 1, it.length - 1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.set ShortPosition(i, i + 1, 1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.setShort(index + 1, INT_SPACE);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.set Short(i, i + 1, 1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.setShort(index + i, data[index++);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.setY(i, data[index++], 16);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.setPosition(i + 1, actually.length - 1);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.setShort(index + 1, i,6);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.setShort(i, i + 1, TextAnchor.CENTER, type - 1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.setShort(index + 1, INT_SPACE) * 3;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.setShortName(i, data[index++]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.setShort(i, i + 1, false);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.setShort(i, Short.parseShort(data[index++], 16));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.setShort(index + 1, INT_SPACE) * 2;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.setPosition(i, i + 1, 2);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.setPosition(i + 1, text[index + i - 1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.setShort(i, ((int) (data[index++ + i * 8);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.setShort(i, i + 1, INT_SPACE) * 8;",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (uniqueIdCache == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (uniqueId != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (uniqueId.class.isOn()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (uniqueId == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (uniqueId.class != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (uniqueId) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (uniqueId.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (uniqueId.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (uniqueId.class().isAssignableFrom(method.getRawClass())) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (uniqueId.class.isAssignableFrom(method.getRawClass())) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (uniqueId.class.isAssignableFrom(options.getClass())) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (uniqueId.class().isAssignableFrom(method.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (uniqueId.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (uniqueId.class().getObjectId() == null) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (uniqueId.class().getAnnotation(REACHABLE) == null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (uniqueId() == null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (uniqueId.class().getSimpleName() == null) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (uniqueId.class().getAnnotation(Context.class) == null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (uniqueId.class.isSurrogate()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (uniqueId.class.isAssignableFrom(alternatives.class)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (uniqueId.class().getAnnotation(Context.class)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (compiler.getCodingConvention().isExported(uniqueId)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (uniqueId.class.isAssignableFrom(random.class)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (uniqueId.class.isAssignableFrom( SMIds.class)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (uniqueId.class().isAssignableFrom(Context.getClass())) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (uniqueId.class().isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (uniqueId.class.isAssignableFrom(Visibility.class)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (uniqueId.class.isAssignableFrom(aly.class)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (uniqueId.class.isAssignableFrom( 360)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (uniqueId.class.isAssignableFrom( EvalContext.class)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (uniqueId.class.isAssignableFrom(alternate)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (uniqueId.class.isAssignableFrom(Boolean.class)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (uniqueId.class.isAssignableFrom( sx)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (uniqueId.class().getID() == null) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (uniqueId.class.isAssignableFrom(IANEW)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (uniqueId.class.isAssignableFrom( m.getClass())) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || protocol.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (uniqueId.class.isAssignableFrom(HOOK.getClass())) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (uniqueId.class.isAssignableFrom( divide.class)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (uniqueId.class.isAssignableFrom(Adapter.class)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (uniqueId.class.isObjectId()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || protocol.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (uniqueId.class.isAssignableFrom(numberOfId)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (uniqueId.class().getAnnotation(REACHABLE) != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (uniqueId.class.isAssignableFrom(PRINTABLE) || protocol.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (unique == null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (uniqueId.class.isAssignableFrom(section)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (uniqueId.class.isAssignableFrom(1.0,Decoder)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (uniqueId.class.getLocation() == null) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || protocol.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (uniqueId.class.getObjectId() == null) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (uniqueId.class.isAssignableFrom(strategy)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (uniqueId.class.isAssignableFrom(method.getObjectId())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (uniqueId.class.isAssignableFrom(description)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if ( Wildcard.class.isAssignableFrom(uniqueId)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (uniqueId.class.isAssignableFrom(number)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (uniqueId.class.isAssignableFrom(Context.getClass())) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (uniqueId.class.isMalformed()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (uniqueId.class.isAssignableFrom(PRINTABLE) && ! uniqueIds.contains(root.getClass())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (uniqueId.class.isAssignableFrom( sufficient)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (uniqueId.class.isAssignableFrom(method.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId) || protocol.class.isAssignableFrom(number)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (uniqueId.class.isAssignableFrom(PRINTABLE) || protocol.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId) || protocol.class.isAssignableFrom(USE_BOLD)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (uniqueId.class.isConcrete()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (uniqueId.class.isAssignableFrom( ob) || protocol.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (uniqueId.class.isAssignableFrom(method.getCode())) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (uniqueId.class.isAssignableFrom( INT_0) || protocol.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId) || protocol.class.isAssignableFrom(1\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || protocol.class.isAssignableFrom(number)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (uniqueId.class.isAssignableFrom(Exclusion)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (uniqueId.class.isAssignableFrom(PRINTABLE) && protocol.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (uniqueId.class.isNotEmptyPass()) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (uniqueId.class().isAssignableFrom( uniqueIds.class)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (uniqueId.class.isAssignableFrom(require) || protocol.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId) || protocol.class.isAssignableFrom(deserializer.getClass())) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (uniqueId.class.isAssignableFrom(hp)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId) || protocol.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId) || protocol.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId) || protocol.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (uniqueId.classOnly) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (uniqueId.class.isAssignableFrom(compiler)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId) || protocol.class.isAssignableFrom(USE_BREAK)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (uniqueId.class.isAssignableFrom(method.getModifiers())) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (uniqueId.class.isAssignableFrom( bt) || protocol.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (uniqueId.class.isAssignableFrom(PRINTABLE) && ! uniqueIds.contains(url.class)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (uniqueId.class.isAssignableFrom(ract.class)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (uniqueId.class.isAssignableFrom(tol)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || uniqueId.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (uniqueId.class.isAssignableFrom(PRINTABLE) && ! uniqueIds.contains(root.getClass().getRawClass())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (uniqueId.class.isAssignableFrom(numberOfId) || uniqueIds.contains( Token.class)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (uniqueId.class.isAssignableFrom( ob) || uniqueIds.contains( Token.class)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (uniqueId.class.isInterface()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (uniqueId.class.isAssignableFrom(PRINTABLE) || uniqueId.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (uniqueId.class.isAssignableFrom( ID)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (uniqueId.class.isernallyDefined()) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || protocol.class.isAssignableFrom(deserializer.getClass())) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (uniqueId.class.isAssignableFrom(raw) || uniqueId.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (uniqueId.class.isAssignableFrom( percent)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == UUID.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == Character.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == Class.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == int.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == Integer.TYPE) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == sat || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == Date.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == HashMap.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == sat || raw.class == Object.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == attr.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw == BigInteger.class) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == GregorianCalendar.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == short.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class || raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == FRAME.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == Integer.TYPE || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw ==' || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == ObjectNode.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw ==our.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == Int || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Character.class) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw ==' || raw == String.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == ArrayList.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == URI.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw ==String.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == Integer.MIN_VALUE && raw == String.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == int.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == Int || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == Long.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == sat || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == mid.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw ==' || rawType == String.class) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw ==Parent.class) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == sat || raw.class == NoClass.class) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw ==Class.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw ==c.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == ParameterizedType.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == Integer.MIN_VALUE || raw == String.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw ==domain.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw ==Document.class) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == char.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == Int || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == EOF_CHAR) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == sig.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == Integer.MIN_VALUE && raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == intr.class) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw ==Full.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw ==' || raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == Integer.MIN_VALUE || raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Character.class) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == AnnotatedClass.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw ==' || raw == Character.class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == String.class || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw ==cv.class) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == next.class) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == sat || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == bld.class) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == sat || rawType == String.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == nullValue.class) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == cd.class) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == df.class) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == ctx.class) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw ==Expr.class) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == considered.class) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw ==' || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == sat || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw ==Primitive.class) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == function.class) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == INT_TYPE) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == Int || rawType == String.class) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == Int || raw.isPrimitive()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == sat || raw == String.class) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == Integer.MIN_VALUE && raw == short.class) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class || raw == Character.class) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == Calendar.class) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw ==' || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == sat || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == predicate.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == Instant.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw ==Mar.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == setName.class) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw ==report.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == sat || raw.isPrimitive()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == wrap.class) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw ==StringBuilder.class) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw ==4.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == Pattern.class) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.isArray() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.isArray() && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(field.getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.isArray() || fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.isArray() || fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(object.getClass().getName());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.isArray() || fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return field.isArray() && fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.isArray() && fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.isSynthetic() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(object.getName());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.isArray() || fieldNames.contains(field.getReturnType());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.isArray() && fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.isArray() && fieldNames.contains(field.getReturnType());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return field.isArray() || fieldNames.contains(field.getComponentType());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return fieldNames.containsPrimitive() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return fieldNames.contains(field.getType()) || field.isFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return field.isArray() && fieldNames.contains(field.getQualifiedName());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getReturnType());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getComponentType());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().getComponentType());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.isSynthetic() && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return field.isArray() || fieldNames.contains(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.isSynthetic() || fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return field == null || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.isSynthetic() || fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return fieldNames.contains(field.getType()) == false;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getDescriptor());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return fieldNames.contains(field.getType()) || field.isPrimitive());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return fieldNames.contains(field.getType()) &&push.contains(field.getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getComponentType());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return field.isArray() && fieldNames.contains(field.getComponentType());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(instant));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return fieldNames.contains(field.getType()) || field.isLocal();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getQualifiedName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return fieldNames.contains(field.getType().getDescriptor());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return field.isArray() || fieldNames.contains(field.getCount());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.isArray() || fieldNames.contains(field.getModifiers());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.isArray() || fieldNames.contains(field.getDescriptor());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return fieldNames.contains(field.getType()) || field.isArray();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(child.getName());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return fieldNames.contains(field.getType()) && this.field.isAssignableFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return fieldNames.contains(field.getType()) && this.field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return fieldNames.contains(field.getType()) != null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return fieldNames.contains(field.getType()) || field.isExported();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return field.isArray() && fieldNames.contains(field.getDescriptor());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return field.isAssignableFrom(field.getType()) && ignored.contains(field.getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return fieldNames.contains(field.getType()) || field.isFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.isArray() || fieldNames.contains(field.getQualifiedName());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return field.isArray() || fieldNames.contains(field);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(field.isAssignableFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return field.isSynthetic() || fieldNames.contains(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return field.isArray() || fieldNames.contains(field.getClassLoader());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(object) || field.isAssignableFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return field.isArray() || fieldNames.contains(field.getAsNull());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return fieldNames.contains(field.getType()) || field.isPrimitive();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getReturnType());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return fieldNames.contains(field.getType()) || field.is array();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return field.isArray() || fieldNames.contains(field.getDeclaredClass());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return fieldNames.contains(field.getType()) || field.isCountry();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getClassLoader());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return field.isArray() || fieldNames.contains(field.getAsJsonPrimitive());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return fieldNames.contains(field.getType()) && iterator.getClass().isArray();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return field.isArray() || fieldNames.contains(field.getSimpleName());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.isArray() || fieldNames.contains(field.get",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return field.isArray() || fieldNames.contains(field.getAsObject());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.isArray() && fieldNames.contains(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getDSTS_EMPTY_LIST) != null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.isArray() || fieldNames.contains(field.getMillis());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getAsJsonPrimitive());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return field.isJsonObject() && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(field.getComponentType());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getDescriptor());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return fieldNames.contains(field.getType().getSimpleName());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return fieldNames.contains(field.getType()) || field.isInline();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return field.isArray() || fieldNames.contains(field.getlongValue());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getName());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getSimpleName());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return field.isArray() && fieldNames.contains(field.getFirst().getName());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return fieldNames.contains(field.getType()) && object instanceof String;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getModifiers());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getAsObject());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getDeserializer());",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = (l << 8) | c[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = (l << power) | a[i];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = (l << 32 | a[i];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = (l << i) | a[i];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = (l << 8) | b[i];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = (l << r | a[i];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = (l << power) | b[i];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = (l << 8) | the[i];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = (l << power) - a[i];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = (l << 8 | a[i];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = (l << a) | b[i];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = (l << 2);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = (l << Integer.MAX_VALUE) - a[i];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = (l << Integer.MAX_VALUE) | a[i];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = (l << 10 | a[i];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = (l << pad | a[i];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = (l << t | a[i];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = (l << 6 | a[i];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = (l << 32 | b[i];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = (l << 16) | a[i];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = (l << 18 | a[i];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = (l << 11 | a[i];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = (l << 20) | a[i];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = (l << 3 | a[i];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = (l << version) | a[i];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = (l << power) | the[i];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = (l << 1000) | a[i];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = (l << power) | c[i];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = (l << props[i];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = (l << -1 | a[i];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = (l << 6 | b[i];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = (l << i) - a[i];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = (l <<>) a[i];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = (l << 1) | a[i];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = (l << 32 - l[i];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = (l << r) | a[i];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = (l <<==' | a[i];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = (l << 0, a[i];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = (l <<ToString) | a[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = (l << 8) | i];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = (l <<i) - a[i];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = (l << 10 | b[i];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l = (l <<If | a[i];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = (l <<22 | a[i];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = (l <<subplots) | a[i];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = (l << k | a[i];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = (l << 8) | result[i];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = (l << 18) | a[i];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = (l << 12 | a[i];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = (l << 8) | r[i];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = (l << 32 + l[i];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = (l << 8) | calculate[i];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = (l << r | b[i];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = (l << top) | a[i];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = (l <<Negative) | a[i];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = (l << a | b[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = (l << power) - b[i];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = (l <<Interval | a[i];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = (l << 40) | a[i];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = (l << 16) | b[i];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = (l <<iation) | a[i];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = (l << 32 | c[i];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = (l << 500 | a[i];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = (l <<Warning) | a[i];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = (l <<Path) | a[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = (l << 15) | a[i];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = (l << 9 | a[i];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = (l <<Group - a[i];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = (l << i - a[i];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = (l << 28 | a[i];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = (l <<moveTo | a[i];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = (l << 8) | w[i];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = (l << average | a[i];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = (l << Integer.MAX_VALUE) | c[i];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = (l <<iated | a[i];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = (l << pad | c[i];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = (l <<dd | a[i];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = (l << inner | a[i];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = (l << 1000 | a[i];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = (l << 32 - a[i];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = (l << 8) | cw[i];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = (l <<Trans | a[i];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = (l << Note | a[i];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = (l << 6) | a[i];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = (l <<Warning | a[i];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = (l << {\" | a[i];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = (l << 8) | width[i];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = (l << Statistics | a[i];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = (l << a + l[i];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = (l << current | a[i];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = (l <</** | a[i];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = (l << 8) | to[i];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = (l << schema | a[i];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = (l <<Dis | a[i];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = (l << 8 | b[i];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = (l << Integer.MAX_VALUE) | b[i];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = (l << power) | i];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = (l << |= merge[i];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = (l << Integer.MAX_VALUE - l[i];",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private final synchronizedArInput addArInput() {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private final synchronizedArInput addArInput(printInput) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private final synchronizedArInput addArInput(processInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private final synchronizedArInput addArInput(coefficientInput)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private final synchronizedArInput addArInput(sm, processInput) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private final synchronizedArInput addArInput(inExternsInput) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private final synchronizedArInput addArInput( determiningInput) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private final synchronizedArInput addArInput(processInput) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private final synchronizedArInput addArInput(sm, processInputLookahead) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private final synchronizedArInput addArInput(FromInput) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private final synchronizedArInput addArInput(ATIONS) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private final synchronizedArInput addArInput(vi).processInput();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private final synchronizedArInput addArInput(removedInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private final synchronizedArInput addArInput(oldInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private final synchronizedArInput addArInput(anksInput) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private final synchronizedArInput addArInput( editInput) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private final synchronizedArInput addArInput();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private final synchronizedArInput addArInput(fs.getTokenLocation());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private final synchronizedArInput addArInput(getAllInput) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private final synchronizedArInput addArInput( lastInput) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private final synchronizedArInput addArInput( dividerInput) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private final synchronizedArInput addArInput( pairs.getTokenLocation());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private final synchronizedArInput addArInput( largestInput) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private final synchronizedArInput addArInput(drawImageInput) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private final synchronizedArInput addArInputProcess = newhistoryCount() {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private final synchronizedArInput addArInput( acceptInput) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private final synchronizedArInput addArInput(epsInput);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private final synchronizedArInput addArInput(inSameInput) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private final synchronizedArInput addArInput((10Input instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private final synchronizedArInput addArInput(INTERFACEInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private final synchronizedArInput addArInput( randInput) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private final synchronizedArInput addArInput(FromInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private final synchronizedArInput addArInput(anksInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT,AntiInput) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private final synchronizedArInput addArInput(vi).processInput) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EMPTY);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private final synchronizedArInput addArInput( IterableInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private final synchronizedArInput addArInput( editInput)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private final synchronizedArInput addArInput(choiceInput);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private final synchronizedArInput addArInput(MAInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private final synchronizedArInput addArInput(sanityInput) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private final synchronizedArInput addArInput(inclInput) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private final synchronizedArInput addArInput( reservedInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private final synchronizedArInput addArInput(enableInput) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private final synchronizedArInput addArInput( DecoderInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private final synchronizedArInput addArInput( getInstanceInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private final synchronizedArInput addArInput(anksInput);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private final synchronizedArInput addArInput().processInput(prefetchRoot);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private final synchronizedArInput addArInput(mixin, 255Input) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private final synchronizedArInput addArInput(inLoop, quarterInput) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private final synchronizedArInput addArInput(inclInput[i]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private final synchronizedArInput addArInput(enableInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private final synchronizedArInput addArInput(inLoop, deepestable) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private final synchronizedArInput addArInput(in.iInputName) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private final synchronizedArInput addArInput( lastInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private final synchronizedArInput addArInput(referencedInput) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private final synchronizedArInput addArInput( determiningInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private final synchronizedArInput addArInput(calRecordsInput) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private final synchronizedArInput addArInput(astInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private final synchronizedArInput addArInput(inLoop, DateTimeConstants.TYPE_PER_DAY) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private final synchronizedArInput addArInput(processInput instanceofRecordsInput());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private final synchronizedArInput addArInput(checkInput) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private final synchronizedArInput addArInput(errorInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private final synchronizedArInput addArInput( acceptInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private final synchronizedArInput addArInput( IterableInput) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private final synchronizedArInput addArInput(inLoop, DateTimeConstants.TYPE_OBJECT) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT,AntiInputLookahead) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private final synchronizedArInput addArInput(sqInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private final synchronizedArInput addArInput( pairs.getInput());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private final synchronizedArInput addToken() {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private final synchronizedArInput addArInput(subtypeInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private final synchronizedArInput addArInput(Generator.class, DateTimeConstants.TYPE_PER_DAY) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private final synchronizedArInput addArInput(serializersInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private final synchronizedArInput addArInput(inLoop, JFreeInput)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private final synchronizedArInput addArInput(in);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private final synchronizedArInput addArInput(sanityInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private final synchronizedArInput addArInput(sm, processInputLookruptedException) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private final synchronizedArInput addArInput(inLoop,onedInput) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private final synchronizedArInput addArInput( editInput);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private final synchronizedArInput addArInput(vi).processInput()) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private final synchronizedArInput addArInput(inLoop, shell.iInputName);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private final synchronizedArInput addArInput(Generator.class, DateTimeConstants.TYPE_EXCLUSION_STRATEG) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private final synchronizedArInput addArInput( acceptInput);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private final synchronizedArInput addArInput(prefetchRoot, quarterInput) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private final synchronizedArInput addArInput( lastInput);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private final synchronizedArInput addArInput(inclInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private final synchronizedArInput addArInput(\".equals(prefetch.getName())) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private final synchronizedArInput addArInput());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private final synchronizedArInput addArInput( pairs.getTokenLocation()))) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private final synchronizedArInput addArInput(coefficientInput) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private final synchronizedArInput addArInput(inLoop, quarterInput);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private final synchronizedArInput addArInput(mixin);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private final synchronizedArInput addArInput(referencedInput);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private final synchronizedArInput addArInput(processInput instanceofRecordsInput)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.BLOCK);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private final synchronizedArInput addArInput(inLoop,.0)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private final synchronizedArInput addArInput(inLoop, ensureInput) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private final synchronizedArInput addArInput(inLoop, chart.iInputName);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private final synchronizedArInput addArInput(sm, processInputName) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.VAR, TYPE_LINE_SEPARATOR);",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".createTransformedShape(cArg);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfSuccesses(cArg.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberOfSuccesses(c1.getArgType(), f.getRawClass());",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString(), f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".createTransformedShape(numberOfSuccesses);",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberOfSuccesses(c1.getLastChild().substring(0, 46));",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberOfSuccesses(c1.getArgType(), f2.getRawClass());",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".createTransformedShape(c1.getClass().getLowerBound() + 0.5);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), state.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.numberOfSuccesses);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond().toString());",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOfSuccesses(c1.getArgPerModule(), f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".createTransformedShape(c1.getArgCount() + 0.5);",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".createEmptyBorder(0, 5, 0, 5));",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.y);",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".createTransformedShape(lineNumber);",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f2.getNumber().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastChild().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".createTransformedShape(cArgCount);",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".createTransformedShape(numberOfSuccesses());",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".createTransformedShape(c1.getLowerBound() + 0.5);",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".create(); //setup number of group",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString());",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.number.0); //create multiplier value",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberOfSuccesses(cArg); //create multiplier value",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberOfSuccesses(c1.gethour() + 0.5); //create multiplier value",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".createTransformedShape(\"cPresent\"));",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".createTransformedShape(c1.getClass().getLowerBound() + \")L * LENGTH); // number of file id",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".createTransformedShape(numberOfSuccesses(), f.getLastMillisecond(x + 1); // 0x10 value",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f);",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".toString(\"Unable to parse unicode value: \" + ad); //create multiplier value",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f2.getDouble());",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.y, state.y + 1));",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getNumber().y);",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberOfSuccesses(c1.getValue().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".createTransformedShape(numberOfSuccesses(), limit));",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getNumber().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".createTransformedShape(c1.parent().getLastChild()); // 0x1s do implicit re-numberOfSuccessor",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), frc);",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".createTransformedShape(numberOfSuccesses(), f.y, state.y));",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".createTransformedShape(c1.getClass().getLowerBound() + \")\")\"; // support multi > 0x1s",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".toString(\"Unable to parse unicode value: \" + stack); // 0x1s.",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".createTransformedShape(c1.getAngleExtent() + 0.5);",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), state.y);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.numberOfSuccessor);",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberOfSuccesses(c1.getArgType(), f.getLastMillisecond(x + 1);",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.numberOfSuccessor().substring\"));",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".createTransformedShape(numberOfSuccesses(), f.y, state.y + 1));",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 1); //create label",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.y, state.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f2.getLong());",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".toString(\"Invalid max value: \" + ad); //create multiplier value",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberOfSuccesses(c1.getCenterX(), f.getNumber().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 11));",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberOfSuccesses(c1.getArgType(), f.getLastMillisecond(x + 1); //create label",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.denominator/d\"));",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 1); // 0x10 value",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberOfSuccesses(c1.getCenterX(), f.getNumberType());",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".createTransformedShape(c1.getFirstMillisecond(), state.y);",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberOfSuccesses(c1.getCenterX(), f.getNumber().y);",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".createTransformedShape(c1.getClass().getLowerBound() + \")\"; // support multi > 0x1s",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString()))); //create multiplier value",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".createTransformedShape(state.y);",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f2.getNumber().y);",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".createTransformedShape(c1.getArg1().numberOfSuccessor() + 0.5);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.y, state.y);",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".toString(\"Invalid max value: \" + adt.numberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".toString(\"Unable to parse unicode value: \" + this); //create multiplier value",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".numberOfSuccesses(c1.getContent() + 0.5); //create multiplier value",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".createTransformedShape(c1.getFirstMillisecondOfMinute(), limit));",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberOfSuccesses(c1.getArgType(), f.getLastMillisecond(x + 0.5));",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.numberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond())));",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getN());",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".createTransformedShape(c1.getArgName(), f.getNumber().y);",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".createTransformedShape(numberOfSuccesses(), f.getLastMillisecond(x + 1); // 0x",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberOfSuccesses(c1.getArgType(), f.getLastMillisecond(x + 11));",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getNumber().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f );",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 1); // 0x",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberOfSuccesses()); // actual",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".createTransformedShape(c1.getArgCount(), state.y);",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString(), f.y);",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".createTransformedShape(c1.getClass().getLowerBound() + \")\"; // 6 1s",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.numberOfHalfday); //create multiplier value",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getDouble());",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString())));",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 0.5));",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".toString(\"Unable to parse unicode value: \" + state.numberOfSuccesses);",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.numberOfHalfday);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".numberOfSuccesses(c1.getTickLabel()); // actual value",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".createTransformedShape(c1.parent().getLastChild()); // 0x1s do implicit re-numberOfHalfday",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.numberOfSuccessor().substring(3));",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecondCount() + \" subtrahend\"));",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".toString(\"Unable to parse unicode value: \" + stack); //create multiplier value",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.numberOfSuccessor().substring(2));",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".toString(\"Unable to parse unicode value: \" + stack);",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.y, (int) state.y - 1));",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".createTransformedShape(c1.getClass().getLowerBound() + \")\"; // support multi > 0x1s\")",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\")                     // power",
        "fixed_line": ".number(\"(x+)?,\")                    // power"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encrypted = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encryptedInvocations = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encrypted = request.getdummy();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encrypted = request.get );",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encrypted = request.getVersion();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encrypted = request.getbeans();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encrypted Box = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encrypted = request.get GT();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encrypted = request.getDimensions();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encrypted Sm = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encryptedoding = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encrypted inst = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encrypted = request.getTip();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encryptedDataKeys = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedInv = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encrypted = request.get Matchers();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encrypted GZIP = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encrypted = request.getrevShapes();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encryptedDifference = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encryptedDelimiter = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encrypted\u770a = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encrypted sequence = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encrypted some = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encrypted = request.getTipFactory();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encryptedpagination = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encryptedDataKeys = request.getDescription();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encrypted\u7df8 = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedDataKeys = request.getToString();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encryptedkeyup = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encryptedDataKeys = request.get Shouldn();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encrypted retval = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encryptedNull = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encryptedriday = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedShapes = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encryptedadding = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encryptedRESULT = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encrypted \"1\", = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encryptedordinal = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encryptedDataKeys = request.get );",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encryptedeep = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encrypted Pipeline = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encrypted\u178f = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encryptedLING = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedAST = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encryptedDataKeys = request.get GT();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encryptedLegend = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encryptedNullable = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encryptedoding = request.getdummy();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encryptedSCOPE = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encrypted extracts = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encryptedDataInterface = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encryptedultane = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encrypted toHexString = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encryptedDataKeys = request.getTip();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encryptedDataKeys = request.getTags();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encrypted marshaller = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encrypted\u1e0f = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encryptednbsp = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encryptedCONTEXT = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encrypted Github = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encryptedDataKeys = request.getVersion();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encryptedoding = request.get );",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encrypted columns = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encryptedDataKeys = request.getHeaders();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encrypted\u54aa = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encrypted\u90bb = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encrypted_0 = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encryptedDataKeys = request.getPathCause();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encryptedInvocations = request.getdummy();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encrypted800 = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encrypted variables = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encrypted\u22a5 = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encryptedStrings = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encryptedantity = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encrypted hands = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encrypted Searching = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encrypted\u547f = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encrypted given = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encryptedInvocations = request.get\u8c3c();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encryptedInvocations = request.get\u30cf();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encryptedarrays = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encrypted directory = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encryptedInvocations = request.get\u4865();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encryptedDataKeys = request.getPathIterator();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedInvocations = request.get conda();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encryptedDataKeys = request.get4();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encrypted Sm = request.get );",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encryptedInvocations = request.getDescription();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encryptedBoundary = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encryptedInvocations = request.get GT();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encryptedInvocations = request.get\uacbb();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encrypted variables = request.get );",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encryptedInvocations = request.get getReader();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encryptedInvocations = request.get eNotification();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encryptedInvocations = request.get Shouldn();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encryptedInvocations = request.get Matchers();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encryptedDataKeys = request.get protocols();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encryptedDataKeys = request.getPath();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encryptedDataKeys = request.get\u51fa();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encryptedInvocations = request.get\u51fa();",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(null);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add( .util.ArrayList.class.getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(tempFile.session.SessionData);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add( .util.ArrayList.trueData);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add( .util.ArrayList.SingletonData\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add( .util.ArrayList.SwData\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add( .util.ArrayList.PrimaryData\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add( .util.ArrayList.tmData\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add( .util.ArrayList.SingletonData);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add( .util.ArrayList.CData\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add( .util.ArrayList.class);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(tempFile.session.SessionData\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add( .util.ArrayList.VersionData\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add( .util.ArrayList. revertData);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add( .util.ArrayList.class.hi\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add( .util.ArrayList.insData);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add( .util.ArrayList.class.spaceData\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add( .util.ArrayList.SwData);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(tempFile.session.trueData);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add( .util.ArrayList.PrimaryData);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(tempFile.PI);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add( .util.ArrayList.CData);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add( .util.ArrayList.NamespacesData\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add( .util.ArrayList.PI);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add( .util.ArrayList.BigInteger.class.getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(nullpp.session.SwData\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add( .util.ArrayList.HYData\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add( .util.ArrayList.class.SwData\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(jfree.session.SessionData);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add( .util.ArrayList.VersionData);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add( .util.ArrayList.class.ChoiceData\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add( .util.ArrayList.Singleton);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add( .util.ArrayList.trueData\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(nullpp.session.SessionData);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(tempFile.session.SwData\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add( .util.ArrayList. independentData\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add( .util.ArrayList.class. getCallbackData\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add( .util.ArrayList.convertersData);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add( .util.ArrayList. getCauseData);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add( .util.ArrayList. independentData);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(nullpp.session. .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add( .util.ArrayList.PARTData);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add( .util.ArrayList.class.pathData\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add( .util.ArrayList.class. ThreadData\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add( .util.ArrayList.class.choiceData\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add( .util.ArrayList.class. ungetData\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(nullpp.session.hibitData\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add( .util.ArrayList.exceptions);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add( .util.ArrayList.true\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add( .util.ArrayList.DOMData\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(Class.class.getName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(tempFile.session.uncData);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(value);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add( .util.ArrayList.NamespacesData);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(nullpp.session.rootData);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add( .util.ArrayList.class.UsingData\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add( .util.ArrayList. UnknownStringEncoder\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add( .util.ArrayList. ImplementationData\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add( .util.ArrayList.SecondData\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add( .util.ArrayList.format(WhiteData);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add( .util.ArrayList. thirdData\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add( .util.ArrayList.class.tipData\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(nullpp.session.SessionData\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add( .util.ArrayList. addPropertyData);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add( .util.ArrayList.class. (8Data\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add( .util.ArrayList.conditionsData);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add( .util.ArrayList. getLengthData);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add( .util.ArrayList.HashSet());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add( .util.ArrayList.true);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(nullpp.session. mergedData\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add( .util.ArrayList.class.atData);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(tempFile.session.uncData\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add( .util.ArrayList. getLengthData\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add( .util.ArrayList. revertData\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add( .util.ArrayList.strategyData);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add( .util.ArrayList.42Data\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add( .util.ArrayList.class.\" );",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add( .util.ArrayList.class.uncData);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add( .util.ArrayList. UnknownString\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add( .util.ArrayList.monthData);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add( .util.ArrayList.pathData\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add( .util.ArrayList.AvailableData\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(tempFile.session.rootData);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add( .util.ArrayList.class.uncData\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add( .util.ArrayList.Months(\"[\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add( .util.ArrayList.class.newInstanceData\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(nullpp.session.tipData\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add( .util.ArrayList. raw);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add( .util.ArrayList.('.Data);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(nullpp.session.DOMData\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add( .util.ArrayList.PrimaryData)\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(morepp.session.SessionData);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add( .util.ArrayList. getCauseData\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add( .util.ArrayList. thirdData);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add( .util.ArrayList. classes);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add( .util.ArrayList.DIGString\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(Date.class.getName());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add( .util.ArrayList.replaceAll(\"\\\\.class.getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(tempFile.session.SwData);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add( .util.ArrayList.BigInteger.class);",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".setMaximumFractionDigits(-i);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".create(); //setup number of group",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".create(); // number formatter obj",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".create(); //setup number of file",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".create(); //setup number formatter obj",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".create(); // number where source starts",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno());",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".setMaximumFractionDigits(-i); //create multiplier value",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksum());",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".createWantedButInvoked(name, state.getLineno(), state.getCharno());",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLastMillisecond\"));",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".doubleValue(); //setup number of group or",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".createWantedButInvoked(name, state.getLineno(), state.getChksum());",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".append(\"SansSerif\", Font.BOLD, 12));",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".doubleValue(); //setup number of group",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".create(); //setup number where source starts",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChk\"));",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), n.getCharno());",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), n.getChksum());",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".doubleValue(); //setup number of file",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".create(); //setup number of file id",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno()); // number where value",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".createWantedButInvoked(name, state.getLineno(), state.getChk\"));",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".create(); //setup number of group or",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChk));",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".create(); //steiger: \" + state.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".createWantedButInvoked(name, state.getLineno(), state.getChkewness());",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), n.getChk\"));",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChkewness());",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".getDenominator/d\") || Double.isNaN(y)); //create multiplier value",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".getDenominator/d\") || Double.isNaN(y); //create multiplier value",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".createWantedButInvokedMessage(\"number\"));",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".createTransformedShape(jf);",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno()); // number (as there's",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".withMaximumFractionDigits(-i); //create multiplier value",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno()); // number where source",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno()); // number where (as there's",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".createTransformedShape(numberOfFreedominator/d)\", state.getDenominator()));",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".append(\"SansSerif\", Font.PLAIN, 10));",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksum()));",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".doubleValue(); //setup number where source starts",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno()); // number (as there's sub-number\"));",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".createTransformedShape(numberOfFREQUENCY);",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno()); // number where (as there's sub-number\"));",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".create(); //setup number (as there's some flaw?)",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".doubleValue(); //setup number of file id",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".create(); //setup number (as there's sub-number\"));",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".create(); //setup number (as there's 3)",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".getDenominator/d\") || Double.isNaN(x) ) ; //create multiplier value",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".getDenominator/d)\", state.numberOfSuccessor());",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".createWantedButInvoked(name, state.getDenominator()));",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".append(\"SansSerif\", Font.BOLD, state.numberOfSuccessor));",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".create(); //steiger: \" + state.number\")\";",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".createWantedButInvoked(name, state.getFirstDay().numberOfSuccessor());",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".createWantedButInvoked(name, state.getDenominator());",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno()); // number",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".doubleValue(); //setup number of elements",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".create(); //setup number (as there's build this was state.numberOfSuccesses-number\"));",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".createWantedButInvoked(name, state.getLineno(), state.getChk));",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), n.getCharno()); // number where value",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".createTransformedShape(numberOfFreedom / 2, -denominator/d\"));",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".withMaximumFractionDigits(-i);",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno()); // this right?",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".append(\"SansSerif\", Font.BOLD, 10); // 10 non-number\"));",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".createTransformedShape(this.y); // the number of file id",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".createWantedButInvoked(name, state.getFirstMillisecond());",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLastMillisecond()));",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".doubleValue(); //setup number formatter obj",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".createWrapping(\"number\"));",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno\"));",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".createWantedButInvoked(name, state.getFirstMillisecondOfFreedom());",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".createWantedButInvoked(name, state.getFirstMillisecondOfMinute());",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".create(); //setup number (as there's build this was state.numberOfSuccessor\"));",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".getDenominator()));",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".create(); //setup number (as there's bad...",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChkframes());",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".createWantedButInvoked(name, state.getLineno(), state.getChksum()));",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".createTransformedShape(numberOfFreedom / 2.0, 2.0));",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".createWantedButInvoked(name, state.getLineno(), state.getChkArg1().numberOfSuccessor());",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getDenominator()));",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno()); // number where source starts",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".createEmptyBorder(dinsets.getLowerBound() + \" does not exist\"; //number\"",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".create(); //steiger: \" + state.getBarWidth() < state.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".createWantedButInvoked(name, state.getLineno(), state.getChk1().numberOfSuccessor());",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".createWantedButInvokedMessage(\"number\")\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".create(); //steiger: \" + state.getRawClass().getName()+\")\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".create(jfree.FREQUENCY);",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".getNumber().doubleValue() + 7.0);",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".create(); //steiger: \" + state.number.0f\".length());",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".withParseType(iNumber.class);",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".createTransformedShape(numberOfFreedom());",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".createWantedButInvoked(name, state.getLineno(), state.getChkdTransformer());",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".append(\"SansSerif\", Font.BOLD, 10));",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".createEmptyBorder(dinsets.getLowerBound() + \"yyyy\"));",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".createTransformedShape(constraint.FREQUENCY);",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".getDenominator/d)\", state.numberOfFall\")\"; //create multiplier value",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".create(); //setup number (as there's build this was generated.\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".create(); //steiger: \" + state.getDenominator/)?.denominator/d\")\";",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno()); // number (as there's 3)",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), n.getCharno()); // number (as there's",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\")      // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\")     // iccid"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return uri.of(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return uri.of(uri, uri.getVersion());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return uri.of(uri, uri.getPath(), uri);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return uri.of(uri, uri);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return uri.of(uri, uri.getVersion(), uri);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return uri.of(uri, uri.getHost(), i);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return uri.of(uri, uri.getHost());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return uri.of(uri, uri.getHost(), scalar);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return uri.of(uri, uri.get path(), uri);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return uri.of(uri, uri.getNamespaceURI(), uri);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return uri.of(uri, uri.getineno(), uri.getCharno());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return uri.of(uri, uri.getHost(), ts.getPath());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return uri.of(uri, uri.getHost(), true);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return uri.of(match, uri);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return uri.of();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return uri.of(uri, uri.getHost(), 3);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return uri.of(uri, uri.getComment(), uri);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return uri.of(uri, uri.getX(), uri);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return uri.of(uri, uri.getineno(), uri.getPath());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return uri.of(uri, uri.getRow(), uri);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return uri.of(uri, uri.get newline(), uri);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return uri.of(uri, uri.getSecond(), uri);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return uri.of(uri, uri.getPath());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return uri.of(uri, uri.getHost(), inst);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return uri.of(uri, uri.getDivid());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return uri.ofAsId(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return uri.of(uri, uri.getDivid(), uri);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return uri.of(uri, uri.getLeastSupertype );",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return uri.of(uri, uri.getProvider());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return uri.of(uri, uri.getSquare(), uri);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return uri.of(uri, uri.getBucket().substring(0, uri);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return uri.of(uri, uri.getHost(), loader);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return uri.of(uri, uri.get del(), uri);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return uri.of(uri, uri.getArgumentTypes());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return uri.of(uri, uri.getLoop(), uri);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "returnuri.of(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return uri.of(uri, uri.getDSTSavings(), uri);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return uri.of(uri, uri.get ax(), uri);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return uri.of(uri, uri.get strs(), uri);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return uri.of(uri, uri.get signature(), uri);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return uri.of(uri, uri.getHost(), false);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return uri.of(uri, uri.getNodeName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return uri.of(uri, uri.getElements());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return uri.of(uri, uri.getDST_OFFSET);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return uri.of(rootNode.getHost(), uri);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return uri.of(uri, uri.getDST());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return uri.of(uri, uri.getnight(), uri);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return uri.of>(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return uri.of(uri, uri.getArgumentTypes(), uri);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return uri.of(uri, uri.getArgumentCount(), uri);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return uri.of(uri, uri.getBucket(), uri);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return uri.of(uri, uri.getHost(), length);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return uri.of(uri, uri.getHost(),asPath);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return uri.of(uri, uri.getHost(), ts.getOffset());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return uri.of(uri, uri.getBucket());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return uri.of(uri, uri.getcd(), uri);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return uri.of(uri, uri.getSimplePath(), uri);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return uri.of(uri, uri.get7](), uri);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return uri.of(uri, uri.getComponentType());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return uri.of(uri, uri.get writeId());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return uri.of(uri, uri.get ic(), uri);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return uri.of(uri, uri.get chain(), uri);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return uri.of(uri, uri.getBag());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return uri.of(uri, uri.getHost(), useId);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return uri.of(uri, uri.getREAK(), uri);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return uri.of(uri, uri.getHost(), line);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return uri.of(uri, uri.get withId());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return uri.of(uri, uri.getHost(), document);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return uri.of(uri, uri.getHost(), index);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return uri.of(uri, uri.getArray());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return uri.of(uri, uri.getHost(), c);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return uri.of(uri, uri.getArgumentCount());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return uri.of(uri, uri.get information(), uri);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return uri.of(uri, uri.getDelimiter());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return uri.of(uri, uri.get getChronology());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return uri.of(uri, uri.getScope(), uri);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return uri.of(uri, uri.get dev(), uri);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return uri.of(uri, uri.get path(), i);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return uri.of(uri, uri.getBucketIndex());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return uri.of(uri, uri.getacific(), uri);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return uri.of(uri, uri.get dev());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return uri.of(uri, uri.getDSTSavings());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return uri.of(uri, uri.getHost(),Ignore);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return uri.of(uri, uri.getHost(), ts.getCharno());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return uri.of(uri, uri.getSets());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return uri.of(uri, uri.getHost(),TypeName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return uri.of(uri, uri.getBag(), uri);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return uri.of(uri, uri.getVariableName());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return uri.of(uri, uri.getincludePath());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return uri.of(uri, uri.getHost(), registry);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return uri.of(uri, uri.getImpl());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return uri.of(uri, uri.getHost(),});",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return uri.of(uri, uri.get DateTimeConstants());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return uri.of(uri, uri.getHost(), ignored);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return uri.of(uri, uri.getHost(), ts.getVersion());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return uri.of(uri, uri.getLeastId());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return uri.of(uri, uri.getNode(), uri);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return uri.of(uri, uri.getSets(), uri);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return uri.of(uri, uri.getHost(), 2);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return uri.of(uri, uri.getHost(), scaleY);",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    }
}