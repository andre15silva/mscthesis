{
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == Object.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == UUID.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == Character.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == Class.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw == sat || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == int.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == Integer.TYPE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == Date.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == HashMap.class) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == sat || raw.class == Object.class) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == Int || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw ==' || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == attr.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == BigInteger.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == GregorianCalendar.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == short.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == String.class || raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw == FRAME.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == Integer.TYPE || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw ==' || raw == String.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw == String.class || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == ObjectNode.class) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw ==our.class) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Character.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == ArrayList.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == URI.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw ==String.class) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw == Integer.MIN_VALUE && raw == String.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == int.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == Int || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == Long.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == sat || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == mid.class) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw ==' || rawType == String.class) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == sat || raw.class == NoClass.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw ==Parent.class) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw ==Class.class) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw ==c.class) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == Integer.MIN_VALUE || raw == String.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == ParameterizedType.class) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw ==domain.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw ==Document.class) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw ==' || raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == char.class) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == Int || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw ==' || raw == Character.class) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == String.class || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == EOF_CHAR) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == Integer.MIN_VALUE && raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == sig.class) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == sat || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == Integer.MIN_VALUE && raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw ==' || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == intr.class) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw ==Full.class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == sat || raw == String.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == Integer.MIN_VALUE || raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Character.class) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == AnnotatedClass.class) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == String.class || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == sat || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == String.class || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw ==cv.class) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == next.class) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == sat || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == bld.class) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == sat || rawType == String.class) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == nullValue.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == cd.class) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == df.class) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == ctx.class) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw ==Expr.class) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == considered.class) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw ==Primitive.class) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == function.class) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == INT_TYPE) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == Int || rawType == String.class) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == Int || raw.isPrimitive()) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == Integer.MIN_VALUE && raw == short.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class || raw == String.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class || raw == Character.class) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == Calendar.class) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw ==' || rawType == Object.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == predicate.class) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == Instant.class) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw ==Mar.class) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == setName.class) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw ==report.class) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".setMaximumFractionDigits(-i);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".create(); //setup number of group",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".create(); // number formatter obj",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".create(); //setup number of file",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno());",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumLineno(), state.getCharno());",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".create(); //setup number formatter obj",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumLineno(), state.getCharno());",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumLineno(), state.getCharno());",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum);",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum));",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumIndex());",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumLineno(), state.getCharno());",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumLineno(), state.getChksumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsumsum());",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\")      // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\")     // iccid"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".toString(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".toString(\"dd MMMM\").join();",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".toString(\"dd MMMM\"));",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(dd.toString()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".toString(\"dd MMMM\").first();",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".toString(\"dd MMMMoments:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".toString(\"dd MMMM0(dd)\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.toString(): \" + ad);",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".toString(\"dd MMMMoment. String\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".toString(\"dd MMMM\").\").join();",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".toString(\"dd MMMMICgcd:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".toString(\"dd MMMMoment\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.number);",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString());",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.toString(): \" + adt.toString());",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".toString(\"dd MMMMoments:mm:ss.toString(): \" + ad);",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(ddFile.toString()));",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.toString(dd.toString()));",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(): \" + adt need);",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".toString(\"dd MMMMoment. String.valueOf(dd.bitIndex).toString();",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.toString());",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(): \" + adt.toString());",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString()));",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.toString(): \" + ad));",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".toString(\"dd MMMMoment.Number (numberOfHalfday:mm:ss.toString(\"dd MMMM\"));",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".toString(\"dd MMMM\").print(N.numberOfHalfdays\"));",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.toString()));",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".toString(\"dd MMMMoment.Number (numberOfHalfday:mm:ss.toString()));",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".toString(\"dd MMMMoment..Number(numberOfHalfday(), unit.y, (int) (dd 2dValue.doubleValue() + 1));",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.Number(0): \" + adc);",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".toString(\"dd MMMMoment. String.valueOf(dd.getSize()));",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.toString(): \" + ad);",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".toString(\"dd MMMMIDDLE:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".toString(\"dd MMMMIC13: \" + adi.numberOfHalfday());",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".toString(\"dd MMMMoments:mm:ss.toString(): \" + ad));",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".toString(\"dd MMMMIC13: \" + adt.toString());",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".toString(\"dd MMMMoment.Number(numberOfHalfday(), unit.y, (int) (dd 2dValue.doubleValue() + 1));",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".toString(\"dd MMMMAGIC:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".toString(\"dd MMMMoment.Number:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".toString(\"dd MMMMIC13: \" + adc);",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(dd.toString(\"dd MMMM\"));",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(): \" + file.numberOfHalfday);",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".toString(\"dd MMM unit:mm:ss.toString(): \" + ad);",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.numberOfHalfday\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".toString(\"dd MMMM0(dd)) ? 1 : 0);",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".toString(\"dd MMMMoment.Number (numberOfHalfday:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".toString(\"dd Mmm:ss.toString(): \" + file.toString());",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".toString(\"dd MMMMoments:mm:ss.toString(): \" + adt.toString());",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(): \" + ad));",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".toString(\"dd MMMMoment..Number(numberOfHalfday(), unit.y, (numberOfHalfday() - 1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(): \" + file.numberOfHalfdays());",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".toString(\"dd MMMMoment.Number:mm:ss.toString(): \" + ad);",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".toString(\"dd MMMMoments:mm:ss.toString(dd.toString()));",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".toString(\"dd MMMMICgcd:mm:ss.toString(): \" + ad);",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".toString(\"dd MMMMoment..Number(numberOfHalfday(), unit.y, (int) (dd 2dTimeParser)\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".toString(\"dd MMMMoment..Number(numberOfHalfday(), unit.y, (int) (nextDouble() * 2));",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\").printPartialStackTrace();",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".toString(\"dd MMM unit:mm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".toString(\"dd MMMMoment. String.valueOf(dd.toString()));",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".toString(\"dd MMMMoment.Number (numberOfHalfday:mm:ss.toString());",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".toString(\"dd MMMMoment..Number(numberOfHalfday(), unit.y, (numberOfHalfday() - 1) * 7));",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".toString(\"dd MMMM\").first().substring(0, 2));",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".toString(\"dd MMMMICnumerator:mm: \" + unit.number);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".toString(\"dd MMMMoment.Number (numberOfHalfday:mm:ss.toString(\"dd MMMMICZ\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".toString(\"dd Mmm:ss.toString(): \" + adc);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".toString(\"dd MMMM0(dd 3) + unit.toString());",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.SSS\").print(ddFile.number\"));",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(dd.toString());",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".toString(\"dd MMMMAGIC:mm:ss.toString(dd.toString()));",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\").join();",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".toString(\"dd MMMMoment.Number (numberOfHalfday:mm:ss.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".toString(\"dd MMMMoment..Number(numberOfHalfday(), unit.y, (int) (dd 2dValue.doubleValue() + 2));",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".toString(\"dd MMMMoment..Number(numberOfHalfday(), unit.y, (int) (nextDouble() - 1));",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.toString(): \" + adt.toString().substring(0, 2));",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".toString(\"dd MMMMoments:mm:ss.SSS\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".toString(\"dd MMMMIDDLE:mm:ss.toString(dd.toString()));",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(): \" + adc); // this is",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".toString(\"dd MMMMoment..Number(numberOfHalfday(), unit.y, (int) (dd 2dValue.Bands));",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".toString(\"dd Millisecond\"));",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".toString(\"dd Mmm: \" + currFile.toString());",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.toString(): \" + adt need);",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".toString(\"dd MMMMoment.Number (numberOfHalfday:mm:ss.toString(): \" + file.numberOfHalfday);",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".toString(\"dd Mmm: \" + currFile.toString().substring(1));",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.toString(): \" + file.numberOfHalfday);",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.toString(): \" + adt.toString());",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.SSS\"));",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.toString(dd.toString()));",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".toString(\"dd MMMMoment..Number(numberOfHalfday(), unit.y, 1));",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".toString(\"dd MMMM0(dd))));",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".toString(\"dd MMMMoment.Number (numberOfHalfday:mm:ss.toString(date.toString()));",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".toString(\"dd MMMMoment.Number(numberOfHalfday(), unit.y, (numberOfHalfday() - 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".toString(\"dd MMMM\").print(dd.numberOfHalfday(),Matching.y, (int) (dd 2dValue() + 1));",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".toString(\"dd MMMM\").print(N.numberOfHalfday()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".toString(\"dd MMMMOTYPE:mm:ss.SSS\").print(ddFile.numberOfHalfday()));",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\")                    // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional()         // adc 2"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(buf.length() + 1, buf.length());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(buf.length() + 2 + buf.length());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(buf.length() + buf.length());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(buf.length() + 2 + 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(buf.length() + 2 + buf.getLength() + length);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(buf.length() + 2 + buf.toBytes());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(buf.length() + 2 + buf.toString());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(buf.length() + 1);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(result.length() + buf.length());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(buf.length() + 2 * result + buf.length());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(buf.length() + length);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(buf.length() + 2 + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(buf.length() + 1 + buf.length());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeShort(result.toBytes());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(buf.length() + \" length\";",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.length());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(buf.length() + 3 * buf.size());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(buf.length() + 0.5);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeShort(buf.length() + 2 + \"}\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(buf.length() + buf.getClass());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(buf.length() + buf.toBytes());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(buf.length() + scope.getName());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(buf.length() + \"}\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(buf.length() + 2 + buf.length() * 2);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(buf.length() + \": \" + buf.length());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(buf.length() + 2 + buf.getLength());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(buf.length() + 2 + buf.getClass());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(buf.length() + result.getName());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(buf.length() + result.toBytes());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(buf.length() + \"}\\\" + buf.toBytes());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(buf.length() + \" buf.length());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(buf.length() + MAX_connection);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(buf.length() + result.getClass());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(buf.length() + 0, buf.length());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeShort(buf.length() + \"}\\\" + buf.getClass());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(buf.length() + 2 + byte.toBytes());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.height;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(buf.length() +intern());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeShort(buf + 1, buf.length() + length);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(buf.length() + \" buf.toBytes());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(buf.length() + buf.intValue());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(buf.length() + 2 + buf.toString().substring(buf.length() - length));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(buf.length() + 1, buf.toBytes());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(buf.length() + 2 + i.getLineno());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(buf.length() + \"}\\\" + buf.toString());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(buf.length() + result.getName().length() + length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(buf.length() + 1).append(value + length);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(buf.length() +POSITIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(buf.length() + 2 * result + buf.size());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(buf.length() + 2 + buf.height + \"]\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(buf.length() + 0) + buf.length());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(buf.length() + \" length\", buf.length());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(buf.length() + OK.toBytes());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(buf.length() + \" length=\" + length);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeShort(buf.length() + 2 + buf.getLength() * 2);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(buf.length() + 0.5 + buf.length());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeShort(buf.length() + \"}\\\" + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(buf.length() + 2 + buf.size());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(buf.length() + \" buf.size());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(buf.length() + buf.toString());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(buf.length() + result.intValue());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(buf.length() + \"\\'\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(buf.length() + 2 + \" \");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(buf.length() + 2 + 1, buf.length());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(buf.length() + 3 * buf.length());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(buf.length() + _outputEnd);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.intValue());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(buf.length() + result.getName().length() + 1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(buf.length() + 0 + buf.length());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(buf.length() + 1 + buf.toString());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.intValue() + length);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(buf.length() + 2 + buf.getSize());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(buf.length() + 0.5 + buf.toBytes());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(buf.length() + \": \" + length);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.height);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(buf.length() + 2 * buf.length());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(buf.length() +estimateSize());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(buf.length() + \" 0, buf.length());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(buf.length() + 2 + i.getName().length() + \"]\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(buf.length() + 2 * buf.size());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(buf.length() + \"\\\")\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeShort(buf.length() + \" buf.doubleValue());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(buf.length() + 2) + buf.toBytes());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(buf.length() + 2 + buf.intValue());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(buf.length() + 2 + \" buf.length());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeShort(buf.length() + 2 + buf.height / 2);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(buf.length() + \" buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(buf.length() + this.value + \"\\'\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(buf.length() + \" length ' ');",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(buf.length + 1, buf.length());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(buf.length() + tick.getName().length() + \" length\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(buf.length() + 2 + buf.toString().length() + \"]\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(buf.length() + 2 + buf.getBytes());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(buf.length() + \"Constraint.toBytes());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(buf.length() + 2 + buf.toString().length() + length);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(buf.length() + \" length=\" + buf.toBytes());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(buf.length() + \" 2 * buf.size());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeShort(result.size() + buf.length());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(buf.length() + \"}\\\" + buf.length());",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.setShort(i, i + 1, 1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.setShort(index + 1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.setShort(index + 1, i, 3);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.setShort(i, i + 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.setPosition(i + 1, 1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.setShort(index + i, data[index], 0.0);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.setShort(index + 1, i, 3;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.setShort(i, i + 1, 0.0);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.setShort(i, i + 1, 2);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.setPosition(i + 1, text[index + i - 1]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.setShort(index + i, data[index++]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.setShort(index + i, data[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.setShort(index + 1, text[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.setShort(index + 1, text[index + i - 1]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.setShort(index + 1, text[index + i] - 1);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.setPosition(i + 1, text[index + i - 1]));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.setShort(index + 1, text[index], 0.0);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.setShort(i, j + 1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.setShort(i, data[index++], 16);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.setShort(index + i, data[index + i] - 1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.setShort(i + 1, 1);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.setShort(i, i + 1, INT_SPACE);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.setPosition(i + 1, INT_PREFIX[index + i] - 1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.setPosition(i + 1, text[index + i] - 1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.setShort(index + 1, data[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.setShort(index + 1, INT_SPACE) * 8;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.setShort(i + 1, text[index + i - 1]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.setPosition(i, i + 1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.setShort(index + 1, i,7);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.setPosition(i, i + 1, 1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.setShort(index + 1, i,ones.length - 1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.setShort(index + 1, INT_PREFIX[index], 0.0);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.setPosition(i + 1, INT_PREFIX[index], 0.0);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.setShort(index + 1, data[index + i - 1]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.setShortName[index++] = INT_QUOTE;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.setPosition(i + 1, 7,[index + i - 1]);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setShort(index + i, data[index + 1)] * 8;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.setShort(index + 1, 1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.setShort(i, ((int) (data[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.setShortName(i, data[index++], 16);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.setPosition(i + 1, 7,[index + i - 1]));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.setShort(index + 1, text[index + i - 1]));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.setPosition(i + 1, text[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.setShort(index + i, data[index + i] * 8);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.set Short.parseShort(data[index++index], 16);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.setPosition(i + 1, 7,[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.setShortName[index++] = BYTE_LT;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.setShort(index + i, data[index + 1] - 1);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.setShort(index + 1, i, 8);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.setShortName[index++] = BYTE_BACKSLASH;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.set Short(data[index++index], data[index + i];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.setShort( i + 1, INT_PREFIX[index], 0.0);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.setPosition(i + 1, INT_PREFIX[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.set Short(data[index++index], data[index + i] - 1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.setShortText[index++] = INT_QUOTE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.setShort(i, i + 1, pairs[index + i - 1]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.setShort(index + 1, i, 4);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.setShort(i, i + 1, INT_PREFIX.length - 1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.set Short(data[index++index], data[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.setShort(i + 1, INT_PREFIX[index], 0.0);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.setShort(i, i + 1, INT_QUOTE);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.setShort(index + i, data[index + 1)] * 8);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.setShort(i, i + 1, TextAnchor.CENTER, type - 1);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.setShort(index + 1, data[index + i] - 1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.setShort(index + 1, actually.length - 1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.setShort(i,.intValue() + 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.setShort(i, ((int) (data[index++ + i], 0.0);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.setShort(index + 1, i, L - 1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.setShort(type + i, data[index], 0.0);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.setShort(index + 1, i, typeId);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.setShort(index + 1, i,6 - 1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.setShort(i, data[index++]);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.setShort(index + 1, text[index + i] * 8);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.setShort(i, ((int) (data[index], 16);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.setShort(i, i + 1, pairs[index + i - 1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.set Short(data[index++index], data[index + i - 1]);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.setShort(i, i + 1, 7,[index + i - 1]);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.setShort(i + 1, text[index + i - 1]));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.setShort(i, NO_PREFIX + 1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set Short.parseShort(data[index++index], data[index + i];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setPosition(i + 1, 7,[index + i] - 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.setShort(i, ((int) (data[index++ + i] * 8);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.setShort(index + 1, i, esc[index + i] - 1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.setShort(i + 1, INT_PREFIX[index + i] - 1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.setShort(index + i, data[index + 2)];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.set ShortPosition(i + 1, 1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.setShort( i + 1, 1);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.setShort(index + 1, i, power);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.setPosition(i + 1, INT_PREFIX[index + i] * 8);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.setShort(index + 1, i + 1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.setShort(i, i + 1, outputBuffer[index + i - 1]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.setShort(index + 1, INT_SPACE) * 3) + 1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.setShort(i, i + 1, 2, 3);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.setShort(i + 1, INT_PREFIX[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.setShort(index + i, data[index + i - 1]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.setShort(type + i, data[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.setPosition(i + 1, text[index + i - 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.setShort(index + 1, data[index + i - 1]));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.setShort(data[index++index], 16);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.setShort(i, i + 1, outputBuffer.length - 1);",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-200": {
        "fixes": [
            {
                "k": 1,
                "patch": "return convert(throwable, throwable);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return convert(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return convert(throwable, source, throwable);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return convert(throwable,Throwable);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return convertator(throwable, throwable);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return convert(throwable, clazz, 0, false);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return convert(throwable, clazz, 0, size);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return convert(throwable, condition);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return convert(throwable, clazz, 0, buf.length);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return convertonestable(throwable, throwable);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return converton(throwable, throwable);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return convert(throwable, CAUSE_METHOD_NAMES);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return convert(throwable, error);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return convert(throwable, Throwable);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return convertWithThrowable(throwable, throwable);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return converton(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return convertonon(throwable, throwable);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return convert(throwable, InsnList) < 0) ? null : throwable;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return convert(throwable,ROUND_NOT_FOUND + \"]\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return convert(throwable, old);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return convert(throwable,Modifier.newThrowable(throwable));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return convertonValues(throwable, throwable);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return convertonMethod(throwable, throwable);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return convertPredicates(throwable, throwable);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return convert(throwable, DEFAULT_LOAD_FACTOR), throwable);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return convertCapacity(throwable, throwable);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return convert(throwable, ArrayUtils.EMPTY_STRING_ARRAY);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return convert(throwable, clazz, 0, this.nestable);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return convertonMethod(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return convertPredicates(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return convertonValue(throwable, throwable);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return convertWithThrowable(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return convert(throwable, Throwable.class);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return convertValue(throwable, throwable);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return convertonestable(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return convert(throwable,ROUND_NOT_FOUND + \" is not a valid.\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return convert(throwable, ArrayUtils.EMPTY_LIST_ERROR));",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return convert(throwable, sourceName, throwable);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return convert(throwable, MILLIS_PER_SEGMENT);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return convert(throwable, source);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return convert(throwable, MILLIS_PER_SECOND);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return convert(throwable,ROUND_NOT_FOUND + \" is invalid.\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return convert(throwable, null);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return convertonon(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return convert(throwable, clazz, 0, 0);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return convertononType(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return convertonFile(throwable, throwable);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return convertonestimate(throwable, throwable);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return convertonFactory(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return convert(throwable, externs, throwable);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return convert(throwable, Throwable.class.getThrowable(throwable));",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return convert(throwable, Throwable.class.getThrowableType(throwable));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return convert(throwable, root);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return convert(throwable, clazz, 0, 0 );",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return convertonToThrowable(throwable, throwable);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return convert(throwable, methodName);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return converton(throwable, source, throwable);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return convertatorFor(throwable, throwable);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return convertassign(throwable, throwable);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return convert(throwable, param);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return converton(throwable, clazz, 0, size);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return convert(throwable, clazz, 0, endIndex);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return convert(throwable,MAX_VALUE);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return convert(throwable, MILLIS_PER_WEEK);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return convert(throwable, ArrayUtils.EMPTY_STRING_AS_NULL);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return convert(throwable,ROUND_NOT_FOUND);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return convertByThrowable(throwable, throwable);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return convert(throwable, CAUSE_METHOD_NAMES, throwable);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return convertKey(throwable, throwable);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return convertCumulative(throwable, throwable);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return convert(throwable, ARRAY);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return convert(throwable,, throwable);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return convert(throwable, Throwable.class.getName(), throwable);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return convert(throwable, lex);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return convertonestimate(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return converton(throwable, clazz, 0, buf.length);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return convert(throwable, 0, throwable);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return convert(throwable, clazz, builder);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return convert(throwable, ArrayUtils.EMPTY_LIST_CHARACTER);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return convert(throwable, MILLIS_PER_WEEK, throwable);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return convertonExpression(throwable, throwable);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return convert(throwable, DEFAULT_MAX_VALUE);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return convert(throwable, inverse, null);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return convertonestimate(throwable, source, throwable);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return convertonestable(throwable, clazz, 0, false);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return convertField(throwable, throwable);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return convertData(throwable, throwable);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return convertonMethod(throwable, clazz, 0, size);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return convertonType(throwable, clazz, 0, throwable);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return converton(throwable, clazz, 0, false);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return convert(throwable, values);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return convert(throwable, ArrayUtils.EMPTY_STRING_MESSAGE, throwable);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return convert(throwable, Nopcode);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return convert(throwable, Preconditions.EMPTY_STRING_AS_NULL);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return convertononType(throwable, source, throwable);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return convert(throwable, type);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return convert(throwable,ROUND_NOT_FOUND + \" isthrowable\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return convert(throwable, Throwable[throwable]);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return convert(throwable, clazz, 0, this.throwable);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return convert(throwable, Throwable.class, null);",
                "identical": false
            }
        ],
        "buggy_line": "return convert(null, throwable);",
        "fixed_line": "return convert(\"\", throwable);"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return position == null ? position == null : position.getSize();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return position == null ? position == null : position.getValue();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return position == null ? Integer.MAX_VALUE : position;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return position == null ? position == null : position.toString();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return position == null ? position == 0) : text.substring(position);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return position == null ? position == null : position;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return position + 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return position == null ? null : position.getValue();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return position == null ? position == 0) : new Integer(position);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return position == null ? position == 0) : ims;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return position == null ? position == null : position.getDeclaringClass();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return position == null ? position == null : position.getDeclaringClass().getName();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return position == null ? position == 0) : text.substring(position + 1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return position == null ? null : position.getSize();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return position == null ? position == null : position.get();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return position == null ? position == null : text.substring(position);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return position == null ? position == null : text.length();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return position == null ? position == 1 : -1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return position == null ? position == null : position.getValue();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return position == null ? position == 0) : source.substring(position - 1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return position == null ? new Integer(position) : position;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return position == null ? position == null : position + 1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return position == null ? position == null : position.getEntry().getValue();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return position == null ? position == 0) : source.substring(position);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return position == null ? position == 0) : source.substring(position + 1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return position == null ? position == null : position.intValue();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return position == null ? position == 0) : text.substring(position - 1);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return position == null ? \"\" : position;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return position == null ? new Integer(position) : mask_msk_msk);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return position == null ? position == null : ims;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return position == null ? position == 0) : position;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return position == null ? position == null : new Integer(position);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return position == null ? null : position.toString();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return position == null ? position == null : position.getValue().toString();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return position == null ? position.getValue().length() : position;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return position == null ? position == null : position.visitParameterType(position);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return position == null ? position == null :IAL_msk.substring(position);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return position == null ? position == null : position.visitParameterType();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return position == null ? position == 0) : i;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return position == null ? position == root.getValue().length() : position;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return position == null ? position == null : position.visitMaxs();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return position == null ? position == null : position.getModifiers();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return position == null ? position == initStr : position;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return position == null ? position == null : text.substring(position + 1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return position == null ? position == null : text.trim();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return position == null ? position == 0) : this.position;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return position == null ? position == null : position.getValue().length();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return position == null ? position == null : position.getAngle();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return position == null ? \"\" : position.getSize();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return position == null ? position == null : source.getValue();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return position == null ? position == initParameterTypes.length() : position;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return position == null ? position position == null : position.getSize();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return position == null ? position == null : position.getCrc();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return position == null ? position == null : position.getParent();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return position == null ? position == null : position.getgetCurrent();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return position == null ? new Integer(position) : mask_msk);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return position == null ? new Integer.MAX_VALUE : position;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return position == null ? new Integer(position) : position + 1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return position == null ? position == null : position.getCanonicalName();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return position == null ? MIN_msise_msk1 : position;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return position == null ? position == 0) : sourcems;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return position == null ? position == null : position.getCharno();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return position == null ? position == null : position.getIgnored();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return position == null ? position == null : position.getReferences();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return position == null ? position == 0) : index + 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return position == null ? null : position.getValue().toString();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return position == null ? position == i_msk1 : position;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return position == null ? position == null : position.get());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return position == null ? position == 0) : position + 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return position == null ? position == 0) : source.getValue();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return position == null ? position == null : position.getSimpleName();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return position_msk1 != null ? position.getValue() : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return position == null ? position == null : position.getAncestors();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return position == null ? position == null : position.getAsString();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return position == null ? position == null : position_msk.substring(position);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return position == null ? \"\" : position.getValue();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return position == null ? position == null : position.visitParameter();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return position == null ? position == null : position.getChk_msk);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return position == null ? null : position.getDeclaringClass().getName();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return position == null ? position == null : position.substring(position);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return position == null ? position == null : position.getnot();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return position == null ? position == null : position.getEntryCount();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return position == null ? position == 0) : MAX_msk.substring(position);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return position == null ? -1 : position;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return position == null ? position == 0) : obj.toString();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return position == null ? position == 0) : iterator.substring(position);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return position == null ? position == null : position.visitValue();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return position == null ? position == null :IAL_msk.substring(position + 1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return position == null ? position == null : position.getApValue();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return position == null ? \"\" : position + 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return position == null ? new Integer(position) : text.length;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return position == null ? position == null : position.visit(_msk);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return position == null ? attr.getValue().toString() : position;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return position == null ? null : position.getValue().length();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return position == null ? null : position;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return position == null ? position == null : position.getir();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return position1 == null ? position == null : position.getSize();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return position == null ? position == null : position.getinput();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return position == null ? position == 0) : pn.getValue();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return position == null ? new Integer(position) : mask_msk_ms;",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new ConcurrentHashMap();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Set<Object>>();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes, attributes.size());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, int>();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Integer>();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes, attribute.size());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.key, attribute.length);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet(), attributes.length);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,Domainattributes.length);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnCharMap.Entry<K, V>>(attributeMap.class);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentHashMap<Object, V>();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>>(attributeMap.class);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes, attributes.length);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Integer>();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Object>();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>(attributes.length);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Set<Object>>();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes.length);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.size());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet(), attributes.length, attributeCount);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Concurrent>(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.key, attribute.docInfo());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnCharMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>(attributes, attributes.length);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>>(attributeMap.Entry);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Set<Object>();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Type>();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.key, attribute.docInfo().get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.next);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Set<Class<?>>();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes, attributes.size);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Set<Object>();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentHashMap<Object,pieMap.Entry<K, V>>(attributeMap.class);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>>(attributeMap.entrySet(), attribute.length);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>(attributeMap.length);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new ConcurrentHashMap<K, V>();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Type>(attributeMap.length);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.get(attributeCount());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Integer>();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>>(attributeMap.);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.getParameterTypes());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Type>(attributeMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new ConcurrentHashMap<Object,pieMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentHashMap<Object,Domainattributes.length);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, V>();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Object>();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.key, attribute);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentHashMap(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentHashMap<Name,returnMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes.size());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K,V>>();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>>(attributeMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Concurrentattributes.length);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.class);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>>(attributeMap.NO_NAME, attribute.length);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>>();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new ConcurrentHashMap<Object, JSType>();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentHashMap(attributes, attribute.size());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnCharMap.Entry<K, V>>(8);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.key, attributes);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeName);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>(attributeMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnCharMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Type>(attributeMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.size());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>>(attributeMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Type>(attributeMap.size);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Type>();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.type);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, V>();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Object>();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new ConcurrentHashMap<Object,V>();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, int[attributes.length - 1];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>,returnMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>(attributeMap.size);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.KEY);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentHashMap<Name,returnMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Concurrent>(attributes, attribute.size());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Concurrentattributes.length;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, String>();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.getParameterCount());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new ConcurrentHashMap<Object,V>(attributes, attributes.size());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentHashMap<Object,Override>(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new ConcurrentHashMap<Object,V>(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.get(attributeMap.size());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnType>();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, ?>>();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>>(attributeMap.get(attributeMap().getSimpleName());",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(null);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add( .util.ArrayList.class.getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(tempFile.session.SessionData);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add( .util.ArrayList.trueData);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add( .util.ArrayList.SingletonData\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add( .util.ArrayList.SwData\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add( .util.ArrayList.PrimaryData\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add( .util.ArrayList.tmData\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add( .util.ArrayList.SingletonData);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add( .util.ArrayList.CData\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add( .util.ArrayList.class);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(tempFile.session.SessionData\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add( .util.ArrayList.class.hi\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add( .util.ArrayList.BigInteger.class.getName());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add( .util.ArrayList.class.spaceData\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(tempFile.session.trueData);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add( .util.ArrayList.VersionData\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(tempFile.PI);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add( .util.ArrayList. revertData);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add( .util.ArrayList.insData);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add( .util.ArrayList.SwData);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add( .util.ArrayList.PrimaryData);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add( .util.ArrayList.CData);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add( .util.ArrayList.class.SwData\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add( .util.ArrayList.class.ChoiceData\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(nullpp.session.SwData\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(tempList.session.SessionData);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add( .util.ArrayList.NamespacesData\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add( .util.ArrayList.PI);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add( .util.ArrayList.HYData\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add(jfree.session.SessionData);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(tempFile.session.SwData\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add( .util.ArrayList.VersionData);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(nullpp.session.SessionData);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add( .util.ArrayList.Singleton);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add( .util.ArrayList.class. getCallbackData\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add( .util.ArrayList.trueData\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add( .util.ArrayList.class.pathData\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add( .util.ArrayList.format(WhiteData);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(Calendar.YEAR.session.SessionData);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add( .util.ArrayList.class. ThreadData\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add( .util.ArrayList.class.choiceData\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add( .util.ArrayList. independentData\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add( .util.ArrayList.class. ungetData\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(nullpp.session. .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add( .util.ArrayList.convertersData);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(nullpp.session.hibitData\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add( .util.ArrayList. getCauseData);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add( .util.ArrayList.class.UsingData\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add( .util.ArrayList. independentData);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(tempFile.session.uncData);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add( .util.ArrayList.PARTData);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add( .util.ArrayList.class.tipData\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(tempList.class.getName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(nullpp.session.rootData);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add( .util.ArrayList.class. (8Data\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(tempList.session.trueData);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add( .util.ArrayList.exceptions);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add( .util.ArrayList.true\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(Class.class.getName());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add( .util.ArrayList.DOMData\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add( .util.ArrayList.class.atData);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add( .util.ArrayList.class. getIDData\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add( .util.ArrayList.class.println(\" .lang.SwData\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(nullpp.session.SessionData\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add( .util.ArrayList.NamespacesData);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(value);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(tempFile.session.uncData\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add( .util.ArrayList.class.\" );",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add( .util.ArrayList. UnknownStringEncoder\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add( .util.ArrayList.class.println(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add( .util.ArrayList.SecondData\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(nullpp.session. mergedData\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add( .util.ArrayList. thirdData\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add( .util.ArrayList.class.uncData);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add( .util.ArrayList.conditionsData);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add( .util.ArrayList. getLengthData);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add( .util.ArrayList.class.uncData\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add( .util.ArrayList.HashSet());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add( .util.ArrayList.true);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(tempFile.session.rootData);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add( .util.ArrayList.class.newInstanceData\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(Object.class.getName());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add( .util.ArrayList.class.isAssignableFrom(null));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add( .util.ArrayList.format(null));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(tempList.session.uncData);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add( .util.ArrayList. getLengthData\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add( .util.ArrayList. revertData\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add( .util.ArrayList.strategyData);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(nullpp.session.tipData\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add( .util.ArrayList.class.replaceAll(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add( .util.ArrayList.replaceAll(\"\\\\.class.getName());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add( .util.ArrayList. UnknownString\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add( .util.ArrayList.monthData);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(nullpp.session.DOMData\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add( .util.ArrayList.pathData\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(tempFile.session.SwData);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add( .util.ArrayList.class.println(\" .util.SwData\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add( .util.ArrayList.class.\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add( .util.ArrayList.Months(\"[\");",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private final synchronizedArInput addArInput() {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private final synchronizedArInput addArInput(coefficientInput)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private final synchronizedArInput addArInput(printInput) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private final synchronizedArInput addArInput(FromInput) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private final synchronizedArInput addArInput(sm, processInput) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private final synchronizedArInput addArInput(inExternsInput) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private final synchronizedArInput addArInput(processInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private final synchronizedArInput addArInput(getAllInput) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private final synchronizedArInput addArInput( determiningInput) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private final synchronizedArInput addArInput(processInput) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private final synchronizedArInput addArInput( pairs.getInput());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private final synchronizedArInput addArInput(vi).processInput();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private final synchronizedArInput addArInput(sm, processInputLookahead) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private final synchronizedArInput addArInput(ATIONS) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private final synchronizedArInput addArInput(vi.getInput());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private final synchronizedArInput addArInput();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private final synchronizedArInput addArInput(anksInput) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private final synchronizedArInput addArInput( editInput) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private final synchronizedArInput addArInput(oldInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private final synchronizedArInput addArInput(removedInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private final synchronizedArInput addArInput(FromInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private final synchronizedArInput addArInput(fs.getTokenLocation());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private final synchronizedArInput addArInput( lastInput) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private final synchronizedArInput addArInput( dividerInput) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private final synchronizedArInput addArInput(CLInput) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private final synchronizedArInput addArInput(fs.getInput());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private final synchronizedArInput addArInput( pairs.getTokenLocation());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private final synchronizedArInput addArInput( largestInput) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private final synchronizedArInput addArInput(drawImageInput) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private final synchronizedArInput addArInput(defInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private final synchronizedArInput addArInput(CLInput)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private final synchronizedArInput addArInput(vi).processInput) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private final synchronizedArInput addArInput(epsInput);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private final synchronizedArInput addArInput( acceptInput) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private final synchronizedArInput addArInputProcess = newhistoryCount() {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private final synchronizedArInput addArInput( randInput) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private final synchronizedArInput addArInput(INTERFACEInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private final synchronizedArInput addArInput((10Input instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private final synchronizedArInput addArInput(prefetchRoot, processInputLookahead) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private final synchronizedArInput addArInput(anksInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private final synchronizedArInput addArInput(inLoop, deepInput) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private final synchronizedArInput addArInput(choiceInput);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private final synchronizedArInput addArInput( editInput)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private final synchronizedArInput addArInput(Generator.class.getName());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private final synchronizedArInput addArInput( IterableInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private final synchronizedArInput addArInput(sanityInput) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private final synchronizedArInput addArInput().processInput(prefetchInput);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private final synchronizedArInput addArInput(mixin, 255Input) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private final synchronizedArInput addArInput( DecoderInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private final synchronizedArInput addArInput(inLoop, quarterInput) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private final synchronizedArInput addArInput(subtypeInput, 255Input) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private final synchronizedArInput addArInput(enableInput) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private final synchronizedArInput addArInput(MAInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private final synchronizedArInput addArInput(inclInput) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private final synchronizedArInput addArInput(anksInput);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private final synchronizedArInput addArInput( (6Input) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private final synchronizedArInput addArInput( reservedInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private final synchronizedArInput addArInput(astInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private final synchronizedArInput addArInput(0\"Input) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private final synchronizedArInput addArInput( getInstanceInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private final synchronizedArInput addArInput().processInput(prefetchRoot);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private final synchronizedArInput addArInput(subtypeInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private final synchronizedArInput addArInput(vi).processInput()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private final synchronizedArInput addArInput(inclInput[i]);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private final synchronizedArInput addArInput(enableInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private final synchronizedArInput addArInput(referencedInput) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private final synchronizedArInput addArInput(calRecordsInput) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private final synchronizedArInput addArInput( lastInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private final synchronizedArInput addArInput(inLoop, deepestable) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private final synchronizedArInput addArInput( determiningInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private final synchronizedArInput addArInput(coefficientInput) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private final synchronizedArInput addArInput(errorInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private final synchronizedArInput addArInput(processInput instanceofRecordsInput());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private final synchronizedArInput addArInput(vi).process(null, root);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private final synchronizedArInput addArInput(inNodesInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private final synchronizedArInput addArInput( acceptInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private final synchronizedArInput addArInput(Generator.classInputName) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private final synchronizedArInput addArInput(in);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private final synchronizedArInput addArInput());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private final synchronizedArInput addArInput(sqInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private final synchronizedArInput addArInput(inLoop, quarterInput);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private final synchronizedArInput addArInput(sm, processInputLookruptedException) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private final synchronizedArInput addArInput(serializersInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private final synchronizedArInput addArInput( editInput);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private final synchronizedArInput addArInput(sanityInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private final synchronizedArInput addArInput( lastInput);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private final synchronizedArInput addArInput( acceptInput);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private final synchronizedArInput addArInput(inLoop, chartInput) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private final synchronizedArInput addArInput(inLoop, JFreeInput)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private final synchronizedArInput addArInput(prefetchRoot, processInput) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private final synchronizedArInput addArInput(mixin);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private final synchronizedArInput addArInput(Generator.class, 255Input) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private final synchronizedArInput addArInput(referencedInput);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private final synchronizedArInput addArInput(inLoop, deepestInput) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private final synchronizedArInput addArInput( pairs.getTokenLocation()))) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private final synchronizedArInput addArInput()) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private final synchronizedArInput addArInput(inExternsInput);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private final synchronizedArInput addArInput(sm, processInputName) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private final synchronizedArInput addArInput(subtypeInput);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private final synchronizedArInput addArInput(inLoop, processInput) {",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encrypted = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encryptedInvocations = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encrypted = request.getdummy();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encrypted = request.get );",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encrypted = request.getVersion();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encrypted = request.getbeans();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encrypted Box = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encrypted = request.get GT();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encrypted = request.getDimensions();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encrypted Sm = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encryptedoding = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encrypted inst = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encrypted = request.getTip();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encrypted = request.getrevrev();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encryptedDataKeys = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encryptedInv = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encrypted = request.get Matchers();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encryptedencrypted = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encrypted GZIP = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encrypted = request.getrevShapes();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encryptedDifference = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encryptedDelimiter = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encrypted\u770a = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encrypted sequence = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encrypted some = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encrypted = request.getTipFactory();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encrypted = request.getVersionVersion();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encryptedpagination = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encryptedDataKeys = request.getDescription();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encrypted\u7df8 = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encrypted = request.get Matchers Matchers();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encryptedDataKeys = request.getToString();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encryptedkeyup = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encryptedDataKeys = request.get Shouldn();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encrypted retval = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encryptedNull = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encryptedriday = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encryptedShapes = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encryptedadding = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encryptedRESULT = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encrypted \"1\", = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encryptedordinal = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encryptedDataKeys = request.get );",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encryptedeep = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encrypted Pipeline = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encrypted\u178f = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encryptedLING = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encryptedAST = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encryptedDataKeys = request.get GT();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encryptedLegend = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encryptedNullable = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encryptedoding = request.getdummy();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encryptedDataKeys = request.getrevrev();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encryptedSCOPE = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encrypted extracts = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encryptedDataInterface = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encryptedultane = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encrypted toHexString = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encryptedDataKeys = request.getTip();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encryptedDataKeys = request.getTags();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encrypted marshaller = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encrypted\u1e0f = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encryptednbsp = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encryptedCONTEXT = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encryptedDataKeys = request.getVersion();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encryptedoding = request.get );",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encryptedDataKeys = request.getHeaders();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encrypted\u54aa = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encrypted\u90bb = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encrypted_0 = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encryptedDataKeys = request.getPathCause();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encryptedInvocations = request.getdummy();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encrypted variables = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encrypted\u22a5 = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encryptedStrings = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encryptedantity = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encrypted hands = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encrypted Searching = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encrypted\u547f = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encrypted given = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encryptedInvocations = request.get\u8c3c();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encryptedInvocations = request.get\u30cf();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encryptedarrays = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encrypted directory = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedInvocations = request.get\u4865();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encryptedDataKeys = request.getPathIterator();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encryptedInvocations = request.get conda();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encryptedDataKeys = request.get4();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encrypted Sm = request.get );",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encryptedInvocations = request.getDescription();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encryptedBoundary = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encryptedInvocations = request.get GT();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encryptedDataKeys = request.getVersionVersion();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encryptedInvocations = request.get\uacbb();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encrypted variables = request.get );",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encryptedInvocations = request.get getReader();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encryptedInvocations = request.get eNotification();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encryptedInvocations = request.get Shouldn();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encryptedInvocations = request.get Matchers();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encryptedDataKeys = request.get protocols();",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = (l << 8) | l[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = (l << 8) | c[i];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = (l << power) | a[i];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = (l << 32 | a[i];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = (l << i) | a[i];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = (l << 8) | b[i];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = (l << r | a[i];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = (l << power) | b[i];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = (l << 8) | the[i];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = (l << power) - a[i];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = (l << 8 | a[i];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = (l << a) | b[i];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = (l << 2);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = (l << Integer.MAX_VALUE) - a[i];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = (l << Integer.MAX_VALUE) | a[i];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = (l << 32 | l[i];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = (l << power) | l[i];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = (l << 10 | a[i];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = (l << pad | a[i];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = (l << t | a[i];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = (l << 6 | a[i];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = (l << 32 | b[i];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = (l << 16) | a[i];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = (l << 6 | l[i];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = (l << 32 - l[i];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = (l << 18 | a[i];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = (l << 8) | (a[i];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = (l << a) | a[i];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = (l << a) | l[i];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = (l << 11 | a[i];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = (l << 20) | a[i];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = (l << 3 | a[i];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = (l << version) | a[i];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = (l << power) | the[i];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = (l << 1000) | a[i];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = (l << power) | c[i];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = (l << props[i];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = (l << -1 | a[i];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = (l << 6 | b[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = (l << i) - a[i];",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = (l <<>) a[i];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = (l << 1) | a[i];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l = (l << r | l[i];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = (l << r) | a[i];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = (l <<==' | a[i];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = (l << Integer.MAX_VALUE) | l[i];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = (l << 0, a[i];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = (l <<ToString) | a[i];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = (l << 8) | i];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = (l <<i) - a[i];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = (l << 10 | b[i];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = (l <<If | a[i];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = (l <<22 | a[i];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = (l << 32 + l[i];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = (l <<subplots) | a[i];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = (l << pad | l[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = (l << k | a[i];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = (l << 8) | result[i];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = (l << 18) | a[i];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = (l << i) | l[i];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = (l << 12 | a[i];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = (l << a) - a[i];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = (l << 8) | r[i];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = (l << 8) | calculate[i];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = (l << r | b[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = (l << top) | a[i];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = (l <<Negative) | a[i];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = (l << a | b[i];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = (l << power) - b[i];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = (l <<Interval | a[i];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = (l << 40) | a[i];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = (l << 16) | b[i];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = (l <<iation) | a[i];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = (l << 32 | c[i];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = (l << 500 | a[i];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = (l << 9 | a[i];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = (l <<Group - a[i];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = (l << i - a[i];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = (l << 28 | a[i];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = (l << k | l[i];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = (l << Integer.MAX_VALUE) - l[i];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = (l <<moveTo | a[i];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = (l << 8) | w[i];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = (l << average | a[i];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = (l << Integer.MAX_VALUE) + l[i];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = (l << a + l[i];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = (l << Integer.MAX_VALUE) | c[i];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = (l <<iated | a[i];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = (l << pad | c[i];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = (l <<dd | a[i];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = (l << inner | a[i];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = (l << 1000 | a[i];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = (l << 32 - a[i];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = (l << 8) | cw[i];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = (l << a | l[i];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = (l <<Trans | a[i];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = (l << Note | a[i];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = (l << 6) | a[i];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = (l << Integer.MAX_VALUE - l[i];",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (position == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (position == 1) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (position >= Integer.MIN_VALUE && data <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (position == 0 && options.getLeft().length() > 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (position >= Integer.MIN_VALUE && c <= Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (position == 0 && position == data.length) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (position == 0 && options.getTokenList().size() > 0) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (position == 0 && c.length() > 0) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (position >= 0 && position <= data[5]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (position == 0 && length == data.length) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (position == 0 && options.getLeft() == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (position == 0 && i.length == 0) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (position == 0 && options.getTokenList().length() > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (position == 0 && options.getBinaryValue(\"data\", \"set.length() > 0) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (position == 0 && options.getLeft() != null) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (position >= Integer.MIN_VALUE && data.length <= 2) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (position == 0 && options.getFALSE().length() > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (position == 0 && i == data.length) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (position == 0 && options.getBinaryValue(\"[]\", \"set.length() > 0) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (position == 0 && options.get2().length() > 0) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (position == 0 && options.getLeftSubTree() == null) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (position == 0 && options.get2().startsWith(\"0x\", dataArea.length() > 0) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (position == 0 && position == null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (position == 0 && _valueType == null || position.length() == 0) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (position >= 1 && position <= data[5') {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (position == 0 && position == Object.class) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (position == 0 && i.length() == 0) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (position == 0 && options.getTokenList().size() == 0) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (position == 0 && position == char.length() > 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (position.length() > 0) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (position == 0 && options.getTokenId() == data.length) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (position >= 0 && position <= data[0].length()) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (position >= 0 && position <= data.length) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (position == 0 && row.length() > 0) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (position == 0 && i.getFirstChild() == data.length) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (position == 0 && options.getSize() == 2) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (position == 0 && options.getTokenId() == null) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (position == 0 && _valueType == null || position.length() == 2) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (position >= 0 && position <= data[5') {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (position == 0 && options.getTokenList().size() == 2) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (position == 0 && i.getEnd().length() == 0) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (position == 0 && position.getSize() == 2) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (position == 0 && c.length() == 0) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (position == 0 && options.getStart().length() > 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (position == 0 && options.getTokenId() == JsonToken.END_ARRAY) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (position == 0 && options.getTokenList().length == 0) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (position == 0 && _valueType == null || position.getRawClass() == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (position == 0 && options.getTokenId() == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (position == 0 && i.getChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (position == 0 && position == 0) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (position == 0 && options.getVisible() == data.length) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (position >= 1 && position <= 2) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (position == 0 && position ==Values.length()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (position == 0 && position == length) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (position >= 1 && position <= data[5]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (position == 0 && i.getSize() == 2) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (position == 0 && position == char.length()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (position == 0 && options.getLeft() == null) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (position >= 0 && position <= data[5 || position position < 2) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (position == 0 && options.getTokenId() != null) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (position == 0 && i.length() > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (position == 0 && values.length() == 0) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (position >= 1 && position <= data[5 || position < 2) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (position == 0 && _valueType == null || position.getRawClass() == Object.class) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (position.length() > 10) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (position >= 0 && position <= data[3]) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (position == 0 && i.length == 2) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (position == 0 && i == Object.class) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (position == 0 && i.get7() == Object.class) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (position >= 2 && position <= data[5') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (position >= 0 && position <= data[0].length) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (position >= 0 && position <= data[5 || position < 2) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (position == 0 && options.get[1]() == Object.class) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (position == 0 && bean.length() == 0) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (position == 0 && options.getTokenList().length() == 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (position >= 0 && position <= datapoint.length) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (position == 0 && options.getTokenId() == Object.class) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (position == 0 && position ==Values.length() > 0) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (position >= 2 && position <= 56319) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (position.length() == 2) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (position == 0 && position.length() > 0) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (position >= 0 && position <= data[5 || c.length) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (position == 0 && i.getLposition() == 0) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (position == 0 && options.get2().startsWith(\"0x\", dataArea.length())) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (position == 0 && _value.length() > 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (position >= 2 && position <= 5 && position <= data[5') {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (orientation == PlotOrientation.VERTICAL) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (position == 0 && options.getTokenId() == JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (position == 0 && options.getLeftSubTree() != null) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (position >= 0 && position <= data[5 || position.length() > 0) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (position == 0 && _valueType == null || position.getRawClass() == Integer.class) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (position == 0 && i.getSpace() == 0) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (position == 0 && options.getBinaryValue(\"data\", \"set) == null ||",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (position == 0 && options.getTokenList().size() < data.length) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (position >= 0 && position <= data[5 || position.length < 2) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (position >= 0 && position <= data[5 || c.length < 2) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (position >= Integer.MIN_VALUE && position <= data[3]) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (position == 0 && options.getBinaryValue(\"data\", \"set) == null || id.length() == 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (position >= 2 && position <= 5 && position <= data[5]);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (data.length == 2) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return uri.of(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return uri.of(uri, uri.getVersion());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return uri.of(uri, uri.getPath(), uri);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return uri.of(uri, uri.get path(), uri);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return uri.of(uri, uri.getVersion(), uri);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return uri.of(match, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return uri.of(uri, uri);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return uri.of(uri, uri.getHost(), i);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return uri.of(uri, uri.getHost());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return uri.of(uri, uri.getHost(), scalar);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return uri.of(uri, uri.getNamespaceURI(), uri);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return uri.of(uri, uri.getineno(), uri.getCharno());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "returnuri.of(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return uri.of(uri, uri.getHost(), true);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return uri.of(uri, uri.getHost(), ts.getPath());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return uri.of(uri, uri.getRow(), uri);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return uri.of(uri, uri.get newline(), uri);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return uri.of(uri, uri.getHost(), 3);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return uri.of(uri, uri.getComment(), uri);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return uri.of(uri, uri.getHost(), uri.getPath());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return uri.of(match, uri);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return uri.of(uri, uri.getBucket(), uri);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return uri.of(uri, uri.getineno(), uri.getPath());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return uri.of(uri, uri.getX(), uri);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return uri.of();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return uri.of(uri, uri.getDivid(), uri);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return uri.of(uri, uri.getSecond(), uri);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return uri.ofAsId(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return uri.of(uri, uri.getPath());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return uri.of(uri, uri.getSquare(), uri);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return uri.of(uri, uri.getHost(), inst);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return uri.of(uri, uri.getDivid());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return uri.of(uri, uri.getLeastSupertype );",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return uri.of(uri, uri.getHost(), inst.getPath());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return uri.of(uri, uri.getProvider());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return uri.of(uri, uri.getDSTSavings(), uri);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return uri.of(uri, uri.getHost(), object.getPath());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return uri.of(uri, uri.get signature(), uri);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return uri.of(uri, uri.getBucket().substring(0, uri);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return uri.of(uri, uri.get ax(), uri);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return uri.of(uri, uri.getHost(), loader);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return uri.of(uri, uri.getLoop(), uri);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return uri.of(uri, uri.getnight(), uri);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return uri.of(uri, uri.get strs(), uri);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return uri.of(uri, uri.get del(), uri);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return uri.of(uri, uri.getArgumentTypes());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return uri.of(uri, uri.getLeastSupertype()) + uri.getPath().substring(0, uri);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return uri.of(uri, uri.getHost(), false);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return uri.of(uri, uri.getNodeName());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return uri.of(uri, uri.getElements());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return uri.of>(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return uri.of(uri, uri.get chain(), uri);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return uri.of(uri, uri.getDST_OFFSET);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return uri.of(match.getHost(), uri);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return uri.of(uri, uri.get7](), uri);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return uri.of(uri, uri.getArgumentTypes(), uri);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return uri.of(uri, uri.getcd(), uri);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return uri.of(uri, uri.getDST());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return uri.of(uri, uri.get w(), uri);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return uri.of(uri, uri.getArgumentCount(), uri);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return uri.of(uri, uri.getHost(), length);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return uri.of(uri, uri.getBucket());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return uri.of(rootNode.getHost(), uri);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return uri.of(uri, uri.getHost(),asPath);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return uri.of(uri, uri.getHost(), ts.getOffset());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return uri.of(uri, uri.getSimplePath(), uri);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return uri.of(uri, uri.getComponentType());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return uri.of(uri, uri.getHost(), marker.getPath());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return uri.of(uri, uri.getHOUR(), uri);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return uri.of(uri, uri.get ic(), uri);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return uri.of(uri, uri.get writeId());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return uri.of(uri, uri.getMin(), uri);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return uri.of(uri, uri.getREAK(), uri);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return uri.of(uri, uri.getBag());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return uri.of(uri, uri.get lists(), uri);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return uri.of(uri, uri.get signature(), uri.getPath());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return uri.of(uri, uri.get pad(), uri);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return uri.of(uri, uri.getHost(), useId);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return uri.of(uri, uri.getSets(), uri);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return uri.of(uri, uri.getHost(), line);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return uri.of(uri, uri.getNode(), uri);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return uri.of(uri, uri.get withId());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return uri.of(uri, uri.getres(), uri);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return uri.of(uri, uri.getWW(), uri);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return uri.of(uri, uri.get[@(), uri);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return uri.of(uri, uri.getHost(), document);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return uri.of(match.getHost(), uri.getPath());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return uri.of(uri, uri.getors(), uri);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return uri.of(uri, uri.getArray());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return uri.of(uri, uri.getsyntax(), uri);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return uri.of(uri, uri.get dev(), uri);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return uri.of(uri, uri.getHost(), index);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return uri.of(uri, uri.getScope(), uri);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return uri.of(uri, uri.getDelimiter());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return uri.of(uri, uri.getArgumentCount());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return uri.of(uri, uri.get information(), uri);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return uri.of(uri, uri.getHost(), c);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return uri.of(uri, uri.getineno(), uri.getPath().substring(0, uri);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return uri.of(uri, uri.get getChronology());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return uri.of(uri, uri.getBag(), uri);",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "updateBreakPositionaload((int) input);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(input);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "updateXPoints(CoefficientPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "updateXPoints(CoaledPosition.getGraphics());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getValue() : null;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "iterateAngleStartPosition = calculateMediancestorAngleToAngle(input);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "updateBreakPositionaload((int) input.getMillis());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minimalAngle);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "iterateAngleStartPosition = calculatePachability(input);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input.getName());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input.getClass().getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minimal Double.POSITIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "updateBreakBreakPositionaload((int) input);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "updateBreakPositional prefixes(input);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "iterateAngleStartPosition = calculateMediancestorAngleStartAngleToAngle(input);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "updateBreakPositionaload((int) input.getDenominator()).deraledPosition);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "iterateAngleStartPosition = calculateMediannotatedChild(input);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input.getMessage());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickValue(input);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minimalIterationCount);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "updateBounds(n, CLASS_MUST_BE_LAST);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "updateXPoints(minimalIterationCount, denominator);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "updateXPoints(minimalIterationCount, this.maxValue);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getCharacterIndex();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "updateBounds(n, this.allowDuplicateXValues);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getN() : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "updateXPoints( denominator, rowAngle);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "updateXPoints(minimalIterationCount, maxIterations);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "setupSmallLogFlag = calculatePachability(input);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minimal Double.NEGATIVE_INFINITY);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.get)) : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.get getCallbacks() : null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "updateXPoints(getGraphics());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "updateBreakPositional prefixes(minimalAngle);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleForSet(input);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "updateXPoints(x, y);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickIncrement(minimalMatch);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "updateBreakAngleStartAngle = calculateMediancestorTickMarkPosition.getGraphics();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getType() : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "updateXPoints(minimalIterationCount, this.maxInput);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "iterateAngleStartPosition = calculateMediancestorAngleExtent(input);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "updateXPoints(n, this.xPosition);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "updateXPoints(minimalIterationCount, this.upperBound);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics() > 0) ? input.getTickLabelPosition() : null;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "updateXPoints(minimalIterationCount, input);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getValue() : null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getTickLabelPosition() : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "differenceAngleToAngle(this.xPosition);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getValue() : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.get getCallbacks() : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickIncrement(input);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getN() : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "updateXPoints(minInputFactory.createTransformedShape(this, inputAngle));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getMillis() : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getTickLabelPosition() : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics() > 0) ? input.getValue() : null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics() > 0) ? input.getTickMarkPosition() : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getValues() : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getSelection() : null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getValues() : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickBandIsPaledPosition.getGraphics();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getDot().getValue() : null;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getDeclaringClass() : null;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickBandIsPrune;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.get)) : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getCharacterEncoding().getTime() : null;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getTickMarkPosition() : null;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getCutoverPosition() : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.gethourAngleStart() : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "updateBreakPositionaload((int) input.getDenominator()).deraledMutation();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getName() : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "updateBreakPositionaload((int) input.get extract extract extract extract extract extractRealaledPosition());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "updateXPoints(short.createTransformedShape(this));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "updateXPoints(minimalIterationCount, this.allowDuplicateXValues);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics() > 0) ? input.get getCallbacks() : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getTyping() : null;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "iterateAngleStartPosition = calculateMIDDLE(input);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics() > 0) ? input.getDeclaringClass().getName() : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getTyping() : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "updateBreakPositionaload((int) input.get extract extract extract extract extractRealaledPosition());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "updateBreakPositionaload((int) input.getDenominator()).toString();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics() > 0) ? input.getDeclaringClass() : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "updateBreakAngleStartAngle = calculateMediannotated.getGraphics();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getFactor() : null;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "iterateAngleStartPosition = calculateLowestVisibleTickBandIsPaledPosition(input);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "updateBreakPositional prefixes(D.getGraphics());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getFactor() : null;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics() > 0) ? input.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "updateXPoints(minimalIterationCount, > 3) ? input.getName() : null;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics().getTime() > 0) ? input.getCharacterIndex() : null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "updateXPoints(minimalMatch, input);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics() > 0) ? input.get)) : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "updateBreakTickIncrement(input);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "iterateAngleStartPosition = calculateMediancestorTickMarkPosition.getGraphics() > 0) ? input.getDot().getValue() : null;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "updateBreakPositionaload((int) input.get extract extract extract extract extract extract extractRealaledPosition());",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.isArray() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return field.isArray() && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(field.getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return fieldNames.contains(field.getType()) && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return field.isArray() || fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return field.isArray() || fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(object.getClass().getName());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return fieldNames.contains(field.getType()) && field.isAssignableFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return fieldNames.containsPrimitive() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return fieldNames.contains(field.getType()) && field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return field.isArray() || fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return fieldNames.contains(field.getType()) && fieldNames.contains(object.getName());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.isArray() && fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.isArray() && fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return fieldNames.contains(field.getType()) && field.isLocal();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(object.getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return field.isArray() || field.isExported(field.getName());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return field.isSynthetic() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return fieldNames.containsPrimitive() == field || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.isArray() || fieldNames.contains(field.getReturnType());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return field.isArray() && fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) &&",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return field.isArray() && fieldNames.contains(field.getReturnType());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.isArray() || fieldNames.contains(field.getComponentType());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return field.isArray() || fieldNames.contains(field.isAssignableFrom(field.getClass().getName()));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return fieldNames.contains(field.getType()) && field.getName().equals(field.getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return fieldNames.contains(field.getType()) && fieldNames.contains(object.getClass().getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return field.isArray() || field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return fieldNames.contains(field.getType()) &&push.contains(field.getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && field.isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return fieldNames.contains(field.getType()) || field.isFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return fieldNames.contains(field.getType()) || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && field.isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return fieldNames.contains(field.getType()) && fieldNames.contains(object);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isArray());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.isArray() && fieldNames.contains(field.getQualifiedName());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getName());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) || field.isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return fieldNames.contains(field.getType()) && field.isPrimitive());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && !field.isArray()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray().isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getReturnType());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) && field.isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && field.isArray()) || field.isAssignableFrom(field.getName());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isArray()) &&",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) &&",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return fieldNames.contains(field.getType()) && fieldNames.contains(instant));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && field.isArray());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) || field.isArray());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isArray()) && !field.isArray()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) && field.isAssignableFrom(field.getName());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) || field.isArray()) &&",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getComponentType());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().getComponentType());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.isArray() || field.isExported(field.getClass());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && !field.isArray());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return field.isSynthetic() && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && field.isArray()) || field.isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && field.isAssignableFrom(field.getClass().isArray()) || field.isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return fieldNames.contains(field.getType()) && field.isAssignableFrom(field.getClass().getComponentType());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && field.isAssignableFrom(field.getClass().isArray());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && field.isArray()) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) && field.isArray());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isArray()) && !field.isAssignableFrom(field.getName());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) && field.isAssignableFrom(field.getClass().isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray()) || field.isArray()) && field.isAssignableFrom(field.getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return fieldNames.contains(field.getType()) && field.getName().contains(field.getName());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass());",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (uniqueIdCache == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (uniqueId != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (uniqueId.class.isOn()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (uniqueId == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (uniqueId.class != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId)) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId.class)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (uniqueId.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (uniqueId.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (uniqueId.class.isAssignableFrom( INT.class)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (uniqueId.class.isAssignableFrom(options.getClass())) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (uniqueId) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (uniqueId.class.isAssignableFrom(method.getRawClass())) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (uniqueId.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(1\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (uniqueId.class().isAssignableFrom(uniqueId)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(number)) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (uniqueId.class.isAssignableFrom( SMIds.class)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || protocol.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (uniqueId.class().isAssignableFrom(method.getRawClass())) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || uniqueIds.contains(ignore.class)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(true)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( divide.getClass())) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(deserializer.class)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(deserializer.getClass())) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (uniqueId.class.isSurrogate()) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (uniqueId.class.isAssignableFrom( m.getClass())) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (uniqueId.class.isAssignableFrom(PRINTABLE) || protocol.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (uniqueId.class.isAssignableFrom( percent.class)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Escape)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || uniqueId.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (uniqueId.class.isAssignableFrom(bool.class)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || protocol.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(uniqueId)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( m.getClass())) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (uniqueId.class().isAssignableFrom(method.getSimpleName())) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (uniqueId.class.isAssignableFrom(aly.class)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( booleanValue.getClass())) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (uniqueId.class.isAssignableFrom( EvalContext.class)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(random)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(age)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( LABEL.class)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( divide)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (uniqueId.class.isAssignableFrom( divide.class)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( percent)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (uniqueId.class.isAssignableFrom(random.class)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || uniqueId.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (uniqueId.class.isAssignableFrom(alternatives.class)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (uniqueId.class.isAssignableFrom(PRINTABLE) || protocol.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || uniqueIds.contains( Token.class)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (uniqueId.class.isAssignableFrom(Context.class)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(generator.class)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (uniqueId.class.isObjectId()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (uniqueId.class.isAssignableFrom( 360)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Serialization)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isConcrete()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( STATIC)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (uniqueId.class().isAssignableFrom(uniqueId.class)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(bool.getClass())) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(SerializationFeature.class)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (uniqueId.class.isAssignableFrom( sx)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(imaginaryId)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (uniqueId.class.isAssignableFrom(Boolean.class)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (uniqueId.class.isAssignableFrom(Visibility.class)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(functionIds)) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (uniqueId.class.isAssignableFrom(alternate)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( sufficient)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId.class)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (uniqueId.class.isAssignableFrom(Adapter.class)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(ract.getClass())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( relativeId)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(laration)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Error.class)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(avail)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (uniqueId.class.isAssignableFrom(IANEW)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( scope)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (uniqueId.class.isAssignableFrom(SET.class)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (uniqueId.class.isAssignableFrom(numberOfId.class)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Comments)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (uniqueId.class.isAssignableFrom(ract.class)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(operand)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || uniqueIds.contains(Only)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || uniqueIds.contains(link.class)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(description)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( data)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || uniqueIds.contains( must.class)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (uniqueId.class.isAssignableFrom(DigitsIds.class)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || protocol.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (uniqueId.class.isAssignableFrom(HOOK.getClass())) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (uniqueId.class().getObjectId() == null) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(rule)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( >>> 16)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(shortValue)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(fast)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || uniqueId.class.isAssignableFrom(number)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( >>> 9)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnoredProperty(propName);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignorals.getIgnoredIgnored();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignorals.getIgnoredals();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignorals.getIgnoredProperty(propertyName);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignorals.getIgnored().isIgnorable();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignorals.getIgnored ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = ignorals.getIgnored ? new HashSet() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = ignorals.getIgnored ? new HashSet() : ignorals;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = ignorals.getIgnoredProperty();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = ignorals.getIgnored ? ignored() : ignorals;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = ignorals.getIgnoredPropertyNames();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? ignorals : ignorals;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = ignorals.getIgnored ? ignored() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignorals.removeIgnored();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = ignorals.getIgnored().toArray(new String[prop.size()]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = ignorals.getIgnored ? new HashSet<String>() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = ignorals.getIgnored ? new Boolean() : ignorals;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignorals.getIgnoredMethods();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignorals.getIgnoredCause();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignore\", ignorals);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignorals.getIgnoredProperty(prop.getName());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorableProperties());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = ignorals.getIgnoredProperty(ignoreAny);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorals);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = ignorals.getIgnored ? new HashSet : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = ignorals.getIgnoredField();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getIgnoredSubtype(ignoreAny);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = ignorals.getIgnoredInterfaces();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getIgnoredProperty(\"prop.array\")) ? ignorals : ignorals;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignorals.getIgnored ? ignoredAny : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? ignorals : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignorals.getIgnoredValues();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignorals.getIgnoredValue();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignorals.getIgnoredProperty(prop).isIgnorable();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignorals.getIgnoredProperty(\"annotated.contains(propName);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignorals.getIgnoredProperty(ignorableProperties._Ignored ? ignorals() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignorals.getIgnoredOnly();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = ignorals.getIgnored().isIgnorals();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = ignorals.getIgnored != null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = ignorals.getIgnoredProperty(\"eclare\", ignorals);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = ignorals.getIgnored()) : ignorals;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = ignorals.getIgnored().toArray(new String[ignoreAny);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignorals.getIgnoredProperty(ignorableProperties._Ignored ? new HashSet() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignorals.getIgnoredProperty(\"properties\", ignorals);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getIgnoredConstructor();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\", ignorals);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignorals.getIgnored ? new Boolean() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.Object\")) ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.getIgnoredveragedOutals();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = ignorals.getIgnoredProperty(\"is\", ignorals);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = ignorals.getIgnoredFor(ignoreAny);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? ignorals : ignorals;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = ignorals.getIgnoredProperty(\"properties\", new HashSet<String>() {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = ignorals.getIgnoredProperty(\"isIgnore\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.Object\")) ? ignorals : ignorals;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignorals.getIgnoredProperty(ignorableProperties._Ignored ? ignorals : ignorals.getIgnored());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = ignorals.getIgnoredProperty(ignorableProperties._Ignored ? ignorals : ignorals);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignorals.getIgnoredProperty(\"properties\", new HashSet<String>(ignored) ? ignored.values().length() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignorals.getIgnored ? ignored : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = ignorals.getIgnored(ignoreAny);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = ignorals.getIgnored still();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = ignorals.getIgnoredProperty(ignorableProperties._Ignored ? ignorals : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = ignorals.getIgnoredProperty(ignorableProperties._Ignored ? ignorals.getIgnored() : ignorals;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = ignorals.getIgnoredPropertyHandler();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = ignorals.getIgnoredProperty(\"Array\", ignorals);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.ignored\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = ignorals.getIgnoredProperty(prop);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = ignorals.getIgnoredadd(ignoreAny);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = ignorals.getIgnoredProperty(\"properties\", new HashSet<String>(ignored) ? new HashSet<String>() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = ignorals.getIgnoredDeclared(ignoreAny);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = ignorals.getIgnoredProperty(implName);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignorals.getIgnoredProperty(\"isIgnorable\", ignorals);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored = ignorals.getIgnoredProperty(prop, ignored);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignoreUnknown '\"+propName+\"', ignored.getIgnored ? ignored() : ignorals;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.Object\")) ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignorals.getIgnoredProperty(\"properties\", new HashSet<String>(ignored) ? Boolean.TRUE : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignorals.getIgnored() != null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = ignorals.getIgnoredProperty(propName).isIgnorable();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorableProperties._Ignored ? new HashSet() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorableProperties._Ignored ? ignorals() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ignorals.getIgnoredProperty(\"properties\", new HashSet<String>(ignored) ? ignored.values() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getIgnoredComparator();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? ignorals : new Boolean.values();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignorals.getIgnoredProperty(\"array\")) ? ignorals : new HashSet<String>(ignored);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignore\", new HashSet<String>(ignored) ? ignored.values().length() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignorals.getIgnoredSibling();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = ignorals.getIgnoredProperty(\"property\", ignorals);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = ignorals.getIgnoredQName();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = ignorals.getIgnoredProperty(prop, new HashSet<String>(ignoredProperties.length));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignorals.getIgnoredProperty(\"ignore\", new HashSet<String>() {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorableProperties._Ignored ? Boolean.TRUE : ignorals.getIgnored());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignorals.getIgnored().toArray(new Integer(ignoreAny));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignorals.contains(ignoreAny);",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".createTransformedShape(cArg);",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 0.5));",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1);",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".numberOfSuccesses(c1.getArgType(), f.getRawClass());",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberOfSuccesses(cArg.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); // 0x",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSecond(), f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); // 'e't need to be negated.",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 11));",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); // 0x10 value",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); //create label",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastnumberOfSuccessor());",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor(), f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString(), f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getDouble());",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.y, state.y + 1));",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".createTransformedShape(numberOfSuccesses);",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor(), f.y, state.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSecond(), f2.getLastnumberOfSuccessor());",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".numberOfSuccesses(c1.getArgType(), f2.getRawClass());",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".numberOfSuccesses(c1.getLastChild().substring(0, 46));",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".createTransformedShape(c1.getClass().getLowerBound() + 0.5);",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastChild());",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + \"CRC.y));",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().toString());",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getUpperBound());",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberOfSuccesses(c1.getLastMillisecondOfMinute().numberOfSecond(), f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), state.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".numberOfSuccesses(c1.getnumberOfSuccessor().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().y, f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".numberOfSuccesses(c1.getLastMillisecondOfMinute().numberOfSuccessor() + \"}\"));",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSecond(), f.getLastMillisecond(x + 1); // 0x10 value",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSecond(), f.y);",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.numberOfSuccesses);",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getNumber().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond().toString());",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 1); //create label",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 11));",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccesses(), f.y, state.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".createTransformedShape(c1.getArgCount() + 0.5);",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".createTransformedShape(cArg); //create multiplier value",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor(), f.y);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.y, state.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberOfSuccesses(c1.getLastMillisecondOfMinute(), limit));",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 1); // 0x10 value",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); // Math.",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSuccessor(), f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 1); // 'e't need to be negated.",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.y, state.y);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); //numberOf",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + \" \"); //create multiplier value",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); //create multiplier value",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 10) / 2.0));",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); // 10x",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 5)));",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor(), f.getLastMillisecond(x + 1); // 0x10 value",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 1); // 0x",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".createEmptyBorder(0, 5, 0, 5));",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor(), f.y, state.y + 1));",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.y);",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + \" \");",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f2.getNumber().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".createTransformedShape(lineNumber);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSuccessor().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().substring(0, f.y));",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + stats));",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".createTransformedShape(cArgCount);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLowerBound());",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccesses(), f.getLastMillisecond(x + 1); // 0x10 value",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".createTransformedShape(numberOfSuccesses());",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".numberOfSuccesses(c1.numberOfSuccessor(), f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 1); // 10x",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastMillisecond(x + 0.5));",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); // set",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSecond(), limit));",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getNumber().y);",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".createTransformedShape(c1.getLowerBound() + 0.5);",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); // 'e't need to be negated.y",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSecond(), f2.getLastMillisecond(x + 1); // 0x10 value",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".create(); //setup number of group",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); //number\"",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSecond(), f.getLastMillisecond(x + 1); // 0x",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".numberOfSuccesses(c1.getLong().numberOfSecond(), f2.getLastnumberOfSuccessor());",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); // '\"+c't need to be negated.y",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor(), f.y, marker.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString());",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".numberOfSuccesses(c1.getArgType(), f.getLastMillisecond(x + 1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getNumber().y);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".numberOfSuccesses(c1.getLastMillisecondOfMinute().numberOfSecond(), f.y);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getDouble() + \" != 0x\")\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".toString(\"Unable to parse unicode value: \" + this.number.0); //create multiplier value",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastnumberOfSuccessor().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + subtype.y)));",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".numberOfSuccesses(c1.getLong().numberOfSecond(), f2.getLastMillisecond(x + 1); // 0x10 value",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getLastMillisecond(x + 1); // set via this class i",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor(), f.getLastMillisecond(x + 1); // 0x",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getDouble() + \" != 0x1\"; //create label",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\")                     // power",
        "fixed_line": ".number(\"(x+)?,\")                    // power"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.getSize() == 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.nextInt(parser.nextInt(position))) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parser.getSize() == 2) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (parser.nextInt(parser.nextInt(position)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.nextInt(parser.nextInt(position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.nextInt(parser.nextInt(parser.next()));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.nextInt(parser.next()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (parser.get(position - 1, parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser)) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parser.nextInt(parser.next())) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.toString())) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (parser.insideFunction()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (parser.nextInt(parser.nextInt(input), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getHeight()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (parser.nextInt(parser.getCurrentPosition() + 1, parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.get()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (parser.nextInt(parser.nextInt(true)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (parser.nextInt(position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (parser.getTwin() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getY())) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parser.nextInt(parser.nextInt(parser.next()), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parser.nextInt(parser.next) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parser.nextInt(parser.nextInt(v)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.class)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (parser.nextInt(parser.next()) == false) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parser.get(position).nextInt) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.nextInt(parser.nextInt(position), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (parser.get(position - 1);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (parser.contains(parser.nextInt(position)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (parser.contains(parser.nextInt(position), parser)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (parser.getPosition() == 0) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.toString())) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.()), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getHeight()) && parser.equals(parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getEntry()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.nextInt(v)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (parser.get(position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (parser.getArgumentTypes() == null) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (parser.nextInt(parser.nextInt(code)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (parser.getnumberOfT() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getof()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getHeight())) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parser.nextInt(parser.nextInt(parser.nextInt(position))) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (parser.getESCAPE() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (parser.nextInt(parser.getCurrentPosition() + 1, parser.MAX_CONSTRUCTOR)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getSize()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.nextInt(parser.class)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getErrorIndex())) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (parser.getMethod() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (parser.nextInt(parser.nextInt(option))) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getEntry()) == parser) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.nextInt())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (parser.nextInt(parser.next(), parser)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getHeight()) && parser.equals(parser.nextInt.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.valueOf(parser.()), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.nextInt(parser.toString())) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (parser.getLanguageVersion() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.nextInt(parser.nextInt(magic))) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (parser.get getBaginary() == parser.EXP) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.getTwin() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (parser.contains(parser.nextInt(position))) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (parser.nextInt(parser.nextInt())) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (!parser.nextInt(parser.nextInt(position))) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.KEY_CONSTRUCTOR)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.nextInt(parser.next())) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (parser.getTwin() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parser.nextInt(parser.nextInt(from)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (parser.contains(parser.nextInt(v)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.nextInt(parser.getCurrentPosition() + 1, parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.nextInt(parser.nextInt(Only)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.toString()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (parser.getTwin() == parser.parsePrune()) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.nextInt(parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getPosition())) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getEndIndex() - parser.getSize()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (parser.getPadding() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.nextInt(parser.nextInt(parser.getDeclaringClass())) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.contains(parser.nextInt(true)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (parser.nextInt(parser.next()) == parser.MAX_CONSTRUCTOR) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (parser.nextInt(parser.nextInt(position)));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.nextInt(parser.MAX_CONSTRUCTOR)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getHeight()) && parser.equals(parser.contains(parser.nextInt(parser.MAX_CONSTRUCTOR)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (parser.get(4Twin() == parser.LOCALE) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (parser.nextInt(parser.nextInt(input), position)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (parser.nextInt(parser.nextInt(parser.getPadding())) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.next())) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt(parser.toString())) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getHeight()) && parser.equals(parser.toString())) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getof(parser.nextInt(parser.nextInt(parser.nextInt(parser.nextInt.MAX_CONSTRUCTOR))) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.nextInt(parser.nextInt(parser.nextInt(position), parser)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getof(parser.nextInt(parser.nextInt(parser.nextInt(parser.MAX_CONSTRUCTOR))) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getHeight()) && parser.equals(parser.contains(parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getHeight()) && parser.equals(parser.nextInt(parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (parser.contains(parser.nextInt(parser.next())) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getCount())) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getHeight()) && parser.equals(parser.MAX_CONSTRUCTOR)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (parser.nextInt(parser.getErrorIndex() - parser)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    }
}