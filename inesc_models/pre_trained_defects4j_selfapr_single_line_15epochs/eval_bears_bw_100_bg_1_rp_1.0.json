{
    "Bears-121": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (uniqueIdCache == null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (uniqueId.class.isOn()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId.class)) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (uniqueId != null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (uniqueId == null) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (uniqueId.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (uniqueId.class != null) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (uniqueId.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (uniqueId.class.isSurrogate()) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(true)) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(uniqueId)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(1\")) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( strings.getClass())) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Escape)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || protocol.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(number)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( m.getClass())) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(deserializer.class)) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (uniqueId.class.isAssignableFrom(options.getClass())) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(temp)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId.class)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isConcrete()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (uniqueId.class.isAssignableFrom(Context.class)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(age)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( divide.getClass())) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(laration)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(shortValueId)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( percent)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( divide.class)) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( menuIds)) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(description)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId) || protocol.class.isAssignableFrom( strings.class)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( STATIC)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( scope)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(operand)) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( Tag)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Visibility.class)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(rule)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(random)) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Error.class)) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Comments)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( LABEL.class)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (uniqueId.class.isAssignableFrom(Visibility.class)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (uniqueId.class.isAssignableFrom(description)) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( sufficient)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( uniqueId)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( divide)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Serialization)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(temp.getClass())) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(functionIds.class)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (uniqueId.class.isAssignableFrom(temp.class)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(boxIds.class)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(functionIds)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(spector.class)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(scope)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (uniqueId.class.isAssignableFrom(bool) || protocol.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( booleanValue.getClass())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(url)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(deserializer.getClass())) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( (<)) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Only)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( booleanValue.class)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(bool.class)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (uniqueId.class.isAssignableFrom( sx)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Comments.class)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(url.getClass())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(bool.getClass())) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (uniqueId.class.isAssignableFrom(tol)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(le.class)) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( redraw)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (uniqueId.class.isAssignableFrom(numberOfId.class)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (uniqueId.class.isAssignableFrom( SMIds.class)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(edObject)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(imaginaryId)) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(third)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom( data)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (uniqueId.class.isAssignableFrom(bool.class)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (uniqueId.class.isAssignableFrom( m.getClass())) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (uniqueId.class.isAssignableFrom(Integer.class)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(ump)) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (uniqueId.class.isAssignableFrom(method.getRawClass())) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (uniqueId.class.isAssignableFrom(strategy)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Occurrence)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(Path)) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(alias)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(IMAL.getClass())) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (uniqueId.class.isAssignableFrom(options.class)) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (uniqueId.class().isAssignableFrom(uniqueId.class)) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(owner.getClass())) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(axis)) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (uniqueId.class.isAssignableFrom( uniqueId) || protocol.class.isAssignableFrom(1\")) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(SerializationFeature.class)) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (uniqueId.class.isAssignableFrom( divide.class)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (uniqueId.class.isAssignableFrom( percent.class)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (uniqueId.class.isAssignableFrom(uniqueId) || protocol.class.isAssignableFrom(getContent)) {",
                "identical": false
            }
        ],
        "buggy_line": "if (channel.getPipeline().get(HttpRequestDecoder.class) != null",
        "fixed_line": "if (channel != null && channel.getPipeline().get(HttpRequestDecoder.class) != null"
    },
    "Bears-135": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (beginIndex >= 0) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (beginIndex == -1) { // first spill over?",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (beginIndex >= 0 && buf.length() <= 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (beginIndex == -1) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (beginIndex == -1) { // JSON object?",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (beginIndex >= 0 && buf.length() > 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (beginIndex == -1) { // add a new byte",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (beginIndex == -1) { // first source",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (beginIndex == -1) { // first char after this",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (beginIndex == -1) { // more than one byte",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (beginIndex == -1) { // first field contains an object",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (startIndex == -1) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (startIndex < 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (beginIndex == -1) { // first line contains an object",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1].getClass().getName(); }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (beginIndex == -1) { // first field contains the row key",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (beginIndex >= 0 && buf.length() < 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (beginIndex == -1) { // first field contains the set",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (beginIndex == -1) { buf.length(); }",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (id != null) { buf.length() - beginIndex; }",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index].length() - 1].getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (beginIndex == -1) { // first char (int)",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (beginIndex == -1) { // first char[] buf",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (begin + 1 > buf.length()) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (beginIndex == -1) { buf.maxHeights.length() - 1; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (beginIndex == -1) { // first field contains the end",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (beginIndex == -1) { // empty slot?",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (beginIndex == -1) { buf.max(buf, endIndex)",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (beginIndex >= 0) { buf.length(); }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (beginIndex < 0) { // end-of-input",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (beginIndex == -1) { // add a new char",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (beginIndex != -1) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (beginIndex == -1) { buf.maxHeights.length() - beginIndex; }",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeights.length() - beginIndex; }",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index] = readUTF8(text.length() - 1].getClass().getName(); }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (beginIndex == -1) { buf.maxHeights.length() - 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1]; }",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (beginIndex == -1) { // add a new String",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (beginIndex == -1) { buf.maxStackTopRead(); }",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (beginIndex == -1) { // first item AFTER(buf)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (beginIndex == -1) { // start with a new byte",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (beginIndex == -1) { // first line contains an object?",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (beginIndex == -1) { // first field contains the object",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (beginIndex == -1) { buf.length() - 0) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (startIndex == -1) { // first spill over?",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1].getClass().getSimpleIndex(); }",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 0) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (beginIndex == -1) { // first entry",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (beginIndex <= 0) { // end-of-input",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (beginIndex == -1) { // first field contains the doc are arranged ANTICLOCKWISE",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.readValue(text.length() - 1].getClass().getName(); }",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (beginIndex == -1) { // firstnum?",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.size() - 1].getClass().isLetterOrRight(buf)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1].getClass().getSimpleIndex(), endIndex); }",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeights.length() - 1; }",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (beginIndex == -1) { // add a new char after this",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.size() - 1].getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(buf.length() - 1].getClass().getName(); }",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1].getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (beginIndex == -1) { // first 1)",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (beginIndex == -1) { // first add",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (beginIndex == -1) { // first size",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index].length() - 1].getClass().isPrimitive()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index].length() - 1].getClass().isLetterOrRight(buf)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.max(buf, beginIndex++beginIndex + 1]; }",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (beginIndex > 0) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.size() - 1].getClass().isPrimitive(); }",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index] = readUTF8(text.length() - 1].getClass())) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = c; }",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.read(text.length() - 1].getClass().getName(); }",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (beginIndex == -1) { // first field contains an object?",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1].getClass().getSize(), endIndex); }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (beginIndex > 0) { // more than one zero",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeights.length() - 0) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.length() - 1].getClass().isArray()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (beginIndex == -1) { // first escape",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.length() - 1].getClass().isPrimitive(); }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (beginIndex == -1) { // first right (int)",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.read(buf, beginIndex++beginIndex + 1]; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readClass(buf.length() - 1].getClass().getName(); }",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.indexOf('\\n', beginIndex + 1]; }",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.length() - 1].getClass().isLetterOrRight(buf)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (beginIndex == -1) { // first fieldIndex",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (beginIndex == -1) { // first string value",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1].getClass()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1].getClass().getName(), beginIndex); }",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = b.read(buf, beginIndex++beginIndex + 1]; }",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index].length() - 1].getClass().isPrimitive(); }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index] = readUTF8(text.length() - 1].getClass().getSimpleIndex(), endIndex); }",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index] = readUTF8(text.length() - 1]; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index] = readUTF8(text.length() - 1].getClass().getSimpleIndex(); }",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1].getClass());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (beginIndex == -1) { // first char, endIndex",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index] = readUTF8(text.length() - 1].getClass());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (beginIndex == -1) { // first char number axis",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = buf.size() - 1].getClass().isArray(); }",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[index] = readUTF8(text.length() - 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (beginIndex == -1) { // more than one element",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (beginIndex == -1) { buf.maxHeightHeight[beginIndex] = readUTF8(text.length() - 1].getClass())) {",
                "identical": false
            }
        ],
        "buggy_line": "if (beginIndex > 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex > 0) {",
        "fixed_line": "if (beginIndex >= 0) { buf.readerIndex(beginIndex); int endIndex = buf.indexOf(beginIndex, buf.writerIndex(), (byte) '\\n'); if (endIndex >= 0) {"
    },
    "Bears-124": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".toString(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\" .util.Date.valueOf(\"0\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".number(\" .util.Date.valueOf(\"0+\")\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text\");",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".number(\" .util.Date\").text()\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".toString(\"dd Mmm: \" + date.toString(\"dd MMMM\").text() + \")\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\" .util.Date. maxLength\").text\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\"); //\").",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".number(\" .util.Date.valueOf(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".toString(\"mm: \" + date.toString(\"dd MMMM\").text() + \")\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".toString(\"dd Mmm: \" + date.toString().substring(\"dd MMMM\").text() + \")\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".toString(\"\").text\"); // number of file",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text\"); //\").",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\" .util.Font\").text()\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".withParseType(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".head(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\"); //create multiplier value",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\" .util.Date\")\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\" .util.ArrayList(\"number\").text\"); //\").",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text\"); //create multiplier value",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\" .util.Date.withParseType(text.toString(\"dd MMMM\").text() + \")\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\" .util.Date.valueOf(\"dd MMMM\").text()\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\" .util.Date.valueOf(\"0+\")\").text()\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\" .util.Date.valueOf(\"Pos\").text()\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".number(\" .util.ArrayListArrayList\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".number(\" .util.Date\")\").text(); // create number of file",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\" .util.Date\") ;",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text\"); // 2.0 only",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\" .util.Date\")\").text(); // always begetText()+\")\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\" .util.ArrayList(\"\").text\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\" .util.Date.valueOf(\" .util.Date\")\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\" .util.Date.number\").text\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\" .util.ArrayList(\"\").text\"); //\").",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".number(\" .util.Date\").text()\"); //\").",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".number(\" .util.Date\")};",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".number(\" .util.Date.valueOf(\"Long\").text\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\" .util.ArrayList(\"number\").text\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\" .util.Date.valueOf(\"Infinity\")\").text()\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".number(\" .util.Date.valueOf(\"0\").text\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".number(\" .util.Date.valueOf(\" .util.number\").text\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\" .util.ArrayList\").text()\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\" .util.Date.valueOf(\" .util.Date\")\").text()\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".number(\" .util.Date.Number(\"0+\")\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\" .util.Date.valueOf(\" .util.Date\")) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\" .util.Date.NaN\").text()\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".number(\" .util.Date\")withParseType(numerator\").text() + \")\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\"); // date",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\" .util.Date.valueOf(\"internal+\")\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".toString(\"dd Mmm: \" + date.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".toString(\"dd MMMMoment+\")\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\" .util.Date\")\").text() ;",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\" .util.Date\")\").text(); // end of file",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\" .util.Date.valueOf(\"dd MMMMoment\").text()\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".toString(\"dd Mmm: \" + date.toString(\"dd MMMM\").text + \" to\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\" .util.Date\")\").text(); // number of file",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\" .util.Date.valueOf(\"dd MMMM0(d+\")\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".number(\" .util.Date.number\").text().toString(\"dd MMMMICLOCKWISE_numerator\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\" .util.Date.number\").text()\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\" .util.Date.valueOf(\" .util.number\"));",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".number(\" .util.Date.number\").text().withParseType(text.Long.valueOf(\"0\"));",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\" .util.Date\")\").text(); // always begetText()+\") as strings",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\" .util.Date.valueOf(\"0+\")\").text()\"); //numberNegatived",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\" .util.Date.valueOf(\"Infinity\")\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\" .util.Date.number\").text().toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text\"); // date",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\" .util.Date\")\").text(); //create number where source",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\" .util.Date.NaN\").text\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\"); // number",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".number(\" .util.text\").text()\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\" .util.Date.number\").text().withParseType(text.toString(\"0\"));",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\" .util.Date.valueOf(\"0.00\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".toString(\"dd MMM '\"+numerator+\")\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\"); //number't need to be negated",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\" .util.Date\")\").text(); // 2.0 only",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\" .util.Date. maxLength\").text()\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\"); // should be SHORT",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\" .util.Date\")\").text(); // always begetText()+\") as text.\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\" .util.Date.number\").text().withParseType(text.Long(4,d+\")\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".toString(\"Parse failed for : \" + number.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\"); // always use 0",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\" .util.Date.valueOf(\"0\"));",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\"); //create number (generator)",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\" .util.Date.number\").text().toString(\"dd MMMM\").text\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\" .util.Date.Number(\"number\").text\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\" .util.Date\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\" .util.Date\")\").first();",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\" .util.Date\") ) ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(\" .util.Date.Hash\").text()\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\" .util.Date\").text\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\" .util.Date\")\").text(); //number number of file",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".toString(\"mm: \" + date.toString(\"dd MMMM\").text + \" to\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").text()\"); // end of file",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\" .util.Date.valueOf(\"Long\").text()\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\" .util.Date.number\").text().withParseType(text.Long.valueOf(\"Long.number\"));",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".toString(\"\").text\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".toString(\"dd Mmm: \" + date.toString(\"dd MMMM\").text() + \")\"); // number",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(d+.d+)\").text(\"+\") // latitude .number(\"(d+.d+)\").text(\"+\") // longitude",
        "fixed_line": ".number(\"(-?d+.d+)\").text(\"+\") // latitude .number(\"(-?d+.d+)\").text(\"+\") // longitude"
    },
    "Bears-110": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number().trim();",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number().trim().toLowerCase());",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number().trim()));",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".setMaximumFractionDigits(-d+\")d.getSize().getRawClass().getName());",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getType()));",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType));",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getType()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getType()));",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass()));",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getType()));",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().getType()));",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().startsWith(\" .number\"));",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getArgumentType().getRawClass().getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getRawClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().trim()));",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .lang.class\"));",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getSimpleName() + \"d\")\";",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().startsWith(\" .lang.Date.class\"));",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass());",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number().trim().toLowerCase().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getName());",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getRawClass().getType()));",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getArgumentType().getRawClass().getRawClass().getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getClass().getRawClass().startsWith(\" .lang.class\"));",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getArgumentType().getRawClass().getRawClass().getType()));",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number().trim().toCharArray();",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().getClass().getName());",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().trim()));",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .number\"));",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".util.Date().withParseType(text.substring(0, Integer.MAX_VALUE).toHexString().floatValue() + \"d\")\";",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getRawClass().getName());",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getName()));",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().getType()));",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getSimpleName() + \"d\"));",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().startsWith(\" .lang.class\"));",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().trim()));",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().length()))) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getArgumentTypes()))) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().getClass().getRawClass().startsWith(\" .lang.class\"));",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getClass()));",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getRawClass().startsWith(\" .lang.class\"));",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().trim()));",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .lang.Date.class\"));",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getClass().getRawClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().startsWith(\" .lang.Date.class\"));",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().startsWith(\"number\"));",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getRawClass().startsWith(\" .lang.Throwable.class\"));",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().startsWith(\" .lang.Throwable.class\"));",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().getRawClass().startsWith(\" .lang.class\"));",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(number));",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .lang.Date.class\"));",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().startsWith(\"number\"));",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .lang.floatValue()))) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getClass().getRawClass().startsWith(\" .lang.Throwable.class\"));",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().getRawClass().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().getClass().getSimpleName() + \"d\")\";",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().getClass().getRawClass().startsWith(\" .lang.class\"));",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(d.floatValue()))) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getRawClass().startsWith(\" .lang.floatValue()))) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getArgumentType().getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().getClass());",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getClass().getRawClass().startsWith(\"number\"));",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getSimpleName()).append(')');",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".setMaximumFractionDigits(-d+\")d.getSize().getRawClass().getName() + \" .lang.Date.class\"));",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getRawClass().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().startsWith(\" .number\"));",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getRawClass());",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .lang.floatValue()))) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .lang.Throwable.class\"));",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getClass().getRawClass().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().floatValue() + \"d\")\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().getRawClass().getClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .number\"));",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getClass().getRawClass().startsWith(\"number\"));",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().intern()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().floatValue() + \"d\")\";",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().getClass().getRawClass().getSimpleName()));",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getRawClass().getRawClass().getRawClass().getClass().getRawClass().getType()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isNaN(targetType.getArgumentType().getRawClass().getRawClass().getRawClass().getType()));",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getClass().getRawClass().getName()));",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().getClass().getRawClass().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getArgumentTypes()))) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".setMaximumFractionDigits(-d+\") || Double.isInfinite(targetType.getRawClass().getRawClass().getRawClass().startsWith(\" .lang.floatValue()));",
                "identical": false
            }
        ],
        "buggy_line": ".any()",
        "fixed_line": ".expression(\",.*\") .or() .text(\"#\")"
    },
    "Bears-159": {
        "fixes": [
            {
                "k": 1,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(null);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(GJPEG_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.of_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(null, null);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(INT_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(DateTimeFormatter.of_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(OPTIONAL_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.of.of_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(OPTIONAL_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(INT_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(buffered);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(DateTimeFormatter.ofof_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(GJPEG_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(DECIMAL_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(Method.of_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(MIN_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JSType.of);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JPEG_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( restrict_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(types);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(wd_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.ofof(null);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( ((DateTimeFormatter.of_FORMAT_PATTERN, null) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(NULL_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(dis_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(clearFormatter);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(dis_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(GPATTERN);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(upper_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(MIN_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(clearFormatter.of_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(zone);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(print_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(typedef);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(convention.of);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(NULL_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.ofPattern(OPTIONAL_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(GCal_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JSType.of_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(GregorianCalendar.of);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(NON_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(System.of);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(GCal_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(ST_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(ST_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(DateTimeFormatter.of);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(null).toString();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.of_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( Jar_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(Gather_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( ((DateTimeFormatter.ofof_FORMAT_PATTERN, null) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(null).print_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( based_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(en.of_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.ofof_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(standard_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( FIVE_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(chrono);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(LONG_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( Jar_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(Gather_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(Format.of);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(PackageName_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(appendChild_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( restrict_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(Analysis.of);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(null );",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(Needed_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(Lists.copy_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(PackageName_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(GJSSourceFile.of_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(standard);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(GPATTERN.of);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(upper_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(LONG_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(ALL_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.of.secondFormatter_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( ((DateTimeFormatter.of_FORMAT_PATTERN, null) >= 0);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(GJodaFormatter.of_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.of.UTC_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.of.ofof_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.of.copy_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(ALL_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(MAGIC_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( FIVE_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.ofFromPattern(DateTimeFormatter.of(null));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( FI FIVE_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(appendChild_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of( based_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(terr.of);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(DECIMAL_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(wd_FORMAT_PATTERN);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(en.of);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(GJPEG_FORMAT_PATTERN, 12);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.of.secondOfMinute, null);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.ofPattern(JSType.of);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.of.second_FORMAT_PATTERN, null);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private static final DateTimeFormatter fFORMAT_FORMAT = DateTimeFormatter.of(JsonFormatter.of.of_FORMAT_PATTERN);",
                "identical": false
            }
        ],
        "buggy_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss\"; private static final DateTimeFormatter TS_FORMAT = DateTimeFormatter.ofPattern(TS_FORMAT_PATTERN);",
        "fixed_line": "private static final String TS_FORMAT_PATTERN = \"yyyy-MM-dd HH:mm:ss[.S]\"; private static final DateTimeFormatter TS_FORMAT = new DateTimeFormatterBuilder() .appendPattern(\"yyyy-MM-dd HH:mm:ss\") .appendFraction(ChronoField.MICRO_OF_SECOND, 0, 6, true) .toFormatter();"
    },
    "Bears-224": {
        "fixes": [
            {
                "k": 1,
                "patch": "return source.apply == null ? null : target.value();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return source.apply == null ? null : target.trim();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "source = target == null ? \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return source.apply == null ? \"null\" : target.value;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "source = source.apply() == null ? \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "source = target == null ? \"apply\" : target.value;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return source.apply == null ? \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "source = target == null ? null : target.value();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "source = target == null ? \"null\" : target.value();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return source != null ? source.apply() : null;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "source = source.apply() == null ? \"null\" : target.value;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "source = source.apply() == null ? null : target.trim();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "source = target.apply(source) == null ? \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "source = target != null ? source.getName() : null;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return source != null ? source.getValue() : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return source != null ? source.getName() : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "source = target != null ? source.getValue() : null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "source = source.apply() == null ? \"null\" : target.getClass().getName();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return source.apply != null ? source.getValue() : null;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "source = target.apply(target) == null ? \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "source.apply = source.value == null ? \"null\" : target.value;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return source != null ? source.apply : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return source != null ? source.value() : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "source = target == null ? \"null\" : target.value;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "source = target == null ? null : source.value();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "source = target != null ? source.value() : null;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "source.apply = target == null ? \"null\" : target.value;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return source.apply != null ? source.value() : null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "source.apply = source.value == null ? \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "source.apply = source.value == null ? \"null\" : target.getClass().getName();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "source = target == null ? null : target.trim();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return source.apply != null ? source.getName() : null;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "source.apply = target == null ? \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "source.apply = source.value != null ? source.getValue() : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "source = target.apply(source) == null ? \" \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return source.apply == null ? null : target;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "source.apply = target == null ? \"null\" : target.getClass().getName();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "source = target == null ? null : target.getName();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "source = source.apply() == null ? null : target.value();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "source = target.apply(target) == null ? \"null\" : target.value;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "source = target.apply(target) == null ? null : target.value();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "source = target.apply(source) == null ? \"null\" : target.value;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return source.apply == null ? \"null\" : target.value();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return source.apply == null ? null : target.value;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "source = source.apply != null ? source.getValue() : null;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "source = target == null ? \"NULL\" : target.value;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return source.apply == null ? \"null\" : target.getClass().getName();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "source = target == null ? \"apply\" : target.getName();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "source = target.apply(source) == null ? null : target.trim();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "source = target.apply(target) == null ? null : target.trim();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "source = source.apply == null ? null : target.trim();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return source != null ? target.getName() : null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return source != null ? Value.apply(target) : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "source = target == null ? new ValueUtils.apply(input) : target;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "source = source.apply() == null ? \"null\" : target.trim();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return source.apply == null ? \"null\" : target.trim();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "source = target.apply(target) == null ? null : source.value();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "source = source.apply(target) == null ? \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "source = target == null ? super.apply() : target;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "source = source.apply == null ? \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "source = target == null ? ValueUtils.apply(target) : target;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return source.apply != null ? target.emptyMap() : null;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "source = target.apply(source) == null ? \" \"null\" : target.value;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "source.apply = target == null ? \"null\" : target.value();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "source = target.apply(target) == null ? \"null\" : target.value();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return source.apply == null ? null : target.getName();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return source == null ? null : target.value();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "source = target == null ? ValueUtils.apply(source) : target;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "source = source.apply() == null ? null : target.getClass().getName();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "source = source.apply() == null ? \"null\" : target.getClass();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "source.apply = target == null ? null : target.trim();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "source = target.apply(target) == null ? \" \"null\" : target.getName();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "source.apply = target == null ? \"null\" : target.trim();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "source.apply = source.value == null ? \"null\" : target.trim();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "source = source.apply(target) == null ? null : target.trim();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return source.apply != null ? target.trim() : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "source = target == null ? \"NULL\" : target.getName();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "source = target != null ? ValueUtils.apply(target) : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "source = source.apply(target) == null ? null : target.value();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "source = target.apply(source) == null ? \"null\" : target.value();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return source.apply == null ? null : target.value((Class) input).trim();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "source = target == null ? \"null\" : target.getClass().getName();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "source = source.apply() == null ? \"null\" : target.value();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "source = source.apply == null ? \"null\" : target.value;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "source = target.apply(source) == null ? \"with\" : target.getName();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "source = source.apply() == null ? null : target.getName();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "source.apply = source.value == null ? \"null\" : target.value();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "source = target == null ? Value.apply() : target;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "source = target.apply(target) == null ? \"null\" : source.size();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "source = target != null ? Value.TRUE.equals(target) : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "source = source.apply == null ? null : target.value();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "source = target.apply(target) == null ? \"NULL\" : target.getName();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "source = target.apply(source) == null ? null : target.value();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "source = target == null ? \"null\" : target.trim();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return source != null ? Value.apply() : null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return source.apply == null ? null : target.value((int) input).trim();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "source = target.apply(source) == null ? \"NULL\" : target.getName();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "source.apply = target != null ? source.value() : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return source.apply == null ? null : target.value((int) input);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return source != null ? source.trim() : null;",
                "identical": false
            }
        ],
        "buggy_line": "Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty();",
        "fixed_line": "try { Object source = input; Object target = null; for (Operation p : operations) { target = p.apply(source); source = target; if (source == null) { break; } } return target != null ? Value.of((O) target) : Value.empty(); } catch (Exception ex) { return Value.empty();"
    },
    "Bears-238": {
        "fixes": [
            {
                "k": 1,
                "patch": "return field.isArray() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return field.isArray() && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(field.getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return fieldNames.containsPrimitive() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return fieldNames.contains(field.getType()) && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return fieldNames.containsPrimitive() == field || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return field.isArray() || fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return field.isArray() || fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return fieldNames.containsPrimitive() == field ? false : fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return fieldNames.containsPrimitive() || field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return fieldNames.contains(field.getType()) && field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return field.isArray() && field.getDeclaringClass().isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return fieldNames.containsPrimitive() == false;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return field.isArray() || fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return field.isArray() || field.isExported(field.getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(object.getClass().getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return field.isArray() || field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return fieldNames.contains(field.getType()) || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return fieldNames.containsPrimitive() && fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(object.getName());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return fieldNames.contains(field.getType()) && field.isLocal();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return field.isArray() && fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return fieldNames.contains(field.getType()) && field.isAssignableFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return fieldNames.containsPrimitive() == field ? false : fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return field.isArray() || fieldNames.contains(field.getReturnType());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return field.isArray() && fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return field.isPrimitive() || fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return fieldNames.containsArray(field.getType()) && ignored.contains(field.getName());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return fieldNames.containsArray() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return fieldNames.containsKey(field.getType()) && ignored.contains(field.getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return fieldNames.contains(field.getType()) && field.getName().equals(field.getName());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && ignored.contains(field.getName());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return field.isSynthetic() || fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return fieldNames.contains(field.getType()) || field.isLocal();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return fieldNames.contains(field.getType()) &&push.contains(field.getName());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && field.isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return field.isArray() && fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return field.isArray() || fieldNames.contains(field.isAssignableFrom(field.getClass().getName()));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return fieldNames.containsPrimitive() || fieldNames.contains(field.getType());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return field.isArray() && fieldNames.contains(field.getReturnType());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getClass().isArray());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return fieldNames.containsPrimitive() == field ? false : fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return field.isPrimitive() && fieldNames.contains(field.getReturnType());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getType()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return fieldNames.containsPrimitive() || fieldNames.contains(field.getClass());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) &&",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return fieldNames.contains(field.getType()) || field.isPrimitive());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(instant.getName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return fieldNames.containsPrimitive() || field.isAssignableFrom(field.getType());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return fieldNames.contains(field.getType()) || field.isExported(field.getName());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(type.getName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return fieldNames.contains(field.getType()) && fieldNames.contains(object.getName());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return fieldNames.containsPrimitive() == field || fieldNames.contains(field.isAssignableFrom(field.getClass().getName()));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && field.isArray());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return fieldNames.contains(field.getType()) || field.isFrom(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return fieldNames.containsPrimitive() || fieldNames.contains(field.isAssignableFrom(field.getClass().getName()));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return field.isArray() || field.isAssignableFrom(field.getType());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray().isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return field.isAssignableFrom(field.getType()) && ignored.contains(field.getName());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return field.isArray() || fieldNames.contains(field.getComponentType());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().getComponentType());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return fieldNames.contains(field.getType()) != null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return fieldNames.containsPrimitive() == false ? false : fieldNames.contains(field.getName());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return fieldNames.containsPrimitive() || field.isAssignableFrom(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return field.isArray() || fieldNames.contains(field.isAssignableFrom(field.getClass()));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) || field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return fieldNames.contains(field.getType()) == false;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return fieldNames.containsPrimitive() || fieldNames.contains(field.getComponentType());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getType());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return fieldNames.contains(field.getType()) || field.isArray();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return fieldNames.containsPrimitive() == field ? false : fieldNames.contains(field.getDescriptor());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return fieldNames.contains(field.getType()) && ignored.contains(field.getClass().getName());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return field.isArray() && field.getDeclaringClass().isArray()) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return fieldNames.containsPrimitive() == field ? false : fieldNames.contains(field.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isAssignableFrom(field.getName());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return field.isArray() || field.isExported(field.getClass());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && !field.isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return field.isPrimitive() || field.isAssignableFrom(field.getClass());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return fieldNames.contains(field.getType()) && field.isPrimitive());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return fieldNames.contains(field.getType()) || field.is array();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return fieldNames.contains(field.getType()) || field.isAssignableFrom(field.getClass().isArray()) && ignored.getClass().isArray()) ? false : false;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return fieldNames.contains(field.getType()) && field.isExported(field.getName());",
                "identical": false
            }
        ],
        "buggy_line": "return field.getType().isPrimitive() || field.getType().isArray() || ignoredNames.contains(field.getName());",
        "fixed_line": "return /*field.getType().isPrimitive() ||*/ field.getType().isArray() || ignoredNames.contains(field.getName());"
    },
    "Bears-125": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.setShort(index + 1, text.length - 1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.setShort(index + 1, text.length - index);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.setShort(index + 1, INT_SPACE) * 8;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.setShort(index + 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.setShort(index + 1, i, 3);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.setShort(index + 1, i, 3;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.setShort(index + 1, text.length - 1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.set(index + 1, text.length - 1);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.setPosition(index + 1, text.length - 1);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.setShort(index + 1, INT_SPACE) * 8 + index);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.setShort(index + 1, text.length - i - 1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.setShort(index + 1,Format.length - 1);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.setShortName[index++] = BYTE_BACKSLASH;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.setShortPosition(index + 1);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.setShort(index + 1, INT_SPACE);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.set < data.length) ? -1 : (index + 1) * 8;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.setShort(index + 1, Integer.MAX_VALUE - 1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.setShortName[index++] = BYTE_LT;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.setPosition(index + 1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.setShort(index + 1, i,7);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.setShort(index + offset, data[index], 0.0);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.set Short.parse(data[index++index], data[index + i] - 1);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.setShort(index + 1, INT_SPACE) * 3;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.setShort(index + i, data[index], 0.0);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.setShort(index + 1, 1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.setShortName[index++] = BYTE_GROUPS[index], 0.0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.setShort(index + 1, text.length() - 1);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.setShort(index + 1, bounds.length - 1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.setShort(index + 1, INT_SPACE, Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.setShort(index + 1, actually.length - 1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.setShort(index + 1, INT_SPACE) * 2;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.setShortName[index++] = INT_QUOTE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.setShortName((int) data[index++index], 16);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.setShort(index + 1, i,ones.length - 1);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.set Short.parseShort(data[index++index], position + 1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.set(index + 1, text.length - index);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setShort(index + 1, bounds.length() - 1);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.setShort(index + 1, INT_SPACE) * 8);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.setShort(index + 1, i,state.length - 1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.setShort(index + offset, Short.parseShort(text));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.setShort(index + 1, INT_SPACE) * 7;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.setShort(index + 1, 7,.length - 1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.set Short.parseShort(index + 1, INT_SPACE) * 8;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.setShort(index + 1, INT_SPACE) * 4);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.set Short.parse(data[index++index], data[index + i] * 8);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.set < data.length) ? -1 : (index + 1) / 2;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.setShortIndex(index + 1);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.set Short.parse(data[index++index], data[index + i];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.set Short.parseShort(data[index++index], type) * 8 + index);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.setShort(index + offset, Short.valueOf(index + 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.setShort(index + 1,Image, 16);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.setShort(index + offset, Short.MIN_VALUE, 0);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.setShort(index + 1, data[index], 0.0);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.setShort(index + offset, Short.MAX_VALUE - 1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.setShort(index + offset, Short.MIN_VALUE, loopType + 1);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.set Short.parseShort(data[index++index], data[index + i];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.setShortName(index + 1, INT_SPACE) * 8;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.set Short(data[index++index], data[index + i] - 1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.setShort(index + 1, objectId.length - 1);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.setShort(index + 1, it.length - 1);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.set Short.parse(data[index++index], data[index + i], 0.0);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.setShort(index + 1, require.length - 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.setShort(index + 1, INT_QUOTE);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.setShort(index + 1, 2, Short.MAX_VALUE - 1);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.set Short.parseShort(index + 1, text.length - 1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.set Short.parseShort(data[index++index], data[index + i] - 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.setPosition(index + 1, text.length - 1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.setShort(index + offset, Short.parseShort(text, index + 1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.setShort(index + 1, i, L - index);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.setShort(index + 1, esc.length - 1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.setShortName(index + 1, text.length - 1);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.set Short.parseShort(data[index++index], data[index + i] * 8);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.setShort(index + 1, INT_SPACE) - 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.set Short.parseShort(data[index++index], 16);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.setShortName[index++] = BYTE_QUOTE;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.setShort(index + 1, INT_SPACE) * j);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.setShort(index + 1, AffineTransform.length - 1);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.setShort(index + 1,ositive.length - 1);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.setShort(index + 1, INT_SPACE) * 1000);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.set(data[index++index], INT_SPACE) * 8 + index);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setShortName(index + 1, text.length() - 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.setShort(index + 1, 2, Short.MAX_VALUE - 1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.setShort(index + 1,ASH.length - 1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.setShort(index + 1, i, esc.length - 1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.setShort(index + 1, INT_SPACE) * 8 + b + 1);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.setShort(index + 1, rgb[index], 0.0);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.setShort(index + 1, cal.length - 1);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.set Short.parse(data[index++index], position + 1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.setShort(index + 1, esc.length - 1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.setShortName[index++] = BYTE_FIELD;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.setPosition(index + 1)) * data[index + 1);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.setY(index + 1, text.length - 1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.set Short.parseShort(data[index++index], INT_SPACE + 1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.setShort(index + 1, 256);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.set Short(data[index++index], data[index + i];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.setPosition(index + 1, text.length - index);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.setShort(index + offset, Short.MIN_VALUE, index + 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.setShort(index + 1, INT_SPACE) * percent;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.set Short.parse(data[index++index], data[index + i] - '0');",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.set Short(index + 1, text.length - 1);",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.PREFIX_TEMP + i, Short.parseShort(data[index++], 16) * 0.0625);",
        "fixed_line": "position.set(Position.PREFIX_TEMP + i, (short) Integer.parseInt(data[index++], 16) * 0.0625);"
    },
    "Bears-251": {
        "fixes": [
            {
                "k": 1,
                "patch": "attributesMap = new ConcurrentHashMap();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, int>();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "attributesMap = new ConcurrentHashMap(attributes);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Set<Object>>();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet(), attributes.length);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes.length);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet(), attributes.length, attributeCount);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,Domainattributes = new ConcurrentHashMap<Object>();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Type>();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.type);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>(attributes.length);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Set<Object>();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Set<Object>();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "attributesMap = new ConcurrentHashMap<Object, JSType>();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.size());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Set<Object>>();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.KEY);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.get(attributes).length();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.insert(attributeMap.size(), attributes.length, attribute.length);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>(attributes, attributes.length);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.getParameterTypes());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute<?>, int>();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.key, attributes);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet(), attributes.length, attribute(attributeMap));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "attributesMap = new ConcurrentHashMap<Name,returnMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnCharMap.Entry<K, V>>(attributeMap.class);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Object>();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute<?>,returnMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.insert(attributeMap.size(), attributes.length, attributeCount);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes, attributes.length);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>,returnMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "attributesMap = new ConcurrentHashMap<Object, V>();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, JSType>();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnCharMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.NO_NAMESPACE);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.U2U_CONSTRUCTOR_NAME);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.name);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes, attributes.size());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.get(attributeMap.size());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.getDescriptor());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.millisecond);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Type>();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.next);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, String>();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Type>(attributes);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, int[attributes.length - 1];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,V>>();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Integer>();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnMap.get(attributeMap.name);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, ?>>();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "attributesMap = new ConcurrentHashMap<Object,V>();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Type>(attributes, attribute.length);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.insert(attributeMap.size(), attributes.length * 2 + attribute.length);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute>(attributes.size());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnCharMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet(), attributes.length * 2 + attributes.size());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, Set<Class<?>>();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>(attributes, attributes.length);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.keySet(), attributes.length, attributeValues.length);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "attributesMap = new ConcurrentHashMap(attributes.length);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnType>();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey, JSType>();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Object>();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.get(attributes);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "attributesMap = new ConcurrentHashMap<Object,V>(attributes);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.insert(attributeMap.size(), attributes.length * 2 + attributes.length);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.length);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "attributesMap = new ConcurrentHashMap<Attribute<?>,returnMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Set<Name>();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnCharMap.Entry<K, V>>(attributeMap.NO_NAME);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "attributesMap = new ConcurrentHashMap<Object, classMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap._NAMESPACE);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, Integer>();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.insert(attributeMap.size(), attributes.length, attribute.size());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "attributesMap = new ConcurrentHashMap<Object, Set<Node>();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "attributesMap = new ConcurrentHashMap<Object,DomainMap.get(attributeMap.class);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "attributesMap = new ConcurrentHashMap<Object, String>();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.insert(attributeMap.size(), attributes.length, true);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "attributesMap = new ConcurrentHashMap<Object, ?>>();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, int[attributes.length - 1]];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>,returnMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "attributesMap = new ConcurrentHashMap<AttributeKey,returnMap.get(attributeMap.);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "attributesMap = new ConcurrentHashMap<ConcreteMap.Entry<K, V>>(attributeMap.class);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap. = attributes.size());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "attributesMap = new ConcurrentHashMap<Class<?>, V>();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "attributesMap = new ConcurrentHashMap<Name,returnMap.get(attributeCount);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "attributesMap = new ConcurrentHashMap<Object,returnMap.get(attributeMap.NO_NAMESPACES);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "attributesMap = new ConcurrentHashMap(maxMap.get(attributeMap.size());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.size());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "attributesMap = new ConcurrentHashMap(attributeMap.size(), attributes.length);",
                "identical": false
            }
        ],
        "buggy_line": "attributesMap = new ConcurrentHashMap<>(attributes.length);",
        "fixed_line": "attributesMap = new ConcurrentHashMap<>();"
    },
    "Bears-25": {
        "fixes": [
            {
                "k": 1,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "PropertySerializerMap.class, null, mapSerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map ? null : new PropertySerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.withAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = new PropertySerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(type, _property);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map ? null : map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.constructSpecializedMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.entrySetAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.constructSpecializedType(_type, provider, _property);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, this);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.put(type, provider, _property);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _valueTypeSerializer);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.deserializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map ? null : new SerializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.categoryAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "PropertySerializerMap.class, null, result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "PropertySerializerMap.class, _propertySerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.makeAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(type, this);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.getAndAddSerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.collAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.typeAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.getAndAddSerializer(type, provider, _property).findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.hasSerializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.predicatesAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.decorated().findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? valueSerializerAndAddSerializerMap.constructSpecializedType(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(valueType) ? null : new SerializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "PropertySerializerMap.class, _property valueSerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.getAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map. new PropertyAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "PropertySerializerMap.class, _property == null) ? null : map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "PropertySerializerMap.class, null, map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _valueSerializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(valueType);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.replaceAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? valueSerializerAndAddSerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "PropertySerializerMap.ANNOTATIONAndMapResult result = map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = mapValueSerializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(valueType) ? null : new SerializerAndAddSerializer(type, _property);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.getAndAddSerializer(type) : null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(type, provider, this);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(valueType, _property);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map. decoratedAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.entrySet().findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(provider, _property);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "PropertySerializerMap.class, null, mapSerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.get(type) : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.mockAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? valueSerializerAndAddSerializerMap.constructSpecializedType(_type, provider, _property);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property) ? new SerializerAndAddSerializer(type, _property) : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(null, _property);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.wAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.getAndAddSerializer(type, provider, _property).findAndAddSerializer(type, _property);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = valueSerializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.predAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? valueSerializerAndAddSerializerMap.constructSpecializedType(type, provider, _property).findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map. new PropertyAndAddSerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _valueSerializerSerializer);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map. '0AndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.cAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? valueSerializerAndAddSerializerMap.constructSpecializedType(type, provider, _property);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "PropertySerializerMap.class, ClassUtil.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.getAndAddSerializer(type) : new SerializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.connectAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.gAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.minorAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.constructSpecializedType(type, provider, _property);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property - 1, result).findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.constructSpecializedType(_map, cc, provider, _property);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map. new PropertyAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map. isAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = PropertySerializerAndMapResult;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.SerializerAndAddSerializer(type, provider, _property).findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.argumentsAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = _valueSerializerAndAddDynamic(type, provider, _property);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.getAndAddSerializer(type, provider, _property).findAndAddSerializer(valueType) : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.constructSpecializedMapResult(type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map ? null : new SerializerAndMapResult(type, provider, _property);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property) ? new SerializerAndAddSerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _propertyproperty);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.SerializerAndAddSerializer(type, provider, _property) : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(new SerializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.getAndAddSerializer(type, provider, _property) : new SerializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.entrySetAndAddSerializer(type, provider, _valueTypeSerializer);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _objectIdReader.map) ? null : new SerializerAndAddSerializer(type, _property);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property) ? null : map.findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.constructSpecializedType(_type, provider, _valueSerializer);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(valueType)) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map ? null : new PropertySerializerAndMapResult(type, provider, _findAndAddSerializer(type, _property).findAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property) && map.hasSerializerAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property) ? new SerializerAndAddSerializer(type, provider, _property).findAndAddSerializer(type, _property);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map != null ? map.getAndAddSerializer(type, provider, _property);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "PropertySerializerMap.SerializerAndMapResult result = map.findAndAddSerializer(type, provider, _property).findAndAddSerializer(valueType) == null) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "// 27-Jun-2017, tatu: [databind#1679] Need to avoid StackOverflowError... if (type == Object.class) { // basically just need to call `toString()`, easiest way: JsonSerializer<Object> ser = new Default(Default.TYPE_TO_STRING, type); _dynamicSerializers = map.newWith(type, ser); return ser; }"
    },
    "Bears-21": {
        "fixes": [
            {
                "k": 1,
                "patch": "return this;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().getTimeZone();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, loc);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new JsonFormat.Shape.OBJECT;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return (format == null) ? null : new JsonFormat.Value(this, property);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, pattern);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (format == null) ? null : new JsonFormat.Shape();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (format == null) ? null : df.withTimeZone(tz);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (format == null) ? null : new JsonFormat.Shape.expectObjectFormat(this, df);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return (tz == null) ? null : new JsonFormat.Value(this, property);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, df);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (format == null) ? null : new SimpleFormat(this, df);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(property);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : format;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (visitor == null) ? null : new JsonFormat.Value(this, property);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (format == null) ? null : new JsonFormat.Value(this, null);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new TimeZone.getTimeZone();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (format == null) ? null : format;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (format == null) ? null : new JsonFormat.Shape.expectObjectFormat(this, loc);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (format == null) ? null : new SimpleDateFormat().getTimeZone();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new ObjectWriter(this, loc);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new TimeZone.LONG;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(this, df.getShape());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (format == null) ? null : new JsonFormat.Shape.OBJECT;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (tz == null) ? null : new JsonFormat.Value(this, null);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new ObjectWriter(this, pattern);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return withFormat(property);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, JsonFormat.UTC);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(pattern.getShape());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new JsonFormat.Shape.UTC;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (format == null) ? null : new JsonFormat.Shape.createInstance(this, property, df, format);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new ObjectWriter(this, format);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().getTimeZone(this, loc);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, format);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (format == null) ? null : new JsonFormat.Shape.expectObjectFormat(this, property);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (format == null) ? null : new JsonFormat.Shape.createInstance(this, property, df);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().getTimeZone(this, null);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new StdDateFormat().getTimeZone();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new TimeZone.UTC;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new JsonFormat.Value(this, property, df, format);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new Node(Token.OBJECT);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new ObjectWriter();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new JsonFormat.Shape.LONG;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, TimeZone.UTC);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, entry.getShape());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, df.getShape());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat(\"UTC\"));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (format == null) ? null : new JsonFormat.Value(this, _property);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (tz == null) ? null : new JsonFormat.Value(this, _property);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, property);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new TimeZone.getDefault();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (format == null) ? null : new JsonFormat.expectObjectFormat(this, df);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (visitor == null) ? null : new JsonFormat.Value(this, null);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(this, df.getProvider());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, leapFormat.UTC);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (format == null) ? null : new JsonFormat.expectObjectFormat(this, loc);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(this, df, format);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(this, loc);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(this, _property);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(pattern.getProvider());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, fields.getShape());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat(this, pattern);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (format == null) ? null : df.getShape();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new ObjectWriter(this, _property);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : df.getShape();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, _objectFormat.UTC);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (filter == null) ? null : new JsonFormat.Value(this, property);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new JsonFormat.Shape.ESCAPE_NON_ASCII;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (format == null) ? null : new JsonFormat.Shape.expectObjectFormat(this, pattern);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(this, entry.getShape().getDateFormatType());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (format == null) ? null : format.getShape();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new JsonFormat.Shape.Era();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new ObjectWriter(this, df);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().getTimeZone(this, JsonFormat.UTC);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this,iae);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().getShape();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new ObjectWriter(this, n);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(this, entry.getShape());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(this, pattern);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, getNextFormat.UTC);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().getTimeZone(property);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (format == null) ? null : new JsonFormat.Shape.createInstance(this, loc);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (format == null) ? null : new JsonFormat.expectObjectFormat(this, property);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new JsonFormat.Shape.getTimeZone();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(this, null) );",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (format == null) ? null : new JsonFormat.Value(this, null) ? null : format;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (format == null) ? null : new ObjectWriter(this, loc);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().getDateFormat();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new JsonFormat.Shape.UTF8();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat().format(this, _property);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (format == null) ? null : new ObjectWriter(this, _property);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new JsonFormat.Shape.UTF8;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new SimpleDateFormat(\"UTC\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new StdDateFormat().format(this, loc);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (format == null) ? null : new SimpleDateFormat(\"hh:mm:ss.getTimeZone(this, df.getShape().getProvider());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : new ObjectWriter(this, property);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (_format && df.getShape() == JsonFormat.Shape.OBJECT) ? null : df.getShape().getDateFormat();",
                "identical": false
            }
        ],
        "buggy_line": "if (property != null) { JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format != null) { // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } if ((shape == JsonFormat.Shape.STRING) || format.hasPattern() || format.hasLocale() || format.hasTimeZone()) { TimeZone tz = format.getTimeZone(); final String pattern = format.hasPattern() ? format.getPattern() : StdDateFormat.DATE_FORMAT_STR_ISO8601; final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(pattern, loc); if (tz == null) { tz = serializers.getTimeZone(); } df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } } } return this;",
        "fixed_line": "if (property == null) { return this; } JsonFormat.Value format = findFormatOverrides(serializers, property, handledType()); if (format == null) { return this; } // Simple case first: serialize as numeric timestamp? JsonFormat.Shape shape = format.getShape(); if (shape.isNumeric()) { return withFormat(Boolean.TRUE, null); } // 08-Jun-2017, tatu: With [databind#1648], this gets bit tricky.. // First: custom pattern will override things if (format.hasPattern()) { final Locale loc = format.hasLocale() ? format.getLocale() : serializers.getLocale(); SimpleDateFormat df = new SimpleDateFormat(format.getPattern(), loc); TimeZone tz = format.hasTimeZone() ? format.getTimeZone() : serializers.getTimeZone(); df.setTimeZone(tz); return withFormat(Boolean.FALSE, df); } // Otherwise, need one of these changes: final boolean hasLocale = format.hasLocale(); final boolean hasTZ = format.hasTimeZone(); final boolean asString = (shape == JsonFormat.Shape.STRING); if (!hasLocale && !hasTZ && !asString) { return this; } DateFormat df0 = serializers.getConfig().getDateFormat(); // Jackson's own `StdDateFormat` is quite easy to deal with... if (df0 instanceof StdDateFormat) { StdDateFormat std = (StdDateFormat) df0; if (format.hasLocale()) { std = std.withLocale(format.getLocale()); } if (format.hasTimeZone()) { std = std.withTimeZone(format.getTimeZone()); } return withFormat(Boolean.FALSE, std); } // 08-Jun-2017, tatu: Unfortunately there's no generally usable // mechanism for changing `DateFormat` instances (or even clone()ing) // So: require it be `SimpleDateFormat`; can't config other types if (!(df0 instanceof SimpleDateFormat)) { // serializers.reportBadDefinition(handledType(), String.format( serializers.reportMappingProblem( \"Configured `DateFormat` (%s) not a `SimpleDateFormat`; can not configure `Locale` or `TimeZone`\", df0.getClass().getName()); } SimpleDateFormat df = (SimpleDateFormat) df0; if (hasLocale) { // Ugh. No way to change `Locale`, create copy; must re-crete completely: df = new SimpleDateFormat(df.toPattern(), format.getLocale()); } else { df = (SimpleDateFormat) df.clone(); } TimeZone newTz = format.getTimeZone(); boolean changeTZ = (newTz != null) && !newTz.equals(df.getTimeZone()); if (changeTZ) { df.setTimeZone(newTz); } return withFormat(Boolean.FALSE, df);"
    },
    "Bears-222": {
        "fixes": [
            {
                "k": 1,
                "patch": "List<E> e = new ArrayList<E>();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "List<E> e = n.get(i);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "List<E> e = (vi != null) ? v.get(i) : new Object[i];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "List<E> e = (vi != null) ? e.get(i) : 1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "List<E> e = (vi != null) ? e.get(i) : new Object[i];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "List<E> e = (vi > 0) ? (vi - k < n) : new Object[i];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : new Object[i];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "List<E> e = (vi != null) ? e : 1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "List<E> e = (vi != null) ? curr.get(i - 1 : -1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "List<E> e = (vi > 0) ? (vi - k + 1) : 1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "List<E> e = (vi != null) ? v.get(i) : 1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "List<E> v = new ArrayList<E>();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "List<E> e = (vi != null) ? v.get(i - 1 : -1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "List<E> e = (vi != null) ? curr.get(x - i) : 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "List<E> e = (vi != null) ? e.get(i) : new Object[n];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "List<E> e = (vi != null) ? curr.get(x - i) : 0;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "List<E> e = (vi != null) ? curr.get(v) : new Object[i];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "List<E> e = (vi != null) ? v.get(i) : new Object[n];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "List<E> e = parent.get(i);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "List<E> e = (vi != null) ? e.get(i) : new Object[x];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : new Object[n];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : 0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "List<E> e = (vi != null) ? e.get(i) : new Object[r];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : new Object[x];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : new Object[r];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : n;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "List<E> e = (vi > 0) ? (vi : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "List<E> e = (vi > 0) ? (vi - 1 : -1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "List<E> e = (vi != null) ? e.get(i - 1 : -1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "List<E> e = (vi != null) ? curr.get(x - k + 1 : -1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "List<E> e = (vi != null) ? parent.get(i) : new Object[i];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "List<E> e = (vi != null) ? v.get(i) : new Object[x];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : new Object[] {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "List<E> e = (vi > 0) ? (vi - 1)) : 1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "List<E> e = (vi != null) ? v.get(i) : new Object[r];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "List<E> e = (vi > 0) ? (vi : new VOID];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "List<E> e = (vi != null) ? curr.get(v) : 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "List<E> e = (vi != null) ? v.get(i) : new double[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "List<E> e = (vi != null) ? curr.get(x - i : 0;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "List<E> e = (vi != null) ? curr.get(k) : 1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "List<E> e = (vi > 0) ? (vi - k + 1 : -1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "List<E> e = (vi != null) ? parent.get(i - 1 : -1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "List<E> e = (vi != null) ? return false : 1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : i;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "List<E> e = new Node<E>();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "List<E> e = (vi != null) ? curr.get(x - i);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : new Object[x - 1];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "List<E> e = (vi != null) ? e.get(x - k + 1 : -1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "List<E> e = (vi != null) ? v.get(i) : new Object[] {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "List<E> e = (vi > 0) ? (vi - k < n) : 1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "List<E> e = (vi != null) ? e.get(x - i) : 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "List<E> e = (vi != null) ? curr.get(i - 1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "List<E> e = (vi > 0) ? (vi : 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : new double[x - 1];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "List<E> e = (vi != null) ? e.get(i) : new Object[x - 1];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "List<E> e = (vi != null) ? e.get(i) : new double[x - 1];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "List<E> e = parent.get(i).getComponentCount();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "List<E> e = (vi != null) ? curr.get(i - k + 1 : -1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "List<E> e = (vi != null) ? parent.get(i) : new Object[n];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "List<E> e = (vi != null) ? curr.get(k) : new Object[i];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "List<E> e = parent.get(i).getSimpleName();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : -1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "List<E> e = (vi != null) ? curr.get(x - i : 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "List<E> e = (vi != null) ? e : new Object[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "List<E> e = (vi != null) ? e.get(i) : new double[i];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "List<E> e = (vi != null) ? curr.get(i - 1 : i);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : new double[i];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "List<E> e = (vi != null) ? e : (vi > 0) ? 1 : -1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "List<E> e = (vi != null) ? curr.get(e.value) : 1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : new Object[8];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "List<E> e = (vi > 0) ? (vi : n - k + 1) / 2;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "List<E> e = (vi != null) ? curr.get(e.value) : new Object[i];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "List<E> e = (vi != null) ? parent.get(i) : 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "List<E> e = (vi != null) ? curr.get(x - i - 1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "List<E> e = (vi != null) ? curr.get(i) : PlotOrientation.VERTICAL;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "List<E> e = (vi != null) ? v.get(i) : new double[x - 1];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "List<E> e = (vi != null) ? curr.get(i - 1 : 0;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "List<E> e = (vi != null) ? this.date[i - 1 : -1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "List<E> e = (vi != null) ? curr.get(x - i) : new Object[i];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "List<E> e = (vi != null) ? curr.get(x - i) : n;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "List<E> e = (vi > 0) ? (vi - k + 1) : new VOID;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "List<E> e = (vi < n) ? -1 : new Object[r];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "List<E> e = (vi > 0) ? (vi[i - 1 : -1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "List<E> e = (vi != null) ? e.get(i) : new Object[] {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "List<E> e = new V[n.get(x + k + 1)];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "List<E> e = new ArrayList<Object>();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "List<E> e = (vi > 0) ? (vi : new V[i];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "List<E> e = (vi != null) ? parent.get(i) : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "List<E> e = (vi < n) ? -1 : new Object[i];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "List<E> e = (vi != null) ? e : (vi > 0) ? (vi - k + 1 : -1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "List<E> e = n.get(i).getSimpleName();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "List<E> e = (vi != null) ? e.get(x - k + 1 : 0;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "List<E> e = (vi != null) ? curr.get(i + 1 : -1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "List<E> e = (vi != null) ? sub.get(i) : new Object[i];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "List<E> e = (vi != null) ? v.get(i - 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "List<E> e = (vi != null) ? e.get(i) : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "List<E> v = parent.get(i).getSimpleName();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "List<E> e = (vi != null) ? parent.get(i) : new Object[r];",
                "identical": false
            }
        ],
        "buggy_line": "List<E> viAdj = adj.get(i); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { V v = ring.get(i); E e = adj.get(i).get(r);",
        "fixed_line": "List<E> viAdj = adj.get(vi); for (int j = 1; j <= k / 2; j++) { viAdj.add(target.addEdge(vi, ring.get((i + j) % n))); } } // re-wire edges for (int r = 0; r < k / 2; r++) { for (int i = 0; i < n; i++) { if (rng.nextDouble() < p) { V v = ring.get(i); E e = adj.get(v).get(r);"
    },
    "Bears-187": {
        "fixes": [
            {
                "k": 1,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream).getParent();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false).getParent();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "final ObjectMapper mapper = new ObjectMapper( can.getIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, true);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStreamFactory.Feature.INTERIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new File(debugLocation), outputFile.getParent, true));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStreamFactory.Feature.INTERIIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.Feature.INTERIIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 10,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, true).toSw);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStreamFactory.Feature. 100%IMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new File(debugLocation), outputFile.getREACHABLE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, applyGenerator.class);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, cal.getReference());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, true).toSw;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStreamFactory.Feature.INTERIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream).getSize();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.Feature.INTERIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStreamFactory.Feature.AUTO_CLOSE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getIMIZE_QUOTES, true));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, true, true).getParent();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, true).getParent();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false).getAffectsClassDef, true);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, 2, 2, 2));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, cal.getSize());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.Feature.INTERIIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStreamFactory.Feature.INTERIIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, outputFile.getReference());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getformat(outputStream).getParent, true));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream).getAstRoot(this);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getBuffer(), outputFile.getParent, true));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, true, true).toSw;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getBuffer(), outputFile.getParent, true);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, _outputStream).getParent();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.Feature.INTERIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, Node.UNKNOWN_QUOTES);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new File(outputStream)).getParent();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, 2, true);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false).getAffectsClassDef, false);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "final ObjectMapper mapper = new ObjectMapper(this.getSize(), outputFile.getRawClass());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getBuffer().length() );",
                "identical": false
            },
            {
                "k": 43,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, \"jsdoc.separator\", true));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, \"jscompiler\", true);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, Node.newString(file.SOURCE_QUOTES));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new File(outputStream));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "final ObjectMapper mapper = new ObjectMapper( can.getIMIZE_QUOTES_QUOTES, true));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStreamFactory.Feature.AUTO_CLOSE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, SWT.NONE, true);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "final ObjectMapper mapper = new ObjectMapper( can.getIMIZE_QUOTES, true);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new File(outputStream).getParent();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStreamFactory.Feature. 100%IMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, cal.getParent().getParent());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.Feature.INTERIIMIZE_QUOTES, true);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, _outputBuffer.length));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "final ObjectMapper mapper = new ObjectMapper( can.getIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, SWT.MIN_VALUE, true);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, true, true);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getNamespaceURI(), outputFile.getParent, true));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "final ObjectMapper mapper = new ObjectMapper(gc.getDevice(), true, true);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new File(debugLocation), outputFile.getSize()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream).getformat(this.separator, true));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, cal.getParentClass().length));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getformat(outputFile.separator, true));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getHeaderSize(), outputFile.getParent, true));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "final ObjectMapper mapper = new ObjectMapper( can.getIMIZE_QUOTES);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, Node.newString(Token.NAME, true));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getIMIZE_QUOTES, false));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, \"Content-Type.ZE_QUOTES);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, null).getParent();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream).getPath();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, \"Content-Type.ZE_QUOTES, true);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, _outputStream.getParentClass().length));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, true, true).toSw);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, Node.newString(Token.NAME));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, outputFile.getParentClass().length));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, \"OTED_QUOTES_QUOTES, true, false));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getBuffer(), true, true);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, SWT.MIN_QUOTES, true);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, \"OTED_QUOTES_QUOTES\"));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, cal.getParent());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, outputFile.getBuffer().length));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, new ObjectMapper(outputFile));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, \"OTED_QUOTES_QUOTES).toSw;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, true, false).getParent();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getParent(), true);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream).getformat(this.separator, false));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, \"OTED_QUOTES_QUOTES, true);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStreamFactory.Feature.INTERIIMIZE_QUOTES, true);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "final ObjectMapper mapper = new ObjectMapper(new File(outputStream).getParent, true));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, outputFile.getParent().getParent());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, Node.newString(Token.NAME, \"\"));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, cal.getParent().length());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false, font.getSize());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getDelimiter(), true, true);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getHeaderSize(), outputFile.getRawClass());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream.getformat(outputStream).getParent();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, SWT.NONE, chart.getSize());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream).getDayOfMonth();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "final ObjectMapper mapper = new ObjectMapper(outputStream, false).getAstRoot(this);",
                "identical": false
            }
        ],
        "buggy_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory().configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true));",
        "fixed_line": "final ObjectMapper mapper = new ObjectMapper(new YAMLFactory() .configure(YAMLGenerator.Feature.MINIMIZE_QUOTES, true) .configure(YAMLGenerator.Feature.ALWAYS_QUOTE_NUMBERS_AS_STRINGS, true));"
    },
    "Bears-131": {
        "fixes": [
            {
                "k": 1,
                "patch": "temp = value.substring(position + 1);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "temp = value.substring(index + 1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "temp = this.value < 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "temp = value.substring(position + 1, text.length() - 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "temp = this.value < 0 ? Integer.valueOf(value) : Integer.parseInt;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "temp = this.value != 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "temp = position == 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int temp = position == 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.MAX_VALUE : 1);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "temp = value.substring(index + 1, 0 ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "temp = value.substring(pos + 1, 0 ? Integer.MAX_VALUE : 0;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "temp = this.value != 0 ? Integer.valueOf(value) : 0L;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "temp = value < 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.valueOf(temp) : 0;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int temp = position == 0 ? Integer.MAX_VALUE : Integer.parseInt(value);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "temp = value.substring(pos + 1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "temp = this.value != 0 ? Integer.valueOf(value) : Integer.parseInt;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "temp = value.substring(index + 1, 0 ? Integer.MAX_VALUE : 1);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "temp = this.value < 0 ? Integer.MAX_VALUE : Integer.parseInt;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "temp = this.value < 0 ? Integer.MAX_VALUE : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "temp = this.value != 0 ? Integer.valueOf(value) : 0;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "temp = value.substring(index + 1, 0 ? Integer.valueOf(temp) : 0;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "temp = value.charAt(index + 1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "temp = this.value < 0 ? Integer.valueOf(temp) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.MAX_VALUE : 0 );",
                "identical": false
            },
            {
                "k": 27,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.MAX_VALUE : 1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "temp = this.value > 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int temp = position == 0 ? Integer.valueOf(value) : Integer.parseInt;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "temp = value.substring(position + 1, Integer.MAX_VALUE - 1);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int temp = position == 0 ? Integer.MAX_VALUE : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "temp = value.substring(index + 1, text.length() - 1);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "temp = position < 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.valueOf(temp) : 1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.MAX_VALUE : Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "temp = position == 0 ? Integer.valueOf(value) : Integer.parseInt;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "temp = this.value < 0.0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "temp = this.value < 0 ? Integer.valueOf(value) : Integer.parseInt(temp + \" \";",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int temp = position == 0 ? Integer.MAX_VALUE : Integer.valueOf(value) - 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.MAX_VALUE : 1));",
                "identical": false
            },
            {
                "k": 41,
                "patch": "temp = this.value < 0 ? Integer.valueOf(value) : Integer.valueOf(temp));",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int temp = position == 0 ? Integer.MAX_VALUE : Integer.parseInt;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.valueOf(value) : 0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "temp = this.value < 0 ? Integer.valueOf(value) : Integer.substring(index + 1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "temp = value.substring(index + 1, 0 ? Integer.MAX_VALUE : 0 );",
                "identical": false
            },
            {
                "k": 46,
                "patch": "temp = this.value < 0 ? Integer.valueOf(temp) : Integer.parseInt;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "temp = this.value < 0 ? Integer.valueOf(value) : Integer.parse(temp));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "temp = value.substring(position + 1, temp.length() - 1);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "temp = value.substring(pos + 1, 0 ? Integer.MAX_VALUE : 0 );",
                "identical": false
            },
            {
                "k": 50,
                "patch": "temp = Double.valueOf(value) < 0 ? Integer.MAX_VALUE : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "temp = this.value < 0 ? Integer.valueOf(value) : Integer.pow;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "temp = this.value != 0 ? Double.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "temp = value.substring(pos + 1, 0 ? Integer.MAX_VALUE : 1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.valueOf(temp) : temp.substring(temp + 1);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int temp = position < 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "temp = this.value != Long.MAX_VALUE ? Double.valueOf(value) : 0L;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "temp = this.value < 0 ? Double.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.MAX_VALUE : -1);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "temp = value.substring(index + 1, 0 ? Integer.MAX_VALUE : 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "temp = value == 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "temp = value.substring(pos + 1, text.length() - 1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "temp = (value < 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "temp = \" < 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "temp = this.value < 0 ? Integer.MAX_VALUE : Integer.parseInt(value);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "temp = this.value != 0 ? Integer.valueOf(temp) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "temp = value.substring(position + 4);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "temp = this.value < 0 ? Integer.valueOf(value) : Integer.pow.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "temp = value.substring(start, end.length() - 1);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "temp = value.substring(index + 1, 0 ? Integer.valueOf(value) : 0;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "temp = value.substring(position + 1, true.length() - 1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int temp = position == 0 ? Integer.valueOf(value) : Integer.parseInt(temp + \" \";",
                "identical": false
            },
            {
                "k": 72,
                "patch": "temp = this.value != Long.MAX_VALUE ? Integer.valueOf(value) : 0L;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.MAX_VALUE : 0 + 1);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "temp = this.value != 0 ? Integer.valueOf(value) : 1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "temp = this.value > 0 ? Integer.valueOf(value) : 0L;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "temp = this.value < 0 ? Integer.MAX_VALUE : Integer.valueOf(temp + \" \";",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int temp = position == Long.valueOf(value) ? 0 : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "temp = column < 0 ? Integer.valueOf(value) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.MAX_VALUE : 0), 1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "temp = this.value != Long.valueOf(value) ? Double.NEGATIVE_INFINITY : 0 + 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "temp = this.value > 0 ? Integer.valueOf(value) : Integer.parseInt;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "temp = this.value < 0 ? Integer.valueOf(value) : Integer.parseInt(temp);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "temp = this.value < 0 ? Integer.valueOf(value) : Integer.substring(temp + 1);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "temp = value.substring(position + 1, 0 ? Double.NEGATIVE_INFINITY : 1);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "temp = value.length() * 4;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "temp = value.substring(pos + 1, 0 ? Integer.valueOf(value) : 0;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "temp = this.value < 0 ? Integer.MAX_VALUE : Integer.valueOf(temp) - 1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "temp = position == 0 ? Integer.valueOf(temp) : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "temp = this.value != 0 ? Double.valueOf(value) : 0L;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "temp = this.value < 0 ? Integer.MAX_VALUE : Integer.valueOf(temp + 1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "temp = value.substring(pos + 1, 0 ? Integer.MAX_VALUE : 1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "temp = value.substring(position + 1,temp.length() - 1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "temp = position == 0 ? Integer.valueOf(value) : Integer.substring(index + 1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int temp = position == 0 ? Integer.valueOf(value) : Integer.parseInt(temp);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "temp = value.substring(index + 1, Integer.MAX_VALUE - 1);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.MAX_VALUE : 0",
                "identical": false
            },
            {
                "k": 97,
                "patch": "temp = value.substring(index + 1, 0 ? Integer.valueOf(temp) : 1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "temp = value.substring(position + 1, 0 ? Integer.valueOf(value) : 1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "temp = this.value != Long.valueOf(value) ? Double.doubleValue() : 0L;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "temp = value.substring(index + 1, 0 ? Integer.MAX_VALUE : -1);",
                "identical": false
            }
        ],
        "buggy_line": "int index = Integer.valueOf(temp.substring(0, 2), 16); if (protocol >= 3) { double value = Short.valueOf(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.valueOf(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.valueOf(temp.substring(4), 16);",
        "fixed_line": "int index = Integer.parseInt(temp.substring(0, 2), 16); if (protocol >= 3) { double value = (short) Integer.parseInt(temp.substring(2), 16); position.set(Position.PREFIX_TEMP + index, value * 0.01); } else { double value = Byte.parseByte(temp.substring(2, 4), 16); value += (value < 0 ? -0.01 : 0.01) * Integer.parseInt(temp.substring(4), 16);"
    },
    "Bears-130": {
        "fixes": [
            {
                "k": 1,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString(\" .number\"));",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond().toString());",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".numberOfSuccesses(c1.getLastChild().substring(0, 46));",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".toString(\" .number\")};",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".toString(\"Unable to parse unicode value: \" + y1); // '\"+number't need to be negated.",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().toString() + \" it is not a valid number.\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString(), f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".toString(\" .util.ArrayList\"));",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getNumber().y);",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberType(), f.y);",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString(), f.y);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".toString(\"Invalid max value: \" + adt.numberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".numberOfSuccesses(c1.getArg2().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString());",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".numberOfSuccesses(c1.getCenterX(), f.getNumber().y);",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".toString(\" .number \" + adt.numberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".toString(\"Unable to parse unicode value: \" + y1); // 'number't need to be negated.",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond().toString() + \" it is not a valid number.\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".numberOfSuccesses(c1.getArgType(), f.getRawClass());",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString(\"number\"));",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".toString(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".toString(\" .util.ArrayList\";",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().toString());",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".toString(\"Invalid max value: \" + adt.toString().substring(0, 0x1F && !numberOfSuccessor().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getNumber().y);",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getDouble());",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getUpperBound());",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().substring(0, f.y));",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberOfSuccesses(c1.getLong().numberOfSecond(), f.getLastMillisecond(x2));",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".toString(\"Unable to parse unicode value: \" + adi.toString().substring(1));",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".toString(\"Unable to parse unicode value: \" + adi.toString().substring(4));",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".toString(\"Unable to parse unicode value: \" + adi.numberOfSuccessor().substring(1));",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".toString(\" .number \" + state.getNumberType().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getDouble().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".numberOfSuccesses(c1.getLastChild().getString())));",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().number\"));",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".toString(\"Invalid max value: \" + adt.numberOfSuccessor().substring(1));",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".toString(\"Invalid max value: \" + adt.numberOfSuccessor().toString());",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSecond(), f.y);",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".toString(\"Unable to parse unicode value: \" + adt.toString().substring(0, 46));",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".numberOfSuccesses(c1.getLong().numberOfSuccessor().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLong().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".createTransformedShape(numberOfSuccesses());",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".toString(\"Unable to parse unicode value: \" + adt.toString().substring(4));",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".numberOfSuccesses(c1.getLong().numberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".toString(\"Unable to parse unicode value: \" + adi.numberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".toString(\"Invalid max value: \" + adt.toString().substring(0, 0x1F && !numberOfSuccessor().equals(\"\"));",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".toString(\"Invalid max value: \" + adt.numberOfSuccessor().toString()));",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".toString(\"Invalid max value: \" + adt.toString().substring(0, 0x1F && (numberOfSuccessor().y)));",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".numberOfSuccesses(c1.getCenterX(), f.getNumberType());",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getRawClass());",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".toString(\"Unable to parse unicode value: \" + y1); // '\"+number't need to be removed",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".numberOfSuccesses(c1.getLastChild().numbernumberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".toString(\"Unable to parse unicode value: \" + adi.numberOfSecond().toString()); //number (numberNegative 0x1s\")",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".numberOfSuccesses(c1.getLong().numberType(), f.getRawClass());",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".toString(\" .util.ArrayListArrayList\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".toString(\"Unable to parse unicode value: \" + adi.toString().substring(0, 46));",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".toString(\"Invalid max value: \" + adt.numberOfSuccessor().substring(0, hi.y));",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".createTransformedShape(numberOfSuccesses()).serializeWithType(c1); //create multiplier value",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberOfSuccesses(c1.getLastMillisecond(), f.getRawClass());",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSecond(), f.getLastMillisecond(x2));",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastChild().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().substring(0, f.y)));",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".numberOfSuccesses(c1.getLong().numberOfSecond(), f.getLastChild());",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".toString(\"Unable to parse unicode value: \" + adt.numberOfSuccesses());",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".toString(\"Invalid max value: \" + adt.numberOfSuccessor().toString().substring(0, 46));",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getLastChild().y);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".numberOfSuccesses(c1.getArg2().y()); //create multiplier value",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".toString(\" .number \" + adt.toString().substring(0, 46));",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".toString(\"Invalid max value: \" + adt.toString().substring(0, 46));",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".createTransformedShape(numberOfSuccesses()).serializeWithType(cProxy));",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberType(), f.getRawClass());",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".toString(\"Unable to parse unicode value: \" + adt.toString().substring(1));",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".numberFormatter.format(c1.getnumberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".toString(\" .util.ArrayListArrayList\";",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".toString(\"Invalid max value: \" + adt.toString().substring(0, 0x1F && !numberOfSuccessor().startsWith(\"0\"));",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".toString(\"Unable to parse unicode value: \" + y1); // '\"+number't need to get stuck",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".numberOfSuccesses(c1.getArgName(), f.getNumber().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".toString(\" .util.\")};",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".toString(\"Invalid max value: \" + adt.toString().substring(0, 0x1F && !numberOfSuccessor().equals(\"0\"));",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".createTransformedShape(numberOfFREQUENCY).numberOfSuccesses()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".toString(\"Unable to parse unicode value: \" + y1); // '\"+number't need to be safe",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".toString(\" .number\"));",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".toString(\"Unable to parse unicode value: \" + ad); //create multiplier value",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".toString(\"Unable to parse unicode value: \" + adt.numberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".toString(\" .number \" + x.numberOfSuccessor().substring(0, 46));",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".createTransformedShape(numberOfFREQUENCY).numberOfSuccessor());",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberType(), f.y); //create multiplier value",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".toString(\"Invalid max value: \" + adt.toString().substring(0, 0x1F && !numberOfSuccessor().equals(\"number\"));",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".createTransformedShape(numberOfFREQUENCY).numberOfSuccesses());",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".toString(\" .util.ArrayListArrayList\"));",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".numberOfSuccesses(c1.getLong().numberType(), f.y);",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".numberOfSuccesses(c1); // actual",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".toString(\"Invalid max value: \" + adt.toString().substring(0, 0x1F && !number.0f.canAssignTo(\"\"));",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".numberOfSuccesses(c1.getLastnumberOfSuccessor().numberOfSecond(), f.getLastChild());",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".toString(\"Unable to parse: \" + adi.toString().substring(4));",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".numberOfSuccesses(c1.getLastMillisecondOfMinute().substring(0, 46));",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".toString(\"Unable to parse unicode value: \" + adt.toString().substring(1)); //create multiplier value",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".toString(\"Unable to parse unicode value: \" + adt.numberOfSuccessor().substring(1));",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+),\") // power",
        "fixed_line": ".number(\"(x+)?,\") // power"
    },
    "Bears-107": {
        "fixes": [
            {
                "k": 1,
                "patch": "case \"#CID\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case \"#CIDGE = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "case \"#CIDM\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case \"#CIDMessage# = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "case \"#CIDTO\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "case \"#CID construct = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "case \"#CID cond = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "case \"#CIDDAY = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "case \"#CID\": = Integer.parseInt(text[i]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "case \"#CIDID\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "case \"#CID lic = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "case \"#CID\": = Integer.parseInt(st[i]);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "case \"#CIDT\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "case \"#CID2 = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case \"#CIDand = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "case \"#CIDCa\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case \"#CID callee = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case \"#CIDom = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "case \"#CID raw = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "case \"#CID handle = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "case \"#CIDMatch = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "case \"#CIDCDATA = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "case \"#CIDNT = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "case \"#CID07 = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "case \"#CID unit = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "case \"#CID area = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "case \"#CIDtarget = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case \"#CIDInformation# = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "case \"#CIDbase = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "case \"#CID\": = Integer.parseInt(wanted[i]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "case \"#CID p = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "case \"#CID 0.0 = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "case \"#CIDextra = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case \"#CID setter = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "case \"#CID\": = Integer.parseInt(zone[i]);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "case \"#CID ?> = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "case \"#CIDbar = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "case \"#CID\": = Integer.parseInt(data[i]]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "case \"#CID# = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case \"#CIDMEDI\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "case \"#CIDIS = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "case \"#CIDStrength# = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "case \"#CIDaset = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case \"#CIDConcrete = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "case \"#CIDImage = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "case \"#CIDMP = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "case \"#CID NumberFormat\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "case \"#CIDValid = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "case \"#CID\": = Integer.parseInt(str[i]);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "case \"#CIDdeclaration = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "case \"#CID MONTH = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case \"#CID best = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case \"#CID mark = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case \"#CID serializers = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "case \"#CIDRequest = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "case \"#CIDCo\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case \"#CIDREACH\": = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case \"#CID\": = Integer.parseInt(parsingContext[i]);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "case \"#CIDObj = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "case \"#CIDdoc = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case \"#CIDblocks = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case \"#CID bit = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "case \"#CIDi = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "case \"#CIDno = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "case \"#CID\": = Integer.parseInt( defaultC[i]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case \"#CID.6 = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "case \"#CID\": = Integer.parseInt(line[i]);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "case \"#CID 360 = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "case \"#CID Math = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case \"#CIDits = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "case \"#CID[] = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "case \"#CID2\" = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "case \"#CID = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "case \"#CIDThe = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case \"#CID Instant = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "case \"#CID\": = Integer.parseInt(value[i]);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case \"#CIDAY = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "case \"#CID 35 = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "case \"#CIDcycle = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "case \"#CID accepted = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case \"#CIDports = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "case \"#CIDdepends = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "case \"#CIDDATE = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "case \"#CID curs = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "case \"#CID got = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case \"#CIDVerification = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "case \"#CIDside = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "case \"#CID parse = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case \"#CID 12 = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "case \"#CIDclosure = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "case \"#CIDVER = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case \"#CIDron = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case \"#CID\": = Integer.parseInt(yy[i]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "case \"#CID\": = Integer.parseInt(stringBuffer[i]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "case \"#CIDprimary = Integer.parseInt(data[i]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "case \"#CID\": = Integer.parseInt(XC[i]);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "case \"#CID\": = Integer.parseInt(keys[i]);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "case \"#CIDGE = Integer.parseInt(stringBuffer[i]);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "case \"#CID\": = Integer.parseInt(stringWidth[i]);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case \"#CIDGE = Integer.parseInt(data[i]]);",
                "identical": false
            }
        ],
        "buggy_line": "lac = Integer.parseInt(data[i]); break; case \"#CID#\": cid = Integer.parseInt(data[i]);",
        "fixed_line": "if (!data[i].isEmpty()) { lac = Integer.parseInt(data[i]); } break; case \"#CID#\": if (!data[i].isEmpty()) { cid = Integer.parseInt(data[i]); }"
    },
    "Bears-95": {
        "fixes": [
            {
                "k": 1,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return entity.getType() != null && entity.getPackage().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return entity.getType() != null && entity.getClassLoader().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.long\")) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Source\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return entity.getType() == Token.GETPROP && !entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.ObjectId\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang. signature\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return entity.getType() != null && entity.getClassLoader().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return entity.getClassLoader() != null && entity.getDeclaringClass().getName().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return entity.getType() != null && !entity.getPackage().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return entity.getType() != null && entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang.long\")) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return entity.getType() == Token.GETPROP && !entity.getPackage().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.Source\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return entity.getType().getSimpleName() != null && entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang.Source\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.Hash\";",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang. of \");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.Hash\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.Object\")) ? entity.class : false;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.Object\")) ? entity : false;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return entity.getType() != null && entity.getDeclaringClass().getName().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return entity.getType().getEntityCollection() != null && entity.getName().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return entity.getType().getClassLoader() != null && entity.getSimpleName().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang. Instrument\")) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .io.Source\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return entity.getClassLoader() != null && entity.getName().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return entity.getClassLoader() != null && !entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang. signature\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return entity.getType() != null && entity.getPackage().startsWith(\" .lang.Object\")) ? entity : false;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return entity.getType() == Token.GETPROP && !entity.getPackage().startsWith(\" .lang.long\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang.Hash\";",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return entity.getType().getClassLoader() != null && entity.getName().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return entity.getType() != null && !entity.getClassLoader().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return entity.getType().getEntityCollection() != null && entity.getSimpleName().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Concrete\")) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang. 512;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Serif\")) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return entity.getClassLoader().getName() != null && entity.getSimpleName().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.idx\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.(\"[\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return entity.getType() != null && entity.getClassLoader().startsWith(\" .lang.Object\")) ? entity.class : false;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang. FALSE\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.long\")) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.e.class.getName()+\") != null;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .io.Package\")) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return entity.getType() != null && entity.getPackage().startsWith(\" .lang.Object\")) ? entity.class : false;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang. 18\")) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return entity.getClassLoader() != null && !entity.getPackage().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Hash\";",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Width\")) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return entity.getType() == Token.GETPROP && !entity.getPackage().startsWith(\" .lang.Source\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.String\")) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return entity.getType().getSimpleName() != null && entity.getSimpleName().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Hash\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return entity.getClassLoader() != null && entity.getSimpleName().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang. Instrument\")) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return entity.getType() != null && entity.getClassLoader().startsWith(\" .lang.Object\")) ? entity : false;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return entity.getType() == Token.GETPROP && !entity.getPackage().startsWith(\" .lang.getSource().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return entity.getType() != null && !entity.getClassLoader().equals(\"Package\")) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.Throwable\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.!=null\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Convertable\")) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return entity.getClassLoader() != null && entity.getClassLoader().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang.Object\")) ? entity : false;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return entity.getClassLoader() != null && entity.getType().isPackage();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return entity.getType().getSimpleName() != null && entity.getPackage().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.class.getName()+\") || entity.isAssignableFrom(value.class);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang. none\")) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang.getSource().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang. li\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang. Transformer\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return entity.getClassLoader() != null && entity.getType().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang.ObjectId\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.Hash\")) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Declaration\")) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.e.class.getName()+\") || entity.isAssignableFrom(value.class);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang.Hash\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang.Throwable\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return entity.getType().getEntityCollection() != null && entity.getName().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return entity.getType() != null && !entity.getPackage().startsWith(\" .lang. FALSE\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return entity.getType().getClassLoader() != null && entity.getPackage().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Pot\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang. signature\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.class.getName()+\") || entity.isRequired;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.(1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Mockito.\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.Supported\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.ValueType\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang.e.class.getName()+\") != null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return entity.getType() == Token.NAME && !entity.getPackage().startsWith(\" .lang.startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return entity.getClassLoader() != null && entity.getPackage().startsWith(\" .lang. Instrument\")) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return entity.getType().getEntityCollection() != null && entity.getPackage().startsWith(\" .lang.Object\")) {",
                "identical": false
            }
        ],
        "buggy_line": "return entity.getType().getClassLoader() != null && !entity.getType().getPackage().getName().startsWith(\"java\");",
        "fixed_line": "Class<?> type = entity.getType(); return type.getClassLoader() != null && (type.getPackage() == null || !type.getPackage().getName().startsWith(\"java\"));"
    },
    "Bears-132": {
        "fixes": [
            {
                "k": 1,
                "patch": ".toString(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".toString(\"dd MMMM\").join();",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".toString(\"dd MMMM\").first().substring(0, 2));",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".toString(\"dd MMMM\").\").join();",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".toString(\"dd MMMM\").first();",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".multiply(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".toString(\"dd MMMM\").first().\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".toString(\"dd MMMMoment. String\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".toString(\"dd MMMMIC13: \" + adt.toString().substring(1));",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".toString(\"dd MMMM\").print(N.numberOfHalfdays\"));",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".toString(\"dd MMMM\").\").first();",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".toString(\"dd MMMMIC13: \" + adt.toString().substring(0, 2));",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".toString(\"dd MMMMIC13: \" + adi.numberOfHalfday());",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".toString(\"dd Mmm: \" + currFile.toString().substring(1));",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".toString(\"dd MMMM\").print(N.numberOfHalfday()));",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".toString(\"dd MMMMIDDLE:mm:ss.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".toString(\"dd MMMMoment\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".toString(\"dd MMMMOTYPE: \" + adt.toString().substring(0, 2));",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.toString().substring(0, 2));",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".toString(\"dd MMMM\").first().escape);",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".toString(\"dd MMMM\").first().substring(1));",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".toString(\"dd MMMM\").getBytes(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".toString(\"dd MMMM\").\").first().substring(0, 2));",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".toString(\"dd MMMMOTYPE: \" + adt.toString().substring(1));",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".toString(\"dd MMMM 3, \" + file.toString().substring(1));",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".toString(\"dd MMMMIC13: \" + adi.toString().substring(1));",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.toString(dd.toString()));",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".toString(\"dd MMMMIC13: \" + adi.numberOfSuccessor().toString());",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".toString(\"dd MMMMoment.Integer.toString(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.toString().number\"));",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".toString(\"dd MMMM\").substring(0, 2));",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".toString(\"dd MMMMoment+\")\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".toString(\"dd MMMMIC13: \" + adi.toString().substring(0, 2));",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".toString(\"dd MMMM\").print(Integer.valueOf(dd.denominator/d\"));",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".toString(\"dd MMMMICnumerator: \" + adt.toString().substring(1));",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".toString(\"dd MMMMICLOCKWISE_numerator:mm:ss.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".toString(\"dd MMMM\"));",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".toString(\"dd MMMMoment.Integer(date.toString(\"dd MMMM\"));",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".toString(\"dd MMMMIC13: \" + adi.numberOfSecond().toString());",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.toString(): \" + ad);",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".toString(\"dd MMMMIC13: \" + adt.numberOfHalfday());",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".toString(\"dd MMMMIC13: \" + adt.numberOfSuccess().toString());",
                "identical": false
            },
            {
                "k": 45,
                "patch": ". throw new IllegalArgumentException(\"The date must be at least 2\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".toString(\"dd MMMMAGIC: \" + adt.toString().substring(0, 2));",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".toString(\"dd MMMM\").print(N.numberOfHalfday(), unit.y);",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString()));",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(\"dd MMMMoment\"));",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".toString(\"dd MMMMICLOCKWISE_numerator:mm:ss.toString(\"dd MMMMICZ\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(\"dd MMMM\"));",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".toString(\"dd MMM yyyy\").",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".toString(\"dd MMMMIC13: \" + adi.numberOfHalfday().toString());",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".toString(\"dd MMMMIC13: \" + adt.toString());",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".toString(\"dd Mmm: \" + file.toString().substring(1));",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString());",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".toString(\"dd MMMM0(dd:mm: \" + unit.toString().substring(1));",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.toString()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.toString(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".toString(\"dd MMMMICLOCKWISE_numerator:mm:ss.toString(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(dd.toString()));",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".toString(\"dd MMMM\").print(Integer.valueOf(dd.denominator/d)));",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".toString(\"dd MMMM\").first().substring(0, Math.min(2, 3);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".toString(\"dd MMMMoment.Integer.toString(\"dd MMMM\").join();",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".toString(\"dd MMMMoment.Integer.toString(\"dd MMMM\").\").join();",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".toString(\"dd Millisecond number:mm:ss.toString(dd.toString(\"dd MMMM\"));",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".toString(\"dd MMMMAGIC:mm:ss.toString(dd.toString()));",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".toString(\"dd MMMMICnumerator:mm:ss.toString(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".toString(\"dd MMMMIDDLE:mm:ss.toString(\"dd MMMM\").first().substring(0, 2));",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".toString(\"dd MMMMoment. String.valueOf(dd.bitIndex).toString();",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".toString(\"dd MMMM\").first().dd(\"dd MMMMoment.\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".toString(\"dd MMMM\").first().substring(0, 46));",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".toString(\"dd MMMM\").print(N.denominator/d\"));",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".toString(\"dd MMMMoment: \" + adt.toString().substring(0, 2));",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".toString(\"dd MMMMoment.Integer.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".toString(\"dd MMMMoment: \" + adt.toString().substring(1));",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".toString(\"dd MMMMICnumerator:mm: \" + ad);",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(\"dd MMMM\").first().substring(0, 2));",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".toString(\"dd MMMM\").",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".toString(\"dd MMMM\").first());",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(): \" + ad));",
                "identical": false
            },
            {
                "k": 86,
                "patch": ". .toString(\"dd MMMM\").first().substring(0, 2));",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".toString(\"dd MMMM0(dd:mm: \" + adt.toString());",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".toString(\"dd MMMMICnumerator:mm: \" + unit.number);",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".toString(\"dd MMMMICnumerator: \" + adt.toString().substring(0, 2));",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".toString(\"dd MMMMAGIC:mm:ss.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".toString(\"dd MMMM0(dd:mm:ss.toString(): \" + adt need);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".toString(\"dd MMMMICnumerator:mm: \" + curr);",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".toString(\"dd MMMMoment.Integer.toString(\"dd MMMM\"));",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".toString(\"dd MMMM0(dd:mm: \" + unit.toString().substring(\"dd MMMM\"));",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".toString(\"dd MMMM\").print(dd.numberOfHalfday(), unit.y);",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".toString(\"dd MMMM\").first().getTime();",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".toString(\"dd MMMM d, unit:mm:ss.number);",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".toString(\"dd MMMM\").print(dd.toString());",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".toString(\"dd MMMMoment.Number\").first();",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".toString(\"dd MMMMIC13: \" + adi.numberOfSuccess().toString());",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(x+)?,\") // adc 2",
        "fixed_line": ".number(\"(x+)?,\").optional() // adc 2"
    },
    "Bears-199": {
        "fixes": [
            {
                "k": 1,
                "patch": "private final synchronizedArInput addArInput() {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "private final synchronizedArInput addArInput(sm, processInputLookahead) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "private final synchronizedArInput addArInput(processInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "private final synchronizedArInput addArInput(inExternsInput) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "private final synchronizedArInput addArInput(inLoop, processInputLookahead) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "private final synchronizedArInput addArInput(processInput) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "private final synchronizedArInput addArInput(anksInput) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "private final synchronizedArInput addArInput( pairs.getInput());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "private final synchronizedArInput addArInput(vi.getInput());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "private final synchronizedArInput addArInput(fs.getInput());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT,AntiInputLookahead) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT,AntiInputLookahead) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "private final synchronizedArInput addArInput( pairs, processInputLookahead) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "private final synchronizedArInput addArInput(ESTIMATED_IDENTIFIER) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "private final synchronizedArInput addArInput(ctor, processInputLookahead) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "private final synchronizedArInput addArInput(checkInputRowInput) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "private final synchronizedArInput addArInput(Trace, JFreeInputLookahead) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "private final synchronizedArInput addArInput(CLInput) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "private final synchronizedArInput addArInput(finished, processInputLookahead) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, this.urlInputLookahead) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "private final synchronizedArInput addArInput(ast, processInputLookahead) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "private final synchronizedArInput addArInput(vi).processInput();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EMPTY);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT,AntiInputLookahead);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "private final synchronizedArInput addArInput(inclInputRowInput) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "private final synchronizedArInput addArInput(serializersInputRowInput) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "private final synchronizedArInput addArInput(vi).process(null, root);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "private final synchronizedArInput addArInput(in,RecordsInput) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "private final synchronizedArInput addArInput( randInput) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "private final synchronizedArInput addArInput(inLoop, JFreeInputLookahead) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "private final synchronizedArInput addArInput(coefficientInput)) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EMPTY);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "private final synchronizedArInput addArInput());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "private final synchronized Element addArInput() {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, this.iInputLookahead) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "private final synchronizedArInput addArInput(processInput instanceofRecordsInput());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "private final synchronizedArInput addArInput( IterableInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "private final synchronizedArInput addInput(inLoop, processInputLookahead) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT,aliasInputLookahead) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "private final synchronizedArInput addArInput( IterableInput) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, collapseInputLookahead) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "private final synchronizedArInput addArInput(inLoop, deepInput) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "private final synchronizedArInput addArInput(globalInput) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "private final synchronizedArInput addArInput(inLoop, shell.iInputLookahead);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT,estInputLookahead) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT,urlInputLookahead) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "private final synchronizedArInput addArInput(fs.getTokenLocation());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.BLOCK);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "private final synchronizedArInput addArInput( largestInput) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "private final synchronizedArInput addArInput(inLoop, quarterInput) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "private final synchronizedArInput addArInputProcess(chainInputRowInput) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.BLOCK);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "private final synchronizedArInput addArInput(in.iInputRowInput());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, CustomInputLookahead) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "private final synchronizedArInput addArInput(sm, processInput) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "private final synchronizedArInput addArInput(strsInput) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.VAR, TYPE_LINE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT,aliasInputLookahead) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "private final synchronizedArInput addArInput(inLoop, applicableInput) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "private final synchronizedArInput addArInput(inLoop, dmInputLookahead) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "private final synchronizedArInput addArInput(287Input) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "private final synchronizedArInput addArInput( File.getInput());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "private final synchronizedArInput addArInput(def.getInput());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "private final synchronizedArInput addArInput(inLoop, notifyInputLookahead) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "private final synchronizedArInput addArInput();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "private final synchronizedArInput addArInput(inLoop, processInputLookahead);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "private final synchronizedArInput addArInput(inLoop, JFreeInputLookahead);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT,urlInputLookahead) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT, this.iInputLookahead);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.VAR);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT,AntiInput) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, this.urlInputLookahead);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "private final synchronizedArInput addArInput(inLoop, shell.iInputLookahead) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "private final synchronizedArInput record recordProcess = new Preconditions Preconditions.checkArgument(!\"\".length);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT, this.urlInputLookahead) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, this.iInputLookahead);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "private final synchronizedArInput addArInput(inLoop, chart.getInput());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "private final synchronizedArInput addArInput(anksInput instanceofRecordsInput) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, refInputLookahead) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "private final synchronizedArInput addArInput( editInput) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT,AntiInputLookahead);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "private final synchronizedArInput addArInputProcess = new ObjInput(checkInputRowInput) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "private final synchronizedArInput addArInput(inLoop, chart.iInputLookahead) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, diamInputLookahead) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, astInputLookahead) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "private final synchronizedArInput addArInput(anksInput);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, ListIteratorInputLookahead) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, generatorInputLookahead) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, callerInputLookahead) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.CONTINUE, this.urlInputLookahead) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "private final synchronizedArInput addArInput(ctor, process,RecordsInput) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT, this.urlInputLookahead);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.BLOCK, this.timeZoneInputLookahead) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT,AntiInput) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, this.urlInputRowInputLookahead) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "private final synchronizedArInput addArInput(coefficientInput) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "private final synchronizedArInput addArInputProcess = new Node(Token.EXPR_RESULT, collapseInputLookahead) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "private final synchronizedArInput record recordProcess = new Node(Token.EXPR_RESULT, this.yInputLookahead) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "private final synchronizedArInput addArInput(defInputRowInput) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "private final synchronizedArInput addArInput(inLoop, sideInput) {",
                "identical": false
            }
        ],
        "buggy_line": "private synchronized void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {",
        "fixed_line": "private void addArrivedRecordsInput(ProcessRecordsInput processRecordsInput) throws InterruptedException {"
    },
    "Bears-4": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new InnerClassProperty(this, deser);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new InnerClassProperty(prop, _beanType.getRawClass());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new InnerClassProperty(prop, deser);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new InnerClassProperty(prop, _beanType.getRawClass(), deser);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new InnerClassProperty(prop.getName(), deser);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new InnerClassProperty(prop, _beanType.getRawClass())) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new InnerClassProperty(prop, _beanType.getRawClass()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new InnerClassProperty(deser.properties.values(), deser);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new InnerClassProperty(new InnerClass<JsonDeserializer<?>,JsonDeserializer<?>>(deser), deser);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new InnerClassProperty(prop, _beanType);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new InnerClassProperty(new InnerClass<JsonDeserializer<?>,JsonDeserializer<?>>() {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new InnerClassProperty(prop, _buildMethod) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new InnerClassProperty(prop, _annotated.getAnnotation(JsonValue.class) != null;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new InnerClassProperty(this, deser) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new InnerClassProperty(new InnerClass<JsonDeserializer<?>>() {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new InnerClassProperty(prop, deser) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new InnerClassProperty(prop, _config.constructType(deser));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new InnerClassProperty(prop, _annotated.getAnnotation(JsonValueProperty.class) != null;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.None.class) ? null : new InnerClassProperty(this, deser);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new InnerClassProperty(deser.properties.class, deserClass);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new InnerClassProperty(prop, _annotated.getAnnotation(JacksonAnnotation.class) != null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.Property.class) ? null : new InnerClassProperty(this, deser);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new InnerClassProperty(prop, _config.getAnnotationIntrospector());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new InnerClassProperty(prop, _beanType.getRawClass()) : new InnerClass<JsonDeserializer<?>>();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new InnerClassProperty(prop, _anySetter.valueDeserializer(deser));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new InnerClassProperty(impl instanceof InnerDeserializer<?>) && !isVisibleFor(deser)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new InnerClassProperty(deser.getClass().getName(), deser);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new InnerClassProperty(prop, _annotated.getAnnotation(JacksonStdImpl.class) != null;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new InnerClassProperty(implimplClass<JsonDeserializer<?>,Property>(this, deser);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new InnerClassProperty(new InnerClass<JsonDeserializer<?>,JsonDeserializer<?>>();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new InnerClassProperty(prop, _config);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new InnerClassProperty(prop, _config, deser);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new InnerClassProperty(new InnerClass<JsonDeserializer<?>,this, deser);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.Property.None.class) ? null : new InnerClassProperty(this, deser);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.Property.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new InnerClassProperty(deser.properties.class, deser);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new InnerClassProperty(implimplClass<JsonDeserializer<?>, final InnerDeserializer<JsonDeserializer<?>>() {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.Property.None.class) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new InnerClassProperty(impl instanceof InnerDeserializer<?>) ? with : new InnerClassAnnotations(this, deser);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new InnerClassProperty(implimplClass).isDeserializer(deser)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new InnerClassProperty(prop, _buildMethod) { return new InnerClass<JsonDeserializer<?>>();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new InnerClassProperty(impl instanceof InnerDeserializer<?>) ? with : new InnerClass<JsonDeserializer<?>>();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return new InnerClassProperty(prop, _beanType, deser);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new InnerClassProperty(prop, _config.getAnnotation(JsonDeserializer.class) != null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new InnerClassProperty(impl instanceof InnerDeserializer<?>) ? with : new InnerClassProperty(this, deser);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new InnerClassProperty(deser == null) ? null : new InnerClassProperty(this, deser);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new InnerClassProperty(prop, withValueDeserializer(deser));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new InnerClassProperty(prop, _buildMethod) { return new InnerClass<JsonDeserializer<?>>() {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new InnerClassProperty(prop, _config.getAnnotationIntrospector().findDeserializer(deser)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new InnerClassProperty(deser.getAnnotationIntrospector().findDeserializer(implClass));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return new InnerClassProperty(implimplClassProperty.properties.values(), deser);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new InnerClassProperty(implimplClass).isAnnotationProcessingProperty(deser)) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new InnerClassProperty(prop, _annotated.getAnnotation(JsonValueDeserializer.class) != null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return new InnerClassProperty(implimplClass).isAnnotation(ref.getRawClass())) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new InnerClassProperty(prop, _config.constructSpecializedType(deser));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new InnerClassProperty(deser.getAnnotationIntrospector().findValueDeserializer(deser)) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.None.class) ? null : new InnerClass<JsonDeserializer<?>>();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new InnerClassProperty(implimplClass).isDeserializer(this, deser);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new InnerClassProperty(new InnerClass<JsonDeserializer<?>,JsonDeserializer<?>>>(deser), deser);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new InnerClassProperty(prop, _beanType.getRawClass()));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new InnerClassProperty(prop, _annotated.getAnnotation(JacksonAnnotation.class) != deser;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new InnerClassProperty(prop, _buildMethod) { return new InnerClassAnnotations(deser == deser; }",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.Property.None.class) ? null : new InnerClass<JsonDeserializer<?>>();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new InnerClassProperty(new InnerClass<JsonDeserializer<?>, final InnerDeserializer<JsonDeserializer<?>>() {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return new InnerClassProperty(deser.class, deser);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new InnerClassProperty(prop, _buildMethod) { return new InnerClassProperty(deser == deser; }",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.Property.None.class) ? null : new InnerClassAnnotations(this, deser);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new InnerClassProperty(prop, _beanType.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.None.class) ? null : new InnerClassProperty(new InnerClass<JsonDeserializer<?>, deser);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.None.class) ? null : new InnerClassAnnotations(this, deser);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new InnerClassProperty(prop, _config.getAnnotationIntrospector().findValueDeserializer(deser)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return new InnerClassProperty(new InnerClass<JsonDeserializer<?>,JsonDeserializer<?><?>>() {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new InnerClassProperty(deser == null) ? null : new InnerClassProperty(prop, deser);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new InnerClassProperty(prop, _config.getAnnotationIntrospector().findDeserializer(valueType));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.None.class) ? null : new InnerClassProperty(new InnerClass<JsonDeserializer<?>, deser));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.Property.class) ? null : new InnerClassAnnotations(this, deser);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new InnerClassProperty(prop, _config.getAnnotationIntrospector().findDeserializer(JsonValueMethod.getClass()) : new InnerClass<JsonDeserializer<?>>();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new InnerClassProperty(new InnerClassAnnotations(deser), deser);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new InnerClassPropertyBuilderDeserializer(this, deser);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.None.class) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return new InnerClassProperty(new InnerClassProperty(deser), deser);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.Property.class) ? null : new InnerClass<JsonDeserializer<?>>();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new InnerClassProperty(new InnerClass<JsonDeserializer<?>,JsonDeserializer<?>>(), deser);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new InnerClassProperty(implimplClass).isAnnotationProcessingProperty();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new InnerClassProperty(prop, _config.constructSpecializedType(deser), deser);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new InnerClassProperty(prop, _beanType.getRawClass().getName()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new InnerClassProperty(deser.getAnnotationIntrospector().findDeserializer(JsonValueProperty)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return new InnerClassProperty(prop, _annotated.getAnnotation(JsonDeserializer.class) != deser;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return new InnerClassProperty(prop, _buildMethod) { return new InnerClass<JsonDeserializer<?>>(deser == deser) ? \"\" : new InnerClass<JsonDeserializer<?>>();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new InnerClassProperty(prop, _annotated.getAnnotation(JsonDeserializer.class) != null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.Property.class) ? null : new InnerClassProperty(new InnerClass<JsonDeserializer<?>, deser));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return new InnerClassProperty(prop, _buildMethod) { return new InnerClassProperty(deser == deser) ? \"\" : new InnerClass<JsonDeserializer<?>>();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new InnerClassProperty(prop, _buildMethod) { return new InnerClass<JsonDeserializer<?>>(deser); }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new InnerClassProperty(implimplClass).isAnnotationProcessingProperty(refrefrefrefrefrefrefrefrefrefInfo.getRawClass())) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.Property.class) ? null : new InnerClassProperty(new InnerClass<JsonDeserializer<?>, deser);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return new InnerClassProperty(prop, _annotated.getAnnotation(JacksonAnnotationIntrospector().findDeserializer(deser)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new InnerClassProperty(implimplClass<JsonDeserializer<?>,this, deser);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new InnerClassProperty(prop, _config.getAnnotationIntrospector().findValueDeserializer(valueType));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new InnerClassProperty(prop, _buildMethod) { return new InnerClassProperty(deser)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new InnerClassProperty(implimplClass == JsonDeserializer.None.class) ? null : new InnerClassProperty(new InnerClass<JsonDeserializer<?>>() {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public void assignIndex(int index) { _delegate.assignIndex(index); } @Override public int getPropertyIndex() { return _delegate.getPropertyIndex(); } @Override public int getCreatorIndex() { return _delegate.getCreatorIndex(); }"
    },
    "Bears-160": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (tokens != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return (String) tokens.get(columnName);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return (tokens == null) ? null : tokens.substring(0, ts.getLineno();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (column == JsonToken.VALUE_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (column == JsonToken.FIELD_NAME) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (column == JsonToken.VALUE_STRING) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return (tokens == null) ? null : tokens.substring(0, 2));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return (column == JsonToken.VALUE_STRING) ? null : tokens.substring(0, ts.getLineno();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(0, ts.getColumn;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (tokens.canRead() == JsonToken.VALUE_EMBEDDED_OBJECT) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(0, ts.getLineno();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (tokens.canRead() == JsonToken.VALUE_STRING) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(0, 2));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (first.getType() == Token.EMPTY) ? null : tokens.substring(0, ts.getLineno();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (propName == null) ? null : tokens.substring(0, ts.getLineno();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (tokens == null) ? null : tokens.substring(column.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (column == JsonToken.VALUE_NUMBER_INT) ? null : tokens.substring(0, ts.getColumn;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (String) tokens.get(column) + 1);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (tokens == null) ? null : tokens.copyCurrentStructure(ts.substring(0, ts.getLineno(), ts.getCharno());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (tokens == null) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return (String) tokens.get(column);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (tokens == null) ? null : tokens.get((String) tokens);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (tokens == null) ? null : tokens.toString();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (column == JsonToken.VALUE_STRING) ? null : tokens.substring(0, 2));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (column == JsonToken.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (tokens == null) ? null : tokens.substring(column.toString() - 1);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (tokens == null) ? null : tokens.getString();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (tokens == null) ? null : tokens.substring(0, tokens.size() - 1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (column == JsonToken.VALUE_NUMBER_INT) ? null : tokens.substring(0, 2));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (tokens.canRead() == JsonToken.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (column == JsonToken.VALUE_STRING) ? null : tokens.substring(0, ts.getColumn;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? table : JsonToken.LC;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (tokens == null) ? null : tokens.getNext();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (column == JsonToken.VALUE_NUMBER_INT) ? null : tokens.substring(0, ts.getLineno();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (tokens == null) ? null : tokens.substring(0, tokens.size() - 1);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (tokens == null) ? null : tokens.substring(0, ts.getColumnClass();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? getText() : JsonToken.START_ARRAY;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (tokens == null) ? null : tokens.substring(column.length() - 1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(0, 1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? getText() : JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (tokens == null) ? null : tokens.substring(0, trimStart;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (String) tokens.get(columnName) + 1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(0, ts.getCharno;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.remove(column);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (tokens.canRead() == JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (propName != null) ? table[tokens.toString() : JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (firstElement) tokens.get(columnName);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (tokens == null) ? null : tokens.copyCurrentStructure(ts.substring(0, ts.getLineno(), tokens.getCharno());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (tokens == null) ? null : tokens.substring(0, ts.getColumn;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (tokens == null) ? null : tokens.substring(column.intValue() + 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (column == JsonToken.VALUE_STRING) ? null : tokens.remove(column);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (tokens == null) ? null : tokens.substring(0, ts.getLineno(), ts.getCharno());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (tt == JsonToken.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return JsonToken.FIELD_NAME;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (String) tokens.getProp(Node.SOURCENAME_PROP);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (tokens == null) ? null : tokens.nextToken();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (tokens != null) ? table[tokens.toString() : JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (tokens == null) ? null : tokens.substring(0, ts.getTokenLocation() - 0 );",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (column == JsonToken.VALUE_STRING) ? null : tokens.substring(column.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (tokens == null) ? null : tokens.toCharArray();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (column == JsonToken.VALUE_STRING) ? null : tokens.VALUE_EMBEDDED_OBJECT;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (column == JsonToken.VALUE_NUMBER_INT) ? null : tokens.substring(column.toString();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (column == JsonToken.VALUE_STRING) ? null : tokens.substring(0, 1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (tokens == null) ? false : tokens.substring(0, ts.getLineno();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (tokens == null) ? null : tokens.substring((int) tokens.size() - 1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (tokens == null) ? null : tokens.newString(Token.NAME);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (tokens == null) ? null : tokens.substring(columnName.length() - 1);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(0, trimStart;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (first.getType() == Token.EMPTY) ? null : tokens.substring(0, 2));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (tokens == null) ? null : tokens.substring(column + 1);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (column == JsonToken.VALUE_STRING) ? null : tokens;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(0, ts.getTokenLocation();",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (tokens.hasMoreTokens()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(0, ts.getColumnClass();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (tokens == null) ? null : tokens.substring(column.((int) tokens.size() - 1);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(column.toString();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? table : JsonToken.END_ARRAY;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (matchToken(Token.NAME) ? table : JsonToken.END_OBJECT;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (column == JsonToken.VALUE_NUMBER_INT) ? null : tokens.substring(column + 1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (String) tokens.get((int) tokens);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? table : JsonToken.START_ARRAY;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (tokens == null) ? null : tokens.get(columnName);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(0, ts.getCharno();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (column == JsonToken.VALUE_NUMBER_INT) ? null : tokens;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (matchToken(Token.NAME)) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (String) tokens.get(columnName) + \"]\";",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (first.getType() == Token.EMPTY) ? null : tokens;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (tokens == null) ? null : tokens.substring((int) tokens.size() - 1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (propName != null) ? table[tokens.toString() : null;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (tokens == null) ? null : tokens.substring(0, ts.getTokenLocation() - 1);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (tt == JsonToken.VALUE_STRING) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (first.getType() == Token.EMPTY) ? null : tokens.substring(column.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (tokens == null) ? null : tokens.substring(0, ts.getEntryCount() - 1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(0, 100);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (tokens == null) ? null : tokens.copyCurrentStructure(ts.substring(0, ts.getLineno());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (tokens == null) ? null : tokens.remove(column);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.substring(column + 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.remove(first.substring(0, 2));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (tokens == null) ? null : tokens.substring(0, ts.getColumnClass() - 1);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (column == JsonToken.VALUE_EMBEDDED_OBJECT) ? null : tokens.toString();",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "tokens.canConsume(\"RESTRICT\");"
    },
    "Bears-24": {
        "fixes": [
            {
                "k": 1,
                "patch": "return _referencedType.equals(((o) o).referencedType);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return _referencedType.equals(((o) o).getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return _referencedType.equals(((o) o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return _referencedType.equals(((o).referencedType) == _referencedType);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return _referencedType.equals(((o).referencedType) == _referencedType;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return _referencedType.equals(((o) o).getName()) : false;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return _referencedType.equals(((ObjectType) o).referencedType);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return _referencedType.equals(((o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return _referencedType.equals(((o) o).getName()) && _referencedType;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return _referencedType.equals(((Class) o).referencedType);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return _referencedType.equals(((ObjectType) o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return _referencedType.equals(((Class) o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return _referencedType.equals(((o) o).referencedType) == _referencedType;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return _referencedType.equals(((o).getName())));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return _referencedType.equals(((NamedType) o).referencedType);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (_referencedType != null && o.getClass() == getClass()) ? \"null\" : _referencedType;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return _referencedType.equals(((o) o).referencedType) == _referencedType);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return (_referencedType != null && o.getClass() == getClass()) ? oType : _referencedType;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return this.referencedType.equals(((o) o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return _referencedType.equals(((ObjectType) o).getName());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return _referencedType.equals(((o) o).getName()) == _referencedType;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (_referencedType != null && o.getClass() == getClass()) ? o.getClass() : _referencedType;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return _referencedType.equals(_referencedType);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return _referencedType.equals(((ConcreteType) o).referencedType);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return _referencedType.equals(((Enum) o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return this.referencedType.equals(((o) o).getName());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return _referencedType.equals(((o)o).referencedType);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return _referencedType.equals((Class) o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return _referencedType.equals((o) o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return _referencedType.equals(((o).getName()) && _referencedType;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return o.equals(((o) o).getName());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return _referencedType.equals(((String) o).referencedType);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return propertyType != null && o.getClass() != getClass()) ? o.getClass() : _referencedType;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return _referencedType.equals(_referencedType.getRawClass());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (_referencedType != null && o.getClass() == getClass()) ? false : _referencedType;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return this.referencedType.equals(((o).referencedType) == _referencedType);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return _referencedType.equals(((o) == _referencedType);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return _referencedType.equals(((FunctionType) o).referencedType);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return o.equals(_referencedType.getRawClass());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return _referencedType.equals(((o).referencedType) : _referencedType;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return _referencedType.equals(((ObjectNode) o).referencedType);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return _referencedType.equals(((o) o).getSignature());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return _referencedType.equals(((o) o).referencedType) == false;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return _referencedType.equals(((o).getName()) && _referencedType);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return o.getClass() != getClass()) ? o.getClass() : _referencedType;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return _referencedType.isResolved() && o.getClass().equals(o.getClass());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return _referencedType.equals(((o) o).getName()) && _referencedType);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return _referencedType.equals(((o) o).getName())));",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return _referencedType.equals(((o).targetType) == _referencedType);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return _referencedType.equals(((o) o).getName()) && _referencedType.equals(o));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return _referencedType.equals(((o).referencedType) == false;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "_referencedType = o).referencedType();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return _referencedType.equals(((Type) o).referencedType);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return _referencedType.equals(((NamedType)o).referencedType);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return _referencedType.equals(((o) o).getName()) : 1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return this.referencedType.equals(((o).referencedType) == _referencedType;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return _referencedType.equals(((o) == false) ? \"\" : o).getName());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return _referencedType.equals(((o) == false) && _referencedType).isEnabled(SerializationType);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return this.referencedType.equals(((o) o).referencedType);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return _referencedType.equals(((o) == _referencedType) ? 1 : o).getName());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return _referencedType.equals((( o).referencedType) == _referencedType);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return _referencedType.equals(((Class) o).getName()) : false;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return _referencedType.equals(((Class) o).getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return _referencedType.equals(((EnumType) o).referencedType);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return o == null || _referencedType.isResolved(_referencedType);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return _referencedType.equals(((o).referencedType) == _referencedType()));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return _referencedType.equals(((o) == _referencedType) ? o).getName() : o;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return _referencedType.equals(((o) o).getName()) : _referencedType);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return _referencedType.equals((( o).referencedType) == _referencedType;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return _referencedType.equals(((o).getName())) { return true; }",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return o.equals(((o) o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return _referencedType.equals(((o) o).getName()) && _referencedType.isAssignableFrom(o));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return _referencedType.equals(((Class)o).referencedType);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return _referencedType.equals(((ObjectNode) o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (_referencedType != null && o.getClass() == getClass()) ? o).getName() : _referencedType;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return _referencedType.equals(((o) == _referencedType) ? \"\" : o).getName());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return _referencedType.equals(((o) == _referencedType) ? \"null\" : o).getName());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return _referencedType.equals(((o)o).getName()) : _referencedType;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return _referencedType.isResolved() && o.getClass().equals(_referencedType);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return _referencedType.equals(((o) o).getName()) && _referencedType.isEnabled(SerializationType);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return _referencedType.equals(((o).referencedType) == false);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return _referencedType.equals(((o)o).getSignature());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "_referencedType = o;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return _referencedType.equals((Class) o).referencedType);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return _referencedType.equals(((o) o).referencedType) == 0;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return _referencedType.equals(((o).referencedType) == _referencedType = o).getName());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return _referencedType.equals(((o).referencedType) == false) ? \"\" : o).getName();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return _referencedType.equals(((ObjectType) o).getName()) && _referencedType;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return _referencedType.equals(((o)o).getName());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return _referencedType.equals(((o) o).getName()) && _referencedType.equals(o);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return _referencedType.equals(((o) == _referencedType) ? o).getName() : o).getName();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return _referencedType.equals(((ObjectType) o).referencedType) == _referencedType;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (_referencedType != null && o.getClass() == getClass()) ? o : _referencedType;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return _referencedType.equals(((o) == _referencedType) ? \"null\" : o).getName()));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return _referencedType.equals(((ObjectType) o).getName()) : false;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (_referencedType != null) && o.getClass() == o.getClass;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return _referencedType.equals(((o).getName()) && _referencedType.isGeneric()) || o == false;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return _referencedType.equals(((o) == _referencedType).getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return _referencedType.equals((o) o).referencedType);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return _referencedType.equals(((Class) o).getName()) && _referencedType;",
                "identical": false
            }
        ],
        "buggy_line": "// Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType()));",
        "fixed_line": "if (o.getClass() == getClass()) { // 16-Jun-2017, tatu: as per [databind#1658], can not do recursive call since // there is likely to be a cycle... // but... true or false? return false; /* // Do NOT ever match unresolved references if (_referencedType == null) { return false; } return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType())); */ } return false;"
    },
    "Bears-233": {
        "fixes": [
            {
                "k": 1,
                "patch": "WhiteList.add(new HashMap<String, List<String>());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "WhiteList.add(new HashMap<String, Class<?>>();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "WhiteList.add(Object.class.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "WhiteList.add(piList.session.SessionData\");",
                "identical": false
            },
            {
                "k": 5,
                "patch": "WhiteList.add(new HashMap<String, Integer>());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "WhiteList.add(toString.session.SessionData\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "WhiteList.add(new HashMap<String, Object>());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "WhiteList.add(new HashMap<String, Class>());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "WhiteList.add( .util.ArrayList.class.getName());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "WhiteList.add(new HashMap<String, List<String>>();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "WhiteList.add(new HashMap<String, List<String>>());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "WhiteList.add(jfree.session.SessionData);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "WhiteList.add(pi.class.getName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "WhiteList.add(jfree.session.SessionData\");",
                "identical": false
            },
            {
                "k": 15,
                "patch": "WhiteList.add(pi.pi.session.SessionData\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "WhiteList.add(this.ropp.session.SessionData\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "WhiteList.add(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "WhiteList.add(accessor.pi.session.SessionData\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "WhiteList.add(new HashMap<String, List.classData));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "WhiteList.add(lastpp.session.SessionData\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "WhiteList.add(new HashMap<String, Type>());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "WhiteList.add(pi.session.SessionData);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "WhiteList.add(Class.class.getName());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "WhiteList.add(new ObjectList<String>());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "WhiteList.add(ITS.session.SessionData);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "WhiteList.add(\" .lang.ArrayList.class.\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "WhiteList.add(tempList.class.getName());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "WhiteList.add(Toppp.session.SessionData\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "WhiteList.add(pi.session.SessionData\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "WhiteList.add(new HashMap<String, List>());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "WhiteList.add( an White.session.SessionData\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "WhiteList.add(this.ropp.sessionData\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "WhiteList.add(nullpp.session.SessionData\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "WhiteList.add(piList.session.SessionData);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "WhiteList.add(new HashMap<String,workList<String>());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "WhiteList.add(ConcreteList.session.SessionData\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "WhiteList.add(null);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "WhiteList.add(pi.pied.session.SessionData\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "WhiteList.add(pi. period.session.SessionData\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "WhiteList.add(lookupList.session.SessionData\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "WhiteList.add(Jsonpp.session.SessionData\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "WhiteList.add(tempList.session.SessionData\");",
                "identical": false
            },
            {
                "k": 43,
                "patch": "WhiteList.add(new HashMap<String, List.class.isAssignableFrom(cause.class));",
                "identical": false
            },
            {
                "k": 44,
                "patch": "WhiteList.add(pi.pi.session.SessionData);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "WhiteList.add(new HashMap<String, String>());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "WhiteList.add(lastpp.session.SessionData);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "WhiteList.add(new HashMap<String, List<String> sig sig));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "WhiteList.add(new HashMap<String, List.class});",
                "identical": false
            },
            {
                "k": 49,
                "patch": "WhiteList.add(new ArrayList<String>());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "WhiteList.add(FieldList.class.getName());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "WhiteList.add(ConcreteList.session.SessionData);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "WhiteList.add(new HashMap<String, Class.class.isAssignableFrom(rawList.class));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "WhiteList.add(stream.session.SessionData);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "WhiteList.add(pi..session.SessionData\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "WhiteList.add(new HashMap<String, List<String>>>());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "WhiteList.add(ConcreteType.session.SessionData\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "WhiteList.add(new HashMap<String, List.classData\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "WhiteList.add(pi.pieces.SessionData);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "WhiteList.add(new HashMap<String,module));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "WhiteList.add(accessor.session.SessionData);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "WhiteList.add(new HashMap<String, Instant>());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "WhiteList.add(this.ropp.sessionData);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "WhiteList.add(new HashMap<String, short>());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "WhiteList.add(new HashMap<String, List<String> seenppList<String>());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "WhiteList.add(new HashMap<String, List<?>>());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "WhiteList.add(new HashMap<String, JSType>());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "WhiteList.add(new ClassWriter.session.SessionData\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "WhiteList.add(tempList.session.SessionData);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "WhiteList.add(this.ropp.session.SessionData);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "WhiteList.add(Array.pi.session.SessionData\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "WhiteList.add(lastpp.session.SessionData());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "WhiteList.add(accessor.pi.session.SessionData);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "WhiteList.add(new HashMap<String, List<String>();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "WhiteList.add(new Object[] {jfree.session.SessionData\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "WhiteList.add(new HashMap<String, List.class.\" );",
                "identical": false
            },
            {
                "k": 76,
                "patch": "WhiteList.add(ConcreteType.session.SessionData);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "WhiteList.add(new HashMap<String, List<String>>(Object.class));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "WhiteList.add(new HashMap<String, List<String>[]>();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "WhiteList.add(new HashMap<String, List.class.getName());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "WhiteList.add(pi.piedpp.session.SessionData\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "WhiteList.add(new HashMap<String, List.class.isAssignableFrom(rawList.class));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "WhiteList.add(p.pi.session.SessionData\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "WhiteList.add(new HashMap<String, inppList<String>());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "WhiteList.add(new HashMap<String, List<String>>>();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "WhiteList.add(new HashMap<String, List<?>>();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "WhiteList.add(prefixList.session.SessionData\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "WhiteList.add(new HashMap<String, List<String> change.classData\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "WhiteList.add(new HashMap<String, List.class.isAssignableFrom(Object.class));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "WhiteList.add(causeList.session.SessionData\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "WhiteList.add(endpp.session.SessionData\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "WhiteList.add(new HashMap<String, Class<?>>(Short.class.getRawData()));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "WhiteList.add(pi.pieces.SessionData\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "WhiteList.add(pi.piedpp.SessionData\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "WhiteList.add(Timeline.class.getName());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "WhiteList.add(accessor.session.SessionData\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "WhiteList.add(HashSet.class.getName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "WhiteList.add(new HashMap<String, List.class.isAssignableFromData\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "WhiteList.add(new HashMap<String, Annotation>());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "WhiteList.add(toString.session.SessionData);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "WhiteList.add(new HashMap<String, List<String>CDData));",
                "identical": false
            }
        ],
        "buggy_line": "WhiteList.add(\"ro.pippo.session.SessionData\");",
        "fixed_line": "WhiteList.add(\"ro.pippo.session.DefaultSessionData\");"
    },
    "Bears-181": {
        "fixes": [
            {
                "k": 1,
                "patch": "ResultSet = resultSet.getUseOfT();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ResultSet = resultSet.getDescription().getEntityCollection();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ResultSet = resultSet.getUseOfThis().getEntityCollection();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ResultSet = resultSet.getDirectedSuccNodes();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ResultSet = resultSet.getDescription().getAnnotation(JacksonEntity.class);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ResultSet = resultSet.getDirectedSucc.nextLong();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ResultSet = resultSet.getUse.nextLong();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(arg.getLineno(), arg.getCharno());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(arg.getLineno(), argEntity.getCharno());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ResultSet = resultSet.getUseToString(arg.getName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ResultSet = resultSet.getDirectedSuccNodes(arg.getName());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ResultSet = resultSet.getUseDescription().getEntityCollection();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ResultSet = resultSet.x.get(format.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ResultSet = resultSet.nextLong();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ResultSet = resultSet.getUseProp(Node.SOURCENAME_PROP);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ResultSet = resultSet.getUseMap().getAnnotation(JacksonEntity.class);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ResultSet = resultSet.getDirectedSuccNodes(paramEntity.toString());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ResultSet = resultSet.getDescription();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(arg.getSimpleName());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ResultSet = resultSet.getUse == null ? \"\" : resultSet.getDescription();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ResultSet = resultSet.getUseMap().getEntityCollection();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ResultSet = resultSet.getUseClient().getEntityCollection();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ResultSet = resultSet.getUse(format.getClass().getSimpleName());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg.getClass())) { return resultSet.hasNext(); }",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ResultSet = resultSet.getDescription().getAnnotation(JacksonEntity.class) + 1);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ResultSet = resultSet.getString(\" css.name\", resultSet.getAnnotationIntrospector());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(arg.getLineno(), arg2.getCharno());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ResultSet = resultSet.getUseOfThis().getSimpleName();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.next() : resultSet.getSimpleName();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(param.getSimpleName());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getPos() : resultSet.getSimpleName();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ResultSet = resultSet.getDirectedSucc.next();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(arg.getLong().getSimpleName());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ResultSet = resultSet.getUseIfLocal(arg.getName(), argEntity.getSimpleName());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ResultSet = resultSet.getUseWanted();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ResultSet = resultSet.first.getDescription().getEntityCollection();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg) ? resultSet.getPos() : null;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ResultSet = resultSet.getUseOfT().getAnnotation(JacksonEntity.class) != null;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ResultSet = resultSet.getUse.getDescription().getEntityCollection();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ResultSet = resultSet.getUse == null ? \"\" : resultSet.getDirectedSuccNodes();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ResultSet = resultSet.getUseOfThis().getAnnotation(JacksonEntity.class);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ResultSet = resultSet.getString(\"Entity\", resultSet.getAnnotationIntrospector());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ResultSet = resultSet.getDirectedSucc.get(arg.getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getgetSourceName() : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ResultSet = resultSet.getDirectedPredicates();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ResultSet = resultSet.getUseWrapping.getDescription().getEntityCollection();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg.getClass().getSimpleName())) { return resultSet.hasNext(); }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(x.getSimpleName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg.getClass())));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ResultSet = resultSet.getDirectedSuccNodes(paramEntity.getAnnotationIntrospector());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.next() : resultSet.getBounds().getSimpleName();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg.getClass())) { return resultSet.next; }",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ResultSet = resultSet.getUseEntityCollection();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ResultSet = resultSet.getUse == null ? \"\" : resultSet.getFunctions();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(param);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getPos() : resultSet.getBounds().getSimpleName();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ResultSet = resultSet.getUse == null ? \"\" : resultSet.getDirectedPredicates();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ResultSet = resultSet.getDirectedSuccNodes(functionClass.getName());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ResultSet = resultSet.getUse == null ? null : resultSet.getDescription();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ResultSet = resultSet.getString(\"JS.name\", resultSet.getAnnotationIntrospector());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.next().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ResultSet = resultSet.getUse(arg.getName());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ResultSet = resultSet.first.getDescription();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ResultSet = resultSet.getUseProp(Node.SOURCENAME_PROP, arg.getLongName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg.getLong().getSimpleName())));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.next() : null;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.next() : resultSet.get Let();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ResultSet = resultSet.getUseIfLocal(arg.getName(), argEntity.getLong());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(arg.getLineno(), field.getCharno());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.next() : resultSet.getVersion(0);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ResultSet = resultSet.x.getDescription();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ResultSet = resultSet.getUseOfT().getAnnotation(JacksonEntity.class);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.next().getSimpleName() : resultSet.getSimpleName();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ResultSet = resultSet.getUseProp(Node.SOURCENAME_PROP, functionIndex);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ResultSet = resultSet.getUseInfo(arg.getName());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ResultSet = resultSet.getUseUnion().getEntityCollection();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ResultSet = resultSet.getUseIfLocal(arg.getName(), argEntity.getUpperBound());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg.getClass())) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ResultSet = resultSet.getDirectedSuccNodes(paramEntity.getParameterTypes().length()-1);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.next() : resultSet.getFunctions();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg.getClass().getSimpleName())) { return resultSet.hasNext();); }",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg) ? resultSet.getPos() : resultSet.getSimpleName();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getPos() : resultSet.get Let();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getProperties() : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ResultSet = resultSet.getUseMap().getDirectedSuccNodes();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getDescription() : null;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.getName()+\", argMap.get(arg.name) %s.length);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ResultSet = resultSet.getUseOfThis().getAnnotation(JacksonEntity.class) != null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getPos() : null;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getLong().getSimpleName() : resultSet.getSimpleName();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getLong().getSimpleName() : null;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ResultSet = resultSet.getUseProp(Node.SOURCENAME_PROP, String.valueOf(x1));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(arg.getEntityClass());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getPos() : resultSet.getLeading();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ResultSet = resultSet.getUseProp(Node.SOURCENAME_PROP).getSimpleName();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ResultSet = resultSet.getUseField(\"org.jfree.time.DateTimeZone.class.isAssignableFrom(arg1) ? resultSet.getPos() : resultSet.getFunctions();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ResultSet = resultSet.getString(\"foregroundUse:mm:ss.name\", \" + resultSet.getPointer().getSimpleName());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(arg.getLineno(), argEntity.getCenterY());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ResultSet = resultSet.getUse();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ResultSet = resultSet.getDescription().findUseOfThis(param.getLong().getSimpleName());",
                "identical": false
            }
        ],
        "buggy_line": "ResultSet resultSet = this.databaseClient.singleUse().executeQuery(Statement.of( String.format(\"select count(*) from %s\", persistentEntity.tableName()))); resultSet.next(); return resultSet.getLong(0);",
        "fixed_line": "Statement statement = Statement.of(String.format( \"select count(*) from %s\", persistentEntity.tableName())); try (ResultSet resultSet = this.databaseClient.singleUse().executeQuery(statement)) { resultSet.next(); return resultSet.getLong(0); }"
    },
    "Bears-249": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.dep = new DataDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.dep = newITEMDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.dep = new------DeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.dep = newCommentDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.dep = newEscapeDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.dep = newcallbackDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.dep = new membersDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.dep = newdnDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.dep = new PolynomialFunctionDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.dep = new VersionDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.dep = new------DepDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.dep = neweqDepDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.dep = new\u228eDeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.dep = newCTIONDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.dep = new(-1DeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.dep = newITEMDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.dep = new(-1DepDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.dep = newworldDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.dep = new Writer.FEBRUMap(this.dotMap);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.dep = new\u228eDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.dep = new SimpleDateFormat(\"hh:mm:ss.Box\";",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.dep = new getPointDepDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.dep = newCTIONDepDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.dep = new DataDeprecationInfo(this.dotClass);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.dep = new {0DepDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.dep = newITEMDeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.dep = newEscapeDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.dep = new getDeclaringDeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.dep = new SimpleDateFormat(\"hh:mm:ss.SSS);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.dep = new VersionDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.dep = new------DeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.dep = new\u1b58DeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.dep = new DataDeprecationInfo(timeZone.BoxMap);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.dep = new------DeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.dep = newworldDeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.dep = new HttpServletDeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.dep = new SimpleDateFormat(\"hh:mm:ss.UnusedDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.dep = new------DepDeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.dep = new JComboBoxExclusionDeprecationInfo(this.dotMap);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.dep = newdnDeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.dep = new\u228eDeprecationInfo(this, SWT.NO_BACKGROUND);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.dep = new BitsDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.dep = new\u228eDeprecationInfo(this, SWT.NO_58Box);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.dep = new Writer.FEBRUMap();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.dep = new Locale(message);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.dep = new\u228eDeprecationInfo(this, SWT.NO_LINE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.dep = new DataDeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.dep = new------DeprecationInfo(this, SWT.NO_BACKGROUND);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.dep = new HttpServletDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.dep = newworldDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.dep = newworldDeprecationInfo(compiler, SWT.NONE);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.dep = new\u228eDeprecationInfo(dep, SWT.NONE);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.dep = new FourDepDeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.dep = new\u0ac2DeprecationInfo(compiler, SWT.NONE);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.dep = new------DepDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.dep = new SimpleDateFormat(\"hh:mm:ss.SSS\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.dep = new getFilterDeprecationInfo(this, SWT.NONE);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.dep = new getDeclaringDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.dep = new\u0ac2DeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.dep = new SimpleDateFormat(\"hh:mm:ss.Box\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.dep = new Writer.xmlMap();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.dep = newdnDeprecationInfo(this, SWT.NO_BACKGROUND);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.dep = new TypeAndMapDeprecationInfo(compiler, SWT.NONE);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.dep = new\u0ac2DeprecationInfo(compiler, SWT.NO_BACKGROUND);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.dep = newworldDeprecationInfo(this, SWT.NO_BACKGROUND);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.dep = neweqDepDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.dep = new------DeprecationInfo(this.xMap);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.dep = new SimpleDateFormat(\"hh:mm:ss.toHexString(this.dotMap.toString());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.dep = new\u228eDeprecationInfo(compiler, SWT.NONE);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.dep = new SimpleDateFormat(\"hh:mm:ss.toHexString(this.dotMap);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.dep = new Writer.FEBRUMap(this.dotMap.get(messageId);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.dep = new DataDeprecationInfo(this.dotMap.get(messageId);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.dep = neweqDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.dep = new getFilterDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.dep = new EventListenerList();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.dep = new------DeprecationInfo(this, SWT.NO_LINE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.dep = new DataDeprecationInfo(dep0, mode);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.dep = new------DeprecationInfo(this, SWT.NO_58Box);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.dep = new\u228eDeprecationInfo(dep, callMap);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.dep = new DataDeprecationInfo(dep, call.getObject());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.dep = new DataDeprecationInfo(this, SWT.NO_BACKGROUND);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.dep = new FourDepDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.dep = newworldDeprecationInfo(compiler, SWT.NO_BACKGROUND);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.dep = newITEMDeprecationInfo(this, SWT.NO_BACKGROUND);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.dep = newITEMDeprecationInfo(this.dotClass);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.dep = new etaDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.dep = new\u228eDeprecationInfo(this, SWT.NO_SLOT_NAME);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.dep = new DataDeprecationInfo(this.xMap);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.dep = newEscapeDeprecationInfo(this.dotClass);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.dep = new(-1DepDeprecationInfo(this.dotClass);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.dep = new------DeprecationInfo(this, mode);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.dep = newworldDeprecationInfo(this, SWT.NO_LINE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.dep = new SimpleDateFormat(\"hh:mm:ss.toString\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.dep = new SimpleDateFormat(\"hh:mm:ss.BoxMap;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.dep = new PolynomialFunctionDeprecationInfo(compiler);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.dep = new JComboBoxExclusionDeprecationInfo(compiler);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.dep = new------DepDeprecationInfo(this, SWT.NO_BACKGROUND);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.dep = newcallbackDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.dep = new FourDeprecationInfo(this);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.dep = newworldDeprecationInfo(compiler, SWT.NO_LINE_SEPARATOR);",
                "identical": false
            }
        ],
        "buggy_line": "this.dep = new Clock<>(commitDepBox.dep);",
        "fixed_line": "if (commitDepBox.dep != null) { this.dep = new Clock<>(commitDepBox.dep); } else { this.dep = null; }"
    },
    "Bears-102": {
        "fixes": [
            {
                "k": 1,
                "patch": "casepc.setFormat(buf.readUnsignedShort() - 1, buf.length());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "case routine: position.readUnsignedShort(buf.length() - 1);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "casepc: position.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "case padding: position.readUnsignedShort(buf.length() - 1);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "casepc.setFormat(buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "casepc.setFormat(buf.readUnsignedShort() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "casepc.setFormat(buf.readUnsignedShort() + 1, buf.length());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "casepc.setBuffer(buf.readUnsignedShort() - 1, buf.length());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "casepc.setBarWidth(buf.readUnsignedShort() - 1, buf.length());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "casepc.setBarWidth(buf.length() - 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "casepc.setFormat(buf.readUnsignedShort() + 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "casepc.setBarWidth(buf.readUnsignedShort() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "casepc.setBarWidth(buf.length() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "casepc.setFormat(buf.readUnsignedShort() - 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "case specification: position.readUnsignedShort(buf.length() - 1);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "casepc.setFormat(buf.length() - 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "case padding: position.readUnsignedShort(buf.length() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "case '\": position.readUnsignedShort() * buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "casekeys.set(buf.length() - 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "casepc.setBarWidth(buf.readUnsignedByte() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "casepc.setBuffer(buf.readUnsignedShort() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "casepc.setFormat(buf.readUnsignedShort() - 2, buf);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "casepc.setBarWidth(buf.length() - 1, buf.readUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "casepc: position.readUnsignedShort(buf.length() - 1);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "casepc.setBarWidth(buf.length() - 1, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "casepc.setFormat(buf.length() - 1, buf.readUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "casepc.setJS position(buf.length() - 1, buf.readUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "case padding: position.readUnsignedShort(buf.length() - 1, buf.readUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "casepc.set(buf.length() - 1, position);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "casepc.setBuffer(buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "casepc.setBarWidth(buf.readUnsignedShort() - 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "casepc.setFormat(buf.readUnsignedShort() - 1, buf.int) * 8);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "casepc.set(buf.length() * position);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "case pivot: position.readUnsignedShort(buf.length() - 1);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "casepc.setFormat(buf.readUnsignedShort() + 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "casepc.setTYPE(buf.readUnsignedShort() - 1, buf.length());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "casepc.setVertical(buf.length() - 1, position);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "casepc: position.readUnsignedShort(buf + 1, buf.length() - 1);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "casepc.setJS position(buf.length() - 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "case protected position: buf.readUnsignedShort(buf.length() - 1);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "casepc.setBuffer(buf.readUnsignedShort() - 2, buf);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "casepc.setFormat(buf.length() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "casepc.setBarWidth(buf.readUnsignedByte() - 1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "case routine: position.readUnsignedShort(buf + 1, buf.length() - 1);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "casepc.setBarWidth(buf.length() - 1, position);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "casekeys.set(buf.length() - 1, buf.readUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "casepc.setBarWidth(buf.length() - 1, 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "casepc.setBuffer(buf.readUnsignedShort() - 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "casepc.setFormat(buf.readUnsignedShort() - 1, buf.readUnsignedShort() * 8);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "casepc.setBarWidth(buf.length() - 1, buf.readUnsignedShort() * 8);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "casepc.setBarWidth(buf.readUnsignedByte() + 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "case getCause: position.readUnsignedShort(buf.length() - 1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "case routine: position.readUnsignedShort(buf.length());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "case routine: position.readUnsignedShort(buf);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "casepc.setBuffer(buf.readUnsignedShort() - 1, buf.int) * 8);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "casepc.set(buf.length() - 1, buf.readUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "case pivot: position.readUnsignedShort(buf.length() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "case padding: position.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "casepc.set(buf.readUnsignedShort() - 1, buf.length());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "casepc.setFormat(buf.readUnsignedShort() - 1, buf.readUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "case '\\\\': buf.setsetLength(position.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "case specification: position.readUnsignedShort(buf.length() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "caseUnexpected position: buf.readUnsignedShort(buf.length() - 1);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "casepc.setFormat(buf.readUnsignedShort() - 1, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "casepc.setBarWidth(buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "case '\"' position: buf.readUnsignedShort() + 1);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "casepc.setFormat(buf.readUnsignedShort() + 1, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "casepc.setFormat(buf.readUnsignedShort() - 1, buf.intUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "casepc.setTYPE(buf.readUnsignedShort() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "case routine: position = i.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "casepc.setBarWidth(buf.readUnsignedByte() - 1, buf.length());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "casepc.setFormat(buf.readUnsignedShort() + 1, buf.length() - 1);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "casepc.setBarWidth(buf.length() - 1, 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "casepc.setBuffer(buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "case padding: position.readUnsignedShort(buf.length() - 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "casepc.setBarWidth(buf.readUnsignedByte() - 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "case getCause: position.readUnsignedShort(buf.length() - 1, buf.readUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "casepc.setFormat(buf.readUnsignedShort() - 1, buf.intUnsignedShort() * 8);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "casepc: position.readUnsignedShort(buf.length() - 1, buf.readUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "casepc: position.readUnsignedShort(buf + 1, buf.length() * 7);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "case '\": position.readUnsignedShort() * buf.readUnsignedShort() + 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "casepc.set(buf.length() - 1, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "casepc.setFormat(buf.length() - 1, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "casepc: position.readUnsignedShort(); break;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "casepc.setBuffer(buf.readUnsignedShort() - 1, buf.intUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "case '\": position.readUnsignedShort() * buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "casepc.setPosition(position);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "casepc.setBarWidth(buf.readUnsignedShort() + 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "case routine: position.readUnsignedShort(buf + 1, buf.length());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "casepc.setBuffer(buf.readUnsignedShort() - 1, buf.intUnsignedShort() * 8);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "casepc.setBarWidth(buf.readUnsignedByte() - 1, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "case routine: position.readUnsignedShort(buf.length() - 1, buf.readUnsignedShort() - 1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "case padding.set(buf.length() - 1, position);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "case '\": position.readUnsignedShort() * buf.readUnsignedShort()) + 1);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "casekeys.set(buf.length() - 1, buf.readUnsignedShort() * 8);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "casepc.setFormat(buf.readUnsignedShort() * 6);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "casepc.setBarWidth(buf.readUnsignedShort() - 2, buf);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "casepc.setJS position(buf.length() - 1, buf.readUnsignedShort() * 8);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "casepc: position.readUnsignedShort(buf + 1, buf.length() * 6);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "case specification: position = i.readUnsignedShort();",
                "identical": false
            }
        ],
        "buggy_line": "case 21: position.set(Position.KEY_RSSI, buf.readUnsignedByte()); break; case 22: position.set(\"profile\", buf.readUnsignedByte()); break; case 66: position.set(Position.KEY_POWER, buf.readUnsignedShort() + \"mV\"); break; case 67: position.set(Position.KEY_BATTERY, buf.readUnsignedShort() + \"mV\"); break; case 70: position.set(\"pcbTemp\", buf.readInt() * 0.1);",
        "fixed_line": "position.set(\"pcbTemp\", (length == 4 ? buf.readInt() : buf.readShort()) * 0.1);"
    },
    "Bears-246": {
        "fixes": [
            {
                "k": 1,
                "patch": "return position;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return position == null ? Integer.MAX_VALUE : position;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return position + 1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return position_ms\", Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return position == null ? null : position.getSize();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return position == null ? position == 0) : new Integer(position);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return position == null ? \"\" : position;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return position == null ? new Integer(position) : mask_msk_msk);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return position == null ? new Integer.MAX_VALUE : position;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return position == null ? null : position;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return position == null ? new Integer(position) : mask_msk);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return position == null ? position == 0) : this.position;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return position == null ? position == null : position.getSize();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return position == null ? new Integer(position) : mask_msk_ms;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return position == null ? position == 0) : text.substring(position);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return position == null ? new Integer(position) : mask_msk;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return position == null ? new Integer(position) : mask_msksum);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return position == null ? new Integer(position) : this.position;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return position == null ? position == 0) : sourcems;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return position == null ? Builder.position : position;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return position == null ? attr.getValue().toString() : position;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return position == null ? new Integer(position) : mask_msk1 != null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return position == null ? Long.MAX_VALUE : position;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return position == null ? MIN_msise_ms\", Integer.MAX_VALUE) : position;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return position == null ? new Integer(position) : mask_msk1 + 1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return position == null ? position == null : position;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return position == null ? DEFAULT_msise_ms\", Integer.MAX_VALUE) : position;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return position == null ? new Integer(position) : mask_msknots.length;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return position == null ? null : position.getDeclaringClass().getName();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return position == null ? MIN_msise_msk1 : position;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return position == null ? new Integer(position) : mask_msk << 1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return position == null ? new Integer.MAX_VALUE : Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return position == null ? new Integer(position) : mask_msk_ms\", Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return position == null ? new Integer(position) : position;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return position == null ? MULTIPLICATIVE_msk1 : position;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return position == null ? new Integer(position) : this.position);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return position == null ? Collections.empty_ms\", position) : new Integer(position);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return position == null ? new Integer(position) : mask_msknot;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return position == null ? new Integer(position) : mask_msk_msk_ms;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return position == null ? new Integer(position) : mask_msk_msk;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return position == null ? new Integer(position) : mask_msk1.getSize();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return position == null ? null : position.getChk_ms\", Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return position == null ? REGRequest_msise_ms\", Integer.MAX_VALUE) : position;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return position == null ? REGRequest_msise_msk1 : position;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return position == null ? new Integer(position) : mask_msknots.length);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return position == null ? new Integer(position) : mask_mskIdx);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return position == null ? null : position.getDeclaringClass();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return position == null ? new Integer(position) : mask_msk1 / 2;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return position == null ? new Integer(position) : mask_msk_msk1 + 1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return position == null ? position == getSeriesCount() : position;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return position == null ? new Integer(position) : mask_msk - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return position == null ? new Integer(position) : mask_msk1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return position == null ? position == 0) : source.position;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return position == null ? Collections.empty_ms\", position) : new Integer.MAX_VALUE;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return position == null ? new Integer(position) : mask_mskms;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return position == null ? REGRequest_msise_ms\", Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return position == null ? MIN_msANT_msk1 : position;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return position == null ? super.position() : position;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return position == null ? \"\" : position + 1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return position == null ? new Integer(position) : mask_msk_msk_msk);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return position == null ? position == 0) : sourceMap.get(position);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return position == null ? MAX_msregister_ms\", position) : this.position;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return position == null ? position == 0) : ims;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return position == 1 ? position : -1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return position == null ? new Integer(position) : this.keys.get(position);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return position == null ? -1 : position;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return position == null ? position == null : position.getDeclaringClass().getName();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return position == 0) ? new Integer(position) : mask_msk_msk;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return position == null ? new Integer(position) : mask_msk_msksum);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return position == null ? DEFAULT_msise_ms\", position) : this.position;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return position == null ? new Integer(position) : mask_msk_ms\", true);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return position == 0 ? null : position;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return position == null ? Integer.MAX_VALUE : position + 1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return position == 0) ? new Integer(position) : mask_msk_msk_ms;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return position == 0) ? new Integer(position) : mask_msk_ms;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return position == null ? new Integer(position) : mask_msk_msk1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return position == null ? new Integer(position) : mask_msk1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return position == null ? position == 0) : position;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return position == null ? new Integer(position) : mask_msk_msk1 != null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return position == null ? new Integer(position) : text.length;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return position == null ? MAX_msregister_msk1 : position;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return position == null ? position == null : position.getDeclaringClass();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return position == 0) ? new Integer(position) : mask_msk;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return position == null ? new Integer(position) : mask_msk * 2 + 1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return position == null ? MAX_msregister_ms\", position) : new Integer(position);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return position == null ? DEFAULT_msise_ms\", Integer.MAX_VALUE : position;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return position == null ? new Integer(position) : mask_msk.getSize();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return position == null ? new Integer(position) : mask_msk1 : position;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return position == null ? Integer.MAX_msk1 : position;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return position == null ? int.getValue().length() : position;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return position == null ? null : position.getValue();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return position == null ? new Integer(position) : mask_msk_ms ACCESS_msk);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return position == null ? DEFAULT_msise_ms\", Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return position == null ? MIN_msise_ms\", Integer.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return position == null ? DEFAULT_msise_ms\", Integer.MAX_VALUE) : new Integer(position);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return position == null ? new Integer(position) : mask_msk_msk << 1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return position == null ? position == null : new Integer(position);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return position == null ? new Integer(position) : mask_msk new Integer(position);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return position == null ? MIN_msise_ms\", position) : this.position;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return position == null ? new Integer(position) : mask_msk_msregister_msk);",
                "identical": false
            }
        ],
        "buggy_line": "return setQueryParameter(\"position_ms\", position_ms);",
        "fixed_line": "return setBodyParameter(\"position_ms\", position_ms);"
    },
    "Bears-183": {
        "fixes": [
            {
                "k": 1,
                "patch": "return entityClass, entityClass, pageableValues);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return entityClass, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return pageContext(context, entityClass, null);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return entityClass, pageableValues, null);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return query(entityClass, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return pageAll(context, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return query(pageable, entityClass, null);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return pageContext.getDescription(pageable, entityClass, null);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return pageContext.create(context, entityClass, null);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return pageContext(context, entityClass, this);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return pageAll(context, entityClass, false);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return query(entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return pageAll(context, entityClass, null);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return query( entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return pageContext.get(Calendar.YEAR, entityClass, null);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return query(pageContext, entityClass, null);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return pageContext(context, entityClass, false);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return query(entityClass, entityClass, false);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return PageContext.PAGE_SCOPE, entityClass, null);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return query(pageContext, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return pageContext.getLineno(), pageableValues, null);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return query(pageContext, entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return pageAll(context, entityClass, this);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return entityAll(context, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return entityClass, entityClass, pageableValues, null);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return query(pageable, entityClass, this);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return entityClass, entityClass, pageableMin, null);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return pageContext.get(Calendar.YEAR, entityClass);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return query(pageContext, entityClass, this);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return query(pageable, entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return pageIterator.<Class, pageable, null);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "returnMap.get(pageable, entityClass, null);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return pageContext.create(context, entityClass, false);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return pageContext.getDescription(pageable, null, false);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return callName, entityClass, pageableValues, null);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return entityClass, entityClass, pageContext, null);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return pageAll( entityClass, entityClass, false);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return callName, entityClass, pageableValues);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return entityClass, pageContext, null);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return query( entityClass, entityClass, false);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return entityClass, pageableImpl(lowerBound), null);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "returnMap.values( entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return pageContext.getLineno(), pageable, null);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return entityClass, entityClass, pageableSource, null);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return pageAll( entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return query(x, y, pageable);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return query( bitClass, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return pageContext.create(context, entityClass, this);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return query(entityClass, entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return query.find(pageable, entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return query == null ? null :entityClass, pageable.MAX_VALUE, null);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return pageContext( entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return query(pageable, entityClass, false);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return entityClass, entityClass, pageToClass, null);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return query(variableClass, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return query(pageable, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return query( entityClass, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return queryClass(entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return pageInfo( entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return query(matcher, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return entityClass, entityClass, pageableMap, null);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return query(pageContext, entityClass, false);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return entityClass, entityClass, pageableImpl(lowerBound), null);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return pageContext.getRowKey(pageable, false, null);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return reachingClass(lowerClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return query(ialLayer, pageable, null);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return pageContext.getRowKey(pageable, entityClass, null);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return pageAll(matcher, entityClass, pageable);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return query(entityClass, entityClass, this);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return pageContext.getLineno(), pageable.getCharno());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return entityClass, entityClass, pageContext);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return pageContext.getLineno(), pageableDef.length, null);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return entityClass, pageToClass, null);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return query.find(pageable, entityClass, false);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return query == null ? null : pageableValues.toArray( entityClass, entityClass);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return entityClass, entityClass, pageableValues.length);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return entityClass, entityClass, pageableValue, null);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return bitIndex, entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return query(pageableClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return pageContext.getLineno(), pageableImpl.this.getCharno());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return pageContext.getLineno(), pageableSource, null);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return query.getTime(pageable, entityClass, null);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return entityAll(context, entityClass, false);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return query(endsWith, entityClass, null);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return PageContext.PAGE_SCOPE, entityClass, this);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return pageT( entityClass, entityClass, false);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return query == null ? null :entityClass, pageableValues.length);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return entityClass, pageableImpl(lowerBound), null, null);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return query == null ? null : pageableValues.copyOf(x, pageable);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return pageContext.getRowKey(pageable, null), false);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "returnMap.values( entityClass, entityClass, false);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return entityClass, entityClass, pageableImpl() ? null : pageable.values().length;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return nextEntryImpl(entityClass, entityClass, entityClass, null);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return query( bitClass, entityClass, false);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return query(pageable, entityClass, entityClass);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return query == null ? null :entityClass, pageable);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return nextEntryImpl(entityClass, entityClass, false);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return query.find(pageable, entityClass, entityClass);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return query == null ? null :entityClass, entityable.MAX_VALUE, null);",
                "identical": false
            }
        ],
        "buggy_line": "return queryAll(entityClass, pageable, null);",
        "fixed_line": "return queryAll(entityClass, pageable, new SpannerQueryOptions() .setOffset(pageable.getOffset()).setLimit(pageable.getPageSize()));"
    },
    "Bears-119": {
        "fixes": [
            {
                "k": 1,
                "patch": "String type = decodePrefix(type, \"L\" + defaultLink);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "String type = decode((typetype == null) ? \"null\" : type.substring(0, 3);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "String type = decode((type == null) ? \"null\" : type.substring(0, 3);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "String type = \"substring(0, type);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "String type = decode((type == null) ? \"null\" : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "String type = decode((type == null) ? \"UNKNOWN\" : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "String type = \"[\" + type + \"=\" + getValue() + \"]\";",
                "identical": false
            },
            {
                "k": 8,
                "patch": "String type = decodePrefix.substring(0, type);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "String type = decode((typetype == null) ? \"null\" : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "String type = decode((type == null) ? \"UNKNOWN\" : type.substring(0, 3);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "String type = decode((typetype == null) ? \"null\" : type.toString()), null);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "String type = decode((type == null) ? \"null\" : type.toString()), null);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "String type = decode((typetype == null) ? \"UNKNOWN\" : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "String type = decodePrefix(type, \"type\", Class.class, defaultLink);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "String type = decodeCharacters(type, \"type\", Class.class, defaultLink);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "String type = decode((typetype == null) ? \"UNKNOWN\" : type.substring(0, 3);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "String type = decodeOctalString(type, \"type\", Class.class, defaultLink);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "String type = decode((type == null) ? \"UNKNOWN\" : type.toString()), null);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "String type = decodeOctOctalString(type, \"type\", Class.class, defaultLink);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "String type = \"org.jfree.type.substring(0, type);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "String type = decodePrefix(type, \"undefined\", Class.class, defaultLink);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "String type = decodePrefix(type, \"Invalid format: \\\"\" + defaultLink);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "String type = decode((typetype == null) ? \"UNKNOWN\" : type.toString()), null);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "String type = decode(type, \"type\", Class.class, defaultLink);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "String type = \"index.substring(0, type);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "String type = decode((type == null) ? \"NULL\" : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "String type = decode((type == null) ? \"UNKNOWN : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + getClassType.substring(0, 3);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + loop);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "String type = \"index.substring(0, type.length() - 3);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "String type = decode((type == null) ? \"UNKNOWN\" : type.substring(0, pos);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "String type = decodePrefix(type, \"id('\"', defaultLink);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + static String.substring(0, 3);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "String type = \"substring(0, type.length() - 3);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "String type = decode((type == null) ? \"type\" : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + new String(buf, null, null, null);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "String type = decode((type == null) ? \"null\" : type.substring(0, pos);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "String type = decode((type == null) ? \"type\" : type.substring(0, 3);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "String type = decode((typetype == null) ? \"NULL\" : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "String type = \"index.substring(0, type.length() - 1);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "String type = decode((typetype == null) ? \"null\" : type.toString()), \"\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "String type = decodeate(type, \"type\", Class.class, defaultLink);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + message);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "String type = decodePrefix.substring(0, type.length() - 2);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "String type = decode((typetype == null) ? \"null\" : type.substring(0, pos);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "String type = decode((typetype == null) ? \"UNKNOWN : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + v.substring(0, 3);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "String type = decodePrefix(type, \"L\" + type + \"\\\": \" + getClassType.substring(0, 3);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "String type = decode((typetype == null) ? \"type\" : type.substring(0, 3);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "String type = decode((typetype == null) ? \"null\" : type.substring(0, pos));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "String type = decodeMore(type, \"type\", Class.class, defaultLink);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "String type = decode((type == null) ? \"null\" : type.substring(0, pos));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "String type = decode((type == null) ? \"UNKNOWN\" : type.substring(0, pos));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "String type = decode((typetype == null) ? \"null\" : type.toString()), null, null);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "String type = \"org.jfree.type.indexOf('$') < 0 ? type : \"null\";",
                "identical": false
            },
            {
                "k": 56,
                "patch": "String type = decodeBytes(type, \"type\", Class.class, defaultLink);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "String type = decode((typetype == null) ? \"type\" : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \")\";",
                "identical": false
            },
            {
                "k": 59,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + new String(buf, null, null);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + \")\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" +].substring(0, 3);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "String type = decodePrefix(type, \"TYPE:mm:ss.substring(0, 3);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "String type = decode((typetype == null) ? \"UNKNOWN\" : type.substring(0, pos);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "String type = decode((type == null) ? \"null\" : type.toString()), \"\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "String type = \"[\" + type + \"\\\": \" + getClassType.substring(0, 3);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + getClass().substring(0, 3);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + new String(buf, null, null), \"}\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "String type = decode((typetype == null) ? \"UNKNOWN\" : type.toString()), \"null\";",
                "identical": false
            },
            {
                "k": 69,
                "patch": "String type = decode((type == null) ? \"UNKNOWN\" : type.substring(0, defaultLink));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "String type = decode((typetype == null) ? \"UNKNOWN\" : type.toString()), \"null\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "String type = decode((type == null) ? \"is\" : type.substring(0, 0);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "String type = decode((type == null) ? \"UNKNOWN : type.substring(0, 3);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "String type = decode((type == null) ? \"null\" : type.substring(0,0));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + v.substring(ix+1));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + getClassType.substring(0, total));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "String type = decode((type == null) ? \"NULL\" : type.toString()), null);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "String type = decode((typetype == null) ? \"NULL\" : type.toString()), null);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "String type = decodePrefix.substring(0, type.length() - 10);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + new String(buf, null, null));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "String type = decode((type == null) ? \"NULL\" : type.substring(0, 3);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "String type = decodePrefix(type, \"substring\", Class.class, defaultLink);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "String type = decode((typetype == null) ? \"null\" : type.toString()), \"UTF-8\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + new String(buf, decodeLink));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "String type = decode((typetype == null) ? \"null\" : type.substring(0,0));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + getClassType.substring(0, pos));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "String type = decode((type == null) ? \"UNKNOWN\" : type.toString()), \"\");",
                "identical": false
            },
            {
                "k": 87,
                "patch": "String type = decode((typetype == null) ? \"UNKNOWN\" : type.substring(0, pos));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "String type = decode((type == null) ? \"UNKNOWN\" : type.toString()), \"null\";",
                "identical": false
            },
            {
                "k": 89,
                "patch": "String type = decode((typetype == null) ? \"UNKNOWN : type.substring(0, 3);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "String type = decodePrefix(type, \"L\" + type + \"\\\": \" + message);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "String type = decode((typetype == null) ? \"NULL\" : type.substring(0, 3);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "String type = decode((type == null) ? \"type\" : type.toString()), null);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "String type = decode((typetype == null) ? \"null\" : type.substring(0,0 + 2;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "String type = decode((type == null) ? \"UNKNOWN\" : type.toString()), \"null\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + v.substring(0, pos));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "String type = decodePrefix(type, \"id('\" + defaultLink);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + null);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "String type = decode((type == null) ? \"UNKNOWN\" : type.substring(0,0));",
                "identical": false
            },
            {
                "k": 99,
                "patch": "String type = decodePrefix(type, \"id(\" + type + \"\\\": \" + defaultLink);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "String type = \"(\" + type + \"\\\": \" + new String(buf, off, len);",
                "identical": false
            }
        ],
        "buggy_line": "String type = sentence.substring(typeStart, sentence.indexOf(',', typeStart)); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress);",
        "fixed_line": "int typeEnd = sentence.indexOf(',', typeStart); if (typeEnd > 0) { String type = sentence.substring(typeStart, typeEnd); switch (type) { case \"NBR\": return decodeLbs(sentence, channel, remoteAddress); case \"LINK\": return decodeLink(sentence, channel, remoteAddress); default: return decodeText(sentence, channel, remoteAddress); } } else { return null;"
    },
    "Bears-100": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new Position(old, result.getDevice(), position);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result = new Position(old, result.getDevice(), position);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result = new Position(old, old.getDevice(), position);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new Collections.singleton(oldName, result);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new Position(old, result.getDevice(), position, old.getId());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "sourceFile = new Position(old, result.getDevice(), position);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return result == null ? null : old.singleton;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new Position(old, result.getDevice(), position, old.getEntry());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new Position(old, result.getName(), position);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result = new Position(old, position, null, null);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new Position(old, result.getMinPosition(), position);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result = new Position(old, position, old.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new JSError.make(old, position, old.getDevice(), position, last.getId()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result = ign(old, position, new Position(old, null, null));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new Position(old, result.getDevice(), position, lastPosition);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result = new Position(old, result.getMinPosition(), position);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result = new Position(old, position, old.getFirstChild().getQualifiedName());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return result == null ? Collections.singleton : old.get(oldName);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return new Position(old, result.getDevice(), position, old.getEntry().getId());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new Position(old, result.getDevice(), position, null, null);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result = new Position(old, position, old.getFirstChild().withwithPosition(old));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new JSError.make(old, position, old.getDevice(), position, lastPosition);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new Position(old, result.getDevice(), position, null, last.height);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new Position(old, result.hasMoreElements(), position);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new Position(old, result.getDevice(), position, old.getRawClass());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new Position(old, result.getFirstChild(), position);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result = new Position(old, result.getFirstChild(), position);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new Position(old, result.getDevice(), position, last.getId());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new Position(old, result.getDevice(), position, null, last.getId());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return ign(old, position, newEvent, null, null);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result = new Position(old, result.baseUri(), position);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result = new Position(old, position, old.getFirstChild().getNext());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new Position(old, result.getDevice(), position, old.getId, lastPosition);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result = new Position(old, result.ensure_Device, null, null);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result = ign(old, position);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "JSType ign = position.getFirstChild().getQualifiedName();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result = new Position(old, result.withDevice(), position);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result = new Position(old, result.category, null, null);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result = new Position(old, result.getDevice(), position, old.getId());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new JSError.make(old, position, old.getDevice(), position);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new Position(old, result.getDevice(), position, old.length());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return new Position(old, result.getDevice(), position, old.getRawPosition());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.component = new Position(old, result.getFirstChild(), position);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new Position(old, result.ise(), position, old.getEntry());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new Position(old, result.withDevice(), position);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result = new Position(old, result.getDevice(), position, null, null);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new JSError.make(old, position, old.getDevice(), position, null, last.getId()));",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.component = new Position(old, result.getDevice(), position);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new Position(old, result.EXCEPTION, p.height);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new JSError.make(old, position, old.getDevice(), position, null, last.height));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result = new Position(old, position, old.getDevice(), position);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result = ign(old, position, new Position(old, old.length() - 1);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return new Position(old, result.getDevice(), position, old.length() - 1);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result = ign(old, position, new Position(oldName, null, null));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "Boolean ign = position.getFirstChild().getQualifiedName();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return new Position(old, result.getFirstChild(), position, old.getRawClass());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new JSError.make(old, position, old.getDevice(), position));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result = new Position(old, result.getDevice(), position, old.getEntry());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return new Position(old, result.baseUri(), position);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new JSError.make(old, position, old.getDevice(), position, null, last.class);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return result.getName().startsWith(oldName);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new Position(old, result.getDevice(), position, old.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result = new Position(old, result.getDevice(), position, old.length());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.singleton(old.getDeclaringClass().getName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result = new Position(old, result.ensure_Device, null);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new Position(old, result.hasChildren(), position);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.rename = new Position(old, result.getDevice(), position);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return new Position(old, result.getDevice(), position, old.getId);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new Boolean(old, old.getFirstChild().getQualifiedName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result = ign(old, position, new Position(old, null, null, null);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new Position(old, result.getDevice(), position, oldPosition);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result = new Position(old, old.getFirstChild(), position);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return new JSError.make(old, position, old.getDevice(), position, null, last.getId());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return result.getName().startsWith(oldName) && oldI.equals(oldName);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return result == null ? Collections.singleton : old.substring(0, position);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return new Position(old, result.getDevice(), position, old.toString());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return result == null ? Collections.singleton : old;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result = new Position(old, result.getDevice(), position, old.getRawClass());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return new Position(old, result.getDevice(), position, old.get(1));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return new Position(old, result.ise(), position, old.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "sourceFile = new Position(old, result.getMinPosition(), position);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new Position(old, result.getDevice(), position, old.getPropertyName());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return new Position(old, result.category, null, null);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result = new Position(old, result.refresh(), position);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result = ign(old, position, new Position(old, old.length()));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result = new Position(old, position, old.getMinPosition());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return new Position(old, result.getDevice(), position.getId());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.component = new Position(old, position, old.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result = new Position(old, position, old.getFirstChild().height);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return new Position(old, result.ise(), position, old.getEntry().getId());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result = new Position(old, result.value, null, null);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result = ign(old, position, new Position(oldName, old.length() - 1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return new Position(old, result.getDevice(), position, null, last.class);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new Position(old, result.getDevice(), position, null);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result = new Position(old, result.UNINITIALIZED);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result = new Position(old, position, old.getFirstChild().getNext(), position);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new Position(old, result.getDevice(), position, null, last.toString());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.component = new Position(old, position, old.getFirstChild().getQualifiedName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return new Position(old, result.getDevice(), position, old.getId()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "URL ign = position.getFirstChild().getNext();",
                "identical": false
            }
        ],
        "buggy_line": "boolean ignition = position.getBoolean(Position.KEY_IGNITION); boolean oldIgnition = false; Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null) { oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); } if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId()));",
        "fixed_line": "if (position.getAttributes().containsKey(Position.KEY_IGNITION)) { boolean ignition = position.getBoolean(Position.KEY_IGNITION); Position lastPosition = Context.getIdentityManager().getLastPosition(position.getDeviceId()); if (lastPosition != null && lastPosition.getAttributes().containsKey(Position.KEY_IGNITION)) { boolean oldIgnition = lastPosition.getBoolean(Position.KEY_IGNITION); if (ignition && !oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_ON, position.getDeviceId(), position.getId())); } else if (!ignition && oldIgnition) { result = Collections.singleton( new Event(Event.TYPE_IGNITION_OFF, position.getDeviceId(), position.getId())); } }"
    },
    "Bears-180": {
        "fixes": [
            {
                "k": 1,
                "patch": "return uri.of(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return uri.of(uri, uri.getHost(), i);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return uri.of(uri, URI);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return uri.of(uri, uri.getHost(), true);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return uri.of(uri, uri.getHost(), 3);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return uri.of(uri, uri.getHost(), scalar);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return uri.of(uri, uri.getHost());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return uri.of( URI.getHost(), uri);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return uri.of(uri, uri.getHost(), line);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return uri.of(uri, uri.getHost(), index);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return uri.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "returnuri.of( URI.getHost(), uri.getHost());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return uri.of(uri, uri.getHost(), length);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return uri.of(uri, uri.getHost(),asPath);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return uri.of(uri, uri.getHost(), loader);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return uri.of(uri, uri.getHost(), ts.getPath());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return uri.of(uri, uri.getHost(), 2);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return uri.of(uri, uri.getHost(), isId());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return uri.of(uri, uri.getHost(),o);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return uri.of(uri, uri.getHost(), useId);",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return uri.of(match, uri.getHost(), 3);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return uri.of(uri, uri.getHost(), -4);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return uri.of(match, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return uri.of(uri, pointer.getHost(), uri);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return uri.of(uri, uri.getHost(), registry);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return uri.of(uri, uri.getHost(),Ignore);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return uri.of(uri, URI.getHost(), uri);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return uri.of( URI.getHost(), uri.getHost());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return uri.of(uri, uri.getVersion());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return uri.of(match, uri.getHost(), i);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return uri.of(uri, uri.getHost(), stats);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return uri.of(uri, uri.getHost(), denominator);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return uri.of(match.getHost(), uri);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "returnuri.of( URI.substring(0, uri.length() - 2);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return uri.of(uri, uri.getHost(), ts.getVersion());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return uri.of(uri, uri.getHost(), false);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return uri.of(uri, uri.getHost(),context);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return uri.of(uri, uri.getHost(), ts.getSimplePath());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "returnuri.of( URI.getHost(), uri);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return uri.of(uri, uri.getHost(), marker);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "returnuri.of( URI.substring(0, uri.length() - 1);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return uri.of(uri, uri.getHost(), c);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return uri.of(match, uri.getHost(), scalar);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return uri.of(uri, uri.getHost(), ts.get w());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return uri.of(uri, uri.getHost(),Alias);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return uri.of(uri, uri.getHost(), inst);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return uri.of(uri, uri.getHost(),ADD);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "returnuri.of(uri.getHost(), uri.getHost());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return uri.of(uri, uri.getHost(), 1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return uri.of(URI.getHost(), uri);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return uri.of(uri, uri.getHost(), decomp);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return uri.of(uri, uri.getHost(), ts.get w w w);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return uri.of(rootNode.getHost(), uri);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "returnuri.of( URI.substring(0, uri.length() - 3);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return uri.of(uri, uri.getHost(), scaleY);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return uri.of( URI.getHost(), uri.getPath());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return uri.of(uri, uri.getHost(),SIZ);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return uri.of(uri, uri.getHost(), cat);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return uri.of(uri, uri.getHost(),});",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return uri.of(uri, uri.getHost(),REPORT);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return uri.of();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return uri.of(uri, uri.getVersion(), uri);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return uri.of(uri, uri.getHost(), ts.get w w);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return uri.of(uri, uri.getHost(),TypeName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return uri.of(uri, uri.getHost(), lastId);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return uri.of(cd.getHost(), uri);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return uri.of( URI, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return uri.of(uri, uri.getHost(), lineId);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return uri.of(uri, uri.getHost(), ts.getPaint());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "returnuri.of(uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return uri.of(uri, uri.getHost(),pop);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return uri.of(uri, uri.getHost(), reporter);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return uri.of(uri, uri.getHost(),<Id());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return uri.of(uri, uri.getHost(),GAPPath);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return uri.of(uri, uri.getHost(),<Id);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return uri.of(uri, uri.getHost(), ts.get4());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return uri.of(uri, uri.getHost(), id);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return uri.of(uri, uri.getHost(),Member);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return uri.of(uri, uri.getHost(), ts.getCharno());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return uri.of(uri, uri.getHost(), inst.getPath());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return uri.of(uri, uri.getHost(), savedId);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "returnuri.of(uri, uri.getHost(), uri);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return uri.of(uri, uri.getHost(), static);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return uri.of(uri, uri.getHost(),cd);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return uri.of(uri, uri.getHost(), sort);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return uri.of(uri, uri.getHost(), native);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return uri.of(uri, uri.getHost(), Complex);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return uri.of(uri, uri.getHost(), ts.getOffset());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return uri.of(uri, uri.getHost(),Comparable());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return uri.of(uri, uri.getHost(),el);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return uri.of(uri, uri.getHost(), ignored);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return uri.of(uri, uri.getHost(), 16);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return uri.of(uri, uri.getHost(), ai);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return uri.of(uri, uri.getHost(), mutator);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return uri.of(uri, uri.getHost(), inst.getVersion());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return uri.of(uri, uri.getLeastSupertype );",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return uri.of(uri, uri.getHost(), ts.get w w());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return uri.of(uri, uri.getHost(),TYPE);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return uri.of( URI.getHost(), uri.getVersion());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return uri.of(uri, uri.getHost(), = uri.getPath());",
                "identical": false
            }
        ],
        "buggy_line": "return BlobId.of(uri.getHost(),",
        "fixed_line": "return BlobId.of(uri.getAuthority(),"
    },
    "Bears-137": {
        "fixes": [
            {
                "k": 1,
                "patch": "int flagIndex = new String(buf, beginIndex - length) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int flagIndex = (int) (beginIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "int flagIndex = new String(buf, beginIndex - length) > 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "int flagIndex = new String(buf, beginIndex + length) - 1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "int flagIndex = new String(buf, offset, length - 1) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "int flagIndex = new String(buf, off, len) - beginIndex;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "int flagIndex = (new String(buf, beginIndex) - beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "int flagIndex = (int) (beginIndex == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "int flagIndex = (int) (secIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "int flagIndex = (new String(buf, start, length) - beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "char flagIndex = new String(bufIndex + length) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "int flagIndex = (new String(buf, offset, length) - beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "int flagIndex = new String(buf, off, len) - beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "int flagIndex = Rectangle.parseInt(buf, beginIndex - length) > 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "int flagIndex = new String(buf, off, length) - 1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "int flagIndex = (new String(buf, beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "int flagIndex = secondIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "int flagIndex = new String(buf, offset, length - true) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "int flagIndex = (int) (readIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "int flagIndex = (new String(buf, off, length) - beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "int flagIndex = (new String(buf, beginIndex) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "int flagIndex = Rectangle.parseInt(buf.length() - position) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "int flagIndex = fieldIndex == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "int flagIndex = (new String(buf, beginIndex + length) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "int flagIndex = (new String(buf, beginIndex) == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "int flagIndex = (new String(buf, beginIndex - length) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "int flagIndex = new String(buf, start, length - 1) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "int flagIndex = Rectangle.parseInt(buf.length() - 2, flagIndex + length);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "int flagIndex = readIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "int flagIndex = new String(buf.length() - 1, beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "int flagIndex = new String(buf, beginIndex + length) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "int flagIndex = (new String(buf, beginIndex - length) > 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "int flagIndex = new String(buf, beginIndex - length) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "int flagIndex = this.reader.indexOf('$') + length;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "int flagIndex = new String(buf, start, length) - 1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "int flagIndex = new String(buf, off, len) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "int flagIndex = new String(buf, off, len) - beginIndex) == 0 && length > 0;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "int flagIndex = (int) (buf.length() * 6 - beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "int flagIndex = new String(buf, beginIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "int flagIndex = (int) ( asIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "int flagIndex = ptr - (new String(buf, beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "int flagIndex = Rectangle.parseInt(buf, beginIndex + length) > 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "int flagIndex = (new String(buf, offset, length) - beginIndex) == 0 && length > 0;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "int flagIndex = Rectangle.parseInt(buf.length() - 4, 4, 4);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "int flagIndex = new String(buf, off, length) - beginIndex;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "int flagIndex = new String(buf.length() - 2, flagIndex + length);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "int flagIndex = new String(buf.length() -general, beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "int flagIndex = new String(buf, off, lenIndex - beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "int flagIndex = (int) (buf.length() - beginIndex) % length;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "int flagIndex = this.reader.indexOf(buf.length() - 1, beginIndex) - 1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "int flagIndex = new String(buf, start, 0, length) - 1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "int flagIndex = (int) (historyIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "int flagIndex = this.reader.indexOf('$') + 1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "int flagIndex = (new String(buf, startIndex - length) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "int flagIndex = new String(buf, start, length) - beginIndex;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "int flagIndex = new String(buf, beginIndex - length) >> 2;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "int flagIndex = new String(buf.length() - 1, beginIndex) - 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "int flagIndex = new String(buf, beginIndex - length) > 0 && flagIndex >= 0;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "int flagIndex = (new String(buf, beginIndex) - beginIndex) == 0 && length > 0;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "int flagIndex = new String(buf, beginIndex - length) % 2 == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "int flagIndex = new String(buf, offset, length) && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "int flagIndex = new String(bufIndex - 2, flagIndex + length) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "int flagIndex = this.reader.indexOf(buf.length() - 1, beginIndex) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "int flagIndex = new String(buf, beginIndex == -1 && lengthIndex == -1) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "int flagIndex = Rectangle.parseInt(buf, beginIndex + length) - 1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "int flagIndex = new String(buf.length() - 4, 4, 4);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "int flagIndex = (String & 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "int flagIndex = new String(bufIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "int flagIndex = new String(buf, offset, length) - 1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "int flagIndex = new String(bufIndex + length) - 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "int flagIndex = RectangleIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "int flagIndex = (int) (buf.length() - beginIndex) > 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "int flagIndex = new String(buf, beginIndex - length) % 7;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "int flagIndex = flagIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "int flagIndex = new String(buf, off, len) - beginIndex - 1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "int flagIndex = (int) (buf.length() - beginIndex) % length != 0 && length == 0) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "int flagIndex = fieldIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "int flagIndex = (new String(buf, start, length) - beginIndex) == 0 && length > 0;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "int flagIndex = new String(buf.length() - position + 1) > 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "int flagIndex = (StringUtils.indexOf(buf, off + length) - 1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "int flagIndex = new String(buf, beginIndex - length);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "int flagIndex = entryIndex == -1 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "int flagIndex = Rectangle.parseInt(buf.length() - 2, flagIndex - length);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "int flagIndex = new String(buf, beginIndex - length) % 2 == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "int flagIndex = new String(buf, off, len) - beginIndex + length;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "int flagIndex = new String(buf, off, len) - beginIndex == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "int flagIndex = (new String(buf, offset, length) - beginIndex) == 0 && length == 0;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "int flagIndex = Integer.parseInt(buf.length() - 2, flagIndex + length);",
                "identical": false
            },
            {
                "k": 89,
                "patch": "int flagIndex = new String(buf, off, len) - beginIndex == 0 && length > 0;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "int flagIndex = new String(bufIndex - 2, flagIndex + length - 1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "int flagIndex = new String(buf, off, length - 1) == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "int flagIndex = new String(buf, offset, length - 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "int flagIndex = (new String(buf, startIndex - length) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "int flagIndex = new String(buf, beginIndex - length) % refresh == 0 && flagIndex == -1) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "int flagIndex = new String(buf, offset, length - 60 * 1000L) == 0 && length == -1) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "int flagIndex = (new String(buf, start, length) - beginIndex) == 0 && length == 0;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "int flagIndex = new String(buf, start, 0, length - 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "int flagIndex = new String(buf.length() - 2, flagIndex - 1);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "int flagIndex = (new String(buf, start, length) - beginIndex) % length;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "int flagIndex = new String(buf, beginIndex + length) % 7;",
                "identical": false
            }
        ],
        "buggy_line": "int flagIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), new StringFinder(\"AA\")); if (flagIndex != -1 && flagIndex - beginIndex == 6) {",
        "fixed_line": "int separatorIndex = buf.indexOf(buf.readerIndex(), buf.writerIndex(), (byte) '|'); if (separatorIndex > 0 && separatorIndex - beginIndex > 19) {"
    },
    "Bears-250": {
        "fixes": [
            {
                "k": 1,
                "patch": "for (int i = 0; i < map.size() ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "int i = 0;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "for (int i = 0; i < map.size() ? extends NumberUtils.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "for (int i = 0; i<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "for (int i = 0; i < length ? extends Number.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "for (int i = 0; i < map.size() ? extends NumberFormatException> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "for (int i = 0; i < length ? map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "for (int i = 0; i < map.size() ? extends Number.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "for (int i = 0; i < map.size() ? -1 : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "for (int i = 0; i < length ? extends NumberUtils.size() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "List<Integer> entry = map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "for (int i = 0; i < map.size() ? extends Number().entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "for (int i = 0; i < map.size() ? extends NumberMap.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "for (int i = 0; i < length ? extends NumberMap.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "for (int i = 0; i < length ? map.size() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "for (int i = 0; i < map.size() ? 0 : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "for (int i = 0; i < map.size() ? extends NumberParams.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "for (int i = 0; i < map.size() ? extends Numberex : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "for (int i = 0; i < map.size() ? extends NumberReferenced> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "for (int i = 0; i < length ? state.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "for (int i = 0; i < map.size() ? extends NumberHandler.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "for (int i = 0; i < map.size() ? extends Number n : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Label i = (map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "for (int i = 0; i < map.size() ? extends NumberType> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "for (int i = 0; i < length ? extends NumberUtils.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "for (int i = 0; i < map.size() ? extends Number 19 : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "for (int i = 0; i < map.size() ? extends NumberLAST : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "for (int i = 0; i < map.size() ? extends NumberUtils.entrySet : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "for (int i = 0; i < map.size() ? extends Number.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "for (int i = 0; i < length ? extends Number.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "for (int i = 0; i < map.size() ? extends NumberGap : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "for (int i = 0; i < map.size() ? extends NumberReferenced : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "for (int i = 0; i < map.size() ? extends NumberUtils.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "for (int i = 0; i < map.size() ? extends Number.<Integer> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "for (int i = 0; i < map.size() ? extends NumberRem> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "for (int i = 0; i < map.size() ? extends Numberinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "for (int i = 0; i < map.size() ? extends NumberActive.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "for (int i = 0; i < map.size() ? extends NumberContentType : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "for (int i = 0; i < map.size() ? extends NumberHandlerMap.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "for (int i = 0; i < map.size() ? extends NumberLevel.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "for (int i = 0; i < map.size() ? extends NumberUtils.size() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "short i = (map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "for (int i = 0; i < map.size() ? extends NumberAxis> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "for (int i = 0; i < map.size() ? extends Number end : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "for (int i = 0; i < map.size() ? extends Number series : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "for (int i = 0; i < length ? extends NumberinalityEntry.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "for (int i = 0; i < map.size() ? extends Number startIndex : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "for (int i = 0; i < length ? extends Number.size() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "for (int i = 0; i < length ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "for (int i = 0; i < map.size() ? extends NumberFormatException : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "for (int i = 0; i < map.size() ? extends NumberUtils.entrySet\" : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "for (int i = 0; i < map.size() ? extends NumberDeserializer> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "for (int i = 0; i < map.size() ? extends Number3.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "for (int i = 0; i < length ? extends NumberUtils.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "for (int i = 0; i < map.size() ? extends Number export : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "for (int i = 0; i < map.size() ? extends NumberrenameMap.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "for (int i = 0; i < map.size() ? extends NumberReferenced.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "for (int i = 0; i < map.size() ? extends Numberix : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "for (int i = 0; i < map.size() ? extends Number ns : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "for (int i = 0; i < map.size() ? extends NumberSig : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "for (int i = 0; i < length ? extends Number().entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "for (int i = 0; i < map.size() ? extends NumberReference> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "for (int i = 0; i < map.size() ? extends Number : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "for (int i = 0; i < map.size() ? extends Number BasicValue> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Label i = (int) entry.map.size() ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "for (int i = 0; i < length && map.size() > 0;) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "for (int i = 0; i < map.size() ? extends Number\" : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "for (int i = 0; i < map.size() ? extends NumberCIRC> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "for (int i = 0; i < map.size() ? extends Numbergen : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "for (int i = 0; i < map.size() ? extends Numberrename : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "for (int i = 0; i < map.size() ? extends Number millis : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "for (int i = 0; i < map.size() ? extends NumberLen : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "for (int i = 0; i < map.size() ? extends NumberShadow : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "for (int i = 0; i < map.size() ? extends Numbertarget : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "for (int i = 0; i < length ? extendsInteger.entrySet() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "for (int i = 0; i < map.size() ? extends NumberFraction> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "for (int i = 0; i < map.size() ? extends NumberQuad : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "for (int i = 0; i < length ? extends Numberinality : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "for (int i = 0; i < map.size() ? extends NumberLAST.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "for (int i = 0; i < map.size() ? extends Numberu : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "for (int i = 0; i < map.size() ? extends Number84 : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "for (int i = 0; i < map.size() ? extends Numberens : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "for (int i = 0; i < map.size() ? extends Number maxWidth : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "for (int i = 0; i < map.size() ? extends NumberFFF : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "for (int i = 0; i < map.size() ? extends NumberDays : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "for (int i = 0; i < map.size() ? extends Number zz : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "for (int i = 0; i < map.size() ? extends Number tz : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "for (int i = 0; i < map.size() ? extends Numbered : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "for (int i = 0; i < length ? extendsInteger.entrySet()) : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "for (int i = 0; i < map.size() ? extends NumberPart : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "for (int i = 0; i < length ? extends Number n : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "for (int i = 0; i < map.size(); ++i) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "for (int i = 0; i < length ? extends NumberFormatException> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "for (int i = 0; i < map.size() ? extends NumberRemoving : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "for (int i = 0; i < map.size() ? extends NumberCI : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "for (int i = 0; i < length; ++i) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "List<Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "for (int i = 0; i < map.size() ? extends NumberByName : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "for (int i = 0; --i, map.size() : map.entrySet()) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "for (int i = 0; i < length ? extends NumberZero : map.entrySet()) {",
                "identical": false
            }
        ],
        "buggy_line": "int cardinality = map.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : map.entrySet()) {",
        "fixed_line": "TreeMap<Integer, ? extends Number> sortedMap = new TreeMap<>(map); int cardinality = sortedMap.size(); int[] indices = new int[cardinality]; double[] values = new double[cardinality]; int i = 0; for (Map.Entry<Integer, ? extends Number> entry : sortedMap.entrySet()) {"
    },
    "Bears-127": {
        "fixes": [
            {
                "k": 1,
                "patch": "writeRaw(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "writeOut(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "writeFrameType(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "writeRaw(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "decodeHeader(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "writeFrameType(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "setFieldValue(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "writeOut(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "printUsage(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "writeOut(buf, position, i.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "decodeOffsetType(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x1 : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ZipLong.getValue(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "writeFrameType(buf, position, i.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "writeFrameType(buf, position, status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "writeRun(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0 : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ZipLong.getValue(buf, position, i.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "writeData(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "writeUnsignedByte(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "writeRaw(buf, position, i.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "addSuccessor(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "QDataMessage(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ZipShort.getValue(buf, position, i.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ZipShort.getValue(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "writePaint(this.position, status, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "writeUnsignedShort(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "writeFrameType(this, status.getUnsignedShort(), position);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "status.setLength(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "writeRaw(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "setFieldValue(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "writeRaw(buf, 0, numType.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "writeation(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "writePaint(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "writeFrame(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "writeFrameType(buf, position, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "status.setCharAt(status & 0x80000) == 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "writeRaw(final, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "writeRaw(buf, 0, status.length());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "decodeNumber(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x03) : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "writeRaw(buf, position, status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "writeFrameType(t, status.getUnsignedShort(), position);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0L : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "writePaint(this.position, status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "writeColor(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0xFFFF : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "decodeation(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "writeLabels(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "writeFrameType(this, status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x3d : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "writeOut(buf, position, status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "g2.fill(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "writeRun(buf, position, status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x8() : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "decodeHeader(buf, position, buf.getUnsignedShort(), status);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "writeRaw(value, status.getUnsignedShort(), status);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x7F : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x0f : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "writeRaw(ch, status.getUnsignedShort(), status);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "decodeUrl(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ZipLong.getValue(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x7e : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "writeFrameType(t, status.getUnsignedShort(), 3);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "status.set this(position, status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "addSuccessor(stackSize, status.getUnsignedShort() );",
                "identical": false
            },
            {
                "k": 67,
                "patch": "writeFrameType(buf, position, buf.getUnsignedShort(), status);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "setFieldValue(period, status.getUnsignedShort(), 0);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x1 : indexType.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "getMediannotatedChild, status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "writeRaw(ch, status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "writeRun(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "writeRaw(quoted, 0, buf.length());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "writeFrameType(t, status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x7 : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x7f : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "writeFrameType(this, status.getUnsignedShort(), status);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "writeFrameType(this, status.getUnsignedShort(), 3);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x00 : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "addToString(buf, position, buf.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0xff : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "writeFrameType(buf, position, buf.readUnsignedShort(), i.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "writeRaw(ch, status.getUnsignedShort(), 0);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "writeRaw(ch, status.getUnsignedShort(), position);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "writeRaw(value, status.getUnsignedShort(), 0);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "writeation(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "writeLAST(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "writeCString(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0d : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 90,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0xhigh : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "decodeHeader(buf, position, buf.getShortUnsignedShort(), status);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "status.setCharAt(status & 0x1f, status.get == 0) ? 0 : status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x8tips : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x8UN : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x80000 : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x1 : status.readUnsignedShort());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "writeFrameType(t, status.getUnsignedShort(), status);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "writeRaw(buf, position, buf.readUnsignedByte());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x3f : status.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "status.setCharAt(status & 0x80000) == 0) ? 0x8Position : status.readUnsignedShort();",
                "identical": false
            }
        ],
        "buggy_line": "decodeStatus(position, buf.readUnsignedShort());",
        "fixed_line": "if (buf.readableBytes() >= 2) { decodeStatus(position, buf.readUnsignedShort()); }"
    },
    "Bears-245": {
        "fixes": [
            {
                "k": 1,
                "patch": "}",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return \"modifiers\";",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return \"modifiers == null ? \"modifiers\" : modifier\";",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return \"modifiers == null ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return \"modifiers == null ? \"modifiers\" : modifier;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return \"modifiers == null ? \"modifiers\" : modifiers;\";",
                "identical": false
            },
            {
                "k": 7,
                "patch": "throw new IllegalArgumentException(\"modifiers must not be null\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return \"modifiers (modifiers == null) ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public } else if (modifiers != null) { return this; }",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.modifiers, \"modifiers (modifiers == null) ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public BuilderModifier modifier(modifiers, null) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers == null) ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return \"modifiers == null) ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers\", null) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 15,
                "patch": "public BuilderModifier modifier(modifiers, null) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public } else if (modifiers != null) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return modifiers == null ? \"modifiers\" : modifier;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return \"modifiers, \"modifiers (modifiers == null) ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return \"modifiers-modifiers (modifiers == null) ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return \"modifiers (modifiers != null) ? \"modifiers\" : null;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "public Builder(modifiers, \"modifiers (modifiers != null) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return modifiers == null ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "public } else if (modifiers != null) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "public Builder(modifiers, \"modifiers (modifiers != null) { return this; }",
                "identical": false
            },
            {
                "k": 25,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers != null) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers == null) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "public Builder(modifiers, \"modifiers\", null) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers == null) { return this; }",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return \"modifiers != null && modifiers ==modifiers.length;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return \"modifiers, \"modifiers (modifiers != null) ? \"modifiers\" : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "public Builder(modifiers, \"modifiers (modifiers == null) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.modifiers, \"modifiers (modifiers == null) ? \"modifiers : modifiers;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers\", modifiers) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 34,
                "patch": "public Builder(modifiers, \"modifiers (modifiers == null) ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers == null) ? \"modifiers : modifiers;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return \"modifiers != null && modifiers == null;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers\", null) { return this; }",
                "identical": false
            },
            {
                "k": 38,
                "patch": "public Builder(modifiers, \"modifiers (modifiers == null) { return this; }",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return \"modifiers (modifiers == null) ? \"modifiers\" : modifier;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public ClassModifier modifier(modifiers, \"modifiers\", null) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 41,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers != null) { return this; }",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return \"modifiers <= null && modifiers ==modifiers.length;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "public BuilderModifier modifier(modifiers, null) { return this; }",
                "identical": false
            },
            {
                "k": 44,
                "patch": "public BuilderModifier modifier(modifiers, null) { this.modifiers != null; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers\", null) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 46,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers\", null) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return \"modifiers == null ? \"modifiers\" : modifiers; }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return \"modifiers != null && modifiers == this.modifiers;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "public } else if (modifiers != null && modifiers == null) { this.modifiers.modifiers; }",
                "identical": false
            },
            {
                "k": 50,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers != null) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers\", modifiers) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 52,
                "patch": "public Builder(modifiers, \"modifiers (modifiers != null) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return \"modifiers, \"modifiers (modifiers != null) ? \"modifiers : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers\", modifiers) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 55,
                "patch": "throw new IllegalArgumentException(\"modifiers must not be null.\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public Builder(modifiers, \"modifiers\", null) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public Builder(modifiers, \"modifiers\", null) { return this; }",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return \"modifiers <= null && modifiers == null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers == null) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return \"modifiers, modifier != null && modifiers == null) ? \"modifiers\" : this.modifiers;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers == null) ? \"modifiers == null : modifiers;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return \"modifiers, modifier != null && modifiers == null) ? \"null\" : this.modifiers;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return \"modifiers != null && modifiers == 0 ? \"modifiers\" : this.modifiers;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return \"modifiers == null ? \"modifiers\" : modifier;\";",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return \"modifiers, \"modifiers (modifiers == null) ? \"modifiers : modifiers;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "public Builder(modifiers, null) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return \"modifiers == null ? \"modifiers\" : .modifiers;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.modifiers, \"modifiers (modifiers != null) ? \"modifiers.modifiers.modifiers) : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return \"modifiers, \"modifiers (modifiers != null) ? \"modifiers.modifiers : null;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (_modifiers == null) ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return \"modifiers == null ? \"modifiers\" : left.modifiers;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.modifiers, \"modifiers (modifiers == null) ? \"modifiers == null : modifiers;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "public } else if (modifiers != null && modifiers == null) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return \"modifiers, \"modifiers (modifiers != null) ? this.modifiers.modifiers : null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public Builder(modifiers, \"modifiers (modifiers == null) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return \"modifiers (modifiers != null) ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return \"modifiers != null && modifiers == modifier;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "public Builder(modifiers, null) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return \"modifiers, \"modifiers (modifiers != null) ? this.modifiers : null;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "public } else if (modifiers != null) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.modifiers, \"modifiers (modifiers != null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return \"modifiers == null ? \"modifiers\" : modifier; }",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return \"modifiers == null ? \"modifiers\" :modifiers;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return \"modifiers <= null && modifiers == _modifiers.length;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.modifiers, \"modifiers (modifiers != null) ? \"modifiers\" : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers == null) ? \"modifiers\" : modifiers; }",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public ClassModifier modifier(modifiers, null) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return \"modifiers (modifiers != null) ? \"modifiers\" : this.modifiers;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return \"modifiers != null && modifiers ==modifiers.length; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "public } else if (modifiers != null) { return null; }",
                "identical": false
            },
            {
                "k": 91,
                "patch": "public Builder(modifiers, \"modifiers\", null) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.modifiers, \"modifiers (modifiers != null) { this.modifiers = modifiers; }",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.modifiers != null && modifiers == null) ? \"modifiers\" : modifiers;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public BuilderModifier modifier(modifiers, \"modifiers (modifiers == null) { return this.modifiers; }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "public Builder(modifiers, \"modifiers (modifiers != null) { this.modifiers; }",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.modifiers, \"modifiers (modifiers != null) ? \"modifiers.modifiers : null;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return \"modifiers != null && modifiers == _modifiers;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return \"modifiers != null && modifiers ==modifiers.modifiers;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return \"modifiers == null) ? \"modifiers\" : modifier;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return \"modifiers, \"modifiers (modifiers != null) ? \"modifiers.modifiers\" : null;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (!modifier.equals(Modifier.FINAL)) { throw new IllegalStateException(\"unexpected parameter modifier: \" + modifier); }"
    },
    "Bears-2": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (raw == String.class) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (raw == UUID.class) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (raw == Integer.class) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (raw == Object.class) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (raw == Character.class) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (raw == String.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (raw == int.class) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (raw.length == 1 || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (raw == sat || raw.class == Object.class) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (raw.length == 1 || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (raw == null || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (raw == sat || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (raw == Integer.MIN_VALUE || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (raw == Class.class) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (raw == Integer.TYPE) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (raw == Integer.MIN_VALUE) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (raw.length == 1 && raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (raw == Integer.MIN_VALUE && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (raw == Date.class) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (raw == Integer.TYPE || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (raw == null || raw.isPrimitive()) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (raw.length == 1 || type == Object.class) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (raw == null || raw.getClass() == Object.class) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (raw == String.class) { return String.class; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (raw.length == 1 && raw == Object.class) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (raw == Boolean.class) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.getName() == Object.class) != Object.class; }",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getClass() == Object.class) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (raw == BigInteger.class) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (raw == .util.Date.class) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.getName().startsWith(\" .lang.class)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (raw ==' || raw == String.class) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (raw == String.class) { return 0x1 & (raw == 0 && raw.getName() == Object.class) || raw.getName() == Object.class) != Object.class; }",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (raw == milliseconds || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.Object\")) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (raw == String.class) { return 0x00's.class; }",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (raw == String.class) { return 0x1 & (raw == 0 && raw.getName() == Object.class) || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (raw ==' || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (raw == String.class) { return 0xDeserializer.None.class; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.getName() == Object.class) != Object.class) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) ? Object.class : Object.class; }",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (raw == String.class) { return 0x1 & (raw == 0 0 && raw.getName() == Object.class) || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (raw == String.class) { return 0xDeserializer.defaultImpl().getRawClass() == Object.class; }",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (raw == String.class) { return 0x1 & (raw == 0 && raw.getName() == Object.class) || raw.getName() == Object.class) != Object.class) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (raw == sat || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (raw.length == 1 || raw.isPrimitive()) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (raw == null || raw.getClass() == String.class) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.Object.class)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.Object.class) != Object.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class)",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (raw == String.class) { return 0x1 & (raw.class == 0 && raw.getName() == Object.class) || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (raw == null || raw.getClass() == Std.class) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.class)) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (raw == String.class) { return 0 && raw == Object.class; }",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.getName().startsWith(\" .\")) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.getName().startsWith(\" .util.class)) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang/Object.class)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.Locale.class) != Object.class) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getRawClass() == Object.class) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) ? Object.class : StdKeyDeserializer.class; }",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (raw == null || raw.getClass() == NoClass.class) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.getName().startsWith(\" .lang/Object.class)) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.Object.class) != Object.class; }",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getClass() == StdKeyDeserializer.class)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (raw == int.class || raw == Object.class) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getClass() == NoClass.class) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (raw == Long.class) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (raw == String.class) { return Object.class; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (raw == String.class) { return 0x1 & (raw.class == 0 && raw.getName() == Object.class) ? Object.class : Object.class; }",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.getName() == Object.class)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.getName() == Object.class) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (raw == String.class) { return 0x1 & (raw.class == 0 && raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) ? 0 : 1; }",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (raw == String.class) { return 0x1 & (raw == 0 0 && raw.getName() == Object.class) ? Object.class : Object.class; }",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.TYPE_INT & Object.class) != Object.class) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.Locale.class) != Object.class; }",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (raw == String.class) { return 0xDeserializer.u .util.Date.class; }",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.TYPE_INT & Object.class) != Object.class) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != Object.class && raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getClass() == Object.class)",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.TYPE_INT & Object.class) != 0) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.getName().startsWith(\" .lang.None.class)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.getName().startsWith(\" .lang/Class.class)) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) ? 0 : Object.class; }",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (raw == String.class) { return 0Lit.class; }",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (raw == String.class || raw == NoClass.class) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.TYPE_INT & Object.class) != 0) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (raw == String.class) { return 0x1 & (raw == 0 && raw.getName() == Object.class) != Object.class; }",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (raw == String.class) { return 0x1 & (raw == 0 0 && raw.isPrimitive == Object.class) ? 0 : Object.class; }",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) || raw.class; }",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.isPrimitive == Object.class) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.isPrimitive == Object.class) ? 0 : Object.class; }",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.None.class) != Object.class) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (raw == milliseconds || raw.isAssignableFrom(raw)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName().startsWith(\" .lang.JacksonStdImpl.class)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (raw == String.class) { return 0x1 & (raw) != 0 && raw.getName() == Object.class) != Object.class) {",
                "identical": false
            }
        ],
        "buggy_line": "if (raw == String.class || raw == Object.class) {",
        "fixed_line": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
    },
    "Bears-136": {
        "fixes": [
            {
                "k": 1,
                "patch": "result.writeShort(result.length() + buf.length());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "result.writeShort(result.size() + buf.length());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "result.writeShort(result.toBytes());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "result.writeShort(result.toString());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "result.writeShort(result + buf.length());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "result.writeShort(result.length() + buf.intValue());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "result.writeShort(result.class, buf.length() + length);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "result.writeShort(result.getName() + buf.length());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "result.writeShort(result.length() + buf.getClass());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "result.writeShort(result.getTime() + buf.length());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "result.writeShort(result.length() * result + buf.length());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "result.writeShort(result.with + buf.length());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "result.writeShort(result.size() + \" buf.length());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "result.writeShort(result.length() + buf.toString());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "result.writeByte(result.size() + buf.length());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "result.writeShort(result.length() * buf.size());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "result.writeShort(result.length() * 2 + buf.length());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "result.writeShort(result.size() + \"}\\\" + buf.length());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "result.writeShort(result.length() * 2);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "result.writeByte(result.getName() + buf.length());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "result.writeShort(result.size() + length);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "result.writeShort(result + \"}\\\" + buf.length());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "result.writeShort(result.length() + buf.size());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "result.writeShort(result + result.length());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "result.writeShort(result.class + 1, buf.length());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "result.writeShort(result.intValue() + buf.length());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "result.writeShort(result.class, buf.length() + result == buf.length());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "result.writeShort(result.format(buf)) + buf.length());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "result.writeShort(result == buf.length());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "result.writeShort(result.length() + 1 + buf.length());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "result.writeShort(result.size() + result.length());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "result.writeShort(result.class, buf.length() + buf.length());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "result.writeShort(result.class, buf.length() + 1, buf.length());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "result.writeShort(result.length() * result + buf.size());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "result.writeShort(result.size() + \"}\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "result.writeByte(result.intValue() + buf.length());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "result.writeShort(result.length() * buf.length());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "result.writeShort(result + \"}\\\" + buf.toBytes());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "result.writeShort(result.length() * 6 + buf.size());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "result.writeByte(result.toString());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "result.writeShort(result.html + buf.length());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "result.writeShort(result.length() + buf.toBytes());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "result.writeShort(result.width + 1, buf.length());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "result.writeShort(result.length() * 2 + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "result.writeShort(result.length() + buf.getBytes());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "result.writeShort(result.intValue() + \"}\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "result.writeShort(result.size() + 2 + buf.length());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "result.writeShort(result.toBytes() + buf.length());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "result.writeShort(result.html\" + buf.length());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "result.writeShort(result.size() + 1);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "result.writeShort(result.limit + buf.length());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "result.writeShort(result.length() + length);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "result.writeShort(result.length() + buf.height + \"]\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "result.writeShort(result.hashCode() + buf.length());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "result.writeShort(result.value + buf.length());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "result.writeByte(result.value + buf.length());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "result.writeShort(result.length() * 6 + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "result.writeByte(result.getName() + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "result.writeShort(result.handler + buf.length());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "result.writeShort(result.intValue() + 1 + buf.length());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "result.writeShort(result.toBytes() + buf.toString());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "result.writeShort(result.length() + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "result.writeShort(result.class, buf.length() + result);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "result.writeShort(result.size() + 2) + buf.length());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "result.writeShort(result + \"}\\\" + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "result.writeShort(buf.length() + buf.length());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "result.writeShort(result.MAX_VALUE + buf.length());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "result.writeShort(result + 1, buf.length());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "result.writeShort(result + \"}\\\" + buf.toString());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "result.writeShort(result.height + buf.toString());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "result.writeShort(result.length() + \" buf.size());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "result.writeShort(result.getName() + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "result.writeShort(buf.length() + 1, buf.length());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "result.writeShort(result.class.getName() + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "result.writeShort(result.length() * 2 + buf.size());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "result.writeShort(result.currBytes + buf.length());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "result.writeShort(result.intValue() + \"}\\\" + buf.length());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "result.writeShort(result.size() + 1, buf.length());",
                "identical": false
            },
            {
                "k": 79,
                "patch": "result.writeShort(result.length() + buf.value + length);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "result.writeShort(result.getItemCount() + buf.length());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "result.writeShort(result.length() * result + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "result.writeShort(result.getX() + buf.length());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "result.writeByte(result.with + buf.length());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "result.writeShort(result.length() + \" buf.length());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "result.writeShort(result + \" 2 + buf.length());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "result.writeShort(result.length + 1, buf.length());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "result.writeByte(result.format(buf)) + buf.length());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "result.writeShort(result.getTime() + buf.getClass());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "result.writeShort(result.length() + buf.width / 2));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "result.writeShort(result.format(buf)) + buf.getClass());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "result.writeShort(buf.length() + 2 + buf.length());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "result.writeShort(result.length() * 6 + buf.getClass());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "result.writeShort(result.class.getName() + buf.length());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "result.writeShort(result.length() * 6 + buf.length());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "result.writeShort(result.length() + \"}\\\" + buf.getClass());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "result.writeShort(result.format(buf)) + buf.getClass().getName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "result.writeShort(result.class, buf.length() + result == length);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "result.writeShort(result.x + buf.length());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "result.writeByte(result.toBytes());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "result.writeShort(result.getTime() + buf.toString());",
                "identical": false
            }
        ],
        "buggy_line": "result.writeShort(2 + 2 + 2 + buf.readableBytes()); // length",
        "fixed_line": "result.writeShort(2 + buf.readableBytes()); // length"
    },
    "Bears-123": {
        "fixes": [
            {
                "k": 1,
                "patch": "startNo = -1;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "startNoEvent = -1;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "startNoSideEffects = -1;",
                "identical": false
            },
            {
                "k": 4,
                "patch": "startNoIndex = -1;",
                "identical": false
            },
            {
                "k": 5,
                "patch": "startNo> curr = -1;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "startNoNull = -1;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "startNoId = -1;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "startNoDataIndex = -1;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "startNoMode = -1;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "startNoSideEffectIndex = -1;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "startNosubstring = -1;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "startNoChartIndex = -1;",
                "identical": false
            },
            {
                "k": 13,
                "patch": "startNoBasicIndex = -1;",
                "identical": false
            },
            {
                "k": 14,
                "patch": "startNo fnIndex = -1;",
                "identical": false
            },
            {
                "k": 15,
                "patch": "startNo colorEvent = -1;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "startNoCoordinateIndex = -1;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "startNo whitespace = -1;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "startNoabsIndex = -1;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "startNo CalendarIndex = -1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "startNoNoSideEffects = -1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "startNoPrefixIndex = -1;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "startNoetIndex = -1;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "startNorequireIndex = -1;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "startNo++] = -1;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "startNo hashIndex = -1;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "startNoInFirst = -1;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "startNoShadowIndex = -1;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "startNo> currState = -1;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "startNoClass = -1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "startNo> iNoSideEffects = -1;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "startNoOrEvent = -1;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "startNotoEvent = -1;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "startNoplotIndex = -1;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "startNoColorIndex = -1;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "startNo unchecked = -1;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "startNo starts = -1;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "startNo> e = -1;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "startNo>[] = -1;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "startNo CodeEvent = -1;",
                "identical": false
            },
            {
                "k": 40,
                "patch": "startNo VerticalIndex = -1;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "startNo LocalIndex = -1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "startNo(1 = -1;",
                "identical": false
            },
            {
                "k": 43,
                "patch": "startNoLocationIndex = -1;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "startNoNoEvent = -1;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "startNoASEvent = -1;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "startNoPointer = -1;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "startNouralIndex = -1;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "startNoassignIndex = -1;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "startNoliteralIndex = -1;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "startNo64 = -1;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "startNojsIndex = -1;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "startNoEr = -1;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "startNoCopyIndex = -1;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "startNoInvalidIndex = -1;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "startNo segmentIndex = -1;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "startNoindIndex = -1;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "startNolength = -1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "startNoownerIndex = -1;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "startNoFields = -1;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "startNo callsEvent = -1;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "startNoInIndex = -1;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "startNocEvent = -1;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "startNogap = -1;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "startNoR = -1;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "startNo> curr : -1;",
                "identical": false
            },
            {
                "k": 66,
                "patch": "startNo, = -1;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "startNo ClassLoaderIndex = -1;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "startNo(3, i = -1;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "startNofileIndex = -1;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "startNoOfWeekyear = -1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "startNoNumber = -1;",
                "identical": false
            },
            {
                "k": 72,
                "patch": "startNoCode = -1;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "startNoTYPE = -1;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "startNo> iNoEvent = -1;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "startNoStart = -1;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "startNo> iNoSideEffect = -1;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "startNo> i = -1;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "startNoOffset = -1;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "startNoSource = -1;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "startNo> iNoNull = -1;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "startNo(3, i;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "startNoOfYear = -1;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "startNo j = -1;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "startNoc = -1;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "startNo LONG = -1;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "startNoUUID = -1;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "startNo Title = -1;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "startNoInstant = -1;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "startNo reached = -1;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "startNo3 = -1;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "startNoOfWeek = -1;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "startNominimum = -1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "startNo during = -1;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "startNoTail = -1;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "startNo1 = -1;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "startNo> iNoId = -1;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "startNospot = -1;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "startNo> iNoToolTips = -1;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "startNoExclusive = -1;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "startNo. = -1;",
                "identical": false
            }
        ],
        "buggy_line": "if (deviceState.getMotionPosition() != null && startEventIndex == -1 && trips != deviceState.getMotionState()) { startEventIndex = i; startNoEventIndex = -1; } if (trips == deviceState.getMotionState()) { if (startNoEventIndex == -1) { startNoEventIndex = i; } else if (deviceState.getMotionPosition() == null) { startNoEventIndex = -1; }",
        "fixed_line": "if (startEventIndex == -1 && (trips != deviceState.getMotionState() && deviceState.getMotionPosition() != null || trips == deviceState.getMotionState() && event != null)) { startEventIndex = i; startNoEventIndex = -1; } else if (trips != deviceState.getMotionState() && startEventIndex != -1 && deviceState.getMotionPosition() == null && event == null) { startEventIndex = -1; } if (startNoEventIndex == -1 && (trips == deviceState.getMotionState() && deviceState.getMotionPosition() != null || trips != deviceState.getMotionState() && event != null)) { startNoEventIndex = i; } else if (startNoEventIndex != -1 && deviceState.getMotionPosition() == null && event == null) { startNoEventIndex = -1;"
    },
    "Bears-120": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (buf != null) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (buf.length() == 0) { return null; }",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (buf.length() == 0) { return this; }",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (buf.length() == 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (buf.length() == 0) { return null; } // default is",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (buf != null) { // could still be null",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (buf.length() == 0) { return NONE; }",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (buf != null) { return null; }",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if ( Day.readableBytes() == null) { return this; }",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (buf.length() == 0) { return Token.readable; }",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (no.length() == 0) { return this; }",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (buf == null) { return null; }",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return Check.readableBytes(buf, null, 0, buf.length) > 0) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (buf.length() == 0) { return Check; }",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (buf.length() == 0) { return BeanProperty.readable; }",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to be null",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return Check.readableBytes(buf, null, buf.length) > 0) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (buf.length() == 0) { return this; } // default is",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (buf.length() == 0) { return null; } // 12",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (buf.length() == 0) { return null; } // if we didn't need to be null",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (buf.length() == 0) { return Match.readable; }",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (buf.length() == 0) { return null; } // should never happen",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we\".equals(buf)) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (buf.length() == 0) { return Collections.readable; }",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (buf != null) { return Check.readable; }",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (buf.length() > 0) { return this; }",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (buf != null) { return this; }",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (buf.length() == 0) { return BeanProperty.readableBytes; }",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (buf.length() == 0) { return JsonNode.readable; }",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (buf == null) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return Check.readableBytes(buf, null, buf.length) > 0;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (buf.length() == 0) { returnBuilder.readable; }",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (buf.length() == 0) { return null; } // default",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to be null",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (buf == null) { return this; }",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (buf.length() == 0) { return MatchStrength.readable; }",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if ((access & Opcodes.ACC_STATIC) != 0) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (buf.length() == 0) { return null; } // Stupid eclipse...",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (buf.length() == 0) { return null; } // should never be null",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we didn't need to be null",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (buf.length() == 0) { return null; } // default.",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (buf != null) { return null; } // default is",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check when passing super",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return Check.readableBytes(buf, null, 0, buf.length);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to check",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (buf.length() == 0) { return builder.readable; }",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to check for out",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we're looking up front",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check for out",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to check when passing super",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return Check.readableBytesBytes(buf, null, buf.length) > 0) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check foru",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check when passing super.",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (buf.length() > 0) { return null; }",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (buf.length() == 0) { return null; } // not be null",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to check foru",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (res.length() == 0) { return null; }",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (buf.length() == 0) { return Annotation.readable; }",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (buf.length() == 0) { returncodes.readable; }",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check for now",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (buf.length() == 0) { return null; } // if we're looking up front",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check foroct",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check for this",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check for testing",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return Check.readableBytes(buf, null, 0, buf.length) > 0;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (buf != null) { // If we's not store 'buf' nulls but",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (buf.length() == 0) { return null; } // quarter't need to check for out.",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to check for this",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (buf.length() == 0) { return null; } // given.",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check for each",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (buf. minimumBytes == null) { return this; }",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to check for now",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (buf.length() == 0) { return null; } // default is final Check",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to check for testing",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (buf.length() == 0) { return String.readable; }",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to check foroct",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to check for out.",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (buf.length() == 0) { return null; } // if we't need to check when passing super.",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check for out.",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check for 11",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (buf.length() == 0) { return null; } // 12 if needed",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return Check.readableBytesBytes(buf, null, buf.length) > 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (buf.length() == 0) { return \"readable; }",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (buf != null) { // If we't need to be null",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (buf != null) { // If we's not store 'buf' nulls but nodes",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (res.length() == 0) { return this; }",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (buf.length() == 0) { return null; } // if weillisecond.",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (buf.length() == 0) { return null; } // quarter't need to check when passing super",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (buf.length() == 0) { return null; } // quarter't need to check for now",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check foropt",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (buf.length() == 0) { return null; } // if we didn't need to check when passing super",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (buf.length() == 0) { return null; } // if we didn't need to check foru",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (buf.length() == 0) { return null; } // if we didn't need to check for out",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (buf.length() == 0) { return null; } // quarter't need to be null",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (buf.length() == 0) { return null; } // quarter't need to check",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (buf.length() == 0) { return null; } // quarter't need to check for this",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (buf.length() == 0) { return null; } // 12 if we't need to check for \"",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (no.length() == 0) { return null; }",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (buf.length() == 0) { return null; } // getMaximum",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "// Skip Alive message while (buf.readable() && Character.isDigit(buf.getByte(buf.readerIndex()))) { buf.readByte(); }"
    },
    "Bears-22": {
        "fixes": [
            {
                "k": 1,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "throw new IllegalArgumentException(\"UnreferencedType: \"+_referencedType.getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 20,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 33,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType().getName());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType().getName());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType().getName());",
                "identical": false
            },
            {
                "k": 57,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 58,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType())) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType())) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType())) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType().getName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 74,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType().getName());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType())) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType())) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 80,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 82,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType().getName());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 86,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 87,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = refType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType())) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 92,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType().getName());",
                "identical": false
            },
            {
                "k": 95,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType = refType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 96,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType().getName());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 99,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType = referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "throw new IllegalArgumentException(\"UnreferencedTypeappend(String.valueOf(_referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType.referencedType())) {",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "@Override public JavaType getSuperClass() { if (_referencedType != null) { return _referencedType.getSuperClass(); } return super.getSuperClass(); }"
    },
    "Bears-98": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (parser.nextInt(v)) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser)) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (parser.nextInt(position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (position.nextInt(parser.nextInt(position), parser)) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (parser.nextInt(parser.nextInt(position))) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (parser.getSize() == 0) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (parser.nextInt(parser.nextInt(position)) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (position.nextInt(parser.nextInt(position))) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (parser.get(position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (position.nextInt(parser.next()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (parser.nextInt(parser.nextInt(position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (position.nextInt(parser.nextInt(position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (position.nextInt(parser.getUpperPosition() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (position.nextInt(parser.getSize() - 1, parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (position.nextInt(v)) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.class)) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (parser.contains(parser.nextInt(position), parser)) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (position.nextInt(parser.next) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (position.nextInt(parser.nextInt(position)) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (position.nextInt(parser.nextInt(parser.next()), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (parser.nextInt(parser.next()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (parser.get(position).nextInt) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (parser.nextInt(parser.next()) == false) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (parser.nextInt(parser.next) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (position.nextInt(parser.getError() - 1, parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (position.nextInt(parser.nextInt(position), parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (parser.contains(parser.nextInt(position)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.toString())) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (position.nextInt(parser.nextInt(v)) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (position.nextInt(parser.nextInt(input), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (position.nextInt(parser.contains(parser.next()), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (parser.insideFunction()) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (position.nextInt( parser)) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (position.nextInt(parser.nextInt(true)) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.nextInt(parser.class)) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (parser.nextInt(position) && parser.equals(parser.nextInt.class)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (position.nextInt(parser.nextInt(parser.next()));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (position.nextInt(parser.contains(parser.nextInt(position), parser)) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (position.nextInt(parser.nextInt(parser.nextInt(position), parser)) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.class)) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (position.nextInt(parser.toString())) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.()), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.toString())) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (parser.nextInt(parser.next(), position)) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.nextInt(parser.class)) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (position.nextInt(parser.nextInt(position), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (position.nextInt(parser.nextInt(position), parser.getY())) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (position.nextInt(parser.getPeriodType() - 2, parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.toString())) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (position.nextInt(parser.getprimitivePosition() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (position.nextInt(parser.getSize() - 2, parser) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.()), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (parser.nextInt(parser.nextInt(input), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (position.nextInt(parser.next(), parser)) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (parser.nextInt(parser.next())) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (position.nextInt(parser.nextInt(parser.getSize() - 1, parser.MAX_VALUE) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (position.nextInt(parser.next() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (position.nextInt(parser.getBackgroundPosition() == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (parser.nextInt(parser.next()) == parser) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (parser.nextInt(v) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (position.nextInt(parser.next(), position)) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (parser.nextInt(parser.getCurrentPosition() + 1, parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (position.nextInt(parser.getJSDocInfo(position), parser)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (position.nextInt(parser.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (position.nextInt(parser.contains(parser.next())) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.nextInt(parser.toString())) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.nextInt(parser.()), position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (position.nextInt(parser.nextInt(parser.nextInt(position))) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.nextInt(parser.class)) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (position.nextInt(parser.getSize() - 1, parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (parser.nextInt(parser.nextInt(v)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.getY())) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (position.nextInt(parser.get(v)) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (position.nextInt(parser.nextNode())) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (position.nextInt(parser.getJSDocInfo(position))) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (position.nextInt(parser.next())) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (parser.nextInt(parser.nextInt(position) == parser_CONSTRUCTOR) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (position.nextInt(parser.getSize() - parser)) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (parser.nextInt(code)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (parser.nextInt(parser.nextInt(true)) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (position.nextInt(parser.getBackgroundPosition() + 1);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (position.nextInt(parser.nextInt(code)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (parser.nextInt(parser.nextInt(position)));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.nextInt(parser.toString())) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (position.nextInt(parser.nextInt(position), parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (position.nextInt(parser.nextInt(position)));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (position.nextInt(parser.getCurrentPosition() + 1, parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (position.nextInt(parser.getError() - 1, position.getSize()) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (parser.nextInt(parser.MAX_VALUE)) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (position.nextInt(parser.nextInt(true));",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (parser.nextInt(parser.nextInt(position), parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (parser.nextInt(parser.hasNext()) && parser.equals(parser.nextInt.toString())) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (parser.contains(parser.nextInt(position))) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (position.nextInt(position) == parser.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.nextInt(parser.nextInt.class)) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (position.nextInt(parser.getSize() - 1, parser.MAX_VALUE)",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (position.nextInt(parser.getPadding())) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (position.nextInt(parser.getErrorIndex() - parser)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (position.nextInt(parser.hasNext()) && parser.equals(parser.nextInt(parser.next())) {",
                "identical": false
            }
        ],
        "buggy_line": "if (parser.hasNext(4)) {",
        "fixed_line": "if (parser.hasNext(5)) {"
    },
    "Bears-234": {
        "fixes": [
            {
                "k": 1,
                "patch": "",
                "identical": false
            },
            {
                "k": 2,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangle",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoauto",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 34,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleEdge =",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 36,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleEdge",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoMap",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 49,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangle Arrays",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoMap =",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry<",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoAlias",
                "identical": false
            },
            {
                "k": 56,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangle Arrays Arrays",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoGlobal",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangle =",
                "identical": false
            },
            {
                "k": 60,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangle Arrays =",
                "identical": false
            },
            {
                "k": 61,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleMinMinMin",
                "identical": false
            },
            {
                "k": 62,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleMinMin",
                "identical": false
            },
            {
                "k": 63,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleMinMinMinMin",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi",
                "identical": false
            },
            {
                "k": 65,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleMin",
                "identical": false
            },
            {
                "k": 66,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangle Arrays Arrays =",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoMember",
                "identical": false
            },
            {
                "k": 69,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleMinMinMinMinMin",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap =",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap =",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap =",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautounknown",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoauto left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left left",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap",
                "identical": false
            },
            {
                "k": 76,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangle == null",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap =",
                "identical": false
            },
            {
                "k": 78,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangle dy",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap =",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoAlias =",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap",
                "identical": false
            },
            {
                "k": 82,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleMinMinMinMinMinMin",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangle ==",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoauto bit",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap =",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap =",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi =",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi =",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi =",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi =",
                "identical": false
            },
            {
                "k": 95,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleHashSet",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi =",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Arrays.sortRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleRectangleHashSet =",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi =",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ancestor.addautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoautoEntry multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multi multiMap",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (debitedAccount.isDisabled() || creditedAccount.isDisabled()){ throw new IllegalStateException(\"Account disabled\"); }"
    },
    "Bears-19": {
        "fixes": [
            {
                "k": 1,
                "patch": "ignored = ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "ignored = ignorals.getIgnoredProperty(propName);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "ignored = ignorals.getIgnoredProperty(propertyName);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "ignored = ignorals.getIgnored().isIgnorable();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "ignored = ignorals.getIgnoredIgnored();",
                "identical": false
            },
            {
                "k": 6,
                "patch": "ignored = ignorals.getIgnored ? new HashSet<String>() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "ignored = ignorals.getIgnored ? new HashSet() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "ignored = ignorals.getIgnored ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "ignored = ignorals.getIgnoredProperty();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "ignored = ignorals.getIgnored ? ignored() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "ignored = builder.withIgnorals(ignorableProperties);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "ignored = ignorals.getIgnored ? new Boolean() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "ignored = builder.withIgnorals();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "ignored = ignorals.removeIgnored();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new HashSet<String>() : ignorals;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "ignored = builder.withIgnorals(ignorableProperties.getIgnored());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[ignoreAny));",
                "identical": false
            },
            {
                "k": 20,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(jp.getIgnoredIgnored) : ignorals;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[ignoreAny));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(jp.getIgnored) : ignorals;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "ignored = ignorals.addIgnored(prop.getName());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? ignorals : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(jp.getIgnoredRemovable) : ignorals;",
                "identical": false
            },
            {
                "k": 26,
                "patch": "ignored = ignorals.getIgnored ? new HashSet<String>() : ignorals.values();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[prop.size()]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "ignored = ignorals.getIgnored ? new Boolean() : ignorals;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "ignored = buf.getIgnoredProperty(propName);",
                "identical": false
            },
            {
                "k": 30,
                "patch": "ignored = builder.withIgnorals(isAny);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "ignored = ignorals.getIgnored().isIgnorals();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? ignorals : ignorals;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "ignored = ignorals.getIgnored().toArray(new String[ignoreAny);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(jp.getIgnoredRemovable) : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "ignored = ignorals.getIgnored ? new HashSet : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(propName) : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.values());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "ignored = ignorals.getIgnored ? new HashSet() : ignorals;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new Boolean() : ignorals;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "ignored = ignorals.getIgnored().toArray(new String[prop.size()]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(jp.getIgnored() : ignorals);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new HashSet<String>() : ignorals.values();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 46,
                "patch": "ignored = ignorals.getIgnoredProperty(ignorableProperties._Ignored ? new Boolean.TRUE : ignorals.toArray(new String[ignoreAny));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "ignored = ignorals.toArray(new String[ignoreAny);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.getIgnored());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "ignored = ignorals.getIgnoredPropertyNames();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new Boolean.TRUE : ignorals;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new HashSet() : ignorals.getIgnored());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals.toArray(new Integer(ignoreAny));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new HashSet() : ignorals.toArray(new String[ignoreAny));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(jp.getIgnoredIgnored) : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new Integer(ignoreAny));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "ignored = ignorals.getIgnored ? new HashSet<String>() : ignorals.values().toArray(new String[ignoreAny);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[ignoreAny);",
                "identical": false
            },
            {
                "k": 58,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[propName.size()]);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Boolean() : ignorals.getIgnored());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "ignored = buf.getIgnoredProperty(propertyName);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "ignored = ignorals.toArray(new String[ignoreAny));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new HashSet<String>() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorableProperties());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "ignored = builder.withIgnorals(ignoreAny);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[prop.size()]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(jp.getIgnored) : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "ignored = ignorals.getIgnored ? new HashSet<String>() : ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "ignored = ignorals.getIgnored ? new HashSet() : ignorals.toArray(new String[ignoreAny);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "ignored = ignorals.getIgnoredProperty(ignorableProperties._Ignored ? new HashSet() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new HashSet() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[propName));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getPropertyName());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[_ignoreS.size()]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(jp.getIgnoredStart() : ignorals);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "ignored = ignorals.getIgnored().toArray(new Integer(ignoreAny));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Boolean() : ignorals;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? ignored() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "ignored = ignorals.getIgnoredProperty(ignoreAny);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(jp.getIgnoredMethod() : ignorals);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "ignored =oc.getIgnoredProperty(propName);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new HashSet\" : ignorals;",
                "identical": false
            },
            {
                "k": 82,
                "patch": "ignored = ignorals.getIgnored ? new HashSet<String>() : ignorals.values().toArray(new Integer(ignoreAny));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "ignored = ignorals.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[_ignoreS.size()]);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "ignored = ignorals.getIgnoredProperty(prop).isIgnorable();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? ignorals : ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[ignoreMethodName.size()]);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new HashSet\" : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Integer(jp.TRUE) : ignorals;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "ignored = ignorals.getIgnoredProperty(\"is\", ignorals);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "ignored = ignorals.getIgnoredProperty(prop.getName());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[ignorableProps.size()]);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "ignored = ignorals.getIgnored ? new HashSet() : ignorals.toArray(new String[ignoreAny));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "ignored = ignorals.getIgnoredProperty(isIgnorals);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "ignored = ignorals.getIgnoredProperty(\"is\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[_ignoreAllUnknown);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[prop.array.size()]);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? new Boolean() : ignorals.getIgnored();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "ignored = ignorals.getIgnoredProperty(ctxt.getIgnored ? Boolean.TRUE : ignorals.toArray(new String[_ignoreForType.size()]);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "ignored = ignorals.getIgnoredProperty(\" .lang.\")) ? new HashSet<String>() : ignorals.getIgnored;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "ignored = ignorals.getIgnoredProperty(implName);",
                "identical": false
            }
        ],
        "buggy_line": "ignored = ignorals.getIgnored();",
        "fixed_line": "ignored = ignorals.findIgnoredForDeserialization();"
    },
    "Bears-223": {
        "fixes": [
            {
                "k": 1,
                "patch": "return new StdDelegatingConverter<Object>(mapType, dest.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return new StdDelegatingConverter<Object>(mapType.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, dest.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return new StdDelegatingConverter<Object>(mapType, dest.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return new StdDelegatingConverter<Object>(mapType, source.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, dest.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, source.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return new StdDelegatingConverter<Object>(mapType, destination.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return new StdDelegatingConverter<Object>(mapType, Context.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return new StdDelegatingDeserializer<Object>(sourceName, destination.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, destination.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return new StdDelegatingConverter<Object>(mapType.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return new StdDelegatingConverter<Object>(mapType, edge.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return new StdDelegatingDeserializer<Object>(sourceName, destination.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, context.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return new StdDelegatingConverter<Object>(mapType, dest.getRawClass());",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return dest.getRawClass() == source.getRawClass();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return new StdDelegatingConverter<Object>(mapType, context.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, Context.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return new StdDelegatingConverter<Object>(mapType, Type.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, edge.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return new StdDelegatingConverter<Object>(sourceName, destination.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return new StdDelegatingConverter<Object>(sourceName, destination.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return new StdDelegatingConverter<Object>(mapType, clone.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return new StdDelegatingConverter<Object>(mapType, beanDesc.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return new StdDelegatingSerializer<Object>(mapType, dest.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, dest.getRawClass(), t.getRawClass());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, dest.getRawClass(), destEntry.getRawClass());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return new StdDelegatingConverter<Object>(mapType, dest.getRawClass(), destEntry.getRawClass());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return new JsonMappingException.from(jp, ctxt.getAnnotationIntrospector().findType, destinationType));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return new StdDelegatingConverter<Object>(mapType, o.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return new StdDelegatingConverter<Object>(mapType, dest.getRawClass(), destDef.getRawClass());",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return new StdDelegatingSerializer<Object>(mapType, dest.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return new StdDelegatingConverter<Object>(mapType, dest.getRawClass(), t.getRawClass());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return new StdDelegatingConverter<Object>(mapType, Context.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return new Partial(source.mapType, destination.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return new StdDelegatingConverter<Object>(mapType, dest.getRawClass(), dest);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return new StdDelegatingDeserializer<Object>(sourceFile.mapType, destination.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return new StdDelegatingConverter<Object, Type>(mapType, dest.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "throw new JsonMappingException(\"Failed to narrow content type \" + dest.getRawClass().getName() + \" and \" + dest.value);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return ctxt.getConfig().getAnnotationIntrospector().findTypeResolver(JacksonStdType.class)[0];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, dest.getRawClass(), destDef.getRawClass());",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return new JsonMappingException.idFromValue(source.mapType.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return new StdDelegatingConverter<Object>(mapType, beanDesc.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return new JsonMappingException.from(_sourceClass, t.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return new JsonMappingException.idFromValue(source.mapType.getRawClass(), destEntry.getRawClass());",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return new StdDelegatingConverter<Object>(mapType.getRawClass(), destDef.getRawClass());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return new FunctionInfo(sourceName, destination.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return ctxt.getConfig().getAnnotationIntrospector().findTypeResolver(sourceName);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, dest.getRawClass(), destDef);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "throw new JsonMappingException(\"Failed to narrow content type \" + dest.getRawClass().getName() + \" and \" + dest.getRawClass());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return source.mapType.getRawClass() == source.getRawClass();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return new StdDelegatingConverter<Object>(mapType, source.getRawClass(), destDef.getRawClass());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return ctxt.getConfig().getAnnotationIntrospector().findTypeResolver(JacksonStdType.class) == Type.getRawClass();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return new StdDelegatingDeserializer<Object>( == null) ? \"null\" : source.mapType.getRawClass().getName();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return new FunctionInfo(sourceName, destination.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "throw new JsonMappingException(\"Failed to narrow content type \" + dest.getRawClass().getName() + \" and \" + dest.value.getClass().getName());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return new StdDelegatingDeserializer<Object>(getInfo.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType.getRawClass(), destDef.getRawClass());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, source.getRawClass(), destDef.getRawClass());",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return new StdDelegatingConverter<Object>(mapType, dest.getRawClass(), destDef);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return new StdDelegatingDeserializer<Object>( == null) ? \"null\" : source.mapType);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "throw new JsonMappingException(\"Failed to narrow content type \" + dest.getRawClass().getName() + \" and \" + destNode.getClass().getName());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return new JsonMappingException.idFromValue(source.mapType, destination.value, p.class));",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return new StdDelegatingDeserializer<Object>(getInfo.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "throw new JsonMappingException(\"Failed to narrow content type \" + dest.getRawClass().getName() + \" and \" + destNode.getRawClass());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, dest.getRawClass(), dest);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return new StdDelegatingDeserializer<Object>(AtomicLong.getRawClass(), dest.getRawClass());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return new StdDelegatingConverter<Object>(mapType, edge.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return ctxt.getConfig().getAnnotationIntrospector().findTypeResolver(JacksonStdType.class) == null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return ctxt.getConfig().getAnnotationIntrospector().findTypeResolver(ul>\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, Context.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return new StdDelegatingDeserializer<Object>(sourceName.getRawClass(), source.getRawClass());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return compiler.getCodingConvention().getAnnotation(JacksonStdType.class) != null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType.getRawClass(), destEntry.getRawClass());",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return new StdDelegatingDeserializer<Object>( == null) ? \"null\" : source.mapType.getRawClass();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return ctxt.getConfig().getAnnotationIntrospector().findTypeResolver(JacksonStdType.class) == Boolean.class;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "throw new JsonMappingException(\"Failed to narrow content type \" + dest.getRawClass().getName() + \" and \" + dest.getName());",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return ctxt.getConfig().getAnnotationIntrospector().findTypeResolver(ulian.class)[0];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return new StdDelegatingDeserializer<Object>(mapType, dest.getRawClass());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "throw new JsonMappingException(\"Failed to narrow content type \" + dest.getRawClass().getName() + \" and \" + destNode.getClass().getRawClass());",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return new JsonMappingException.from(jp, ctxt, destination.getAnnotationIntrospector());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return new StdDelegatingType.getRawClass().getName()+\") ? Boolean.FALSE : Boolean.getActualTypeArguments();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return new JsonMappingException.idFromValue(source.mapType, destination.class));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "throw new JsonMappingException(\"Failed to narrow content type \" + dest.getRawClass().getName() + \" and \" + dest.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return compiler.getRawClass() == source.getRawClass();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return ctxt.getConfig().getAnnotationIntrospector().findTypeResolver(JacksonStdType.class) != null;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return ctxt.getConfig().getAnnotationIntrospector().findTypeResolver(JacksonStdType.class) == Type.getRawClass());",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return new JsonMappingException.idFromValue(source.mapType.getRawClass(), dest);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return declaration.getRawClass() == source.getRawClass();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "throw new JsonMappingException(\"Failed to narrow content type \" + dest.getRawClass().getName() + \" and \" + dest.valueHandler.getClass().getName());",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return new StdDelegatingDeserializer<Object>( == null) ? \"null\" : source.mapTypeInfo.getRawClass();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return new StdDelegatingDeserializer<Object>( == null) ? \"null\" : source.mapTypeInfo.getRawClass().getName();",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return compiler.getCodingConvention().getAnnotation(JacksonStdType.class) == Boolean.class;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return new StdDelegatingDeserializer<Object>( == null) ? \"null\" : ctxt.getConfig().getAnnotationIntrospector());",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return new JsonMappingException.from(_sourceClass, t.getRawClass(), dest);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return context.getBeanInfo().getAnnotation(JacksonType.class) == Boolean.class;",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return new StdDelegatingDeserializer<Object>(sourceName, destination.getRawClass(), destResult);",
                "identical": false
            }
        ],
        "buggy_line": "import io.vavr.Value; import org.modelmapper.internal.typetools.TypeResolver; import org.modelmapper.spi.ConditionalConverter; import org.modelmapper.spi.MappingContext; import org.modelmapper.spi.PropertyInfo; /** * @author jstuecker * * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }",
        "fixed_line": "import io.vavr.Value; /** * @author jstuecker * <p> * Implementation of a {@link ConditionalConverter} for {@link Value} */ class ValueConverter implements ConditionalConverter<Value, Value> { @Override public MatchResult match(Class<?> sourceType, Class<?> destinationType) { if (Value.class.isAssignableFrom(sourceType) && Value.class.isAssignableFrom(destinationType)) { return MatchResult.FULL; } else { return MatchResult.NONE; } } @Override public Value convert(MappingContext<Value, Value> context) { if (context == null || context.getSource() == null) { return null; } final Value<?> source = (Value<?>) context.getSource(); final PropertyInfo destInfo = context.getMapping().getLastDestinationProperty(); final Class<?> destinationType = TypeResolver .resolveRawArgument(destInfo.getGenericType(), destInfo.getInitialType()); return source .map(src -> context.create(src, destinationType)) .map(ctx -> context.getMappingEngine().map(ctx)); }"
    },
    "Bears-151": {
        "fixes": [
            {
                "k": 1,
                "patch": "sub.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "sub.put(name, value);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "sub.put(name, new Enum.valueOf(value));",
                "identical": false
            },
            {
                "k": 4,
                "patch": "sub.put(name, String.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 5,
                "patch": "sub.put(name, new Enum.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "sub.put(name, subPrefix);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "sub.put(name, Node.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 8,
                "patch": "sub = String.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "sub.put(name, new Enum != null ? sub.valueOf(value.length() : \"\";",
                "identical": false
            },
            {
                "k": 10,
                "patch": "sub.put(name, sub.replace('/', '.'));",
                "identical": false
            },
            {
                "k": 11,
                "patch": "sub.put(name, sub.valueOf(value));",
                "identical": false
            },
            {
                "k": 12,
                "patch": "sub.put(name, sourceName, new Enum(value));",
                "identical": false
            },
            {
                "k": 13,
                "patch": "sub.put(name, String.valueOf(sub.class.getName()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": "subCtor.replace(sourceName, name.substring(value.length() - 1)));",
                "identical": false
            },
            {
                "k": 15,
                "patch": "sub.put(name, sourceName, new Enum.valueOf(value));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "sub.replace(sourceName, name.substring(value.length() - 1)));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "sub = String.valueOf(value.length());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "sub.replace(source.substring(value.length() - 1) + '/')));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "sub.replace(source.substring(value.length() - 1) + '/') + 1;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "sub = String.valueOf(value.length()) + 1;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "sub.put(name, Node.valueOf(value));",
                "identical": false
            },
            {
                "k": 22,
                "patch": "sub.put(name, new Enum != null ? sub.valueOf(value.length() - 1) : null;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "sub.replace(source.substring(value.length() - 1);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "sub.put(name, sourceName, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 25,
                "patch": "subProperties.put(name, new Enum.valueOf(value));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "sub.put(name, sub.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": "sub.put(name, new Enum == null ? \"\" : value.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "sub.replace(source.substring(value.length() - 1) + '/') = String.valueOf(sub.length()));",
                "identical": false
            },
            {
                "k": 29,
                "patch": "sub.replace(source.substring(value.length() - 1)));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "sub.put(name, new Enum == null ? \"\" : value.substring(sub.length()));",
                "identical": false
            },
            {
                "k": 31,
                "patch": "sub.put(name, Boolean.valueOf(value));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "sub.replace(source.substring(value.length() - 1) + \".\";",
                "identical": false
            },
            {
                "k": 33,
                "patch": "sub.replace(source.substring(value.length() - 1) + \".\"));",
                "identical": false
            },
            {
                "k": 34,
                "patch": "sub.put(name, new Enum[sub.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 35,
                "patch": "sub.put(name, sub.substring(1));",
                "identical": false
            },
            {
                "k": 36,
                "patch": "sub.put(name, sourceName, new Enum.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 37,
                "patch": "sub.put(name, sub.substring(value.length()))) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "sub.put(name, new String(value));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "sub.put(name, new Enum == null ? \"\" : value.trim()));",
                "identical": false
            },
            {
                "k": 40,
                "patch": "sub.replace(source.substring(value.length() - 1) + '/')];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "sub.replace(source.substring(value.length() - 1) + '/') - 1;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "sub.put(name, String.valueOf(sub.class));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "sub.put(name, sub.toString());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "sub.replace(source.substring(value.length() - 2, value.length()));",
                "identical": false
            },
            {
                "k": 45,
                "patch": "subtypes.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 46,
                "patch": "sub.replace(source.substring(value.length()));",
                "identical": false
            },
            {
                "k": 47,
                "patch": "sub.put(name, new Enum != null ? sub.valueOf(value.length()))) : \"\";",
                "identical": false
            },
            {
                "k": 48,
                "patch": "sub.put(name, isExtern);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "sub.put(name, new Enum == null ? \"\" : value.substring(0, sub.length()));",
                "identical": false
            },
            {
                "k": 50,
                "patch": "sub.value = String.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 51,
                "patch": "sub.put(name, new Enum != null ? sub.valueOf(value.substring(0, sub.length() - 1) : null;",
                "identical": false
            },
            {
                "k": 52,
                "patch": "sub.replace(source.substring(value.length() - 1, sub.length()));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "sub.containsKey(name) || sub.startsWith(value.replace('/', '.') + name + \"\\\"\" + sub.substring(sub.length()));",
                "identical": false
            },
            {
                "k": 54,
                "patch": "sub.put(name, new Enum != null ? sub.valueOf(value.length() - 1) : \"\";",
                "identical": false
            },
            {
                "k": 55,
                "patch": "sub.replace(source.substring(value.length() - 1) == 0;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "sub.replace(value, name.substring(sub.length() - 1)));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "sub.replace(source.substring(value.length() - 1) + 1;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "sub.put(name, new Enum != null ? sub.valueOf(value.length()))) : null;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "sub.replace(sourceName, new Enum.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "sub.put(name, sub.substring(value.length() - 1)));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "sub.put(name, Node.newString(value));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "sub.replace(source.substring(value.length() - 1) == end.length()));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "subCtor.put(name, sub.substring(value.length() - 1)));",
                "identical": false
            },
            {
                "k": 64,
                "patch": "sub.put(name, sourceName, String.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "sub.put(name, new Enum[sub.valueOf(value.length()]));",
                "identical": false
            },
            {
                "k": 66,
                "patch": "sub.replace(source.substring(value.length() - 1) + '/')\";",
                "identical": false
            },
            {
                "k": 67,
                "patch": "sub.put(name, sub.substring(value.length() - 1) + '/')));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "sub.replace(source.substring(value.length()), sub.length());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "sub.replace(source.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN));",
                "identical": false
            },
            {
                "k": 70,
                "patch": "sub.put(name, new Enum == null ? \"\" : value.valueOf(sub.length()));",
                "identical": false
            },
            {
                "k": 71,
                "patch": "sub.replace(sourceName, name.substring(value.length() - 1) + '/')));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "sub.put(name, sourceName, new Enum<?>>(value));",
                "identical": false
            },
            {
                "k": 73,
                "patch": "sub.put(name, new Enum.valueOf(value.length()))) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "sub.containsKey(name) || sub.startsWith(value.replace('/', '.') + name.substring(0, subroutines));",
                "identical": false
            },
            {
                "k": 75,
                "patch": "subProperties.put(name, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 76,
                "patch": "sub.replace(source.substring(value.length() - 1) + '/';",
                "identical": false
            },
            {
                "k": 77,
                "patch": "sub.put(name, new Enum<?>>(value));",
                "identical": false
            },
            {
                "k": 78,
                "patch": "sub.put(name, new Enum.valueOf(sub.length()));",
                "identical": false
            },
            {
                "k": 79,
                "patch": "subProperties.put(name, new Enum.valueOf(value.length()));",
                "identical": false
            },
            {
                "k": 80,
                "patch": "sub.put(name, new Enum<?, String.valueOf(value));",
                "identical": false
            },
            {
                "k": 81,
                "patch": "sub.replace(source.substring(value.length() - 1) + '0';",
                "identical": false
            },
            {
                "k": 82,
                "patch": "sub.put(name, new Enum == null ? \"\" : value.substring(value.length()));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "sub.put(name, new Enum != null ? sub.valueOf(value.length() : null), sub.substring(sub.length()));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "sub.put(name, new Enum != null ? sub.valueOf(value) : \"\";",
                "identical": false
            },
            {
                "k": 85,
                "patch": "sub.containsKey(name) || sub.startsWith(value.replace('/', '.') + name.substring(sub.length()));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "sub.put(name, new Enum(value));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "subProperties.put(name, sub.replace('/', '.'));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "sub.replace(source.substring(value, name.length()));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "sub.put(name, new Enum = String(value));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "sub.put(name, String.valueOf(sub.class.isAssignableFrom(value));",
                "identical": false
            },
            {
                "k": 91,
                "patch": "sub.put(name, sub.replace('/', '.');",
                "identical": false
            },
            {
                "k": 92,
                "patch": "sub.put(name, sub.substring(value.length() - 1);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "sub.put(name, new Enum != null ? sub.valueOf(value.length() - 1) : \"UTF-8\"));",
                "identical": false
            },
            {
                "k": 94,
                "patch": "sub.containsKey(name) || sub.startsWith(value.replace('/', '.') + name + \"]\")) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "sub.put(name, new Enum[value.length()], sub.charAt(sub.length()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "subObject.put(name, sub.valueOf(value));",
                "identical": false
            },
            {
                "k": 97,
                "patch": "sub.replace(source.substring(value.length() - 3));",
                "identical": false
            },
            {
                "k": 98,
                "patch": "sub.containsKey(name) || sub.startsWith(value.replace('/', '.') + name);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "sub.replace(sourceName, new Enum.valueOf(value));",
                "identical": false
            },
            {
                "k": 100,
                "patch": "sub.containsKey(name) || sub.startsWith(value.replace('/', '.') + name + suffix.substring(sub.length()));",
                "identical": false
            }
        ],
        "buggy_line": "if (value instanceof String) { subProperties.put(subName, String.valueOf(value)); }",
        "fixed_line": "subProperties.put(subName, String.valueOf(value));"
    },
    "Bears-9": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (jp.getCurrentToken() == JsonToken.START_OBJECT) { return JsonToken.START_ARRAY; }",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return JsonToken.VALUE_STRING, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (jp.getCurrentToken() == JsonToken.START_OBJECT) { return null; }",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (jp.getCurrentToken() == JsonToken.START_ARRAY) { return JsonToken.START_OBJECT; }",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, \"Unexpected property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return JsonToken.START_OBJECT, \"base property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return JsonToken.START_OBJECT, \"find property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return JsonToken.VALUE_STRING, \"Unexpected property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (jp.getCurrentToken() == JsonToken.START_ARRAY) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return JsonToken.VALUE_STRING, \"base property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (jp.getCurrentToken() == JsonToken.START_OBJECT) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return JsonToken.VALUE_STRING, null, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to this type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (isResolved(ctxt, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return JsonToken.VALUE_STRING,, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (isScalarValue(value, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to this type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (jp.getCurrentToken() == JsonToken.START_OBJECT) { return JsonToken.VALUE_NULL; }",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is null or '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for subtype of \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to be type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return JsonToken.VALUE_STRING, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, \"Function property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return JsonToken.START_OBJECT, \"base property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for id type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return JsonToken.VALUE_NULL;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return JsonToken.START_OBJECT, \"property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return JsonToken.START_OBJECT, \"find property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to be type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to this type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (jp.getCurrentToken() == JsonToken.START_OBJECT) { return JsonToken.VALUE_ARRAY; }",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for id type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to this type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to be type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to check type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is null or '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id (for id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_ARRAY-typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is null type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, \"Unexpected property '\"+_typePropertyName+\"' that is to be type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to be type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for id type id type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to this type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_name+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for subtype of \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to this type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is null or '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return result.deserializeTypedFromAny(jp, ctxt, result, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return JsonToken.VALUE_STRING, \"missing property '\"+_typePropertyName+\"' that is to this type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to check type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for id type id type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\", problem: \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to this type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return JsonToken.VALUE_STRING, \"missing property '\"+_typePropertyName+\"' that is to be type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_name+\"' that is null or '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_name+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (implClass.isTypedFrom(p, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to be type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to be type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for id type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' or '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to be type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to non-typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return JsonToken.VALUE_STRING, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to get an type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return JsonToken.VALUE_EMBEDDED_OBJECT, \"Unexpected property '\"+_typePropertyName+\"' that is to this type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (jp.getCurrentToken() == JsonToken.START_ARRAY) { return JsonToken.VALUE_OBJECT; }",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (t != JsonToken.START_OBJECT && ctxt.isScalarValue()) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_name+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to be type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_ARRAY-typePropertyName+\"' that is to contain type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is null)\");",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_name+\"' that is null or '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to check type id property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to check type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id property '\"+_typePropertyName+\"' that is to contain type id (for id type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id type id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to this type id (for id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return JsonToken.VALUE_STRING, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for id type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return JsonToken.START_OBJECT, \"missing property '\"+_typePropertyName+\"' that is to this type id (for property '\"+_typePropertyName+\"' that is to contain type id (for property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\");",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "} else if (p.getCurrentToken() == JsonToken.VALUE_STRING) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) { String str = p.getText().trim(); if (str.isEmpty()) { return null; } }"
    },
    "Bears-232": {
        "fixes": [
            {
                "k": 1,
                "patch": "l = (l << 8) | a[i];",
                "identical": false
            },
            {
                "k": 2,
                "patch": "l = (l << 8) | l[i];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "l = (l << 8) | c[i];",
                "identical": false
            },
            {
                "k": 4,
                "patch": "l = (l << 8) | b[i];",
                "identical": false
            },
            {
                "k": 5,
                "patch": "l = (l << 32 | a[i];",
                "identical": false
            },
            {
                "k": 6,
                "patch": "l = (l << 32 | l[i];",
                "identical": false
            },
            {
                "k": 7,
                "patch": "l = (l << r | a[i];",
                "identical": false
            },
            {
                "k": 8,
                "patch": "l = (l << 8) | the[i];",
                "identical": false
            },
            {
                "k": 9,
                "patch": "l = (l << 8) | (a[i];",
                "identical": false
            },
            {
                "k": 10,
                "patch": "l = (l << 8) | i];",
                "identical": false
            },
            {
                "k": 11,
                "patch": "l = (l << i) | a[i];",
                "identical": false
            },
            {
                "k": 12,
                "patch": "l = (l << power) | a[i];",
                "identical": false
            },
            {
                "k": 13,
                "patch": "l = (l << Integer.MAX_VALUE) - a[i];",
                "identical": false
            },
            {
                "k": 14,
                "patch": "l = (l << 6 | l[i];",
                "identical": false
            },
            {
                "k": 15,
                "patch": "l = (l << 32 | b[i];",
                "identical": false
            },
            {
                "k": 16,
                "patch": "l = (l << 8) | r[i];",
                "identical": false
            },
            {
                "k": 17,
                "patch": "l = (l << Integer.MAX_VALUE) | a[i];",
                "identical": false
            },
            {
                "k": 18,
                "patch": "l = (l << power) - a[i];",
                "identical": false
            },
            {
                "k": 19,
                "patch": "l = (l << 8 | a[i];",
                "identical": false
            },
            {
                "k": 20,
                "patch": "l = (l << a) | b[i];",
                "identical": false
            },
            {
                "k": 21,
                "patch": "l = (l << -1 | a[i];",
                "identical": false
            },
            {
                "k": 22,
                "patch": "l = (l << 16) | a[i];",
                "identical": false
            },
            {
                "k": 23,
                "patch": "l = (l << 6 | a[i];",
                "identical": false
            },
            {
                "k": 24,
                "patch": "l = (l << 8) | (32 - l[i];",
                "identical": false
            },
            {
                "k": 25,
                "patch": "l = (l << 18) | a[i];",
                "identical": false
            },
            {
                "k": 26,
                "patch": "l = (l << power) | b[i];",
                "identical": false
            },
            {
                "k": 27,
                "patch": "l = (l << a) | l[i];",
                "identical": false
            },
            {
                "k": 28,
                "patch": "l = (l << 8) | result[i];",
                "identical": false
            },
            {
                "k": 29,
                "patch": "l = (l << Integer.MAX_VALUE) | l[i];",
                "identical": false
            },
            {
                "k": 30,
                "patch": "l = (l << i) - a[i];",
                "identical": false
            },
            {
                "k": 31,
                "patch": "l = (l << 32 - l) | a[i];",
                "identical": false
            },
            {
                "k": 32,
                "patch": "l = (l << 18) - a[i];",
                "identical": false
            },
            {
                "k": 33,
                "patch": "l = (l << r) | a[i];",
                "identical": false
            },
            {
                "k": 34,
                "patch": "l = (l << 32 + l[i];",
                "identical": false
            },
            {
                "k": 35,
                "patch": "l = (l << 1000) | a[i];",
                "identical": false
            },
            {
                "k": 36,
                "patch": "l = (l << r | l[i];",
                "identical": false
            },
            {
                "k": 37,
                "patch": "l = (l << 20) | a[i];",
                "identical": false
            },
            {
                "k": 38,
                "patch": "l = (l << 6 | b[i];",
                "identical": false
            },
            {
                "k": 39,
                "patch": "l = (l << 8) | calculate[i];",
                "identical": false
            },
            {
                "k": 40,
                "patch": "l = (l << power) | l[i];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "l = (l << 2);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "l = (l << 8) | the current[i];",
                "identical": false
            },
            {
                "k": 43,
                "patch": "l = (l << k | l[i];",
                "identical": false
            },
            {
                "k": 44,
                "patch": "l = (l << 10 | a[i];",
                "identical": false
            },
            {
                "k": 45,
                "patch": "l = (l << 32 | c[i];",
                "identical": false
            },
            {
                "k": 46,
                "patch": "l = (l <<ToString) | a[i];",
                "identical": false
            },
            {
                "k": 47,
                "patch": "l = (l << 11 | a[i];",
                "identical": false
            },
            {
                "k": 48,
                "patch": "l = (l << 32 - l <<i];",
                "identical": false
            },
            {
                "k": 49,
                "patch": "l = (l <<Warning) | a[i];",
                "identical": false
            },
            {
                "k": 50,
                "patch": "l = (l << 0, a[i];",
                "identical": false
            },
            {
                "k": 51,
                "patch": "l = (l << 8) | 20[i];",
                "identical": false
            },
            {
                "k": 52,
                "patch": "l = (l << 1) | a[i];",
                "identical": false
            },
            {
                "k": 53,
                "patch": "l = (l << i) | l[i];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "l = (l << a) | a[i];",
                "identical": false
            },
            {
                "k": 55,
                "patch": "l = (l <<iation) | a[i];",
                "identical": false
            },
            {
                "k": 56,
                "patch": "l = (l << t | a[i];",
                "identical": false
            },
            {
                "k": 57,
                "patch": "l = (l << a) - l[i];",
                "identical": false
            },
            {
                "k": 58,
                "patch": "l = (l << 8) | 20];",
                "identical": false
            },
            {
                "k": 59,
                "patch": "l = (l << top) | a[i];",
                "identical": false
            },
            {
                "k": 60,
                "patch": "l = (l << pad | a[i];",
                "identical": false
            },
            {
                "k": 61,
                "patch": "l = (l << 1000) - a[i];",
                "identical": false
            },
            {
                "k": 62,
                "patch": "l = (l << 32 - l) & 0[i];",
                "identical": false
            },
            {
                "k": 63,
                "patch": "l = (l << a) - a[i];",
                "identical": false
            },
            {
                "k": 64,
                "patch": "l = (l <<>) a[i];",
                "identical": false
            },
            {
                "k": 65,
                "patch": "l = (l << 8) | width[i];",
                "identical": false
            },
            {
                "k": 66,
                "patch": "l = (l << 32 - l) | b[i];",
                "identical": false
            },
            {
                "k": 67,
                "patch": "l = (l << 16) | b[i];",
                "identical": false
            },
            {
                "k": 68,
                "patch": "l = (l << 8) | cw[i];",
                "identical": false
            },
            {
                "k": 69,
                "patch": "l = (l << 8) | w[i];",
                "identical": false
            },
            {
                "k": 70,
                "patch": "l = (l << 8) | h[i];",
                "identical": false
            },
            {
                "k": 71,
                "patch": "l = (l <<22 | a[i];",
                "identical": false
            },
            {
                "k": 72,
                "patch": "l = (l << 16) | l[i];",
                "identical": false
            },
            {
                "k": 73,
                "patch": "l = (l << 18 | a[i];",
                "identical": false
            },
            {
                "k": 74,
                "patch": "l = (l << props[i];",
                "identical": false
            },
            {
                "k": 75,
                "patch": "l = (l << extends | a[i];",
                "identical": false
            },
            {
                "k": 76,
                "patch": "l = (l << 28 | a[i];",
                "identical": false
            },
            {
                "k": 77,
                "patch": "l = (l << 8) | two[i];",
                "identical": false
            },
            {
                "k": 78,
                "patch": "l = (l << 8) | (word[i];",
                "identical": false
            },
            {
                "k": 79,
                "patch": "l = (l << 32 - l[i];",
                "identical": false
            },
            {
                "k": 80,
                "patch": "l = (l << 8) | (l << i];",
                "identical": false
            },
            {
                "k": 81,
                "patch": "l = (l << 32 | i];",
                "identical": false
            },
            {
                "k": 82,
                "patch": "l = (l <<Trans | a[i];",
                "identical": false
            },
            {
                "k": 83,
                "patch": "l = (l << 32 - a[i];",
                "identical": false
            },
            {
                "k": 84,
                "patch": "l = (l << k | a[i];",
                "identical": false
            },
            {
                "k": 85,
                "patch": "l = (l << {\" | a[i];",
                "identical": false
            },
            {
                "k": 86,
                "patch": "l = (l << 3 | a[i];",
                "identical": false
            },
            {
                "k": 87,
                "patch": "l = (l << 9 | a[i];",
                "identical": false
            },
            {
                "k": 88,
                "patch": "l = (l << pad | l[i];",
                "identical": false
            },
            {
                "k": 89,
                "patch": "l = (l << r | b[i];",
                "identical": false
            },
            {
                "k": 90,
                "patch": "l = (l << 8) |At[i];",
                "identical": false
            },
            {
                "k": 91,
                "patch": "l = (l << 8) | an[i];",
                "identical": false
            },
            {
                "k": 92,
                "patch": "l = (l << 8) | local[i];",
                "identical": false
            },
            {
                "k": 93,
                "patch": "l = (l << 8) | static[i];",
                "identical": false
            },
            {
                "k": 94,
                "patch": "l = (l << 12 | a[i];",
                "identical": false
            },
            {
                "k": 95,
                "patch": "l = (l << 8) |ized[i];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "l = (l << Integer.MAX_VALUE) + l[i];",
                "identical": false
            },
            {
                "k": 97,
                "patch": "l = (l << 8) | if[i];",
                "identical": false
            },
            {
                "k": 98,
                "patch": "l = (l << 8) | to[i];",
                "identical": false
            },
            {
                "k": 99,
                "patch": "l = (l << 8) | s[i];",
                "identical": false
            },
            {
                "k": 100,
                "patch": "l = (l << 8) | (l[i];",
                "identical": false
            }
        ],
        "buggy_line": "l = (l << 8) | a[i];",
        "fixed_line": "l = (l << 8) | a[i] & 0xFF;"
    },
    "Bears-138": {
        "fixes": [
            {
                "k": 1,
                "patch": "Keys[i] = readUTF8(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 2,
                "patch": "long[] buf = new long[readUnsignedByte()];",
                "identical": false
            },
            {
                "k": 3,
                "patch": "long time = readUnsignedShort(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "long c > 0 ? buf.readUnsignedByte() : in.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "long time = readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "long time = readUTF8Info(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 7,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedByte() : 0;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "buf.append(new String(buf, off, len));",
                "identical": false
            },
            {
                "k": 9,
                "patch": "long time = readUnsignedShort(buf, off, tmplength).add(buf.length());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "long time = readUTF8(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "long c > 0 ? buf.readUnsignedShort() : in.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "long c = buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "long time = readUnsignedByte(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "long c > 0 ? buf.readUnsignedByte() : in.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedByte() : in.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "long time = readUnsignedShort(buf, off, tmplength).add(buf.length));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "accum.append(buf, off, tmplength).add(buf.class));",
                "identical": false
            },
            {
                "k": 18,
                "patch": "long c = readUnsignedByte() ? buf.readUnsignedByte() : in.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedByte() : in.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedByte() : in.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "long c > 0 ? buf.readUnsignedShort() : in.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "Keys[i] = readUnsignedShort(buf, off, buf.length());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "Keys[i] = readUnsignedByte(buf, off, buf.length());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedShort() : 0;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "cc = readUnsignedShort(buf, off, tmplength).add(buf.length());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "long time = readUnsignedShort(buf, off, buf.length());",
                "identical": false
            },
            {
                "k": 27,
                "patch": "buf.append(buf, off, tmplength).add(buf.class));",
                "identical": false
            },
            {
                "k": 28,
                "patch": "long time = readUnsignedShort(buf, off, tmplength).add(buf.length);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "long c = readUnsignedShort(buf, off, tmplength).add(buf.length());",
                "identical": false
            },
            {
                "k": 30,
                "patch": "cc = readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "long time = (readUnsignedByte() << 8) | buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedShort() : in.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "long time = readUnsignedByte() ? buf.length() : 0;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedByte() :ref.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedByte() : in.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "cc = readUnsignedByte(buf, off, tmplength).add(buf.length());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "long time = readUnsignedShort(buf, off, tmplength).add(buf);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "long time = readUnsignedByte() ? buf.getLineno() : 0;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "Keys[i] = readUTF8(buf, off, buf.length());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "long[] buf = new long[readUnsignedShort()];",
                "identical": false
            },
            {
                "k": 41,
                "patch": "long c = readUnsignedByte() ? buf.readUnsignedByte() : in.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "accum.append(buf, off, tmplength).add(buf.length));",
                "identical": false
            },
            {
                "k": 43,
                "patch": "long buf = readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "long time = readUTF8(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "long time = readUnsignedShort(buf,cc);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedShort() : in.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedShort() : in.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 48,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedByte() : 5);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "long time = readClass(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 50,
                "patch": "Shapes[i] = buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "long time = readUnsignedShort(buf, off, tmplength).add(buf.class);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "long time = readUnsignedByte() ? buf.getTarget() : 0;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "long[] buf = new long[buf.length()];",
                "identical": false
            },
            {
                "k": 54,
                "patch": "cc = readUnsignedShort(buf, off, tmplength).add(buf.length));",
                "identical": false
            },
            {
                "k": 55,
                "patch": "long c = readUnsignedByte() ? buf.readUnsignedByte() :ref.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "long time = readUnsignedByte() ? buf.getTarget() : in.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "binaryData = readUnsignedByte(buf, off, tmplength).add(buf.length));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedByte() : 0, buf.length;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "Keys[i] = readClass(buf, off, buf.length());",
                "identical": false
            },
            {
                "k": 60,
                "patch": "long c = readUnsignedByte() ? buf.readUnsignedByte() : 0;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "long gs = readUnsignedShort(buf, off, tmplength).add(buf.length());",
                "identical": false
            },
            {
                "k": 62,
                "patch": "binaryData = readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "long c = readUnsignedByte();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "cc = readUnsignedByte(buf, off, tmplength).add(buf.length));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "long time = readUnsignedShort(buf, off, tmplength);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "binaryData = readUnsignedByte(buf, off, tmplength).add(buf.length());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "long time = readUnsignedByte() ? buf.getShape() : 0;",
                "identical": false
            },
            {
                "k": 68,
                "patch": "long c = readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedByte() :final byte.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "Keys[i] = readClass(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 71,
                "patch": "date.addUnsignedShort(buf, off, tmplength).add(buf.length));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "accum.append(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "long c > 0 ? buf.readUnsignedShort() :ref.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "long buf = readUnsignedShort(buf, off, tmplength).add(buf.length());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedShort() : in.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "buf.append(buf, off, tmplength).add(buf.length));",
                "identical": false
            },
            {
                "k": 77,
                "patch": "cc = readUnsignedShort(buf, off, tmplength).add(buf.length);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "long time = readUnsignedShort(buf, 0, buf.length);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedByte() : 0, buf.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedByte() : 0, buf.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedByte() :duration.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "binaryData = readUnsignedByte(buf, 0, buf.length());",
                "identical": false
            },
            {
                "k": 83,
                "patch": "cc = readUnsignedShort(buf, off, len);",
                "identical": false
            },
            {
                "k": 84,
                "patch": "Keys[i] = readUnsignedByte(buf, off, len);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "date.addUnsignedShort(buf, off, tmplength).add(buf.class));",
                "identical": false
            },
            {
                "k": 86,
                "patch": "Keys[i] = readClass(buf, off, buf.length() - 1);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedByte() :oct.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 88,
                "patch": "buf.setLength(i, readUTF8));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "long time = readUnsignedShort(buf, off, tmpl() - buf);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedByte() : 5);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "long c = in.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "Keys[i] = readUnsignedShort(buf, off, buf.length() - 1));",
                "identical": false
            },
            {
                "k": 93,
                "patch": "Keys[i] = readUTF8(buf, off, buf.length() - 1);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedByte() :ref.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "long time = readUnsignedShort(buf, off, tmplength).add(buf.class));",
                "identical": false
            },
            {
                "k": 96,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedByte() :ref.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "Keys[i] = readUnsignedByte(buf, off, buf.length() - 1);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedByte() :final byte.readUnsignedByte();",
                "identical": false
            },
            {
                "k": 99,
                "patch": "long time = readUnsignedByte() ? buf.readUnsignedByte() :final byte.readUnsignedShort();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "Keys[i] = readUTF8() ? buf.readUnsignedByte() :final byteBuilder.readUnsignedByte();",
                "identical": false
            }
        ],
        "buggy_line": "int mnc = buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(mcc, mnc, lac, cid, rssi));",
        "fixed_line": "int mnc = BitUtil.check(mcc, 15) ? buf.readUnsignedShort() : buf.readUnsignedByte(); Network network = new Network(); for (int i = 0; i < 7; i++) { int lac = longFormat ? buf.readInt() : buf.readUnsignedShort(); int cid = longFormat ? (int) buf.readLong() : buf.readUnsignedMedium(); int rssi = -buf.readUnsignedByte(); if (lac > 0) { network.addCellTower(CellTower.from(BitUtil.to(mcc, 15), mnc, lac, cid, rssi));"
    },
    "Bears-184": {
        "fixes": [
            {
                "k": 1,
                "patch": ".filter(attributeType.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".filter(it.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".filter(attributeType).getName().equals(name);",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".filter(attributeCount).getName().equals(name));",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".util.ArrayList().equals(attributeType.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".filter(attributeType.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".filter(attributeType).getName().equals(name));",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".filter(attribute.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".filter(name);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".toJavaType().getName().equals(attributeType.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".util.ArrayList().equals(attributeType.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".filter(attributeCount).getName().equals(name);",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".filter(attributeType.getJavaType().getRawClass());",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".filter(attributeType.getJavaType().getRawClass().getName());",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".filter(keyType.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".getType().equals(attributeType.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".filter(attributeType).getName());",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".filter(name).getName().equals(attributeType.getName()));",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".toJavaType().getName().equals(attributeType.getName());",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".filter(name).getName().equals(this.getClass().getName()));",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".findJavaType(String.class).getName());",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".filter(name).equals(attributeType.getRawClass().getName()));",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".util.ArrayList().equals(attributeType.getSimpleName());",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".filter(attributeType.getRawType().getName());",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".filter(it.get().getName());",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".filter( window.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".filter(attributeType.getSimpleName()).equals(name));",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".filter(it.getJavaType().getRawClass().getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".filter(name).getName().equals(attributeType.getRawClass().getName()));",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".filter(attribute.getJavaType().getRawClass().getName());",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".util.ArrayList().equals(attributeType.getEnumClass().getName());",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".filter(name).equals(attributeType.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".filter(attributeType).getSimpleName()).equals(name);",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".filter(it.getDeclaringClass().getName());",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".findJavaType(String.class).getName().equals(name));",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".toJavaType().getName().equals(attributeType.getRawClass());",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".equals(attributeType.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".filter(it.getJavaType().getRawType().getName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".filter(it.getJavaType().getRawClass());",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".filter(attribute.getJavaType().getRawType().getName());",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".util.ArrayList().equals(attributeType.getEnumType().getName());",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".toJavaType().getName().equals(attributeType.getSimpleName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".filter(attributeType).getJavaType().getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".filter(attributeType.getLESSourceType().getName());",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".findJavaType(String.class).getName().equals(name);",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".util.ArrayList().equals(attributeType.getLevelType().getName());",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".filter(attributeType).getName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".filter(name).getName().equals(this.getClass().getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".util.ArrayList().equals(attributeType.getName());",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".filter(attributeType.getJavaType().getRawType().getName());",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".filter(attributeType.getDescriptor().getName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".getType().equals(attributeType.getSimpleName());",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".filter(attributeType.getComponentType().getName());",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".toJavaType().getName().equals(attributeType.getRawClass())));",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".entry.getName().equals(attributeType.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".filter(name).getName().equals(attributeType.getRawClass()));",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".util.ArrayList().equals(attributeType.getDescriptor().getName());",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".filter( chartType.getJavaType().getName());",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".filter(attribute.getJavaType().getRawClass());",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".util.ArrayList().equals(attributeType.get shapeType().getName());",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".toJavaType().getName().equals(attributeType.getSimpleName()));",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".filter(delegates).getName().equals(name);",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".filter(attributeType).getName() + \".\" + \": \" + attribute.getClass().getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".getJavaType().getName().equals(attributeType.getName());",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".filter(it.getDescriptor().getName());",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".getJavaType().getName().equals(attributeType.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".filter(name).getName().equals(this.getSimpleName()));",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".util.ArrayList().equals(attributeType.getOfDay().getSimpleName());",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".findJavaType(String.class), attributeType(value));",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".getJavaType().getName().equals(name);",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".util.ArrayList().equals(attributeType.getComponentType().getName());",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".filter(attributeType).getSimpleName());",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".findJavaType(String.class), attributeToJavaType(value));",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".toJavaType().getName().equals(attributeType.getRawClass().getName())));",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".filter(name).getName().equals(\"\")) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".findJavaType(String.class).getName().equals(this.getSimpleName()));",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".findJavaType(String.class).getName().equals(this.getClass().getName()));",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".util.JavaType(attributeType.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".filter(attributeCount).getName());",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".findJavaType(String.class).getName().equals(attributeType));",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".filter(attributeType.getReturnType().getName());",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".filter(attributeType.getLESSourceFile().getName());",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".toJavaType().getName().equals(attributeType.getRawClass().getName()));",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".toJavaType().getName().equals(attributeType.getRawClass().getName())) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".equals(attributeType.getJavaType().getRawClass());",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".filter(name).getName().equals(this.getName()));",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".util.ArrayList().equals(attributeType.getHelper().getName());",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".toJavaType().getName().equals(className);",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".filter(name).equals(methodName);",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".getJavaType().getName().equals(attributeType.getRawClass());",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".filter(attributeType).getSimpleName().equals(name);",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".findJavaType(String.class).getName().equals(this.getName()));",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".equals(attributeType.getJavaType().getRawClass().getName());",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".filter(attributeType.getMember());",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".filter(name).getName().equals(this.generator.getSimpleName()));",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".toJavaType().getName().equals(name);",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".filter(name).getName());",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".filter(attributeType).getName() + \".\" + \": \" + attributeType.getName());",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".filter(route).getName().equals(this.getSimpleName()));",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".filter(attributeType).getSimpleName().equals(name));",
                "identical": false
            }
        ],
        "buggy_line": ".filter(it -> it.getJavaType().equals(entity)) //",
        "fixed_line": ".filter(it -> entity.equals(it.getJavaType())) //"
    },
    "Bears-139": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (position >= 0 && position <= data.length) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (position.length() > 0) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (position == 0 && position == null || position.length() == 0) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (position == 0) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (position == 0 && position == null) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (position == 0 && position == data.length) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (position.length() > 10) {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (position == 1) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (position == 0 && position == null || position.length() > 0) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (position == 0 && position == char.length()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (position == 0 && position == Object.class) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (position == 0 && position == length) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (position >= 0 && position <= data[0].length) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (position >= 0 && position <= data[5]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (position == 0 && position.getVisible() == data.length) {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (position >= 0 && position <= data[0].length()) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (position == 0 && position == null || position.length() < 2) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (position <= 0) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (position >= 0 && position <= data[3]) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (position.length() > 0 && position <= data.getSize()) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (position == 0 && position.getSize() == 2) {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (position.length() > 0 && position <= data.length) {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (position >= 0 && position <= data[5') {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (position >= 0 && position <= dataArea.length) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (position == 0 && position == null || position.length() == 2) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (position >= Integer.MIN_VALUE && position <= data.length) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (position >= 1 && position <= data[5') {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (position.length() > 0 && position <= data.length - 1) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (position == 0 && position == 0) {",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (position == 0 && position ==Values.length()) {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (position == 0 && position == source.length()) {",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (position == 0 && position == char.length() - 1) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (position == 0 && position.getTokenList().size() == 0) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (position >= 0 && position <= data[0].getSize()) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (position == 0 && position == true) {",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (position == 0 && position.getTokenList().size() > 0) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (position >= 0 && position <= datapoint.length) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (position.length() > 0 && position <= data.length()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (position <= 0 && position >= data.length) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (position == 0 && position == RectangleEdge.BOLD) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (position == 0 && position == Boolean.FALSE) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (position == 0 && position.get[5Type() == Object.class) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (position.length() > 3) {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (position == 0 && position.getVisible() == 2) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (position >= 1 && position <= data.length) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (position >= Integer.MIN_VALUE && position <= data[0].length) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (position >= 0 && position <= data[0], values.length) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (position == 0 && position.getAngleStart() == null) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (position == 0 && position.get[5().length() > 0) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (position == 0 && position == RectangleInsets.BOLD) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (position == 0 && position.getSize() == 0) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (position == 0 && position.getAngleStart() == Object.class) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (position == 0 && position.getAngleStart() == data.length()) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (position == 0 && position == null || position.length == 0) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (position == 0 && position == char.length() > 0) {",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (position >= Integer.MIN_VALUE && position <= data[3]) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (position.length() == 0 && position == 0) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (position >= 0 && position <= data[5 || position.length() > 0) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (position == 0 && position.getFirstChild() == Object.class) {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (position >= Integer.MIN_VALUE && position <= data.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (position == 0 && position.getChildCount() > 0) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (position.length() > 2) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (position == 0 && position.getAngleStart() == Integer.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (position >= 0 && position <= 5 && position < data.length) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (position == 0 && position.getFirstChild() == data.length) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (position.length() > 0 && position position <= data.getSize()) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (position == 0 && position == text.length()) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (position == 0 && position == Character.MAX_VALUE) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (position.length() > 0 && position <= dataArea.length()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (position == 0 && position == Boolean.TYPE) {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (position == 0 && position.getLineno() == data.length) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (position >= 0 && position <= data[5 || position position < 2) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (position >= Integer.MIN_VALUE && position <= data[0].length()) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (position == 0 && position.getAngleStart().compareTo(data.length())) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (position >= 1 && position <= data[0].length()) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (position == 0 && position == Hour.length()) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (position == 0 && position.getTokenList().size() == 2) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (position == 0 && position == Character.TYPE) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (position >= 0 && position <= data[5 || position.length < 2) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (position.length() == 0 && position == data.length) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (position >= 0 && position <= data[0].toString()) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (position.length() > 0 && position <= data[5]);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (position == 0 && position == RectangleEdge.BOTTOM) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (position == 0 && position.getAngleStart().size() > 0) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (position >= 1 && position <= data[3]) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (position >= 1 && position <= data[0].length) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (position >= 0 && position <= data.length()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (position == 0 && position >= data.length) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (position == 0 && position == Calendar.TYPE) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (position.length() > 0 && position <= data[3]) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (position.length() > 0 && position <= data[5') {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (position == 0 && position.get[5Types() == null) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (position == 0 && position.getLineno() < data.length) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (position.length() > 0 && position <= data.getMillisecondOfMinute()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (position == 0 && position.getBinaryCount() > 0) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (position >= 0 && position <= data[5 || position position < data.length) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (position >= 0 && position <= data[1].length) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (position == 0 && position == source.length() > 0) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (position == 0 && position.getTokenList().length() > 0) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (position == 0 && position.getLineno() == 2) {",
                "identical": false
            }
        ],
        "buggy_line": "if (!started) {",
        "fixed_line": "if (data.length > 2) {"
    },
    "Bears-108": {
        "fixes": [
            {
                "k": 1,
                "patch": ".number(\" .util.ArrayList\").first();",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".number(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".number(\" .util.ArrayList\";",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".numberFormatter.withParseType( .util.Date.class);",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".number(\" .util.Date.NaN\").first();",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".numberFormatter.withParseType( .util.Date.valueOf(\"dd\"));",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".numberFormatter.withParseType(Number.class);",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".numberFormatter.withParseType(Object.class);",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".number(\" .util.ArrayList(\"dd MMMMoment.Number\").first();",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".multiply(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".numberFormatter.withParseType( .util.ArrayList.class);",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".number(\" .util.ArrayListArrayList\").first();",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".number(\" .util.ArrayListArrayList\");",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".number(\" .awt.Number\").first();",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".number(\"mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 18,
                "patch": ".number(\"Parse failed:mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".number(\" .util.Date\").first();",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".number(\" .util.ArrayList\").\").first();",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".number(\" .util.ArrayList(\"dd\").first();",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".number(\"dd:mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").printprint(\"dd\");",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").first();",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".number(\" .util.ArrayList(\"dd MMM \" + jdialLayer.Number().toString());",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".number(\" .io.Number\").first();",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".number(\" .lang.Number\").first();",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".number(\"dd MMM \" + jd.toString().substring(1));",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".multiply(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".numberFormatter.withParseType( .util.Date.valueOf(dd0));",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".number(\" .util.Date.NaN:mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".number(\"dd MMMMoment.Number\").first();",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".number(\" .util.Date.valueOf(\"dd\");",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").printprint(\"dd\");",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").print();",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").printprint.\");",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".number(\" .util.ArrayList(\"dd MMM \" + jd.Number().toString());",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".numberFormatter.withParseType(iNumber.class);",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".multiply(\" .util.ArrayList\").first();",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".numberFormatter.withParseType(ii).toString();",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".number(\"dd:mm:ss.SSS\").print(new JLabel(\"number\"));",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".number(\"dd Mmm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".multiply(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").printprint(\"dd\");",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".numberFormatter.withParseType(i);",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").first:mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".number(\"Parse failed:mm:ss.toString(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".numberFormatter.withParseType( .util.Date.valueOf(number.class));",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").printprint(\"number\");",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".number(\" .util.ArrayList(\"dd MMM \" + jdialLayer.toString().substring(1));",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".numberFormatter.withParseType( .util.ArrayList.BOTTOM_DECIMAL);",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").first:mm:ss.SSS\").printprint(\"dd\");",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".number(\" .util.ArrayList\").first(\"dd\");",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").printprint(new JLabel(\"number\"));",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").printprint(GregorianCalendar.class);",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").join();",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").print();",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".number(\" .util.Date.valueOf(dd.toString().floatValue() + \"yyyy\"));",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".numberFormatter.withParseType( .util.ArrayList.Number(\"dd\"));",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".number(\" .util.ArrayList\").first:mm\");",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").print(new JLabel(\"number\"));",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".numberMap.put(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".number(\" .util.Date\")};",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").print.\");",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".multiply(\" .util.ArrayList\";",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").printprintprint(\"dd\");",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".number(\"mm:ss.SSS\").printprint(\" .util.Date\");",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").join();",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".number(\" .util.ArrayList\").first:mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".number(\" .util.Number\").first();",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".number(\" .util.Date.valueOf(dd.toString().floatValue() + \"\\n\");",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".number(\" .util.Date.valueOf(dd.toString().trim()));",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").print(\"dd\");",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".multiply(\" .util.ArrayList(\"dd MMMMoment.Number\").first();",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".number(\" .util.Date.NaN\"));",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".number(\" accepted:mm:ss.SSS\").first();",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".numberFormatter.withParseType( .util.Date.valueOf(number));",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".numberFormatter.withParseType()(dd.floatValue() + \"yyyy\"));",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\"));",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".number(\" .util.Date.valueOf(dddd)(d.floatValue() + \"yyyy\"));",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".numberFormatter.withParseType( .util.Date.valueOf(dd.class));",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").printprint(\" .util.Date\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").printprint(\" .util.Date\");",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".STR.add(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".numberFormatter.withParseType( .util.Date.valueOf(dd()));",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".number(\" .util.ArrayList(\"dd MMM yyyy\");",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").print(ddFile.number\"));",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").\").first();",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\");",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").\").first();",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".number(\" .util.ArrayList(\"dd\").first:mm:ss.SSS\").printprintnumber\");",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\"));",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".number(-dd.getDenominator()).toString();",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").printprint(\"number\");",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".number(\"dd MMM \" + jd.toString().trim());",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".number(\" .util.Date.valueOf(\"dd\").first:mm:ss.SSS\"));",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".number(\" .util.ArrayList\").print.\");",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").es\");",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").print(\"dd\");",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".number(\" .util.ArrayList(\"dd:mm:ss.SSS\").printprint(\" .util.ArrayList\");",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".number(\" .util.ArrayList number\").first();",
                "identical": false
            }
        ],
        "buggy_line": ".number(\"(dd)(dd)(dd):\") // time (hhmmss) .number(\"(-?d+.d+):\") // longitude .number(\"(-?d+.d+):\") // latitude .number(\"(d+.?d*):\") // speed .number(\"(?:NAN|(d+.?d*)):\") // accuracy .number(\"(?:NAN|(d+.?d*)):\") // course .number(\"(?:NAN|(d+.?d*))\") // altitude",
        "fixed_line": ".number(\"(dd)(dd)(dd)\") // time (hhmmss) .number(\":(-?d+.d+)\") // longitude .number(\":(-?d+.d+)\") // latitude .number(\":(d+.?d*)\") // speed .number(\":(?:NAN|(d+.?d*))\") // accuracy .number(\":(?:NAN|(d+.?d*))\") // course .number(\":(?:NAN|(d+.?d*))\").optional() // altitude"
    },
    "Bears-109": {
        "fixes": [
            {
                "k": 1,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT\"));",
                "identical": false
            },
            {
                "k": 2,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION\", values[index++]);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++]);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION\"));",
                "identical": false
            },
            {
                "k": 6,
                "patch": "position.setTimeZone(dateFormat.getTimeInMillis(), values[index++]);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"UTC\", values[index++]);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "position.setTimeZone(dateFormat.KEY_VERSION, dateFormat, true);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_NAME, values[index++]);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_NAME\", values[index++]);",
                "identical": false
            },
            {
                "k": 11,
                "patch": "position.setTimeZone(dateFormat.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 12,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION\", 0, values[index++]);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_ID, values[index++]);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "position.setTimeZone(dateFormat.KEY_VERSION, dateFormat++index++]);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION++]);",
                "identical": false
            },
            {
                "k": 16,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_Format\", values[index++]);",
                "identical": false
            },
            {
                "k": 17,
                "patch": "position.setTimeZone(dateFormat.getTimeUTC_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 18,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index[0], values[1], values[index++]);",
                "identical": false
            },
            {
                "k": 19,
                "patch": "position.setTimeZone(dateFormat.KEY_VERSION, dateFormat, position++]);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION\", null));",
                "identical": false
            },
            {
                "k": 21,
                "patch": "position.setTimeZone(dateFormat.ID_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 22,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_KEY, dateFormat++]);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "position.setTimeZone(64variant, values[index++]);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "position.setTimeZone(dateFormat.start, values[index++]);",
                "identical": false
            },
            {
                "k": 25,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index+1));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, null);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "position.setTimeZone(DurationFieldType.KEY_VERSION, dateFormat++index++]);",
                "identical": false
            },
            {
                "k": 28,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index-index++) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat, true));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "position.setTimeZone(dateFormat.index, values[index++]);",
                "identical": false
            },
            {
                "k": 31,
                "patch": "position.setTimeZone(dateFormat.parse(dateStr, position++index++));",
                "identical": false
            },
            {
                "k": 32,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_NAME_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 33,
                "patch": "position.setTimeZone(DurationFieldType.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION\", \"UTC\", values[index++]);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index-index++]);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"UTC_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 37,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index\", values[index++]);",
                "identical": false
            },
            {
                "k": 38,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT\", values[index++]);",
                "identical": false
            },
            {
                "k": 39,
                "patch": "position.setTimeZone(dateFormat.UTC_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_KEY, values[index++]);",
                "identical": false
            },
            {
                "k": 41,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, null++index[0], values[1], values[index++]);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "position.setTime(dateFormat.getTimeZone(\"GMT_VERSION\", values[index++]);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "position.setTimeZone(dateFormat.KEY_VERSION, dateFormat, position++index);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat\", values[index++]);",
                "identical": false
            },
            {
                "k": 45,
                "patch": "position.setTimeZone(dateFormat.IF_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSIONVERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 47,
                "patch": "position.setTimeZone(dateStr.getTime()++index, dateFormat++index++]);",
                "identical": false
            },
            {
                "k": 48,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_parsingContext, values[index++]);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "position.setPOJXPathContext(dateFormat.KEY_VERSION, dateFormat, true);",
                "identical": false
            },
            {
                "k": 51,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION), dateFormat);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_: values[index++]);",
                "identical": false
            },
            {
                "k": 53,
                "patch": "position.setOffset(dateFormat.getTimeZone(\"GMT_VERSION\", values[index++]);",
                "identical": false
            },
            {
                "k": 54,
                "patch": "position.setTimeZone(dateFormat.getTimeInMillis\", values[index++]);",
                "identical": false
            },
            {
                "k": 55,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, colon\", values[index++]);",
                "identical": false
            },
            {
                "k": 56,
                "patch": "position.setTimeZone(dateFormat.parse(dateStr, position++index, values[index++]);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION\", true));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION\", \"UTC\", 0, 0);",
                "identical": false
            },
            {
                "k": 59,
                "patch": "position.setTimeZone(dateFormat.parse(dateStr, position++));",
                "identical": false
            },
            {
                "k": 60,
                "patch": "position.setTimeZone(dateFormat.UTC_VERSION, dateFormat, true);",
                "identical": false
            },
            {
                "k": 61,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT__VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_ARRAY, values[index++]);",
                "identical": false
            },
            {
                "k": 63,
                "patch": "position.setValues(dateFormat.KEY_VERSION, dateFormat, true);",
                "identical": false
            },
            {
                "k": 64,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, null));",
                "identical": false
            },
            {
                "k": 65,
                "patch": "position.setDateFormat(dateFormat.getTimeInMillis(), values[index++]);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_NAME_VERSION, null);",
                "identical": false
            },
            {
                "k": 67,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION\", null), null);",
                "identical": false
            },
            {
                "k": 68,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION\", node, values[index++]);",
                "identical": false
            },
            {
                "k": 69,
                "patch": "position.setTimeZone(40.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 70,
                "patch": "position.setTimeZone(dateFormat.getTimeING_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 71,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat\", true));",
                "identical": false
            },
            {
                "k": 72,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_CLASS, values[index++]);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index getSecond\", values[index++]);",
                "identical": false
            },
            {
                "k": 74,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index++) {",
                "identical": false
            },
            {
                "k": 75,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat), values[index++]);",
                "identical": false
            },
            {
                "k": 76,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\" thread-index, values[index++]);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "position.setPOJOBuilder(values[index++]);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "position.setTimeZone(dateFormat.getTimequalifiedName, values[index++]);",
                "identical": false
            },
            {
                "k": 79,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index++]);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, begin_VERSION++]);",
                "identical": false
            },
            {
                "k": 81,
                "patch": "position.setTimeZone(dateStr, position, values[index++]);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "position.setTimeZone(dateFormat.KEY_VERSION, dateFormat, false);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSIONS\"));",
                "identical": false
            },
            {
                "k": 84,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_NAME, dateFormat++]);",
                "identical": false
            },
            {
                "k": 85,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat), true);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "position.setTimeZone(dateFormat.getInputStream(), values[index++]);",
                "identical": false
            },
            {
                "k": 87,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, null), values[index++]);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index\"));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index+1)\", values[index++]);",
                "identical": false
            },
            {
                "k": 90,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"Expression\", values[index++]);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "position.setTimeZone(dateFormat.KEY_VERSION, null);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "position.setTimeZone(dateFormat.STRING_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++index \"\"), values[index++]);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat++), values[index++]);",
                "identical": false
            },
            {
                "k": 95,
                "patch": "position.setOffset(dateFormat.KEY_VERSION, values[index++]);",
                "identical": false
            },
            {
                "k": 96,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_ startX, dateFormat++]);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "position.setTimeZone(dateFormat.getTimeUTC_VERSION, dateFormat, true);",
                "identical": false
            },
            {
                "k": 98,
                "patch": "position.setTimeZone(dateFormat.getTimeZone(\"GMT_VERSION, dateFormat, values[index++]);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "position.setPOJOBuilder(dateFormat.getTime());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "position.setTime(dateFormat.getTime() + 1);",
                "identical": false
            }
        ],
        "buggy_line": "position.set(Position.KEY_VERSION_FW, values[index++]);",
        "fixed_line": "if (!type.equals(\"Alert\") || protocolType == 0) { position.set(Position.KEY_VERSION_FW, values[index++]); }"
    },
    "Bears-7": {
        "fixes": [
            {
                "k": 1,
                "patch": "return ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "return _isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 3,
                "patch": "return ctxt.getEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 4,
                "patch": "return (index == 0 && _enumClass.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 5,
                "patch": "return !isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 6,
                "patch": "return StdisEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return !ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 8,
                "patch": "return _numberDouble.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 9,
                "patch": "return ctxt.findEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return EnumDeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : name;",
                "identical": false
            },
            {
                "k": 12,
                "patch": "return isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 13,
                "patch": "returnisEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.FAIL_ENUMS);",
                "identical": false
            },
            {
                "k": 15,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.valueOf(name));",
                "identical": false
            },
            {
                "k": 16,
                "patch": "return (index == -1 ? name : Enum.valueOf(name));",
                "identical": false
            },
            {
                "k": 17,
                "patch": "return (index == WHOLE_TYPE_INT || name.charAt(index - 1) == JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "return ctxt.getDeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : JsonToken.VALUE_ENUMS);",
                "identical": false
            },
            {
                "k": 20,
                "patch": "return (index == 0 && name == JsonToken.VALUE_NUMBER_INT) ? \"String\" : JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return StdKeyDeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : wrapper;",
                "identical": false
            },
            {
                "k": 23,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : ctxt.substring(index);",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return (index == WHOLE_FOR_ENUMS) ? 0 : name;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return (index == -1 ? name : Enum.valueOf(index));",
                "identical": false
            },
            {
                "k": 26,
                "patch": "return (name == null) ? \"NUMBER\" : name.substring(index);",
                "identical": false
            },
            {
                "k": 27,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : index;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "return (name == null) ? \"NUMBER\" : name.substring(index + 1);",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : BigDecimal.valueOf(name));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : allow;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "return (name == null) ? \"true\" : name.substring(index + 1);",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return (index == WHOLE_NUMBERS) ? 0 : name;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "return (index == WHOLE_TYPE_INT || name.charAt(index - 1) == JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return (index == WHOLE_CONSTANT_FOR_ENUMS) ? \"String\" : JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "return (index == WHOLE_FOR_ENUMS ? \"String\" : Enum.valueOf(name);",
                "identical": false
            },
            {
                "k": 36,
                "patch": "return (index == WHOLE_CONSTANT_FOR_ENUMS) ? \"String\" : JsonToken.VALUE_ENUMS;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return (index == WHOLE_INT || name.charAt(index - 1) == JsonToken.VALUE_NUMBER_FLOAT) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "return (name == null) ? \"NUMBERS : name.substring(index + 1);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : '\"';",
                "identical": false
            },
            {
                "k": 41,
                "patch": "return (index == WHOLE_FOR_ENUMS) ? \"String\" : Enum.valueOf(name);",
                "identical": false
            },
            {
                "k": 42,
                "patch": "return (index == 0 && name.charAt(0) == JsonToken.VALUE_NUMBER_INT) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "return (index == -1 ? _enumClass(name) : name.substring(index + 1);",
                "identical": false
            },
            {
                "k": 44,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "return (index == JsonToken.VALUE_NUMBER_INT) ? null : name.substring(index + 1);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : allowClass;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : number;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : _enumClass, name);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "return (index == 0L) ? 0L : name.substring(index + 1);",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return (index == WHOLE_FOR_ENUMS) ? \"String\" : JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "return (index == WHOLE_COLLECTION) ? 0L : name.substring(index + 1);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : JsonGenerator.valueOf(name));",
                "identical": false
            },
            {
                "k": 53,
                "patch": "return (index == WHOLE_FOR_ENUMS) ? \"Non-number\" : JsonToken.VALUE_NUMBER_INT;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.FAIL_ENUMS;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS : name;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.FAIL_NUMBERS_ENUMS);",
                "identical": false
            },
            {
                "k": 57,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : impl;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return (index == -1 ? nameNumberType.FAIL_ON_NUMBERS : name;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.FAILS_ENUMS);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return (index == 0 && name == JsonToken.VALUE_NUMBER_INT) ? \"true\" : JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "return (index == 0 ? _enumClass(name) : name.substring(index + 1);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return (index == JsonToken.VALUE_NUMBER_INT) ? \"true\" : JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : _enumClass, name;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.READ_ENUMS);",
                "identical": false
            },
            {
                "k": 65,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : JsonToken.VALUE_NUMBER_ENUMS);",
                "identical": false
            },
            {
                "k": 66,
                "patch": "return (index == JsonToken.VALUE_NUMBER_INT) ? \"String\" : JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 67,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : JsonString.valueOf(name));",
                "identical": false
            },
            {
                "k": 68,
                "patch": "return (index == 0 ? _enumClass(name) : name.substring(index));",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return (index == 0 && name.charAt(0) == JsonToken.VALUE_NUMBER_INT) ? \"String\" : JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : \"<null>\";",
                "identical": false
            },
            {
                "k": 71,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.valueOf(name);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : _enumClass, index);",
                "identical": false
            },
            {
                "k": 73,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : string;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "return (index == JsonToken.VALUE_NUMBER_INT) ? null : name.substring(index);",
                "identical": false
            },
            {
                "k": 75,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.FAILS)) {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return (curr == JsonToken.VALUE_NUMBER_INT) ? null : name.substring(index + 1);",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return (index == WHOLE_TYPE_INT || name.charAt(index - 1) == JsonToken.VALUE_NUMBER_FLOAT",
                "identical": false
            },
            {
                "k": 78,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : \"<null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return (index == JsonToken.VALUE_NUMBER_INT) ? \"String\" : EnumDeserializationConfig.valueOf(name);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "return (index == WHOLE_INT || name.charAt(index - 1) == JsonToken.VALUE_NUMBER_FLOAT;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "return (index == 0) ? _enumClass(name) : name.substring(index + 1);",
                "identical": false
            },
            {
                "k": 82,
                "patch": "return (index == WHOLE_TYPE_INT || name.charAt(index - 1) == JsonWrite.VALUE_NUMBERS_ENUMS);",
                "identical": false
            },
            {
                "k": 83,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : 0;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : JsonGenerator.valueOf(index));",
                "identical": false
            },
            {
                "k": 85,
                "patch": "return (index == JsonToken.VALUE_NUMBER_INT) ? \"true\" : Enum.valueOf(name);",
                "identical": false
            },
            {
                "k": 86,
                "patch": "return (index == WHOLE_CONSTANT_FOR_ENUMS ? \"String\" : JsonToken.VALUE_NUMBER_INTS)\";",
                "identical": false
            },
            {
                "k": 87,
                "patch": "return (index == WHOLE_COLLECTION) ? 0L : name.substring(index);",
                "identical": false
            },
            {
                "k": 88,
                "patch": "return (index == -1 ? _enumClass(name) : name.substring(index));",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return (index == 0 && name == JsonToken.VALUE_NUMBER_INT) ? \"number\" : name;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return (index == 0 && name == JsonToken.VALUE_NUMBER_INT) ? \"true\" : name;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : result;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : allowableValue.charAt(index);",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.FAIL_NUMBERS)) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : JsonParser.valueOf(name));",
                "identical": false
            },
            {
                "k": 95,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : new String[index];",
                "identical": false
            },
            {
                "k": 96,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS : Boolean.FAIL_ENUMS);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "return (index == WHOLE_COLLECTION) ? 0 : name;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.valueOf(index);",
                "identical": false
            },
            {
                "k": 99,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS);",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return (index == 0) ? _enumClassConfig.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS) : Boolean.FAILS);",
                "identical": false
            }
        ],
        "buggy_line": "} else { // [databind#149]: Allow use of 'String' indexes as well char c = name.charAt(0); if (c >= '0' && c <= '9') { try { int index = Integer.parseInt(name); if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { return ctxt.handleWeirdNumberValue(_enumClass(), index, \"not allowed to deserialize Enum value out of number: disable DeserializationConfig.DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS to allow\" ); }",
        "fixed_line": "} else if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_NUMBERS_FOR_ENUMS)) { // [databind#149]: Allow use of 'String' indexes as well -- unless prohibited (as per above)"
    },
    "Bears-186": {
        "fixes": [
            {
                "k": 1,
                "patch": "return Boolean.valueOf(Constants.TYPE_CLASS) ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (format.getHeader() != null) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.getName());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (format.getHeader() == null) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.isAssignableFrom(interfaces));",
                "identical": false
            },
            {
                "k": 7,
                "patch": "return Boolean.valueOf(map.getVersion());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (format.getHeader().contains(interface)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "interfaceOnly = Boolean.valueOf(Color.class.getProperties());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "return Boolean.valueOf(Constants.TYPE_CLASS) == null ? Boolean.TRUE : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 11,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.isAssignableFrom(interfaces))) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.getVersion());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "return Boolean.valueOf(map.getClassLoader());",
                "identical": false
            },
            {
                "k": 14,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.getName());",
                "identical": false
            },
            {
                "k": 15,
                "patch": "interfaceOnly = Boolean.valueOf( archive.class.getProperties());",
                "identical": false
            },
            {
                "k": 16,
                "patch": "interfaceOnly = Boolean.valueOf(map.getDeclaringClass().getName());",
                "identical": false
            },
            {
                "k": 17,
                "patch": "interfaceOnly = Boolean.valueOf(Color.class.getName());",
                "identical": false
            },
            {
                "k": 18,
                "patch": "interfaceOnly = Boolean.valueOf(Version.class.isAssignableFrom(interfaces));",
                "identical": false
            },
            {
                "k": 19,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.isAssignableFrom(interfaces))) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "interfaceOnly = Boolean.valueOf(Version.class.getName());",
                "identical": false
            },
            {
                "k": 21,
                "patch": "return Boolean.valueOf( graph.getVersion());",
                "identical": false
            },
            {
                "k": 22,
                "patch": "interfaceOnly = Boolean.valueOf(999Properties.class.getName());",
                "identical": false
            },
            {
                "k": 23,
                "patch": "foundOnly = Boolean.valueOf(lineProperties.class.getName());",
                "identical": false
            },
            {
                "k": 24,
                "patch": "return Boolean.valueOf(Constants.TYPE_CLASS) == null ? Boolean.FALSE : Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "return Boolean.valueOf( fullName.getVersion());",
                "identical": false
            },
            {
                "k": 26,
                "patch": "interfaceOnly = Boolean.valueOf(999Properties.class.isAssignableFrom(interfaces))) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "interfaceOnly = Boolean.valueOf( archive.class.getVersion());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.getDeclaringClass().getName());",
                "identical": false
            },
            {
                "k": 29,
                "patch": "return Boolean.valueOf(Constants.TYPE_CLASS) );",
                "identical": false
            },
            {
                "k": 30,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.getMinLevel());",
                "identical": false
            },
            {
                "k": 31,
                "patch": "interfaceOnly = Boolean.valueOf(map.getSimpleName());",
                "identical": false
            },
            {
                "k": 32,
                "patch": "return Boolean.valueOf(Constants.TYPE_CLASS) == null ? Boolean.FALSE : Boolean.valueOf(1.0f));",
                "identical": false
            },
            {
                "k": 33,
                "patch": "interfaceOnly = Boolean.valueOf(verticalProperties);",
                "identical": false
            },
            {
                "k": 34,
                "patch": "return Boolean.valueOf(verticalProperties);",
                "identical": false
            },
            {
                "k": 35,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.getRawClass());",
                "identical": false
            },
            {
                "k": 36,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.isAssignableFrom(method.getRawClass())) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "interfaceOnly = Boolean.valueOf(map.getVersion());",
                "identical": false
            },
            {
                "k": 38,
                "patch": "return Boolean.valueOf(map.contains(it.next()));",
                "identical": false
            },
            {
                "k": 39,
                "patch": "interfaceOnly = Boolean.valueOf(Version.class.getProperties());",
                "identical": false
            },
            {
                "k": 40,
                "patch": "return Boolean.valueOf(Color.class.getName());",
                "identical": false
            },
            {
                "k": 41,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.getProperties());",
                "identical": false
            },
            {
                "k": 42,
                "patch": "interfaceOnly = Boolean.valueOf( archive.class.getName());",
                "identical": false
            },
            {
                "k": 43,
                "patch": "interfaceOnly = Boolean.valueOf(Version.class.getDeclaringClass().getName());",
                "identical": false
            },
            {
                "k": 44,
                "patch": "interfaceOnly = Boolean.valueOf(Color.class.isAssignableFrom(interfaces))) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "interfaceOnly = Boolean.valueOf( graph.getVersion());",
                "identical": false
            },
            {
                "k": 46,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.isAssignableFrom(method.getRawClass())) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.getVersion());",
                "identical": false
            },
            {
                "k": 48,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties);",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (format.getHeader().contains(interfaceName)) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "return Boolean.valueOf(VERSION_Ctor) != null;",
                "identical": false
            },
            {
                "k": 51,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.getClassName());",
                "identical": false
            },
            {
                "k": 52,
                "patch": "interfaceOnly = Boolean.valueOf(line.class.getProperties());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "interfaceOnly = Boolean.valueOf(PointProperties.class.getName());",
                "identical": false
            },
            {
                "k": 54,
                "patch": "interfaceOnly = Boolean.valueOf(Version.class.getVersion());",
                "identical": false
            },
            {
                "k": 55,
                "patch": "return Boolean.valueOf(Constants.TYPE_CLASS) : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 56,
                "patch": "interfaceOnly = Boolean.valueOf(Color.class.isAssignableFrom(interfaces));",
                "identical": false
            },
            {
                "k": 57,
                "patch": "interfaceOnly = Boolean.valueOf(PointProperties.class.isAssignableFrom(interfaces));",
                "identical": false
            },
            {
                "k": 58,
                "patch": "return Boolean.valueOf(Reference.class.getName());",
                "identical": false
            },
            {
                "k": 59,
                "patch": "interfaceOnly = Boolean.valueOf( 10,.MAX_VALUE);",
                "identical": false
            },
            {
                "k": 60,
                "patch": "return Boolean.valueOf(VERSION_Ctor) : Boolean.valueOf(verticalProperties));",
                "identical": false
            },
            {
                "k": 61,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.isAssignableFrom(interfaces));",
                "identical": false
            },
            {
                "k": 62,
                "patch": "return Boolean.valueOf(Color.valueOf(verticalProperties));",
                "identical": false
            },
            {
                "k": 63,
                "patch": "interfaceOnly = Boolean.valueOf(map.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 64,
                "patch": "interfaceOnly = Boolean.valueOf(line.class.getVersion());",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (format.getHeader() == DEFLATED) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "interfaceOnly = Boolean.valueOf(pos).getProperties();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "interfaceOnly = Boolean.valueOf(map.class.getName());",
                "identical": false
            },
            {
                "k": 68,
                "patch": "interfaceOnly = Boolean.valueOf(Color.class.getVersion());",
                "identical": false
            },
            {
                "k": 69,
                "patch": "return Boolean.valueOf( archive.class.getName());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "return Boolean.valueOf(Constants.TYPE_CLASS) == null ? Boolean.MAX_VALUE : Boolean.TRUE;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.getSimpleName());",
                "identical": false
            },
            {
                "k": 72,
                "patch": "return Boolean.valueOf(Version.class.getName());",
                "identical": false
            },
            {
                "k": 73,
                "patch": "interfaceOnly = Boolean.valueOf(VERSION.class.isAssignableFrom(interfaces));",
                "identical": false
            },
            {
                "k": 74,
                "patch": "interfaceOnly = Boolean.valueOf(lineProperties.class.getComponentCount());",
                "identical": false
            },
            {
                "k": 75,
                "patch": "interfaceOnly = Boolean.valueOf(pos).getProperties());",
                "identical": false
            },
            {
                "k": 76,
                "patch": "return Boolean.valueOf( archiveProperties.class.getName());",
                "identical": false
            },
            {
                "k": 77,
                "patch": "return Boolean.valueOf(VERSION_Ctor) : Boolean.valueOf(verticalProperties);",
                "identical": false
            },
            {
                "k": 78,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.isAssignableFrom(interface.getRawClass())) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "return Boolean.valueOf(VERSION_Ctor) : Boolean.FALSE;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (format.getVersion().contains(interface)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.isAssignableFrom(rawProperties));",
                "identical": false
            },
            {
                "k": 82,
                "patch": "interfaceOnly = Boolean.valueOf(999Properties.class.isAssignableFrom(interfaces));",
                "identical": false
            },
            {
                "k": 83,
                "patch": "interfaceOnly = Boolean.valueOf(999Properties.class.isAssignableFrom(interfaces())) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 85,
                "patch": "interfaceOnly = Boolean.valueOf(Version.class.isAssignableFrom(interfaces))) {",
                "identical": false
            },
            {
                "k": 86,
                "patch": "interfaceOnly = Boolean.valueOf( archive.class.getProperties().contains(interfaceName()));",
                "identical": false
            },
            {
                "k": 87,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.isAssignableFrom(interfaceProperties));",
                "identical": false
            },
            {
                "k": 88,
                "patch": "interfaceOnly = Boolean.valueOf(Version.class.getDeclaringClass());",
                "identical": false
            },
            {
                "k": 89,
                "patch": "return Boolean.valueOf(Constants.TYPE_CLASS) == null ? Boolean.FALSE : Boolean.valueOf(1.0));",
                "identical": false
            },
            {
                "k": 90,
                "patch": "return Boolean.valueOf(999Properties);",
                "identical": false
            },
            {
                "k": 91,
                "patch": "return Boolean.valueOf(VERSION_LINE_SEPARATOR);",
                "identical": false
            },
            {
                "k": 92,
                "patch": "interfaceOnly = Boolean.valueOf(jdkProperties.class.getName());",
                "identical": false
            },
            {
                "k": 93,
                "patch": "return Boolean.valueOf( vmProperties);",
                "identical": false
            },
            {
                "k": 94,
                "patch": "interfaceOnly = Boolean.valueOf(Color.class.isAssignableFrom(interfaces())) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.isAssignableFrom(method.getDeclaringClass())) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "interfaceOnly = Boolean.valueOf(map.get());",
                "identical": false
            },
            {
                "k": 97,
                "patch": "interfaceOnly = Boolean.valueOf(Point.class.isAssignableFrom(it.getRawClass())) {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (format.getHeader().contains(Class)) {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "interfaceOnly = Boolean.valueOf(map.getLevel());",
                "identical": false
            },
            {
                "k": 100,
                "patch": "return Boolean.valueOf(map.get());",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (!interfaceOnly) { additionalProperties.remove(INTERFACE_ONLY); }"
    },
    "Bears-163": {
        "fixes": [
            {
                "k": 1,
                "patch": "if (tokens.hasMoreTokens()) {",
                "identical": false
            },
            {
                "k": 2,
                "patch": "if (tokens.canBeSet()) {",
                "identical": false
            },
            {
                "k": 3,
                "patch": "if (tokens.canBeVoid()) {",
                "identical": false
            },
            {
                "k": 4,
                "patch": "if (tokens.canBeVoid() || tokens.canCollapseUnannotatedChildNames()) {",
                "identical": false
            },
            {
                "k": 5,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 6,
                "patch": "if (tokens.canBeLeaf() || tokens.canCollapseUnannotatedChildNames()) {",
                "identical": false
            },
            {
                "k": 7,
                "patch": "if (tokens.canBeVoid() || tokens.canAssignTo(\") {",
                "identical": false
            },
            {
                "k": 8,
                "patch": "if (tokens.matches(tokensEnd) || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 9,
                "patch": "if (tokens.canBeABean()) {",
                "identical": false
            },
            {
                "k": 10,
                "patch": "if (tokens.hasMoreBytes()) {",
                "identical": false
            },
            {
                "k": 11,
                "patch": "if (tokens.matches(tokensStart) || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 12,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canEncodeChar() != null) {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "if (tokens.matchToken(tokens, \"UNIQUE\") || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 14,
                "patch": "if (tokens.matchesAny(\"<\", \"UNIQUE\") || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 15,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canEncodeChar() != '/') {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canEncodeChar() != null) {",
                "identical": false
            },
            {
                "k": 17,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canAssignTo(\") {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "if (tokens.canBeVoid() || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 19,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canCollapseUnannotatedChildNames() != null) {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "if (tokens.canBeVoid) {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "if (tokens.canBeLeaf() || tokens.canAssignTo(\") {",
                "identical": false
            },
            {
                "k": 22,
                "patch": "if (tokens.canBeVoid() || tokens.canEncodeChar() != '/') {",
                "identical": false
            },
            {
                "k": 23,
                "patch": "if (tokens.matchToken(tokens, \"UNIQUE\") || tokens.canEncodeChar() != null) {",
                "identical": false
            },
            {
                "k": 24,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canEncode(tokens)) {",
                "identical": false
            },
            {
                "k": 25,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "if (tokens.canBeVoid() || tokens.canEncode(tokens)) {",
                "identical": false
            },
            {
                "k": 27,
                "patch": "if (tokens.canBeLeaf() || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 28,
                "patch": "if (tokens.canBeLeaf() || tokens.canEncodeChar(tokens)) {",
                "identical": false
            },
            {
                "k": 29,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canAssignTo(\"\"));",
                "identical": false
            },
            {
                "k": 30,
                "patch": "if (tokens.canBeLeaf() || tokens.canEncodeChar() != '/') {",
                "identical": false
            },
            {
                "k": 31,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canEncode\");",
                "identical": false
            },
            {
                "k": 32,
                "patch": "if (tokens.canBeVoid() || tokens.canCollapse()) {",
                "identical": false
            },
            {
                "k": 33,
                "patch": "if (tokens.canBeLeaf() || tokens.canAssignTo(tokens.length())) {",
                "identical": false
            },
            {
                "k": 34,
                "patch": "if (tokens.canBeLeaf() || tokens.canCollapse()) {",
                "identical": false
            },
            {
                "k": 35,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canAssignTo(\"",
                "identical": false
            },
            {
                "k": 36,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canCollapse()) {",
                "identical": false
            },
            {
                "k": 37,
                "patch": "if (tokens.matchesAny(tokensEnd) || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 38,
                "patch": "if (tokens.matches(tokensEnd) || tokens.canCollapseUnannotatedChildNames()) {",
                "identical": false
            },
            {
                "k": 39,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canCollapseUnannotatedChildNames()) {",
                "identical": false
            },
            {
                "k": 40,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canAssignTo(tokens.length()))) {",
                "identical": false
            },
            {
                "k": 41,
                "patch": "if (tokens.canBeVoid() || tokens.canEncodeChar() != null) {",
                "identical": false
            },
            {
                "k": 42,
                "patch": "if (tokens.canBeVoid() || tokens.canRead() ) {",
                "identical": false
            },
            {
                "k": 43,
                "patch": "if (tokens.matchesAny(\"<\", \"UNIQUE\") || tokens.canAssignTo(\") {",
                "identical": false
            },
            {
                "k": 44,
                "patch": "if (tokens.canBeVoid() || tokens.canAssignTo(\"\") || tokens.canAssignTo(tokens.length() > 0)) {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "if (tokens.matches(tokensStart) || tokens.canEncodeChar() != null) {",
                "identical": false
            },
            {
                "k": 46,
                "patch": "if (tokens.canBeVoid() || tokens.canAssignTo(tokens.length())) {",
                "identical": false
            },
            {
                "k": 47,
                "patch": "if (tokens.canBeLeaf() || tokens.canEncodeChar() != null) {",
                "identical": false
            },
            {
                "k": 48,
                "patch": "if (tokens.canBeLeaf() || tokens.canAssignTo(\"Log\") || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 49,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canAssignTo(tokens.toString())) {",
                "identical": false
            },
            {
                "k": 50,
                "patch": "if (tokens.canBeLeaf() || tokens.canEncode(tokens)) {",
                "identical": false
            },
            {
                "k": 51,
                "patch": "if (tokens.canEncodeChar(tokens, \"UNIQUE\") || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 52,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canInline()) {",
                "identical": false
            },
            {
                "k": 53,
                "patch": "if (tokens.canBeVoid() || tokens.canEncodeChar(tokens)) {",
                "identical": false
            },
            {
                "k": 54,
                "patch": "if (tokens.canBeLeaf() || tokens.canCollapseUnannotated.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 55,
                "patch": "if (tokens.matchToken(tokens, \"UNIQUE\") || tokens.canAssignTo(\"\"));",
                "identical": false
            },
            {
                "k": 56,
                "patch": "if (tokens.canBeLeaf() || tokens.canInline()) {",
                "identical": false
            },
            {
                "k": 57,
                "patch": "if (tokens.canBeLeaf() || tokens.canAssignTo(tokens.toString())) {",
                "identical": false
            },
            {
                "k": 58,
                "patch": "if (tokens.matchToken(tokens, \"UNIQUE\") || tokens.canEncode\".equals(tokens)) {",
                "identical": false
            },
            {
                "k": 59,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canEncodeChar() != '/') {",
                "identical": false
            },
            {
                "k": 60,
                "patch": "if (tokens.matchToken(tokens, \"UNIQUE\") || tokens.canAssignTo(\") {",
                "identical": false
            },
            {
                "k": 61,
                "patch": "if (tokens.canBeLeaf() || tokens.canAssignTo(\"Log\") || tokens.canAssignTo(tokens.length() > 0)) {",
                "identical": false
            },
            {
                "k": 62,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canAssignTo(\") ) {",
                "identical": false
            },
            {
                "k": 63,
                "patch": "if (tokens.matchToken(tokens, \"UNIQUE\") || tokens.canCollapseUnannotatedChildNames() != null) {",
                "identical": false
            },
            {
                "k": 64,
                "patch": "if (tokens.canBeVoid() || tokens.canAssignTo(\"Log\") || tokens.canAssignTo(tokens.length() > 0)) {",
                "identical": false
            },
            {
                "k": 65,
                "patch": "if (tokens.canEncodeChar(tokens, \"UNIQUE\") || tokens.canCollapseUnannotatedChildNames() != null) {",
                "identical": false
            },
            {
                "k": 66,
                "patch": "if (tokens.canBeVoid() || tokens.canEncodeChar) {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "if (tokens.canBee(tokensStart) || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "if (tokens.canBeVoid() || tokens.canAssignTo(\"Log\") || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "if (tokens.canBeVoid() || tokens.canInline()) {",
                "identical": false
            },
            {
                "k": 70,
                "patch": "if (tokens.canBeLeaf() || tokens.canCollapseUnannotated.canEncodeChar() != '/') {",
                "identical": false
            },
            {
                "k": 71,
                "patch": "if (tokens.matches(tokens.getString(\"UNIQUE\") || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 72,
                "patch": "if (tokens.matchesAny(tokens, \"UNIQUE\") || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 73,
                "patch": "if (tokens.matches(tokensEnd) || tokens.canCollapseUnannotatedChildNames() != null) {",
                "identical": false
            },
            {
                "k": 74,
                "patch": "if (tokens.matchToken(tokens, \"UNIQUE\") || tokens.canEncode\");",
                "identical": false
            },
            {
                "k": 75,
                "patch": "if (tokens.matches(tokensStart) || tokens.canEncodeChar() != '/') {",
                "identical": false
            },
            {
                "k": 76,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canAssignTo(\"Log\") || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 77,
                "patch": "if (tokens.canBeLeaf() || tokens.canCollapseUnannotated.canEncodeChar(tokens)) {",
                "identical": false
            },
            {
                "k": 78,
                "patch": "if (tokens.canBeVoid() || tokens.canCollapseUnannotatedChildNames) {",
                "identical": false
            },
            {
                "k": 79,
                "patch": "if (tokens.canBeLeaf() || tokens.canCollapseUnannotatedChildNames) {",
                "identical": false
            },
            {
                "k": 80,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canEncode\".equals(tokens)) {",
                "identical": false
            },
            {
                "k": 81,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canCollapseUnannotatedChildNames() != null) {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "if (tokens.canBeVoid() || tokens.canCollapseUnannotated.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "if (tokens.matchesAny(tokensStart) ||ES.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 84,
                "patch": "if (tokens.canBeLeaf() || tokens.canRemove()) {",
                "identical": false
            },
            {
                "k": 85,
                "patch": "if (tokens.matchToken(tokens, \"UNIQUE\") || tokens.canAssignTo(\"",
                "identical": false
            },
            {
                "k": 86,
                "patch": "if (tokens.matches(tokensEnd) || tokens.canEncode(tokens)) {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "if (tokens.canBeLeaf() || tokens.canCollapseUnannotated.canRead() ) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "if (tokens.matchesAny(tokens, \"UNIQUE\") || tokens.canEncodeChar() != null) {",
                "identical": false
            },
            {
                "k": 89,
                "patch": "if (tokens.canBeVoid() || tokens.canAssignTo(\"\") || tokens.canAssignTo(tokens)) {",
                "identical": false
            },
            {
                "k": 90,
                "patch": "if (tokens.canBeSet() || tokens.canCollapseUnannotatedChildNames()) {",
                "identical": false
            },
            {
                "k": 91,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canAssignTo(tokens.length()))) {",
                "identical": false
            },
            {
                "k": 92,
                "patch": "if (tokens.canEncodeChar(tokens, \"UNIQUE\") || tokens.canAssignTo(tokens.length()))) {",
                "identical": false
            },
            {
                "k": 93,
                "patch": "if (tokens.canBeVoid() || tokens.canCollapseUnannotated.canRead() ) {",
                "identical": false
            },
            {
                "k": 94,
                "patch": "if (tokens.canBeSideEffected(tokens, \"UNIQUE\") || tokens.canInline()) {",
                "identical": false
            },
            {
                "k": 95,
                "patch": "if (tokens.canBee(tokensStart) || tokens.canEncodeChar() != null) {",
                "identical": false
            },
            {
                "k": 96,
                "patch": "if (tokens.matches(tokensEnd) || tokens.canEncodeChar() != null) {",
                "identical": false
            },
            {
                "k": 97,
                "patch": "if (tokens.canEncodeChar(tokens, \"UNIQUE\") || tokens.canAssignTo(\") {",
                "identical": false
            },
            {
                "k": 98,
                "patch": "if (tokens.canBeVoid() || tokens.canCollapseUnannotated.canEncodeChar() != '/') {",
                "identical": false
            },
            {
                "k": 99,
                "patch": "if (tokens.matchesAny(tokensStart) || tokens.canEncodeChar() != 0)) {",
                "identical": false
            },
            {
                "k": 100,
                "patch": "if (tokens.matchesAny(tokens, \"UNIQUE\") || tokens.canAssignTo(tokens.length()))) {",
                "identical": false
            }
        ],
        "buggy_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {",
        "fixed_line": "if (tokens.canConsume(\"CONSTRAINT\", TokenStream.ANY_VALUE, \"UNIQUE\") || tokens.canConsume(\"CONSTRAINT\", \"UNIQUE\") || tokens.canConsume(\"UNIQUE\")) {"
    },
    "Bears-198": {
        "fixes": [
            {
                "k": 1,
                "patch": "this.encrypted = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 2,
                "patch": "this.encrypted = request.getVersion();",
                "identical": false
            },
            {
                "k": 3,
                "patch": "this.encrypted = request.get GT();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "this.encrypted = request.getfinder();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "this.encrypted = request.get );",
                "identical": false
            },
            {
                "k": 6,
                "patch": "this.encrypted = request.getbeans();",
                "identical": false
            },
            {
                "k": 7,
                "patch": "this.encrypted = request.getVersionVersion();",
                "identical": false
            },
            {
                "k": 8,
                "patch": "this.encrypted = request.get writeInt();",
                "identical": false
            },
            {
                "k": 9,
                "patch": "this.encrypted = request.getDimensions();",
                "identical": false
            },
            {
                "k": 10,
                "patch": "this.encrypted = request.get drools();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "this.encrypted = request.getTip();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "this.encrypted = request.getrevrev();",
                "identical": false
            },
            {
                "k": 13,
                "patch": "this.encrypted = request.get\uacbb();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "this.encrypted = request.getScopes();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "this.encrypted = request.get 43();",
                "identical": false
            },
            {
                "k": 16,
                "patch": "this.encrypted = request.get.15();",
                "identical": false
            },
            {
                "k": 17,
                "patch": "this.encrypted = request.getToString();",
                "identical": false
            },
            {
                "k": 18,
                "patch": "this.encrypted = request.get reaction();",
                "identical": false
            },
            {
                "k": 19,
                "patch": "this.encrypted = request.getTags();",
                "identical": false
            },
            {
                "k": 20,
                "patch": "this.encrypted = request.getRepeat();",
                "identical": false
            },
            {
                "k": 21,
                "patch": "this.encrypted = request.get\u1378();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "this.encrypted = request.getEncryptedFilled();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "this.encrypted = request.get eNotification();",
                "identical": false
            },
            {
                "k": 24,
                "patch": "this.encrypted = request.getdummy();",
                "identical": false
            },
            {
                "k": 25,
                "patch": "this.encrypted = request.getico();",
                "identical": false
            },
            {
                "k": 26,
                "patch": "this.encrypted = request.getHost();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "this.encrypted = request.get transforms();",
                "identical": false
            },
            {
                "k": 28,
                "patch": "this.encrypted = request.getountries();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "this.encrypted = request.get\u5fc9();",
                "identical": false
            },
            {
                "k": 30,
                "patch": "this.encrypted = request.getduplicates();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "this.encrypted = request.get5/();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "this.encrypted = request.getTipTip();",
                "identical": false
            },
            {
                "k": 33,
                "patch": "this.encrypted = request.getDescription();",
                "identical": false
            },
            {
                "k": 34,
                "patch": "this.encrypted = request.getifest();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "this.encrypted = request.getTEMP();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "this.encrypted = request.get\ucb45();",
                "identical": false
            },
            {
                "k": 37,
                "patch": "this.encrypted = request.get\ud83a\udd35();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "this.encrypted = request.get Matchers Matchers();",
                "identical": false
            },
            {
                "k": 39,
                "patch": "this.encrypted = request.getcommand.getTime();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "this.encrypted = request.getrevShapes();",
                "identical": false
            },
            {
                "k": 41,
                "patch": "this.encrypted = request.getMulticast();",
                "identical": false
            },
            {
                "k": 42,
                "patch": "this.encrypted = request.getIncompatible();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "this.encrypted = request.getEncrypted setLength();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "this.encrypted = request.getTipFactory();",
                "identical": false
            },
            {
                "k": 45,
                "patch": "this.encryptedInvocations = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "this.encrypted = request.getEncryptedOTTOM();",
                "identical": false
            },
            {
                "k": 47,
                "patch": "this.encrypted = request.getEncrypted ;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "this.encrypted = request.get\u7537();",
                "identical": false
            },
            {
                "k": 49,
                "patch": "this.encrypted = request.getEncryptedRegex();",
                "identical": false
            },
            {
                "k": 50,
                "patch": "this.encrypted = request.get MatchersRenderContext();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "this.encrypted = request.getfollowing();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "this.encrypted Box = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 53,
                "patch": "this.encrypted = request.get SIZE();",
                "identical": false
            },
            {
                "k": 54,
                "patch": "this.encrypted = request.getEncrypted getRange();",
                "identical": false
            },
            {
                "k": 55,
                "patch": "this.encrypted = request.get upsert();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "this.encrypted = request.getrevCause();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "this.encrypted = request.getEncryptedInterpreter();",
                "identical": false
            },
            {
                "k": 58,
                "patch": "this.encrypted = request.getEncrypted Ener();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "this.encrypted = request.getEncrypted GetInstance();",
                "identical": false
            },
            {
                "k": 60,
                "patch": "this.encrypted = request.getEncrypted Js();",
                "identical": false
            },
            {
                "k": 61,
                "patch": "this.encrypted = request.getEncrypted.1,();",
                "identical": false
            },
            {
                "k": 62,
                "patch": "this.encrypted = request.getCLBoundary();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "this.encrypted = request.getdummyDataKeys();",
                "identical": false
            },
            {
                "k": 64,
                "patch": "this.encrypted = request.getEncryptedCause();",
                "identical": false
            },
            {
                "k": 65,
                "patch": "this.encrypted = request.getImplementors();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "this.encrypted = request.get Could();",
                "identical": false
            },
            {
                "k": 67,
                "patch": "this.encrypted = request.get\u9cc4();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "this.encrypted = request.getEncryptedsets();",
                "identical": false
            },
            {
                "k": 69,
                "patch": "this.encrypted Sm = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 70,
                "patch": "this.encrypted sequence = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "this.encrypted = request.getcommand.getVersion();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "this.encrypted = request.getEncrypted;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "this.encrypted = request.getdummyCause();",
                "identical": false
            },
            {
                "k": 74,
                "patch": "this.encrypted = request.getEncrypted potentially();",
                "identical": false
            },
            {
                "k": 75,
                "patch": "this.encrypted = request.get incompatible();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "this.encrypted = request.get getGlobal();",
                "identical": false
            },
            {
                "k": 77,
                "patch": "this.encryptedodingoding = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 78,
                "patch": "this.encrypted = request.get SIZE().getPointers();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "this.encrypted = request.get SIZE().getToString();",
                "identical": false
            },
            {
                "k": 80,
                "patch": "this.encrypted = request.getcommand.getClassLoader();",
                "identical": false
            },
            {
                "k": 81,
                "patch": "this.encryptedDelimiter = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 82,
                "patch": "this.encrypted inst = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 83,
                "patch": "this.encrypted = request.getcommand.getNode();",
                "identical": false
            },
            {
                "k": 84,
                "patch": "this.encrypted = request.getcommand.getURI();",
                "identical": false
            },
            {
                "k": 85,
                "patch": "this.encryptedInv = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "this.encrypted = request.getExclusiveExclusiveExclusive();",
                "identical": false
            },
            {
                "k": 87,
                "patch": "this.encrypted = request.getEncrypted()) {",
                "identical": false
            },
            {
                "k": 88,
                "patch": "this.encrypted GZIP = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "this.encrypted = true;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "this.encrypted = request.getcommand.getVersionVersion();",
                "identical": false
            },
            {
                "k": 91,
                "patch": "this.encrypted = request.getEncrypted() ;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "this.encryptedDataKeys = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 93,
                "patch": "this.encrypted = request.get Coding();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "this.encrypted = request.getHost() ? new Builder : request;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "this.encrypted = request.getHost() + this.algorithm;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "this.encrypted = request.get SIZE().getCause();",
                "identical": false
            },
            {
                "k": 97,
                "patch": "this.encryptedencrypted = request.getEncrypted();",
                "identical": false
            },
            {
                "k": 98,
                "patch": "this.encrypted = request.getcommand.get );",
                "identical": false
            },
            {
                "k": 99,
                "patch": "this.encrypted = request.getCL();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "this.encrypted = request.get SIZE().getURI();",
                "identical": false
            }
        ],
        "buggy_line": "this.encryptedDataKeys = request.getEncryptedDataKeys();",
        "fixed_line": "this.encryptionContext = request.getEncryptionContext();"
    },
    "Bears-129": {
        "fixes": [
            {
                "k": 1,
                "patch": ".setMaximumFractionDigits(-i);",
                "identical": false
            },
            {
                "k": 2,
                "patch": ".create(); //setup number of group",
                "identical": false
            },
            {
                "k": 3,
                "patch": ".create(); //setup number of file",
                "identical": false
            },
            {
                "k": 4,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L;",
                "identical": false
            },
            {
                "k": 5,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getCharno());",
                "identical": false
            },
            {
                "k": 6,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L);",
                "identical": false
            },
            {
                "k": 7,
                "patch": ".create(jodaA.FLOCALE_FLOOP_ERROR, state.getLineno(), state.getChksum());",
                "identical": false
            },
            {
                "k": 8,
                "patch": ".append(\"SansSerif\", Font.PLAIN, 10));",
                "identical": false
            },
            {
                "k": 9,
                "patch": ".append(\"SansSerif\", Font.BOLD, 12));",
                "identical": false
            },
            {
                "k": 10,
                "patch": ".create(jodaA.FLOCALE_FLOOP_ERROR, state.getLineno(), state.getCharno());",
                "identical": false
            },
            {
                "k": 11,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksum());",
                "identical": false
            },
            {
                "k": 12,
                "patch": ".create(jodaAFE_FLOCALE_EMBEDDED_ERROR, state.getDenominator()));",
                "identical": false
            },
            {
                "k": 13,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator()));",
                "identical": false
            },
            {
                "k": 14,
                "patch": ".getDenominator()).print(this);",
                "identical": false
            },
            {
                "k": 15,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLastMillisecond\"));",
                "identical": false
            },
            {
                "k": 16,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChk\"));",
                "identical": false
            },
            {
                "k": 17,
                "patch": ".create(jodaAFE\") || state.getDenominator()).equals(\"number\"));",
                "identical": false
            },
            {
                "k": 18,
                "patch": ". .setMaximumFractionDigits(-i);",
                "identical": false
            },
            {
                "k": 19,
                "patch": ".create(); //setup number of file id",
                "identical": false
            },
            {
                "k": 20,
                "patch": ".create(); //setup number formatter obj",
                "identical": false
            },
            {
                "k": 21,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : 0L;",
                "identical": false
            },
            {
                "k": 22,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsum());",
                "identical": false
            },
            {
                "k": 23,
                "patch": ".createTransformedShape(numberOfFREQUENCY).numberOfSuccesses(numberOfFreedom);",
                "identical": false
            },
            {
                "k": 24,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), n.getCharno());",
                "identical": false
            },
            {
                "k": 25,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? 1d : 0L;",
                "identical": false
            },
            {
                "k": 26,
                "patch": ".createWantedButInvoked(name, state.getDenominator()));",
                "identical": false
            },
            {
                "k": 27,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : 5);",
                "identical": false
            },
            {
                "k": 28,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : \"\"));",
                "identical": false
            },
            {
                "k": 29,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : 1;",
                "identical": false
            },
            {
                "k": 30,
                "patch": ".create(jodaA.FLOCALE_FLOOP_ERROR, state.getDenominator()));",
                "identical": false
            },
            {
                "k": 31,
                "patch": ".createTransformedShape(numberOfFREQUENCY).numberOfSuccessor());",
                "identical": false
            },
            {
                "k": 32,
                "patch": ".create(jodaA.FLOCALE_FLOOP_ERROR, state.getLineno(), state.getChk\"));",
                "identical": false
            },
            {
                "k": 33,
                "patch": ".create(jodaAFE_FLOCALE_FLOOP_ERROR, state.getDenominator()));",
                "identical": false
            },
            {
                "k": 34,
                "patch": ".create(jodaAFE\") || state.getDenominator().startsWith(\"number\"));",
                "identical": false
            },
            {
                "k": 35,
                "patch": ".createTransformedShape(numberOfFREQUENCY).numberOfSuccesses(numberOfFreedom)\";",
                "identical": false
            },
            {
                "k": 36,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? 1 : 0L;",
                "identical": false
            },
            {
                "k": 37,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : false;",
                "identical": false
            },
            {
                "k": 38,
                "patch": ".create(jodaA.FLOCALE_FREQUENCY);",
                "identical": false
            },
            {
                "k": 39,
                "patch": ".create(); // number formatter obj",
                "identical": false
            },
            {
                "k": 40,
                "patch": ".createWantedButInvokedMessage(\"number\"));",
                "identical": false
            },
            {
                "k": 41,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator/DAY_FLOOP_ERROR));",
                "identical": false
            },
            {
                "k": 42,
                "patch": ".getMaximumFractionDigits(-i);",
                "identical": false
            },
            {
                "k": 43,
                "patch": ".create(); // number where source starts",
                "identical": false
            },
            {
                "k": 44,
                "patch": ".create(jodaA.FLOCALE_FLOOP_ERROR, state.getLineno(), state.getChksum()));",
                "identical": false
            },
            {
                "k": 45,
                "patch": ".create(jodaAFE_FLOCALE_EMBEDDED_ERROR, state.getDenominator/)?d+\")\");",
                "identical": false
            },
            {
                "k": 46,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), n.getChksum());",
                "identical": false
            },
            {
                "k": 47,
                "patch": ".create(jodaAFE_FLOCALE_ESCAPE_NON_NUMERIC_ERROR, state.getDenominator()));",
                "identical": false
            },
            {
                "k": 48,
                "patch": ".create(); //steiger: \" + state.getRawClass().getName());",
                "identical": false
            },
            {
                "k": 49,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : 0 );",
                "identical": false
            },
            {
                "k": 50,
                "patch": ".doubleValue(); //setup number of group or",
                "identical": false
            },
            {
                "k": 51,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator/DAY_FLOCALE_FLOOP_ERROR));",
                "identical": false
            },
            {
                "k": 52,
                "patch": ".create(jodaA.FLOCALE_FLOOP_ERROR, state.getLineno(), state.getChksum().y);",
                "identical": false
            },
            {
                "k": 53,
                "patch": ".create(jodaAFE\") || state.getDenominator().equals(\"number\"));",
                "identical": false
            },
            {
                "k": 54,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsum().number\"));",
                "identical": false
            },
            {
                "k": 55,
                "patch": ".create(jodaAFE\") || state.getDenominator()).equals(\"\"));",
                "identical": false
            },
            {
                "k": 56,
                "patch": ".create(jodaA.FLOCALE_FLOOP_ERROR, state.getLineno(), state.getChkewness());",
                "identical": false
            },
            {
                "k": 57,
                "patch": ".create(jodaAFE_FREQUENCY).numberOfSuccesses(numberOfFreedom);",
                "identical": false
            },
            {
                "k": 58,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), n.getChk\"));",
                "identical": false
            },
            {
                "k": 59,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? 1d : 0 );",
                "identical": false
            },
            {
                "k": 60,
                "patch": ".createTransformedShape(numberOfFREQUENCY).numberOfSuccesses());",
                "identical": false
            },
            {
                "k": 61,
                "patch": ".create(jodaAFE_FLOCALE_EMBEDDED_ERROR, state.getDenominator/DAY));",
                "identical": false
            },
            {
                "k": 62,
                "patch": ".create(jodaAFE_FLOCALE_EMBEDDED_ERROR, state.getDenominator/)?din));",
                "identical": false
            },
            {
                "k": 63,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator/DAY_FLOCALE_NUMBER_ERROR));",
                "identical": false
            },
            {
                "k": 64,
                "patch": ".create(jfreeLocation.getDenominator/y, state.getVariance(), state.getLastMillisecond()));",
                "identical": false
            },
            {
                "k": 65,
                "patch": ".create(jodaAFE_FLOCALE_EMBEDDED_ERROR, state.getDenominator/elem));",
                "identical": false
            },
            {
                "k": 66,
                "patch": ".createTransformedShape(jodaA.FLOCALE_FREQUENCY);",
                "identical": false
            },
            {
                "k": 67,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator/y));",
                "identical": false
            },
            {
                "k": 68,
                "patch": ".create(jodaAFE_FLOCALE_FLOOP_ERROR, false);",
                "identical": false
            },
            {
                "k": 69,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? Boolean.FALSE : \"S\"));",
                "identical": false
            },
            {
                "k": 70,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksumsumsum().number\"));",
                "identical": false
            },
            {
                "k": 71,
                "patch": ".create(SWT.FLOCALE_FREQUENCY);",
                "identical": false
            },
            {
                "k": 72,
                "patch": ".createWantedButInvoked(name, state.getDenominator());",
                "identical": false
            },
            {
                "k": 73,
                "patch": ".create(jodaA.FLOCALE_FLOCALE_NUMBERS_ERROR, state.getDenominator()));",
                "identical": false
            },
            {
                "k": 74,
                "patch": ".create(jodaA.FLOCALE_FLOOP_ERROR, false);",
                "identical": false
            },
            {
                "k": 75,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator/DAY_FLOOR_AREACHABLE);",
                "identical": false
            },
            {
                "k": 76,
                "patch": ".create(jfreeLocation.getDenominator/y, state.getASSIGN().y); //create multiplier value",
                "identical": false
            },
            {
                "k": 77,
                "patch": ".create(jodaAz.getDenominator/y, state.getDenominator()));",
                "identical": false
            },
            {
                "k": 78,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : \"yyyy\"));",
                "identical": false
            },
            {
                "k": 79,
                "patch": ".create(jodaAFE_FLOCALE_EMBEDDED_ERROR, state.getDenominator/y));",
                "identical": false
            },
            {
                "k": 80,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChksum()));",
                "identical": false
            },
            {
                "k": 81,
                "patch": ".createWantedButInvokedMessage(\"number\") [\" + state.number\")\"; //create multiplier value",
                "identical": false
            },
            {
                "k": 82,
                "patch": ".create(jodaA.FLOCALE_FLOOP_ERROR, state.getDenominator/y); //create multiplier value",
                "identical": false
            },
            {
                "k": 83,
                "patch": ".create(); //setup number where source starts",
                "identical": false
            },
            {
                "k": 84,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator/DAY_FRENCELESSourceFile.number\"));",
                "identical": false
            },
            {
                "k": 85,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getDenominator()));",
                "identical": false
            },
            {
                "k": 86,
                "patch": ".create(jfreeLocation.getDenominator/y, state.getASSIGN().number\"));",
                "identical": false
            },
            {
                "k": 87,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : \"number\"));",
                "identical": false
            },
            {
                "k": 88,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator/i-number\"));",
                "identical": false
            },
            {
                "k": 89,
                "patch": ".doubleValue(); //setup number of file",
                "identical": false
            },
            {
                "k": 90,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : \" 1d\";",
                "identical": false
            },
            {
                "k": 91,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : \" 1d\"));",
                "identical": false
            },
            {
                "k": 92,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? state.getDenominator() : 5;",
                "identical": false
            },
            {
                "k": 93,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator/y + 1d.numberOfSuccessor().number\"));",
                "identical": false
            },
            {
                "k": 94,
                "patch": ".create(jodaAFE_FLOCALE_ESCAPE_NON_NUMERIC_NUMBERS\"));",
                "identical": false
            },
            {
                "k": 95,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator/)?d+\")\");",
                "identical": false
            },
            {
                "k": 96,
                "patch": ".createWantedButInvokedMessage(\"number\", state.getLineno(), state.getChk));",
                "identical": false
            },
            {
                "k": 97,
                "patch": ".create(jodaAFE_FLOCALE_ESCAPE_NON_NUMERIC_ERROR, state.getDenominator/DAY));",
                "identical": false
            },
            {
                "k": 98,
                "patch": ".create(jodaAFE\") || state.getDenominator() != 0L) ? 1 : 0 );",
                "identical": false
            },
            {
                "k": 99,
                "patch": ".createTransformedShape(numberOfFreedom / 2, -denominator/d\"));",
                "identical": false
            },
            {
                "k": 100,
                "patch": ".create(jodaAFE_FLOOP_ERROR, state.getDenominator/DAY_FallZeros))) {",
                "identical": false
            }
        ],
        "buggy_line": ".expression(\"(?:[0-9F]{20})?,\") // iccid",
        "fixed_line": ".expression(\"(?:[0-9Ff]{20})?,\") // iccid"
    },
    "Bears-235": {
        "fixes": [
            {
                "k": 1,
                "patch": "public void disableAccount = data.length;",
                "identical": false
            },
            {
                "k": 2,
                "patch": "public static final Optional disable<Account account> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 3,
                "patch": "public static final Optional disable<Account account> wrappedAccount = new TreeSet<Account account>();",
                "identical": false
            },
            {
                "k": 4,
                "patch": "public static final Optional<Account account> wrappedAccount = new TreeSet<Account account>();",
                "identical": false
            },
            {
                "k": 5,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 6,
                "patch": "public static final Optional disableAccount<Account account> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 7,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 8,
                "patch": "public static final Optional disableAccount<Account account> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 9,
                "patch": "public static final Optional disable<Account account> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 10,
                "patch": "public static final Optional<Account> wrappedAccount = new TreeSet<Account account>();",
                "identical": false
            },
            {
                "k": 11,
                "patch": "public static final Optional<Account account> wrappedAccount = new Returns<Account account>();",
                "identical": false
            },
            {
                "k": 12,
                "patch": "public static final Optional<Account> wrappedAccount = new Returns<Account account>() {",
                "identical": false
            },
            {
                "k": 13,
                "patch": "public static final Optional<Account> wrappedAccount = new Returns<Account account>();",
                "identical": false
            },
            {
                "k": 14,
                "patch": "public static final Optional disable<Account account> wrappedAccount = new Returns<Account account>();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "public static final Optional<Account account> wrappedAccount = new Returns<Account account>() {",
                "identical": false
            },
            {
                "k": 16,
                "patch": "public static final Optional<Account account> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "public static final Optional disable<Account account> wrappedAccount = new Returns<Account account>() {",
                "identical": false
            },
            {
                "k": 18,
                "patch": "public static final Optional disable<AccountProperty> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "public static final Optional disable<Account account> wrappedAccount = new TreeSet<Account account>() {",
                "identical": false
            },
            {
                "k": 20,
                "patch": "public static final Optional<Account account> wrappedAccount = new TreeSet<Account account>() {",
                "identical": false
            },
            {
                "k": 21,
                "patch": "public static final Optional<Account account> wrappedAccount = new Returns<Account<?>>();",
                "identical": false
            },
            {
                "k": 22,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = new TreeSet<Account account>();",
                "identical": false
            },
            {
                "k": 23,
                "patch": "public static final Optional<Account> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "public static final Optional disable disable<Account anPut> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "public static final Optional<Account> wrappedAccount = new TreeSet<Account account>() {",
                "identical": false
            },
            {
                "k": 26,
                "patch": "public static final Optional disable<Account anPut> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 27,
                "patch": "public static final Optional<Account<?>> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 28,
                "patch": "public Optional disableAccount<Account account> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 29,
                "patch": "public static final Optional disable<Account account> wrappedAccount = data.localizationResources.or;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "public static final Optional disable<Account account> wrappedAccount = new TreeSet<Account<?>>();",
                "identical": false
            },
            {
                "k": 31,
                "patch": "public static final Optional<Account account> wrappedAccount = new TreeSet<Account<?>>();",
                "identical": false
            },
            {
                "k": 32,
                "patch": "public static final Optional disable disable<Account<?>> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "public static final Optional disable disable<AccountProperty> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "public static final Optional disable<Account account> wrappedAccount = new TreeSet<Account account<?>>();",
                "identical": false
            },
            {
                "k": 35,
                "patch": "public static final Optional<Account<?>> wrappedAccount = new Returns<Account account>();",
                "identical": false
            },
            {
                "k": 36,
                "patch": "public static final Optional disable<Account account> wrappedAccount = wrappedt.or;",
                "identical": false
            },
            {
                "k": 37,
                "patch": "public Optional disableAccountid<Account account> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 38,
                "patch": "public void disableAccount = wrapped;",
                "identical": false
            },
            {
                "k": 39,
                "patch": "public static final Optional<Account> wrappedAccount = new Returns<Account<?>>();",
                "identical": false
            },
            {
                "k": 40,
                "patch": "public static final Optional disableAccount<Account<?>> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "public static final Optional disable<AccountProperty> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 42,
                "patch": "public static final Optional disable<Account account> wrappedAccount = new Returns<Account<?>>();",
                "identical": false
            },
            {
                "k": 43,
                "patch": "public static final Optional disableAccount<Account account> wrappedAccount = new TreeSet<Account account>();",
                "identical": false
            },
            {
                "k": 44,
                "patch": "public static final Optional<Account<?>> wrappedAccount = new Returns<Account account>() {",
                "identical": false
            },
            {
                "k": 45,
                "patch": "public static final Optional<AccountNode> wrappedAccount = new Returns<Account account>();",
                "identical": false
            },
            {
                "k": 46,
                "patch": "public static final Optional disable<Account<?>> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "public static final Optional disable<Account> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "public static final Optional disable<Account<?>> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "public static final Optional disable<Account account> wrappedAccount = withAccount;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "public static final Optional<Account> wrappedAccount = new TreeSet<Account account<?>>();",
                "identical": false
            },
            {
                "k": 51,
                "patch": "public static final Optional<Account> wrappedAccount = new TreeSet<Account<?>>();",
                "identical": false
            },
            {
                "k": 52,
                "patch": "public static final Optional disable<Account account> wrappedAccount = data.localizationResources.DEFAULT;",
                "identical": false
            },
            {
                "k": 53,
                "patch": "public static final Optional<Account<?>> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "public static final Optional disable<Account account> wrappedAccount = wrappedAccount.localizationResources.DEFAULT;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "public static final Optional<Account account> wrappedAccount = new TreeSet<Account account<?>>();",
                "identical": false
            },
            {
                "k": 56,
                "patch": "public static final Optional<Account> wrappedAccount = new Returns<Account account<?>>();",
                "identical": false
            },
            {
                "k": 57,
                "patch": "public static final Optional<Accountate> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "public static final Optional disable<Account account> wrappedAccount = parent.or;",
                "identical": false
            },
            {
                "k": 59,
                "patch": "public static final Optional disableAccount<Account account> wrappedAccount = wrappedt.or;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "public static final Optional disable<Account account> wrappedAccount = wrappedWithExternalNode.DEFAULT;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "public static final Optional disableValues<Account account> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 62,
                "patch": "public static final Optional disableAccount<Account account> wrappedAccount = new Returns<Account account>();",
                "identical": false
            },
            {
                "k": 63,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = wrappedt.or;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "public static final Optional<AccountNode> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "public static final Optional disable<Account account> wrappedAccount = new Returns<Account account<?>>();",
                "identical": false
            },
            {
                "k": 66,
                "patch": "public static final Optional<AccountNode> wrappedAccount = new Returns<Account account>() {",
                "identical": false
            },
            {
                "k": 67,
                "patch": "public static final Optional disableAccount<Account account> wrappedAccount = new Returns<Account account>() {",
                "identical": false
            },
            {
                "k": 68,
                "patch": "public static final Optional disable<Account> wrappedAccount = new Returns<Account account>() {",
                "identical": false
            },
            {
                "k": 69,
                "patch": "public static final Optional disable<Account account> wrappedAccount = wrappedWithExternalNode.or;",
                "identical": false
            },
            {
                "k": 70,
                "patch": "public static final Optional<Account> wrappedAccount = newprepend<Account account>();",
                "identical": false
            },
            {
                "k": 71,
                "patch": "public static final Optional<Account account> wrappedAccount = new Returns<Account account<?>>();",
                "identical": false
            },
            {
                "k": 72,
                "patch": "public static final Optional disable disable<AccountProperty> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "public static final Optional disable<Accountate> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = wrappedWithExternalNode.DEFAULT;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "public static final Optional disable<Account> wrappedAccount = new Returns<Account account>();",
                "identical": false
            },
            {
                "k": 76,
                "patch": "public static final Optional disable<Account account> wrappedAccount = wrappedAccount.DEFAULT;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "public static final Optional disable<Account> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = new Returns<Account account>();",
                "identical": false
            },
            {
                "k": 79,
                "patch": "public static final Optional disable<Account account> wrappedAccount = this.answer;",
                "identical": false
            },
            {
                "k": 80,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = data.localizationResources.or;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = new Returns<Account account>() {",
                "identical": false
            },
            {
                "k": 82,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = new TreeSet<Account account>() {",
                "identical": false
            },
            {
                "k": 83,
                "patch": "public static final Optional disable<Account account> wrappedAccount = this.upArrow;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "public static final Optional disableFromAccount<Account account> wrappedAccount = wrapped;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "public static final Optional<Account account> wrappedAccount = new100<Account<?>>();",
                "identical": false
            },
            {
                "k": 86,
                "patch": "public static final Optional<Account> wrappedAccount = newprepend<Account account>() {",
                "identical": false
            },
            {
                "k": 87,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = data.localizationResources.DEFAULT;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "public static final Optional<Account> wrappedAccount = new100<Account<Account<?>>();",
                "identical": false
            },
            {
                "k": 89,
                "patch": "public static final Optional disable<Account account> wrappedAccount = wrappedAccount.or;",
                "identical": false
            },
            {
                "k": 90,
                "patch": "public static final Optional disable<Account account> wrappedAccount = wrappedWithInject.or;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "public static final Optional<Account> wrappedAccount = new100<Account<?>>();",
                "identical": false
            },
            {
                "k": 92,
                "patch": "public static final Optional<AccountProperty> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = new TreeSet<Account account<?>>();",
                "identical": false
            },
            {
                "k": 94,
                "patch": "public static final Optional disableWithInject> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 95,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = wrappedWithExternalNode.or;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "public static final Optional disable<AccountIdentifier> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 97,
                "patch": "public static final Optional disablePoint<Account account> wrappedAccount = wrappedAccount;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "public static final Optional disable disable<Account account> wrappedAccount = parent.or;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "public static final Optional<Account<?>> wrappedAccount = new Returns<Account account<?>>();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "public static final Optional disable actually<Account account> wrappedAccount = wrappedAccount;",
                "identical": false
            }
        ],
        "buggy_line": "",
        "fixed_line": "if (hasAnyChildrenAccountEnabled(account)){ throw new IllegalStateException(\"Children accounts enabled\"); } account.setDisabled(true); accountRepository.save(account); } private boolean hasAnyChildrenAccountEnabled(Account account){ return account.getChildren().stream() .filter(a -> !a.isDisabled()) .findAny() .isPresent(); }"
    },
    "Bears-188": {
        "fixes": [
            {
                "k": 1,
                "patch": "throw new IllegalStateException(\"Nesting problem: \" + input);",
                "identical": false
            },
            {
                "k": 2,
                "patch": "throw new IllegalStateException(\"Nesting problem: \" + input.getClass().getName());",
                "identical": false
            },
            {
                "k": 3,
                "patch": "throw new IllegalStateException(\"Nesting problem: \" + input.getMessage());",
                "identical": false
            },
            {
                "k": 4,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input.getName());",
                "identical": false
            },
            {
                "k": 5,
                "patch": "throw new IllegalStateException(\"Nesting problem: \" + input.getClass());",
                "identical": false
            },
            {
                "k": 6,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input);",
                "identical": false
            },
            {
                "k": 7,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input.getClass().getName());",
                "identical": false
            },
            {
                "k": 8,
                "patch": "throw new IllegalStateException(\"Nesting problem: \" + input.getName());",
                "identical": false
            },
            {
                "k": 9,
                "patch": "throw new IllegalStateException(\"Nesting problem: \" + input.toString());",
                "identical": false
            },
            {
                "k": 10,
                "patch": "throw new IllegalStateException(\"Nesting problem: \" + x.getClass().getName());",
                "identical": false
            },
            {
                "k": 11,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input.getMessage());",
                "identical": false
            },
            {
                "k": 12,
                "patch": "% 2 == 0) ? \"\" : input.getReturnType());",
                "identical": false
            },
            {
                "k": 13,
                "patch": "iterateAngleStartPosition = calculateMediancestorAngleStartAngleToAngle(input);",
                "identical": false
            },
            {
                "k": 14,
                "patch": "% 2 == 0) ? \"\" : input.getReturnType();",
                "identical": false
            },
            {
                "k": 15,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getN() : null;",
                "identical": false
            },
            {
                "k": 16,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getName() : null;",
                "identical": false
            },
            {
                "k": 17,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.get)) : null;",
                "identical": false
            },
            {
                "k": 18,
                "patch": "% 2 == 0) ? null : input.aledPosition;",
                "identical": false
            },
            {
                "k": 19,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getDeclaringClass() : null;",
                "identical": false
            },
            {
                "k": 20,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.get getCallbacks() : null;",
                "identical": false
            },
            {
                "k": 21,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getTickLabelPosition() : null;",
                "identical": false
            },
            {
                "k": 22,
                "patch": "% 2 == 0) ? \"\" : input.getPath().equals(aled);",
                "identical": false
            },
            {
                "k": 23,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getTyping() : null;",
                "identical": false
            },
            {
                "k": 24,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.gethourAngleStart() : null;",
                "identical": false
            },
            {
                "k": 25,
                "patch": "% 2 == 0) ? null : Math.aledPosition.getAngleToAngle(input);",
                "identical": false
            },
            {
                "k": 26,
                "patch": "% 2 == 0) ? null : input.getReturnType();",
                "identical": false
            },
            {
                "k": 27,
                "patch": "throw new RuntimeException(\"al prefixes: \" + input.toString());",
                "identical": false
            },
            {
                "k": 28,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime();",
                "identical": false
            },
            {
                "k": 29,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getFactor() : null;",
                "identical": false
            },
            {
                "k": 30,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getDot().getValue() : null;",
                "identical": false
            },
            {
                "k": 31,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? Integer.MAX_VALUE : null;",
                "identical": false
            },
            {
                "k": 32,
                "patch": "aloadValues = Double.POSITIVE_INFINITY;",
                "identical": false
            },
            {
                "k": 33,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getValue() : null;",
                "identical": false
            },
            {
                "k": 34,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getLastSibling() : null;",
                "identical": false
            },
            {
                "k": 35,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getMillis() : null;",
                "identical": false
            },
            {
                "k": 36,
                "patch": "% 2 == 0) ? null : input.getReturnType());",
                "identical": false
            },
            {
                "k": 37,
                "patch": "differenceAngle = calculateAngleExtent() * input.getDeclaringAngle();",
                "identical": false
            },
            {
                "k": 38,
                "patch": "throw new RuntimeException(\"Comments. \" + input.getClass().getName() + \" at=\" + input.getClass().getName());",
                "identical": false
            },
            {
                "k": 39,
                "patch": "exhausted || Double.isNaN(input);",
                "identical": false
            },
            {
                "k": 40,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getDescription() : null;",
                "identical": false
            },
            {
                "k": 41,
                "patch": "throw new RuntimeException(\"Can not update an array\");",
                "identical": false
            },
            {
                "k": 42,
                "patch": "iterateAngleStartPosition = calculateMediancestorAngleToAngle(input);",
                "identical": false
            },
            {
                "k": 43,
                "patch": "% 2 == 0) ? null : Math.aledPosition;",
                "identical": false
            },
            {
                "k": 44,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.gethourAngleStart().getTime() : null;",
                "identical": false
            },
            {
                "k": 45,
                "patch": "IntInputFactory.createTransformedShape(this);",
                "identical": false
            },
            {
                "k": 46,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getSpec() : null;",
                "identical": false
            },
            {
                "k": 47,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getClass().getName() : null;",
                "identical": false
            },
            {
                "k": 48,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.gethourAngleToAngleStart() : null;",
                "identical": false
            },
            {
                "k": 49,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? Integer.MAX_VALUE : input;",
                "identical": false
            },
            {
                "k": 50,
                "patch": "throw new IllegalStateException(\"Nesting problem: \" + x.getClass());",
                "identical": false
            },
            {
                "k": 51,
                "patch": "MISSING_PROVIDE_WARNING = Math.aledType(input);",
                "identical": false
            },
            {
                "k": 52,
                "patch": "throw new IllegalStateException(\"Nesting problem: \" + inputType.toString());",
                "identical": false
            },
            {
                "k": 53,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getTickMarkPosition() : null;",
                "identical": false
            },
            {
                "k": 54,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getGraphics() : null;",
                "identical": false
            },
            {
                "k": 55,
                "patch": "throw new RuntimeException(\"Comments. \" + input.getClass().getName());",
                "identical": false
            },
            {
                "k": 56,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getContentType().getN() : null;",
                "identical": false
            },
            {
                "k": 57,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.gethourAngleToAngleStart().getTime() : null;",
                "identical": false
            },
            {
                "k": 58,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().aledPosition();",
                "identical": false
            },
            {
                "k": 59,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getables() : null;",
                "identical": false
            },
            {
                "k": 60,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.gethourAngleToAngleStartPosition() : null;",
                "identical": false
            },
            {
                "k": 61,
                "patch": "% 2 == 0) ? null : input.equals(MIDDLE);",
                "identical": false
            },
            {
                "k": 62,
                "patch": "throw new RuntimeException(\"al prefixes array must be greater than 0\");",
                "identical": false
            },
            {
                "k": 63,
                "patch": "return input.getBreakAngleExtent() != null;",
                "identical": false
            },
            {
                "k": 64,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getvalues().length() : null;",
                "identical": false
            },
            {
                "k": 65,
                "patch": "% 2 == 0) ? null : Math.aledPosition.getAngleExtent());",
                "identical": false
            },
            {
                "k": 66,
                "patch": "% 2 == 0) ? null : input.getAngleToAngle(this.expTickMarkPosition.getTickMarkPosition());",
                "identical": false
            },
            {
                "k": 67,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics();",
                "identical": false
            },
            {
                "k": 68,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getTickLabelPositionFactor() : null;",
                "identical": false
            },
            {
                "k": 69,
                "patch": "IntInputFactory.createTransformedShape(this.getWindingAngleStartAngleExtent());",
                "identical": false
            },
            {
                "k": 70,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getFactor() : 1;",
                "identical": false
            },
            {
                "k": 71,
                "patch": "% 2 == 0) ? null : input.getAngleToAngle(this.millisecond);",
                "identical": false
            },
            {
                "k": 72,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getBreakPosition() : null;",
                "identical": false
            },
            {
                "k": 73,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getId() : null;",
                "identical": false
            },
            {
                "k": 74,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getShell().aledPositionedType() : null;",
                "identical": false
            },
            {
                "k": 75,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getShell().aledPositionFactor() : null;",
                "identical": false
            },
            {
                "k": 76,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getDot().getTime() : null;",
                "identical": false
            },
            {
                "k": 77,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getType() : null;",
                "identical": false
            },
            {
                "k": 78,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getShell().aledPosition() : null;",
                "identical": false
            },
            {
                "k": 79,
                "patch": "% 2 == 0) ? \"\" : input.getPath().compareTo(aled);",
                "identical": false
            },
            {
                "k": 80,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.gethourAngleExtent() : null;",
                "identical": false
            },
            {
                "k": 81,
                "patch": "throw new RuntimeException(\"Unrecognised type.\");",
                "identical": false
            },
            {
                "k": 82,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.get fail().getValue() : null;",
                "identical": false
            },
            {
                "k": 83,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getShell().getValue() : null;",
                "identical": false
            },
            {
                "k": 84,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.gethourOfDay() : null;",
                "identical": false
            },
            {
                "k": 85,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getvalues() : null;",
                "identical": false
            },
            {
                "k": 86,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.toFormatter().length() : null;",
                "identical": false
            },
            {
                "k": 87,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getMIDDLE : null;",
                "identical": false
            },
            {
                "k": 88,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getReference().getValue() : null;",
                "identical": false
            },
            {
                "k": 89,
                "patch": "% 2 == 0) ? null : input.equals(break.toString());",
                "identical": false
            },
            {
                "k": 90,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.get fail().getTime() : null;",
                "identical": false
            },
            {
                "k": 91,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getSelection() : null;",
                "identical": false
            },
            {
                "k": 92,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getN() : 1;",
                "identical": false
            },
            {
                "k": 93,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getCause() : null;",
                "identical": false
            },
            {
                "k": 94,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().floatValue();",
                "identical": false
            },
            {
                "k": 95,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getcodes() : null;",
                "identical": false
            },
            {
                "k": 96,
                "patch": "% 2 == 0) ? null : Math.ceil(aled);",
                "identical": false
            },
            {
                "k": 97,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.aledPosition.getCharacterIndex() : null;",
                "identical": false
            },
            {
                "k": 98,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.get wrapperAngleStart() : null;",
                "identical": false
            },
            {
                "k": 99,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getValue();",
                "identical": false
            },
            {
                "k": 100,
                "patch": "iterateAngleStartPosition = calculateMediannotated.getGraphics().getTime() > 0) ? input.getDot().getValue()) : null;",
                "identical": false
            }
        ],
        "buggy_line": "paintComponent(getGraphics());",
        "fixed_line": "repaint();"
    }
}